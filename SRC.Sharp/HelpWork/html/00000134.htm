<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; UTF-8">
<TITLE>式</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<PARAM NAME="Keyword" VALUE="式">
</OBJECT>

<P><A NAME=".2.mep"></A></P>

<P><B>式</B></P>

<P>イベントコマンドやイベントラベルの引数は式とみなして値が評価・計算されます。式の要素として使えるのは下の4つです。</P>

<P><B>数値</B></P>

<P><B>文字列</B></P>

<P><B>変数</B></P>

<P><B>関数</B></P>

<P><B>数値</B></P>

<P>SRCでは数値として整数、浮動小数点数の両方を扱うことができます。数値の記述には半角文字を用います。マイナスの値も使うことができます。</P>

<P><B>例</B> 0, 100, -12, 1.23</P>

<P><B>文字列</B></P>

<P>通常のプログラミング言語と異なり、SRCでは文字列を括弧等でくくる必要はありません。そのまま引数として使用できます。ただし、文字列がスペース等を含んでいる場合はダブルクォート「"」(半角文字)を使って文字列全体を括ってやる必要があります。</P>

<P><B>例</B> "全滅 敵"</P>

<P>「"」で囲まれた文字列に「$(式)」という文字列が含まれていた場合、その部分が式の値に置換されます。これにより式の値を利用した文字列を簡単に記述することができます。この機能を<B>式置換</B>と呼びます。</P>

<P><B>例</B> 「第$(Wide(n))話」はnが3のとき「第３話」になる</P>

<P>式置換を行いたくない場合や文字列中に「"」を使いたい場合、上のように「"」で文字列を囲むことはできません。このような場合は文字列をバッククォート「`」(半角文字)を使って囲みます。</P>

<P><B>例</B> `"`</P>

<P>なおダブルクォート、バッククォートで囲まれた文字列中にある「#」はコメントの開始とは見なされません。</P>

<P><B>変数</B></P>

<P>変数とは各種の状態を記録するためのものです。自分で作成できるほか、様々な情報を得るためのシステム変数が用意されています。変数の詳細については<A HREF="00000135.htm">こちら</A>を参照して下さい。</P>

<P><B>関数</B></P>

<P>SRCではユニットやパイロットに関する情報を参照するための各種の関数がサポートされています。関数の詳細については<A HREF="00000136.htm">こちら</A>を参照して下さい。</P>

<P><B>演算子</B></P>

<P>式の値に対して各種の演算子を適用することができます。サポートされている演算子は次の通りです。</P>

<P><B>+</B>加算</P>

<P><B>-</B>減算</P>

<P><B>*</B>乗算</P>

<P><B>/</B>除算</P>

<P><B>\</B>整数除算（2つの数値の商を計算し、結果を整数で返します）</P>

<P><B>^</B>べき乗</P>

<P><B>Mod</B>剰余</P>

<P><B>&amp;</B>文字列結合</P>

<P><B>=</B>比較演算子</P>

<P><B>&lt;&gt;</B>比較演算子（両辺の内容が等しくない場合に1、そうでなければ0。"!="も同じ動作）</P>

<P><B>&lt;</B>比較演算子</P>

<P><B>&lt;=</B>比較演算子</P>

<P><B>&gt;</B>比較演算子</P>

<P><B>&gt;=</B>比較演算子</P>

<P><B>Not</B>否定演算子（右辺の式が 0 でなければ 1、そうでなければ 0）</P>

<P><B>And</B>比較演算子（両辺の式が両方とも 0 でなければ 1、そうでなければ 0）</P>

<P><B>Or</B>比較演算子（両辺の式のいずれかが 0 でなければ 1、そうでなければ 0）</P>

<P><B>Like</B>文字列比較演算子（左辺の文字列が右辺のパターンに一致すれば 1、そうでなければ 0）</P>

<P>文字列比較演算子Likeの右辺には文字列を比較するためのパターンを文字列で指定します。パターンには以下の特殊な文字パターンが使用可能です。</P>

<P><B>文字パターン一致する文字</B></P>

<P><B>?</B>任意の1文字</P>

<P><B>*</B>任意の数の文字</P>

<P><B>#</B>任意の1文字の数字 (0-9)</P>

<P><B>[</B><I>文字列</I><B>]</B>指定した文字列の中の任意の1文字</P>

<P><B>[!</B><I>文字列</I><B>]</B>指定した文字列に含まれない任意の1文字</P>

<P>これらの文字パターンに使われている特殊文字自身を文字パターンに含めるにはその文字を括弧「[]」で括って下さい。</P>

<P>括弧「[]」を用いて文字列を指定する場合、文字同士を「-」で繋げる事によって特定の文字範囲を指定することが出来ます。例えば"[0-9]"という指定は"[0123456789]"と同じ意味になります。</P>

<P><B>例</B></P>

<P>"abcda" Like "a*a"1を返します</P>

<P>"abcde" Like "a*a"0を返します</P>

<P>"D" Like "[A-Z]"1を返します</P>

<P>"D" Like "[!A-Z]"0を返します</P>

<P>"a2b" Like "a#b"1を返します</P>

<P>"aCD13+X" Like "a[B-C][!E-G]##?X"1を返します</P>

<P>演算子とその項の間は必ず半角スペースを入れて下さい。スペースが含まれない場合はただの文字列と見なされます。</P>

<P>○ 1 + 5</P>

<P>× 1+5</P>

<P>演算子を使った式をコマンドの引数に使う場合は全体を半角括弧「()」でくくる必要があります。</P>

<P><B>例</B> Create サイキックバスター 0 ジェイ (Level(ロイド艦長) + 2) 3 4</P>

<P>各演算子は下のような結合優先順位を持っています。上にある演算子がより高い優先順位を持ちます。</P>

<P><B>^</B></P>

<P><B>* /</B></P>

<P><B>\</B></P>

<P><B>Mod</B></P>

<P><B>+ -</B></P>

<P><B>&amp;</B></P>

<P><B>= &lt;&gt; &lt; &lt;= &gt; &gt;= Like</B></P>

<P><B>Not</B></P>

<P><B>And</B></P>

<P><B>Or</B></P>

<P>例えば １ * 2 + 3 という式の場合、「*」のほうが「+」よりも優先順位が高いため、まず「1 * 2」が計算されます。次にその結果 2 を使って「2 + 3」が計算され、結果は 5 となります。</P>

<P>演算の優先順位を変えたい場合は半角括弧「()」を利用します。</P>

<P><B>例</B> (1 + 2) * (3 + 4)</P>

</BODY>
</HTML>
