using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace Project1
{
    internal class Unit
    {

        // Copyright (C) 1997-2012 Kei Sakamoto / Inui Tetsuyuki
        // 本プログラムはフリーソフトであり、無保証です。
        // 本プログラムはGNU General Public License(Ver.3またはそれ以降)が定める条件の下で
        // 再頒布または改変することができます。

        // データ
        public UnitData Data;

        // 識別用ＩＤ
        public string ID;

        // ビットマップID
        // 同種のユニットは同じIDを共有
        public int BitmapID;

        // Ｘ座標
        public int x;
        // Ｙ座標
        public int y;

        // ユニットの場所（地上、水上、水中、空中、地中、宇宙）
        public string Area;

        // 使用済み行動数
        public int UsedAction;

        // 思考モード
        private string strMode;

        // ステータス
        // 出撃：マップ上に出撃
        // 他形態：他の形態に変形(ハイパーモード)中
        // 破壊：破壊されている
        // 破棄：イベントコマンド RemoveUnit などによりイベントで破壊されている
        // 格納：母艦内に格納されている
        // 待機：待機中
        // 旧形態：分離ユニットが合体前に取っていた形態
        // 離脱：Leaveコマンドにより戦線を離脱。Organizeコマンドでも表示されない
        // UPGRADE_NOTE: Status は Status_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
        public string Status_Renamed;

        // ユニットに対して使用されているスペシャルパワー
        private Collection colSpecialPowerInEffect = new Collection();

        // サポートアタック＆ガードの使用回数
        public int UsedSupportAttack;
        public int UsedSupportGuard;

        // 同時援護攻撃の使用回数
        public int UsedSyncAttack;

        // カウンター攻撃の使用回数
        public int UsedCounterAttack;

        // ユニット名称
        private string strName;
        // 陣営
        private string strParty;
        // ユニットランク
        private int intRank;
        // ボスランク
        private int intBossRank;
        // ＨＰ
        private int lngMaxHP;
        private int lngHP;
        // ＥＮ
        private int intMaxEN;
        private int intEN;
        // 装甲
        private int lngArmor;
        // 運動性
        private int intMobility;
        // 移動力
        private int intSpeed;

        // 搭乗しているパイロット
        private Collection colPilot = new Collection();

        // 搭乗しているサポートパイロット
        private Collection colSupport = new Collection();

        // 関連するユニット
        // 変形ユニットにおける他形態等
        private Collection colOtherForm = new Collection();

        // 格納したユニット
        private Collection colUnitOnBoard = new Collection();

        // 装備しているアイテム
        private Collection colItem = new Collection();

        // 現在の特殊ステータス
        private Collection colCondition = new Collection();

        // 各武器の残弾数
        private double[] dblBullet;

        // アビリティの残り使用回数
        private double[] dblStock;

        // 特殊能力
        private Collection colFeature = new Collection();

        // 特殊能力(必要条件を満たさないものを含む)
        private Collection colAllFeature = new Collection();

        // 付加された特殊能力数
        public int AdditionalFeaturesNum;

        // 地形適応
        private string strAdaption;

        // 攻撃への耐性
        public string strAbsorb;
        public string strImmune;
        public string strResist;
        public string strWeakness;
        public string strEffective;
        public string strSpecialEffectImmune;

        // 武器データ
        private WeaponData[] WData;
        private int[] lngWeaponPower;
        private int[] intWeaponMaxRange;
        private int[] intWeaponPrecision;
        private int[] intWeaponCritical;
        private string[] strWeaponClass;
        private int[] intMaxBullet;

        // アビリティデータ
        private AbilityData[] adata;

        // 選択したマップ攻撃の攻撃力
        private int SelectedMapAttackPower;

        // 選択したマップ攻撃の攻撃力
        private bool IsMapAttackCanceled;

        // 召喚したユニット
        private Collection colServant = new Collection();

        // 魅了・憑依したユニット
        private Collection colSlave = new Collection();

        // 召喚主
        public Unit Summoner;

        // ご主人様
        public Unit Master;

        // 追加パイロット
        public Pilot pltAdditionalPilot;

        // 追加サポート
        public Pilot pltAdditionalSupport;


        // クラスの初期化
        // UPGRADE_NOTE: Class_Initialize は Class_Initialize_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
        private void Class_Initialize_Renamed()
        {
            Status_Renamed = "待機";
            intBossRank = -1;
            // UPGRADE_NOTE: オブジェクト Summoner をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Summoner = null;
            // UPGRADE_NOTE: オブジェクト Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Master = null;
            WData = new WeaponData[1];
            adata = new AbilityData[1];
        }

        public Unit() : base()
        {
            Class_Initialize_Renamed();
        }

        // クラスの解放
        // UPGRADE_NOTE: Class_Terminate は Class_Terminate_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
        private void Class_Terminate_Renamed()
        {
            int i;

            // UPGRADE_NOTE: オブジェクト Data をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Data = null;
            {
                var withBlock = colPilot;
                var loopTo = withBlock.Count;
                for (i = 1; i <= loopTo; i++)
                    withBlock.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colPilot をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colPilot = null;
            {
                var withBlock1 = colSupport;
                var loopTo1 = withBlock1.Count;
                for (i = 1; i <= loopTo1; i++)
                    withBlock1.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colSupport をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colSupport = null;
            {
                var withBlock2 = colOtherForm;
                var loopTo2 = withBlock2.Count;
                for (i = 1; i <= loopTo2; i++)
                    withBlock2.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colOtherForm をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colOtherForm = null;
            {
                var withBlock3 = colItem;
                var loopTo3 = withBlock3.Count;
                for (i = 1; i <= loopTo3; i++)
                    withBlock3.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colItem をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colItem = null;
            {
                var withBlock4 = colCondition;
                var loopTo4 = withBlock4.Count;
                for (i = 1; i <= loopTo4; i++)
                    withBlock4.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colCondition をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colCondition = null;
            {
                var withBlock5 = colFeature;
                var loopTo5 = withBlock5.Count;
                for (i = 1; i <= loopTo5; i++)
                    withBlock5.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colFeature をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colFeature = null;
            var loopTo6 = Information.UBound(WData);
            for (i = 1; i <= loopTo6; i++)
                // UPGRADE_NOTE: オブジェクト WData() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                WData[i] = null;
            var loopTo7 = Information.UBound(adata);
            for (i = 1; i <= loopTo7; i++)
                // UPGRADE_NOTE: オブジェクト adata() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                adata[i] = null;
            {
                var withBlock6 = colUnitOnBoard;
                var loopTo8 = withBlock6.Count;
                for (i = 1; i <= loopTo8; i++)
                    withBlock6.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colUnitOnBoard をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colUnitOnBoard = null;
            {
                var withBlock7 = colServant;
                var loopTo9 = withBlock7.Count;
                for (i = 1; i <= loopTo9; i++)
                    withBlock7.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colServant をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colServant = null;
            {
                var withBlock8 = colSlave;
                var loopTo10 = withBlock8.Count;
                for (i = 1; i <= loopTo10; i++)
                    withBlock8.Remove(1);
            }
            // UPGRADE_NOTE: オブジェクト colSlave をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            colSlave = null;

            // UPGRADE_NOTE: オブジェクト Summoner をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Summoner = null;
            // UPGRADE_NOTE: オブジェクト Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Master = null;
            // UPGRADE_NOTE: オブジェクト pltAdditionalPilot をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            pltAdditionalPilot = null;
            // UPGRADE_NOTE: オブジェクト pltAdditionalSupport をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            pltAdditionalSupport = null;
        }

        ~Unit()
        {
            Class_Terminate_Renamed();
        }


        // === 各種基本ステータス ===

        // ユニット名称

        public string Name
        {
            get
            {
                string NameRet = default;
                NameRet = strName;
                return NameRet;
            }

            set
            {
                strName = value;
                object argIndex1 = value;
                Data = SRC.UDList.Item(argIndex1);
                Update();
            }
        }

        // 愛称
        public string Nickname0
        {
            get
            {
                string Nickname0Ret = default;
                int idx;
                Unit u;
                Nickname0Ret = Data.Nickname;

                // 愛称変更能力による変更
                string argfname = "愛称変更";
                if (IsFeatureAvailable(argfname))
                {
                    object argIndex1 = "愛称変更";
                    Nickname0Ret = FeatureData(argIndex1);
                    idx = Strings.InStr(Nickname0Ret, "$(愛称)");
                    if (idx > 0)
                    {
                        Nickname0Ret = Strings.Left(Nickname0Ret, idx - 1) + Data.Nickname + Strings.Mid(Nickname0Ret, idx + 5);
                    }

                    idx = Strings.InStr(Nickname0Ret, "$(パイロット愛称)");
                    if (idx > 0)
                    {
                        if (CountPilot() > 0)
                        {
                            Nickname0Ret = Strings.Left(Nickname0Ret, idx - 1) + MainPilot().get_Nickname(true) + Strings.Mid(Nickname0Ret, idx + 10);
                        }
                        else
                        {
                            Nickname0Ret = Strings.Left(Nickname0Ret, idx - 1) + "○○" + Strings.Mid(Nickname0Ret, idx + 10);
                        }
                    }
                }

                u = Event_Renamed.SelectedUnitForEvent;
                Event_Renamed.SelectedUnitForEvent = this;
                Expression.ReplaceSubExpression(Nickname0Ret);
                Event_Renamed.SelectedUnitForEvent = u;
                return Nickname0Ret;
            }
        }

        // メッセージ中で表示する際の愛称は等身大基準ではパイロット名を使う
        public string Nickname
        {
            get
            {
                string NicknameRet = default;
                string argoname = "等身大基準";
                if (Expression.IsOptionDefined(argoname))
                {
                    if (CountPilot() > 0)
                    {
                        {
                            var withBlock = MainPilot();
                            if (Strings.InStr(withBlock.Name, "(ザコ)") == 0 & Strings.InStr(withBlock.Name, "(汎用)") == 0)
                            {
                                NicknameRet = MainPilot().get_Nickname(false);
                                return default;
                            }
                        }
                    }
                }

                NicknameRet = Nickname0;
                return NicknameRet;
            }
        }

        // 読み仮名
        public string KanaName
        {
            get
            {
                string KanaNameRet = default;
                int idx;
                Unit u;
                KanaNameRet = Data.KanaName;

                // 読み仮名変更能力による変更
                string argfname = "読み仮名変更";
                string argfname1 = "愛称変更";
                if (IsFeatureAvailable(argfname))
                {
                    object argIndex1 = "読み仮名変更";
                    KanaNameRet = FeatureData(argIndex1);
                    idx = Strings.InStr(KanaNameRet, "$(読み仮名)");
                    if (idx > 0)
                    {
                        KanaNameRet = Strings.Left(KanaNameRet, idx - 1) + Data.KanaName + Strings.Mid(KanaNameRet, idx + 5);
                    }

                    idx = Strings.InStr(KanaNameRet, "$(パイロット読み仮名)");
                    if (idx > 0)
                    {
                        if (CountPilot() > 0)
                        {
                            KanaNameRet = Strings.Left(KanaNameRet, idx - 1) + MainPilot().KanaName + Strings.Mid(KanaNameRet, idx + 10);
                        }
                        else
                        {
                            KanaNameRet = Strings.Left(KanaNameRet, idx - 1) + "○○" + Strings.Mid(KanaNameRet, idx + 10);
                        }
                    }
                }
                else if (IsFeatureAvailable(argfname1))
                {
                    object argIndex2 = "愛称変更";
                    KanaNameRet = FeatureData(argIndex2);
                    idx = Strings.InStr(KanaNameRet, "$(愛称)");
                    if (idx > 0)
                    {
                        KanaNameRet = Strings.Left(KanaNameRet, idx - 1) + Data.Nickname + Strings.Mid(KanaNameRet, idx + 5);
                    }

                    idx = Strings.InStr(KanaNameRet, "$(パイロット愛称)");
                    if (idx > 0)
                    {
                        if (CountPilot() > 0)
                        {
                            KanaNameRet = Strings.Left(KanaNameRet, idx - 1) + MainPilot().get_Nickname(false) + Strings.Mid(KanaNameRet, idx + 10);
                        }
                        else
                        {
                            KanaNameRet = Strings.Left(KanaNameRet, idx - 1) + "○○" + Strings.Mid(KanaNameRet, idx + 10);
                        }
                    }

                    KanaNameRet = GeneralLib.StrToHiragana(KanaNameRet);
                }

                u = Event_Renamed.SelectedUnitForEvent;
                Event_Renamed.SelectedUnitForEvent = this;
                Expression.ReplaceSubExpression(KanaNameRet);
                Event_Renamed.SelectedUnitForEvent = u;
                return KanaNameRet;
            }
        }

        // ユニットランク

        public int Rank
        {
            get
            {
                int RankRet = default;
                RankRet = intRank;
                return RankRet;
            }

            set
            {
                string uname;
                if (intRank == value)
                {
                    return;
                }

                intRank = value;
                if (intRank > 999)
                {
                    intRank = 999;
                }

                // パラメータを更新
                Update();
            }
        }

        // ボスランク

        public int BossRank
        {
            get
            {
                int BossRankRet = default;
                BossRankRet = intBossRank;
                return BossRankRet;
            }

            set
            {
                if (intBossRank == value)
                {
                    return;
                }

                intBossRank = value;

                // パラメータを更新
                Update();
            }
        }

        // ユニットクラス
        // UPGRADE_NOTE: Class は Class_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
        public string Class_Renamed
        {
            get
            {
                string Class_RenamedRet = default;
                Class_RenamedRet = Data.Class_Renamed;
                return Class_RenamedRet;
            }
        }

        // ユニットクラスから余分な指定を除いたもの
        public string Class0
        {
            get
            {
                string Class0Ret = default;
                int i, n;
                Class0Ret = Data.Class_Renamed;

                // 人間ユニット指定を削除
                if (Strings.Left(Class0Ret, 1) == "(")
                {
                    Class0Ret = Strings.Mid(Class0Ret, 2, Strings.Len(Class0Ret) - 2);
                }

                // 専用指定を削除
                if (Strings.Right(Class0Ret, 3) == "専用)")
                {
                    n = 1;
                    i = (Strings.Len(Class0Ret) - 2);
                    do
                    {
                        i = (i - 1);
                        switch (Strings.Mid(Class0Ret, i, 1) ?? "")
                        {
                            case "(":
                                {
                                    n = (n - 1);
                                    if (n == 0)
                                    {
                                        Class0Ret = Strings.Left(Class0Ret, i - 1);
                                        break;
                                    }

                                    break;
                                }

                            case ")":
                                {
                                    n = (n + 1);
                                    break;
                                }
                        }
                    }
                    while (i > 0);
                }

                return Class0Ret;
            }
        }


        // ユニットサイズ
        public string Size
        {
            get
            {
                string SizeRet = default;
                string argfname = "サイズ変更";
                if (IsFeatureAvailable(argfname))
                {
                    object argIndex1 = "サイズ変更";
                    SizeRet = FeatureData(argIndex1);
                    return default;
                }

                SizeRet = Data.Size;
                return SizeRet;
            }
        }


        // 最大ＨＰ値
        public int MaxHP
        {
            get
            {
                int MaxHPRet = default;
                MaxHPRet = lngMaxHP;

                // パイロットによる修正
                if (CountPilot() > 0)
                {
                    // 霊力変換器装備ユニットは霊力に応じて最大ＨＰが変化
                    string argfname = "霊力変換器";
                    if (IsFeatureAvailable(argfname))
                    {
                        MaxHPRet = (MaxHPRet + 10d * PlanaLevel());
                    }

                    // オーラ変換器装備ユニットはオーラレベルに応じて最大ＨＰが変化
                    string argfname1 = "オーラ変換器";
                    if (IsFeatureAvailable(argfname1))
                    {
                        MaxHPRet = (MaxHPRet + 100d * AuraLevel());
                    }
                }

                // 最大ＨＰは最低でも1
                if (MaxHPRet < 1)
                {
                    MaxHPRet = 1;
                }

                return MaxHPRet;
            }
        }

        // 最大ＥＮ値
        public int MaxEN
        {
            get
            {
                int MaxENRet = default;
                MaxENRet = intMaxEN;

                // パイロットによる修正
                if (CountPilot() > 0)
                {
                    // 霊力変換器装備ユニットは霊力に応じて最大ＥＮが変化
                    string argfname = "霊力変換器";
                    if (IsFeatureAvailable(argfname))
                    {
                        MaxENRet = (MaxENRet + 0.5d * PlanaLevel());
                    }

                    // オーラ変換器装備ユニットはオーラレベルに応じて最大ＥＮが変化
                    string argfname1 = "オーラ変換器";
                    if (IsFeatureAvailable(argfname1))
                    {
                        MaxENRet = (MaxENRet + 10d * AuraLevel());
                    }
                }

                // 最大ＥＮは最低でも5
                if (MaxENRet < 5)
                {
                    MaxENRet = 5;
                }

                return MaxENRet;
            }
        }

        // ＨＰ

        public int HP
        {
            get
            {
                int HPRet = default;
                HPRet = lngHP;
                return HPRet;
            }

            set
            {
                lngHP = value;
                if (lngHP > MaxHP)
                {
                    lngHP = MaxHP;
                }
                else if (lngHP < 0)
                {
                    lngHP = 0;
                }
            }
        }

        // ＥＮ

        public int EN
        {
            get
            {
                int ENRet = default;
                ENRet = intEN;
                return ENRet;
            }

            set
            {
                intEN = value;
                if (intEN > MaxEN)
                {
                    intEN = MaxEN;
                }
                else if (intEN < 0)
                {
                    intEN = 0;
                }
            }
        }


        // 移動力
        public int Speed0
        {
            get
            {
                int Speed0Ret = default;
                Speed0Ret = intSpeed;
                return Speed0Ret;
            }
        }

        public int Speed
        {
            get
            {
                int SpeedRet = default;
                SpeedRet = Speed0;

                // 元々移動力が0の場合は0のまま
                string argfname = "テレポート";
                string argfname1 = "ジャンプ";
                if (SpeedRet == 0 & !IsFeatureAvailable(argfname) & !IsFeatureAvailable(argfname1))
                {
                    return default;
                }

                // 特殊状態による移動力修正
                string argsptype = "移動力強化";
                object argIndex1 = "移動力ＵＰ";
                if (IsUnderSpecialPowerEffect(argsptype))
                {
                    string argsname = "移動力強化";
                    SpeedRet = (SpeedRet + SpecialPowerEffectLevel(argsname));
                }
                else if (IsConditionSatisfied(argIndex1))
                {
                    string argoname = "大型マップ";
                    if (Expression.IsOptionDefined(argoname))
                    {
                        SpeedRet = (SpeedRet + 2);
                    }
                    else
                    {
                        SpeedRet = (SpeedRet + 1);
                    }
                }

                object argIndex2 = "移動力ＤＯＷＮ";
                if (IsConditionSatisfied(argIndex2))
                {
                    SpeedRet = GeneralLib.MaxLng(SpeedRet / 2, 1);
                }

                // 霊力による移動力ＵＰ
                string argfname2 = "霊力変換器";
                if (IsFeatureAvailable(argfname2))
                {
                    if (CountPilot() > 0)
                    {
                        SpeedRet = (SpeedRet + Conversion.Int(0.01d * PlanaLevel()));
                    }
                }

                // スペシャルパワーによる移動力低下
                string argsptype1 = "移動力低下";
                if (IsUnderSpecialPowerEffect(argsptype1))
                {
                    SpeedRet = GeneralLib.MaxLng(SpeedRet / 2, 1);
                }

                // 移動不能の場合は移動力０
                object argIndex3 = "移動不能";
                if (IsConditionSatisfied(argIndex3))
                {
                    SpeedRet = 0;
                }

                // ＥＮ切れにより移動できない場合
                if (Status_Renamed == "出撃")
                {
                    switch (Area ?? "")
                    {
                        case "空中":
                        case "宇宙":
                            {
                                if (EN < 5)
                                {
                                    SpeedRet = 0;
                                }

                                break;
                            }

                        case "地中":
                            {
                                if (EN < 10)
                                {
                                    SpeedRet = 0;
                                }

                                break;
                            }
                    }
                }

                return SpeedRet;
            }
        }


        // 移動形態
        public string Transportation
        {
            get
            {
                string TransportationRet = default;
                TransportationRet = Data.Transportation;

                // 特殊能力による移動可能地形追加
                string argfname = "空中移動";
                if (IsFeatureAvailable(argfname))
                {
                    if (Strings.InStr(TransportationRet, "空") == 0)
                    {
                        TransportationRet = "空" + TransportationRet;
                    }
                }

                string argfname1 = "陸上移動";
                if (IsFeatureAvailable(argfname1))
                {
                    if (Strings.InStr(TransportationRet, "陸") == 0)
                    {
                        TransportationRet = "陸" + TransportationRet;
                    }
                }

                string argfname2 = "水中移動";
                if (IsFeatureAvailable(argfname2))
                {
                    if (Strings.InStr(TransportationRet, "水") == 0)
                    {
                        TransportationRet = "水" + TransportationRet;
                    }
                }

                string argfname3 = "地中移動";
                if (IsFeatureAvailable(argfname3))
                {
                    if (Strings.InStr(TransportationRet, "地中") == 0)
                    {
                        TransportationRet = TransportationRet + "地中";
                    }
                }

                string argfname4 = "宇宙移動";
                if (IsFeatureAvailable(argfname4))
                {
                    if (string.IsNullOrEmpty(TransportationRet))
                    {
                        TransportationRet = "宇宙";
                    }
                }

                return TransportationRet;
            }
        }


        // 地形適応
        public int get_Adaption(int idx)
        {
            int AdaptionRet = default;
            int uad = default, pad = default;

            // ユニット側の地形適応を算出
            switch (Strings.Mid(strAdaption, idx, 1) ?? "")
            {
                case "S":
                    {
                        uad = 5;
                        break;
                    }

                case "A":
                    {
                        uad = 4;
                        break;
                    }

                case "B":
                    {
                        uad = 3;
                        break;
                    }

                case "C":
                    {
                        uad = 2;
                        break;
                    }

                case "D":
                    {
                        uad = 1;
                        break;
                    }

                case "-":
                    {
                        AdaptionRet = 0;
                        return default;
                    }
            }

            // パイロット側の地形適応を算出
            if (CountPilot() > 0)
            {
                switch (Strings.Mid(MainPilot().Adaption, idx, 1) ?? "")
                {
                    case "S":
                        {
                            pad = 5;
                            break;
                        }

                    case "A":
                        {
                            pad = 4;
                            break;
                        }

                    case "B":
                        {
                            pad = 3;
                            break;
                        }

                    case "C":
                        {
                            pad = 2;
                            break;
                        }

                    case "D":
                        {
                            pad = 1;
                            break;
                        }

                    case "-":
                        {
                            AdaptionRet = 0;
                            return default;
                        }
                }
            }
            else
            {
                pad = 4;
            }

            string argoname = "地形適応総和計算";
            if (Expression.IsOptionDefined(argoname))
            {
                // ユニットとパイロットの地形適応の総和から地形適応を決定
                switch ((uad + pad))
                {
                    case 9:
                    case 10:
                        {
                            AdaptionRet = 5;
                            break;
                        }

                    case 7:
                    case 8:
                        {
                            AdaptionRet = 4;
                            break;
                        }

                    case 5:
                    case 6:
                        {
                            AdaptionRet = 3;
                            break;
                        }

                    case 3:
                    case 4:
                        {
                            AdaptionRet = 2;
                            break;
                        }

                    case 1:
                    case 2:
                        {
                            AdaptionRet = 1;
                            break;
                        }

                    default:
                        {
                            AdaptionRet = 0;
                            break;
                        }
                }
            }
            // ユニットとパイロットの地形適応の低い方を使用
            else if (uad > pad)
            {
                AdaptionRet = pad;
            }
            else
            {
                AdaptionRet = uad;
            }

            return AdaptionRet;
        }

        // 地形適応による修正値
        public double get_AdaptionMod(int idx, int ad_mod)
        {
            double AdaptionModRet = default;
            int uad;
            uad = get_Adaption(idx);

            // 元々属性がSでない限り、Sにはしない
            if (uad == 5)
            {
                uad = GeneralLib.MinLng(uad + ad_mod, 5);
            }
            else
            {
                uad = GeneralLib.MinLng(uad + ad_mod, 4);
            }

            // Optionコマンドの設定に応じて適応修正値を設定
            string argoname2 = "地形適応修正緩和";
            if (Expression.IsOptionDefined(argoname2))
            {
                string argoname = "地形適応修正繰り下げ";
                if (Expression.IsOptionDefined(argoname))
                {
                    switch (uad)
                    {
                        case 5:
                            {
                                AdaptionModRet = 1.1d;
                                break;
                            }

                        case 4:
                            {
                                AdaptionModRet = 1d;
                                break;
                            }

                        case 3:
                            {
                                AdaptionModRet = 0.9d;
                                break;
                            }

                        case 2:
                            {
                                AdaptionModRet = 0.8d;
                                break;
                            }

                        case 1:
                            {
                                AdaptionModRet = 0.7d;
                                break;
                            }

                        default:
                            {
                                AdaptionModRet = 0d;
                                break;
                            }
                    }
                }
                else
                {
                    switch (uad)
                    {
                        case 5:
                            {
                                AdaptionModRet = 1.2d;
                                break;
                            }

                        case 4:
                            {
                                AdaptionModRet = 1.1d;
                                break;
                            }

                        case 3:
                            {
                                AdaptionModRet = 1d;
                                break;
                            }

                        case 2:
                            {
                                AdaptionModRet = 0.9d;
                                break;
                            }

                        case 1:
                            {
                                AdaptionModRet = 0.8d;
                                break;
                            }

                        default:
                            {
                                AdaptionModRet = 0d;
                                break;
                            }
                    }
                }
            }
            else
            {
                string argoname1 = "地形適応修正繰り下げ";
                if (Expression.IsOptionDefined(argoname1))
                {
                    switch (uad)
                    {
                        case 5:
                            {
                                AdaptionModRet = 1.2d;
                                break;
                            }

                        case 4:
                            {
                                AdaptionModRet = 1d;
                                break;
                            }

                        case 3:
                            {
                                AdaptionModRet = 0.8d;
                                break;
                            }

                        case 2:
                            {
                                AdaptionModRet = 0.6d;
                                break;
                            }

                        case 1:
                            {
                                AdaptionModRet = 0.4d;
                                break;
                            }

                        default:
                            {
                                AdaptionModRet = 0d;
                                break;
                            }
                    }
                }
                else
                {
                    switch (uad)
                    {
                        case 5:
                            {
                                AdaptionModRet = 1.4d;
                                break;
                            }

                        case 4:
                            {
                                AdaptionModRet = 1.2d;
                                break;
                            }

                        case 3:
                            {
                                AdaptionModRet = 1d;
                                break;
                            }

                        case 2:
                            {
                                AdaptionModRet = 0.8d;
                                break;
                            }

                        case 1:
                            {
                                AdaptionModRet = 0.6d;
                                break;
                            }

                        default:
                            {
                                AdaptionModRet = 0d;
                                break;
                            }
                    }
                }
            }

            return AdaptionModRet;
        }


        // 装甲
        public int get_Armor(string ref_mode)
        {
            int ArmorRet = default;
            ArmorRet = lngArmor;

            // ステータス表示用
            switch (ref_mode ?? "")
            {
                case "基本値":
                    {
                        object argIndex1 = "装甲劣化";
                        if (IsConditionSatisfied(argIndex1))
                        {
                            ArmorRet = ArmorRet / 2;
                        }

                        object argIndex2 = "石化";
                        if (IsConditionSatisfied(argIndex2))
                        {
                            ArmorRet = 2 * ArmorRet;
                        }

                        object argIndex3 = "凍結";
                        if (IsConditionSatisfied(argIndex3))
                        {
                            ArmorRet = ArmorRet / 2;
                        }

                        return default;
                    }

                case "修正値":
                    {
                        ArmorRet = 0;
                        break;
                    }
            }

            // パイロットによる修正
            if (CountPilot() > 0)
            {
                // 霊力による装甲修正
                string argfname = "霊力変換器";
                if (IsFeatureAvailable(argfname))
                {
                    ArmorRet = (ArmorRet + 5d * PlanaLevel());
                }

                // サイキックドライブ装備ユニットは超能力レベルに応じて装甲が変化
                string argfname1 = "サイキックドライブ";
                if (IsFeatureAvailable(argfname1))
                {
                    ArmorRet = (ArmorRet + 100d * PsychicLevel());
                }

                // オーラ変換器装備ユニットはオーラレベルに応じて装甲が変化
                string argfname2 = "オーラ変換器";
                if (IsFeatureAvailable(argfname2))
                {
                    ArmorRet = (ArmorRet + 50d * AuraLevel());
                }
            }

            // 装甲が劣化している場合は装甲値は半減
            object argIndex4 = "装甲劣化";
            if (IsConditionSatisfied(argIndex4))
            {
                ArmorRet = ArmorRet / 2;
            }

            // 石化しているユニットはとても固い……
            object argIndex5 = "石化";
            if (IsConditionSatisfied(argIndex5))
            {
                ArmorRet = 2 * ArmorRet;
            }

            // 凍っているユニットは脆くなる
            object argIndex6 = "凍結";
            if (IsConditionSatisfied(argIndex6))
            {
                ArmorRet = ArmorRet / 2;
            }

            return ArmorRet;
        }

        // 運動性
        public int get_Mobility(string ref_mode)
        {
            int MobilityRet = default;
            MobilityRet = intMobility;
            switch (ref_mode ?? "")
            {
                case "基本値":
                    {
                        return default;
                    }

                case "修正値":
                    {
                        MobilityRet = 0;
                        break;
                    }
            }

            // パイロットによる修正
            if (CountPilot() > 0)
            {
                // サイキックドライブ装備ユニットは超能力レベルに応じて運動性が変化
                string argfname = "サイキックドライブ";
                if (IsFeatureAvailable(argfname))
                {
                    MobilityRet = (MobilityRet + 5d * PsychicLevel());
                }

                // オーラ変換器装備ユニットはオーラレベルに応じて運動性が変化
                string argfname1 = "オーラ変換器";
                if (IsFeatureAvailable(argfname1))
                {
                    MobilityRet = (MobilityRet + 2d * AuraLevel());
                }

                // シンクロドライブ装備ユニットは同調率レベルに応じて運動性が変化
                string argfname2 = "シンクロドライブ";
                if (IsFeatureAvailable(argfname2))
                {
                    if (MainPilot().SynchroRate() > 0)
                    {
                        MobilityRet = (MobilityRet + (long)(SyncLevel() - 50d) / 2L);
                    }
                }
            }

            return MobilityRet;
        }

        // ビットマップ
        public string get_Bitmap(bool use_orig)
        {
            string BitmapRet = default;
            object argIndex2 = "ユニット画像";
            if (IsConditionSatisfied(argIndex2))
            {
                object argIndex1 = "ユニット画像";
                string arglist = ConditionData(argIndex1);
                BitmapRet = GeneralLib.LIndex(arglist, 2);
                return default;
            }

            string argfname = "ユニット画像";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex3 = "ユニット画像";
                BitmapRet = FeatureData(argIndex3);
                return default;
            }

            if (use_orig)
            {
                BitmapRet = Data.Bitmap0;
            }
            else
            {
                BitmapRet = Data.Bitmap;
            }

            return BitmapRet;
        }

        // 修理費(獲得資金)
        public int Value
        {
            get
            {
                int ValueRet = default;
                ValueRet = Data.Value;
                string argfname = "修理費修正";
                if (IsFeatureAvailable(argfname))
                {
                    object argIndex1 = "修理費修正";
                    ValueRet = GeneralLib.MaxLng((ValueRet + 1000d * FeatureLevel(argIndex1)), 0);
                }

                if (BossRank > 0)
                {
                    ValueRet = (ValueRet * (1d + 0.5d * BossRank + 0.05d * Rank));
                }
                else
                {
                    ValueRet = (ValueRet * (1d + 0.05d * Rank));
                }

                return ValueRet;
            }
        }

        // 経験値
        public int ExpValue
        {
            get
            {
                int ExpValueRet = default;
                ExpValueRet = Data.ExpValue;
                string argfname = "経験値修正";
                if (IsFeatureAvailable(argfname))
                {
                    object argIndex1 = "経験値修正";
                    ExpValueRet = GeneralLib.MaxLng((ExpValueRet + 10d * FeatureLevel(argIndex1)), 0);
                }

                if (BossRank > 0)
                {
                    ExpValueRet = ExpValueRet + 20 * BossRank;
                }

                return ExpValueRet;
            }
        }

        // 残り行動数
        public int Action
        {
            get
            {
                int ActionRet = default;
                if (MaxAction() > 0)
                {
                    ActionRet = GeneralLib.MaxLng(MaxAction() - UsedAction, 0);
                }
                else
                {
                    ActionRet = 0;
                }

                return ActionRet;
            }
        }


        // === 行動パターンを規定するパラメータ関連処理 ===

        // 陣営
        public string Party0
        {
            get
            {
                string Party0Ret = default;
                Party0Ret = strParty;
                return Party0Ret;
            }
        }

        public string Party
        {
            get
            {
                string PartyRet = default;
                PartyRet = strParty;

                // 魅了されている場合
                object argIndex1 = "魅了";
                if (IsConditionSatisfied(argIndex1) & Master is object)
                {
                    PartyRet = Master.Party;
                    if (PartyRet == "味方")
                    {
                        // 味方になっても自分では操作できない
                        PartyRet = "ＮＰＣ";
                    }
                }

                // 憑依されている場合
                object argIndex2 = "憑依";
                if (IsConditionSatisfied(argIndex2) & Master is object)
                {
                    PartyRet = Master.Party;
                }

                // コントロール不能の味方ユニットはＮＰＣとして扱う
                if (PartyRet == "味方")
                {
                    object argIndex3 = "暴走";
                    object argIndex4 = "混乱";
                    object argIndex5 = "恐怖";
                    object argIndex6 = "踊り";
                    object argIndex7 = "狂戦士";
                    if (IsConditionSatisfied(argIndex3) | IsConditionSatisfied(argIndex4) | IsConditionSatisfied(argIndex5) | IsConditionSatisfied(argIndex6) | IsConditionSatisfied(argIndex7))
                    {
                        PartyRet = "ＮＰＣ";
                    }
                }

                return PartyRet;
            }

            set
            {
                strParty = value;
            }
        }

        // 思考モード

        public string Mode
        {
            get
            {
                string ModeRet = default;
                int i;
                string argsptype = "挑発";
                if (IsUnderSpecialPowerEffect(argsptype))
                {
                    // 挑発を最優先
                    var loopTo = CountSpecialPower();
                    for (i = 1; i <= loopTo; i++)
                    {
                        // UPGRADE_WARNING: オブジェクト SpecialPower(i).IsEffectAvailable(挑発) の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                        SpecialPowerData localSpecialPower() { object argIndex1 = i; var ret = SpecialPower(argIndex1); return ret; }

                        string argename = "挑発";
                        if (Conversions.ToBoolean(localSpecialPower().IsEffectAvailable(argename)))
                        {
                            object argIndex1 = i;
                            ModeRet = SpecialPowerData(argIndex1);
                            return default;
                        }
                    }
                }

                object argIndex2 = "暴走";
                object argIndex3 = "混乱";
                object argIndex4 = "憑依";
                object argIndex5 = "狂戦士";
                if (IsConditionSatisfied(argIndex2) | IsConditionSatisfied(argIndex3) | IsConditionSatisfied(argIndex4) | IsConditionSatisfied(argIndex5))
                {
                    // 正常な判断が出来ない場合は当初の目的を忘れてしまうため
                    // 常に通常モードとして扱う
                    ModeRet = "通常";
                    return default;
                }

                object argIndex6 = "恐怖";
                if (IsConditionSatisfied(argIndex6))
                {
                    // 恐怖にかられた場合は逃亡
                    ModeRet = "逃亡";
                    return default;
                }

                object argIndex7 = "踊り";
                if (IsConditionSatisfied(argIndex7))
                {
                    // 踊るのに忙しい……
                    ModeRet = "固定";
                    return default;
                }

                ModeRet = strMode;
                return ModeRet;
            }

            set
            {
                strMode = value;
            }
        }

        // 地形 area_name での移動が可能かどうか
        public bool IsTransAvailable(string area_name)
        {
            bool IsTransAvailableRet = default;
            // 移動可能地形に含まれているか？
            if (Strings.InStr(Transportation, area_name) > 0)
            {
                IsTransAvailableRet = true;
            }
            else
            {
                IsTransAvailableRet = false;
            }

            // 水上移動の場合
            if (area_name == "水上")
            {
                string argfname = "水上移動";
                string argfname1 = "ホバー移動";
                if (IsFeatureAvailable(argfname) | IsFeatureAvailable(argfname1))
                {
                    IsTransAvailableRet = true;
                }
            }

            return IsTransAvailableRet;
        }


        // === ユニット用特殊能力関連処理 ===

        // 特殊能力の総数
        public int CountFeature()
        {
            int CountFeatureRet = default;
            CountFeatureRet = colFeature.Count;
            return CountFeatureRet;
        }

        // 特殊能力
        public string Feature(object Index)
        {
            string FeatureRet = default;
            FeatureData fd;
            fd = (FeatureData)colFeature[Index];
            FeatureRet = fd.Name;
            return FeatureRet;
        }

        // 特殊能力の名称
        public string FeatureName(object Index)
        {
            string FeatureNameRet = default;
            FeatureNameRet = FeatureNameInt(Index, colFeature);
            return FeatureNameRet;
        }

        private string FeatureNameInt(object Index, Collection feature_list)
        {
            string FeatureNameIntRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 30194


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)feature_list[Index];
            // 非表示の能力
            switch (fd.Name ?? "")
            {
                case "ノーマルモード":
                case "パーツ合体":
                case "換装":
                case "制限時間":
                case "制御不可":
                case "主形態":
                case "他形態":
                case "合体制限":
                case "格闘武器":
                case "迎撃武器":
                case "合体技":
                case "変形技":
                case "ランクアップ":
                case "追加パイロット":
                case "暴走時パイロット":
                case "追加サポート":
                case "装備個所":
                case "ハードポイント":
                case "武器クラス":
                case "防具クラス":
                case "ＢＧＭ":
                case "武器ＢＧＭ":
                case "アビリティＢＧＭ":
                case "合体ＢＧＭ":
                case "分離ＢＧＭ":
                case "変形ＢＧＭ":
                case "ハイパーモードＢＧＭ":
                case "ユニット画像":
                case "パイロット画像":
                case "パイロット愛称":
                case "パイロット読み仮名":
                case "性別":
                case "性格変更":
                case "吸収":
                case "無効化":
                case "耐性":
                case "弱点":
                case "有効":
                case "特殊効果無効化":
                case "アイテム所有":
                case "レアアイテム所有":
                case "ラーニング可能技":
                case "改造費修正":
                case "最大改造数":
                case "パイロット能力付加":
                case "パイロット能力強化":
                case "非表示":
                case "攻撃属性":
                case "射程延長":
                case "武器強化":
                case "命中率強化":
                case "ＣＴ率強化":
                case "特殊効果発動率強化":
                case "必要技能":
                case "不必要技能":
                case "ダミーユニット":
                case "地形ユニット":
                case "召喚解除コマンド名":
                case "変身解除コマンド名":
                case "１人乗り可能":
                case "特殊効果":
                case "戦闘アニメ":
                case "パイロット地形適応変更":
                case "メッセージクラス":
                case "用語名":
                case "発光":
                    {
                        // ユニット用特殊能力
                        FeatureNameIntRet = "";
                        return FeatureNameIntRet;
                    }

                case "愛称変更":
                case "読み仮名変更":
                case "サイズ変更":
                case "地形適応変更":
                case "地形適応固定変更":
                case "空中移動":
                case "陸上移動":
                case "水中移動":
                case "宇宙移動":
                case "地中移動":
                case "修理費修正":
                case "経験値修正":
                case "最大弾数増加":
                case "ＥＮ消費減少":
                case "Ｖ－ＵＰ":
                case "大型アイテム":
                case "呪い":
                    {
                        // アイテム用特殊能力
                        FeatureNameIntRet = "";
                        return FeatureNameIntRet;
                    }
            }

            // ADD START MARGE
            // 拡大画像能力は「拡大画像(文字列)」といった指定もあるので他の非表示能力と異なる
            // 判定方法を使う
            if (Strings.InStr(fd.Name, "拡大画像") == 1)
            {
                FeatureNameIntRet = "";
                return FeatureNameIntRet;
            }
            // ADD END MARGE

            if (Strings.Len(fd.StrData) > 0)
            {
                // 別名の指定あり
                FeatureNameIntRet = GeneralLib.ListIndex(fd.StrData, 1);
                if (FeatureNameIntRet == "非表示" | FeatureNameIntRet == "解説")
                {
                    FeatureNameIntRet = "";
                }
            }
            else if (fd.Level == SRC.DEFAULT_LEVEL)
            {
                // レベル指定なし
                FeatureNameIntRet = fd.Name;
            }
            else if (fd.Level >= 0d)
            {
                // レベル指定あり
                FeatureNameIntRet = fd.Name + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(fd.Level);
                if (fd.Name == "射撃強化")
                {
                    if (CountPilot() > 0)
                    {
                        if (MainPilot().HasMana())
                        {
                            FeatureNameIntRet = "魔力強化Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(fd.Level);
                        }
                    }
                }
            }
            else
            {
                // マイナスのレベル指定
                switch (fd.Name ?? "")
                {
                    case "格闘強化":
                        {
                            FeatureNameIntRet = "格闘低下" + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(Math.Abs(fd.Level));
                            break;
                        }

                    case "射撃強化":
                        {
                            FeatureNameIntRet = "射撃低下" + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(Math.Abs(fd.Level));
                            if (CountPilot() > 0)
                            {
                                if (MainPilot().HasMana())
                                {
                                    FeatureNameIntRet = "魔力低下Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(Math.Abs(fd.Level));
                                }
                            }

                            break;
                        }

                    case "命中強化":
                        {
                            FeatureNameIntRet = "命中低下" + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(Math.Abs(fd.Level));
                            break;
                        }

                    case "回避強化":
                        {
                            FeatureNameIntRet = "回避低下" + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(Math.Abs(fd.Level));
                            break;
                        }

                    case "技量強化":
                        {
                            FeatureNameIntRet = "技量低下" + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(Math.Abs(fd.Level));
                            break;
                        }

                    case "反応強化":
                        {
                            FeatureNameIntRet = "反応低下" + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(Math.Abs(fd.Level));
                            break;
                        }

                    default:
                        {
                            FeatureNameIntRet = fd.Name + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(fd.Level);
                            break;
                        }
                }
            }

            return FeatureNameIntRet;
            ErrorHandler:
            ;

            // 見つからなかった場合
            // UPGRADE_WARNING: オブジェクト Index の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
            FeatureNameIntRet = Conversions.ToString(Index);
        }

        public string FeatureName0(object Index)
        {
            string FeatureName0Ret = default;
            FeatureName0Ret = FeatureName(Index);
            if (Strings.InStr(FeatureName0Ret, "Lv") > 0)
            {
                FeatureName0Ret = Strings.Left(FeatureName0Ret, Strings.InStr(FeatureName0Ret, "Lv") - 1);
            }

            return FeatureName0Ret;
        }

        // 特殊能力のレベル
        public double FeatureLevel(object Index)
        {
            double FeatureLevelRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 34249


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colFeature[Index];
            FeatureLevelRet = fd.Level;
            if (fd.Level == SRC.DEFAULT_LEVEL)
            {
                FeatureLevelRet = 1d;
            }

            return FeatureLevelRet;
            ErrorHandler:
            ;
            FeatureLevelRet = 0d;
        }

        // 特殊能力のデータ
        public string FeatureData(object Index)
        {
            string FeatureDataRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 34649


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colFeature[Index];
            FeatureDataRet = fd.StrData;
            return FeatureDataRet;
            ErrorHandler:
            ;
            FeatureDataRet = "";
        }

        // 特殊能力の必要技能
        public string FeatureNecessarySkill(object Index)
        {
            string FeatureNecessarySkillRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 34947


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colFeature[Index];
            FeatureNecessarySkillRet = fd.NecessarySkill;
            return FeatureNecessarySkillRet;
            ErrorHandler:
            ;
            FeatureNecessarySkillRet = "";
        }

        // 指定した特殊能力を所有しているか？
        public bool IsFeatureAvailable(string fname)
        {
            bool IsFeatureAvailableRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 35278


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colFeature[fname];
            IsFeatureAvailableRet = true;
            return IsFeatureAvailableRet;
            ErrorHandler:
            ;
            IsFeatureAvailableRet = false;
        }

        // 特殊能力にレベル指定がされている？
        public bool IsFeatureLevelSpecified(object Index)
        {
            bool IsFeatureLevelSpecifiedRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 35598


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colFeature[Index];
            if (fd.Level == SRC.DEFAULT_LEVEL)
            {
                IsFeatureLevelSpecifiedRet = false;
            }
            else
            {
                IsFeatureLevelSpecifiedRet = true;
            }

            return IsFeatureLevelSpecifiedRet;
            ErrorHandler:
            ;
            IsFeatureLevelSpecifiedRet = false;
        }

        // 特殊能力の総数(必要条件を満たさないものを含む)
        public int CountAllFeature()
        {
            int CountAllFeatureRet = default;
            CountAllFeatureRet = colAllFeature.Count;
            return CountAllFeatureRet;
        }

        // 特殊能力(必要条件を満たさないものを含む)
        public string AllFeature(object Index)
        {
            string AllFeatureRet = default;
            FeatureData fd;
            fd = (FeatureData)colAllFeature[Index];
            AllFeatureRet = fd.Name;
            return AllFeatureRet;
        }

        // 特殊能力の名称(必要条件を満たさないものを含む)
        public string AllFeatureName(object Index)
        {
            string AllFeatureNameRet = default;
            AllFeatureNameRet = FeatureNameInt(Index, colAllFeature);
            return AllFeatureNameRet;
        }

        // 特殊能力のレベル(必要条件を満たさないものを含む)
        public double AllFeatureLevel(object Index)
        {
            double AllFeatureLevelRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 36565


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colAllFeature[Index];
            AllFeatureLevelRet = fd.Level;
            if (fd.Level == SRC.DEFAULT_LEVEL)
            {
                AllFeatureLevelRet = 1d;
            }

            return AllFeatureLevelRet;
            ErrorHandler:
            ;
            AllFeatureLevelRet = 0d;
        }

        // 特殊能力のレベルが指定されているか(必要条件を満たさないものを含む)
        public bool AllFeatureLevelSpecified(object Index)
        {
            bool AllFeatureLevelSpecifiedRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 37017


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colAllFeature[Index];
            if (fd.Level != SRC.DEFAULT_LEVEL)
            {
                AllFeatureLevelSpecifiedRet = true;
            }

            return AllFeatureLevelSpecifiedRet;
            ErrorHandler:
            ;
            AllFeatureLevelSpecifiedRet = false;
        }

        // 特殊能力のデータ(必要条件を満たさないものを含む)
        public string AllFeatureData(object Index)
        {
            string AllFeatureDataRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 37422


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colAllFeature[Index];
            AllFeatureDataRet = fd.StrData;
            return AllFeatureDataRet;
            ErrorHandler:
            ;
            AllFeatureDataRet = "";
        }

        // 特殊能力にレベル指定がされている？(必要条件を満たさないものを含む)
        public bool IsAllFeatureLevelSpecified(object Index)
        {
            bool IsAllFeatureLevelSpecifiedRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 37760


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colAllFeature[Index];
            if (fd.Level == SRC.DEFAULT_LEVEL)
            {
                IsAllFeatureLevelSpecifiedRet = false;
            }
            else
            {
                IsAllFeatureLevelSpecifiedRet = true;
            }

            return IsAllFeatureLevelSpecifiedRet;
            ErrorHandler:
            ;
            IsAllFeatureLevelSpecifiedRet = false;
        }

        // 特殊能力が必要条件を満たしているか
        public bool IsFeatureActivated(object Index)
        {
            bool IsFeatureActivatedRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 38217


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colAllFeature[Index];
            foreach (FeatureData fd2 in colFeature)
            {
                if (ReferenceEquals(fd, fd2))
                {
                    IsFeatureActivatedRet = true;
                    return IsFeatureActivatedRet;
                }
            }

            IsFeatureActivatedRet = false;
            return IsFeatureActivatedRet;
            ErrorHandler:
            ;
            IsFeatureActivatedRet = false;
        }


        // === ユニットステータスの更新処理 ===

        // ユニットの各種パラメータを更新するサブルーチン
        // パラメータや武器、アビリティデータ等が変化する際には必ず呼び出す必要がある。
        public void Update(bool without_refresh = false)
        {
            WeaponData[] prev_wdata;
            double[] prev_wbullets;
            AbilityData[] prev_adata;
            double[] prev_astocks;
            int l, j, i, k, num;
            string ch, buf;
            FeatureData fd;
            Item itm;
            string stype, sdata;
            double slevel;
            string stype2, sdata2;
            double slevel2;
            string wname, wnickname;
            string wnskill, wclass, wtype, sname;
            string fdata;
            int flen;
            bool found, flag;
            bool[] flags;
            bool with_not;
            int false_count;
            var uadaption = new int[5];
            double hp_ratio, en_ratio;
            string ubitmap;
            int pmorale;
            bool is_stable, is_uncontrollable, is_invisible;

            // ＨＰとＥＮの値を記録
            hp_ratio = 100 * HP / (double)MaxHP;
            en_ratio = 100 * EN / (double)MaxEN;

            // ユニット用画像ファイル名を記録しておく
            ubitmap = get_Bitmap(false);

            // 非表示かどうか記録しておく
            string argfname = "非表示";
            is_invisible = IsFeatureAvailable(argfname);

            // 制御不可がどうかを記録しておく
            string argfname1 = "制御不可";
            is_uncontrollable = IsFeatureAvailable(argfname1);

            // 不安定がどうかを記録しておく
            string argfname2 = "不安定";
            is_stable = IsFeatureAvailable(argfname2);
            TryAgain:
            ;


            // アイテムが現在の形態で効力を発揮してくれるか判定
            foreach (Item currentItm in colItem)
            {
                itm = currentItm;
                var argu = this;
                itm.Activated = itm.IsAvailable(argu);
            }

            // ランクアップによるデータ変更
            string argfname3 = "ランクアップ";
            while (Data.IsFeatureAvailable(argfname3))
            {
                {
                    var withBlock = Data;
                    object argIndex1 = "ランクアップ";
                    if (Rank < withBlock.FeatureLevel(argIndex1))
                    {
                        break;
                    }

                    bool localIsNecessarySkillSatisfied() { object argIndex1 = "ランクアップ"; string argnabilities = withBlock.FeatureNecessarySkill(argIndex1); Pilot argp = null; var ret = IsNecessarySkillSatisfied(argnabilities, p: argp); return ret; }

                    if (!localIsNecessarySkillSatisfied())
                    {
                        break;
                    }

                    object argIndex2 = "ランクアップ";
                    fdata = withBlock.FeatureData(argIndex2);
                }

                {
                    var withBlock1 = SRC.UDList;
                    bool localIsDefined() { object argIndex1 = fdata; var ret = withBlock1.IsDefined(argIndex1); return ret; }

                    if (!localIsDefined())
                    {
                        string argmsg = Name + "のランクアップ先ユニット「" + fdata + "」のデータが定義されていません";
                        GUI.ErrorMessage(argmsg);
                        SRC.TerminateSRC();
                    }

                    object argIndex3 = fdata;
                    Data = withBlock1.Item(argIndex3);
                }
            }

            // 特殊能力を更新

            // まず特殊能力リストをクリア
            {
                var withBlock2 = colFeature;
                foreach (FeatureData currentFd in colFeature)
                {
                    fd = currentFd;
                    withBlock2.Remove(1);
                }
            }

            // 付加された特殊能力
            foreach (Condition cnd in colCondition)
            {
                if (cnd.Lifetime != 0)
                {
                    if (Strings.Right(cnd.Name, 2) == "付加")
                    {
                        fd = new FeatureData();
                        fd.Name = Strings.Left(cnd.Name, Strings.Len(cnd.Name) - 2);
                        fd.Level = cnd.Level;
                        fd.StrData = cnd.StrData;
                        colFeature.Add(fd, fd.Name);
                    }
                }
            }

            AdditionalFeaturesNum = colFeature.Count;

            // ユニットデータで定義されている特殊能力
            AddFeatures(Data.colFeature);

            // アイテムで得られた特殊能力
            var loopTo = CountItem();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex4 = i;
                {
                    var withBlock3 = Item(argIndex4);
                    if (withBlock3.Activated)
                    {
                        AddFeatures(withBlock3.Data.colFeature, true);
                    }
                }
            }

            // パイロットデータで定義されている特殊能力
            if (CountPilot() > 0)
            {
                string argfname4 = "追加パイロット";
                if (IsFeatureAvailable(argfname4))
                {
                    // 特殊能力を付加する前に必要技能が満たされているかどうか判定
                    UpdateFeatures("追加パイロット");
                }

                AddFeatures(MainPilot().Data.colFeature);
                var loopTo1 = CountPilot();
                for (i = 2; i <= loopTo1; i++)
                {
                    Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    AddFeatures(localPilot().Data.colFeature);
                }

                var loopTo2 = CountSupport();
                for (i = 1; i <= loopTo2; i++)
                {
                    Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    AddFeatures(localSupport().Data.colFeature);
                }

                string argfname6 = "追加サポート";
                if (IsFeatureAvailable(argfname6))
                {
                    // 特殊能力を付加する前に必要技能が満たされているかどうか判定
                    UpdateFeatures("追加サポート");
                    string argfname5 = "追加サポート";
                    if (IsFeatureAvailable(argfname5))
                    {
                        AddFeatures(AdditionalSupport().Data.colFeature);
                    }
                }
            }

            // パイロット能力付加＆強化の効果をクリア
            i = 1;
            while (i <= CountCondition())
            {
                string localCondition() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                switch (Strings.Right(localCondition(), 3) ?? "")
                {
                    case "付加２":
                    case "強化２":
                        {
                            object argIndex5 = i;
                            DeleteCondition(argIndex5);
                            break;
                        }

                    default:
                        {
                            i = (i + 1);
                            break;
                        }
                }
            }

            // パイロット能力付加
            found = false;
            flag = false;
            flags = new bool[colFeature.Count + 1];
            AddSkills:
            ;
            i = 1;
            foreach (FeatureData currentFd1 in colFeature)
            {
                fd = currentFd1;
                if (flags[i])
                {
                    goto NextFeature;
                }

                switch (fd.Name ?? "")
                {
                    case "パイロット能力付加":
                        {
                            // 必要技能を満たしている？
                            Pilot argp = null;
                            if (!IsNecessarySkillSatisfied(fd.NecessarySkill, p: argp))
                            {
                                found = true;
                                goto NextFeature;
                            }
                            // 必要条件を満たしている？
                            Pilot argp1 = null;
                            if (!IsNecessarySkillSatisfied(fd.NecessaryCondition, p: argp1))
                            {
                                found = true;
                                goto NextFeature;
                            }

                            flags[i] = true;

                            // 能力指定が「"」で囲まれている場合は「"」を削除
                            if (Strings.Asc(fd.StrData) == 34) // "
                            {
                                buf = Strings.Mid(fd.StrData, 2, Strings.Len(fd.StrData) - 2);
                            }
                            else
                            {
                                buf = fd.StrData;
                            }

                            // 付加する特殊能力の種類、レベル、データを解析
                            if (Strings.InStr(buf, "=") > 0)
                            {
                                sdata = Strings.Mid(buf, Strings.InStr(buf, "=") + 1);
                                buf = Strings.Left(buf, Strings.InStr(buf, "=") - 1);
                                if (Strings.InStr(buf, "Lv") > 0)
                                {
                                    stype = Strings.Left(buf, Strings.InStr(buf, "Lv") - 1);
                                    if (Information.IsNumeric(Strings.Mid(buf, Strings.InStr(buf, "Lv") + 2)))
                                    {
                                        slevel = Conversions.ToDouble(Strings.Mid(buf, Strings.InStr(buf, "Lv") + 2));
                                    }
                                    else
                                    {
                                        slevel = 1d;
                                    }
                                }
                                else
                                {
                                    stype = buf;
                                    slevel = SRC.DEFAULT_LEVEL;
                                }
                            }
                            else
                            {
                                sdata = "";
                                if (Strings.InStr(buf, "Lv") > 0)
                                {
                                    stype = Strings.Left(buf, Strings.InStr(buf, "Lv") - 1);
                                    if (Information.IsNumeric(Strings.Mid(buf, Strings.InStr(buf, "Lv") + 2)))
                                    {
                                        slevel = Conversions.ToDouble(Strings.Mid(buf, Strings.InStr(buf, "Lv") + 2));
                                    }
                                    else
                                    {
                                        slevel = 1d;
                                    }
                                }
                                else
                                {
                                    stype = buf;
                                    slevel = SRC.DEFAULT_LEVEL;
                                }
                            }

                            // エリアスが定義されている？
                            object argIndex9 = stype;
                            if (SRC.ALDList.IsDefined(argIndex9))
                            {
                                object argIndex7 = stype;
                                {
                                    var withBlock4 = SRC.ALDList.Item(argIndex7);
                                    var loopTo3 = withBlock4.Count;
                                    for (j = 1; j <= loopTo3; j++)
                                    {
                                        // エリアスの定義に従って特殊能力定義を置き換える
                                        stype2 = withBlock4.get_AliasType(j);
                                        string localLIndex() { string arglist = withBlock4.get_AliasData(j); var ret = GeneralLib.LIndex(arglist, 1); withBlock4.get_AliasData(j) = arglist; return ret; }

                                        if (localLIndex() == "解説")
                                        {
                                            // 特殊能力の解説
                                            if (!string.IsNullOrEmpty(sdata))
                                            {
                                                stype2 = GeneralLib.LIndex(sdata, 1);
                                            }

                                            slevel2 = SRC.DEFAULT_LEVEL;
                                            sdata2 = withBlock4.get_AliasData(j);
                                        }
                                        else
                                        {
                                            // 通常の能力
                                            if (withBlock4.get_AliasLevelIsPlusMod(j))
                                            {
                                                if (slevel == SRC.DEFAULT_LEVEL)
                                                {
                                                    slevel = 1d;
                                                }

                                                slevel2 = slevel + withBlock4.get_AliasLevel(j);
                                            }
                                            else if (withBlock4.get_AliasLevelIsMultMod(j))
                                            {
                                                if (slevel == SRC.DEFAULT_LEVEL)
                                                {
                                                    slevel = 1d;
                                                }

                                                slevel2 = slevel * withBlock4.get_AliasLevel(j);
                                            }
                                            else if (slevel != SRC.DEFAULT_LEVEL)
                                            {
                                                slevel2 = slevel;
                                            }
                                            else
                                            {
                                                slevel2 = withBlock4.get_AliasLevel(j);
                                            }

                                            sdata2 = withBlock4.get_AliasData(j);
                                            if (!string.IsNullOrEmpty(sdata))
                                            {
                                                if (Strings.InStr(sdata2, "非表示") != 1)
                                                {
                                                    sdata2 = sdata + " " + GeneralLib.ListTail(sdata2, (GeneralLib.LLength(sdata) + 1));
                                                }
                                            }

                                            if (withBlock4.get_AliasLevelIsPlusMod(j) | withBlock4.get_AliasLevelIsMultMod(j))
                                            {
                                                sdata2 = GeneralLib.LIndex(sdata2, 1) + "Lv" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(slevel) + " " + GeneralLib.ListTail(sdata2, 2);
                                                sdata2 = Strings.Trim(sdata2);
                                            }
                                        }

                                        // 属性使用不能攻撃により使用不能になった技能を封印する。
                                        object argIndex6 = stype2 + "使用不能";
                                        if (ConditionLifetime(argIndex6) > 0)
                                        {
                                            goto NextFeature;
                                        }

                                        string argcname = stype2 + "付加２";
                                        AddCondition(argcname, -1, slevel2, sdata2);
                                    }
                                }
                            }
                            else
                            {
                                // 属性使用不能攻撃により使用不能になった技能を封印する。
                                object argIndex8 = stype + "使用不能";
                                if (ConditionLifetime(argIndex8) > 0)
                                {
                                    goto NextFeature;
                                }

                                string argcname1 = stype + "付加２";
                                AddCondition(argcname1, -1, slevel, sdata);
                            }

                            break;
                        }

                    case "パイロット能力強化":
                        {
                            // 必要技能を満たしている？
                            Pilot argp2 = null;
                            if (!IsNecessarySkillSatisfied(fd.NecessarySkill, p: argp2))
                            {
                                found = true;
                                goto NextFeature;
                            }
                            // 必要条件を満たしている？
                            Pilot argp3 = null;
                            if (!IsNecessarySkillSatisfied(fd.NecessaryCondition, p: argp3))
                            {
                                found = true;
                                goto NextFeature;
                            }

                            flags[i] = true;

                            // 能力指定が「"」で囲まれている場合は「"」を削除
                            if (Strings.Asc(fd.StrData) == 34) // "
                            {
                                buf = Strings.Mid(fd.StrData, 2, Strings.Len(fd.StrData) - 2);
                            }
                            else
                            {
                                buf = fd.StrData;
                            }

                            // 強化する特殊能力の種類、レベル、データを解析
                            if (Strings.InStr(buf, "=") > 0)
                            {
                                sdata = Strings.Mid(buf, Strings.InStr(buf, "=") + 1);
                                buf = Strings.Left(buf, Strings.InStr(buf, "=") - 1);
                                if (Strings.InStr(buf, "Lv") > 0)
                                {
                                    stype = Strings.Left(buf, Strings.InStr(buf, "Lv") - 1);
                                    if (Information.IsNumeric(Strings.Mid(buf, Strings.InStr(buf, "Lv") + 2)))
                                    {
                                        slevel = Conversions.ToDouble(Strings.Mid(buf, Strings.InStr(buf, "Lv") + 2));
                                    }
                                    else
                                    {
                                        slevel = 1d;
                                    }
                                }
                                else
                                {
                                    stype = buf;
                                    slevel = 1d;
                                }
                            }
                            else
                            {
                                sdata = "";
                                if (Strings.InStr(buf, "Lv") > 0)
                                {
                                    stype = Strings.Left(buf, Strings.InStr(buf, "Lv") - 1);
                                    if (Information.IsNumeric(Strings.Mid(buf, Strings.InStr(buf, "Lv") + 2)))
                                    {
                                        slevel = Conversions.ToDouble(Strings.Mid(buf, Strings.InStr(buf, "Lv") + 2));
                                    }
                                    else
                                    {
                                        slevel = 1d;
                                    }
                                }
                                else
                                {
                                    stype = buf;
                                    slevel = 1d;
                                }
                            }

                            // エリアスが定義されている？
                            object argIndex17 = stype;
                            if (SRC.ALDList.IsDefined(argIndex17))
                            {
                                object argIndex14 = stype;
                                {
                                    var withBlock5 = SRC.ALDList.Item(argIndex14);
                                    var loopTo4 = withBlock5.Count;
                                    for (j = 1; j <= loopTo4; j++)
                                    {
                                        // エリアスの定義に従って特殊能力定義を置き換える
                                        stype2 = withBlock5.get_AliasType(j);

                                        // 属性使用不能攻撃により使用不能になった技能を封印する。
                                        object argIndex10 = stype2 + "使用不能";
                                        if (ConditionLifetime(argIndex10) > 0)
                                        {
                                            goto NextFeature;
                                        }

                                        string localLIndex1() { string arglist = withBlock5.get_AliasData(j); var ret = GeneralLib.LIndex(arglist, 1); withBlock5.get_AliasData(j) = arglist; return ret; }

                                        if (localLIndex1() == "解説")
                                        {
                                            // 特殊能力の解説
                                            if (!string.IsNullOrEmpty(sdata))
                                            {
                                                stype2 = GeneralLib.LIndex(sdata, 1);
                                            }

                                            slevel2 = SRC.DEFAULT_LEVEL;
                                            sdata2 = withBlock5.get_AliasData(j);
                                            // 属性使用不能攻撃により使用不能になった技能を封印する。
                                            object argIndex11 = stype2 + "使用不能";
                                            if (ConditionLifetime(argIndex11) > 0)
                                            {
                                                goto NextFeature;
                                            }

                                            string argcname2 = stype2 + "付加２";
                                            AddCondition(argcname2, -1, slevel2, sdata2);
                                        }
                                        else
                                        {
                                            // 通常の能力
                                            if (withBlock5.get_AliasLevelIsMultMod(j))
                                            {
                                                if (slevel == SRC.DEFAULT_LEVEL)
                                                {
                                                    slevel = 1d;
                                                }

                                                slevel2 = slevel * withBlock5.get_AliasLevel(j);
                                            }
                                            else if (slevel != SRC.DEFAULT_LEVEL)
                                            {
                                                slevel2 = slevel;
                                            }
                                            else
                                            {
                                                slevel2 = withBlock5.get_AliasLevel(j);
                                            }

                                            sdata2 = withBlock5.get_AliasData(j);
                                            if (!string.IsNullOrEmpty(sdata))
                                            {
                                                if (Strings.InStr(sdata2, "非表示") != 1)
                                                {
                                                    sdata2 = sdata + " " + GeneralLib.ListTail(sdata2, (GeneralLib.LLength(sdata) + 1));
                                                }
                                            }

                                            // 強化するレベルは累積する
                                            object argIndex13 = stype2 + "強化２";
                                            if (IsConditionSatisfied(argIndex13))
                                            {
                                                double localConditionLevel() { object argIndex1 = stype2 + "強化２"; var ret = ConditionLevel(argIndex1); return ret; }

                                                slevel2 = slevel2 + localConditionLevel();
                                                object argIndex12 = stype2 + "強化２";
                                                DeleteCondition(argIndex12);
                                            }

                                            string argcname3 = stype2 + "強化２";
                                            AddCondition(argcname3, -1, slevel2, sdata2);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                // 強化するレベルは累積する
                                object argIndex16 = stype + "強化２";
                                if (IsConditionSatisfied(argIndex16))
                                {
                                    double localConditionLevel1() { object argIndex1 = stype + "強化２"; var ret = ConditionLevel(argIndex1); return ret; }

                                    slevel = slevel + localConditionLevel1();
                                    object argIndex15 = stype + "強化２";
                                    DeleteCondition(argIndex15);
                                }

                                string argcname4 = stype + "強化２";
                                AddCondition(argcname4, -1, slevel, sdata);
                            }

                            break;
                        }
                }

                NextFeature:
                ;
                i = (i + 1);
            }
            // 必要技能＆必要条件付きのパイロット能力付加＆強化がある場合は付加や強化の結果、
            // 必要技能＆必要条件が満たされることがあるので一度だけやり直す
            if (!flag & found)
            {
                flag = true;
                goto AddSkills;
            }

            // パイロット用特殊能力の付加＆強化が完了したので必要技能の判定が可能になった。
            UpdateFeatures();

            // アイテムが必要技能を満たすか再度チェック。
            found = false;
            foreach (Item currentItm1 in colItem)
            {
                itm = currentItm1;
                var argu1 = this;
                if (itm.Activated != itm.IsAvailable(argu1))
                {
                    found = true;
                    break;
                }
            }

            if (found)
            {
                // アイテムの使用可否が変化したので最初からやり直す
                goto TryAgain;
            }

            // ランクアップするか再度チェック。
            {
                var withBlock6 = Data;
                string argfname7 = "ランクアップ";
                if (withBlock6.IsFeatureAvailable(argfname7))
                {
                    object argIndex19 = "ランクアップ";
                    if (Rank >= withBlock6.FeatureLevel(argIndex19))
                    {
                        object argIndex18 = "ランクアップ";
                        string argnabilities = withBlock6.FeatureNecessarySkill(argIndex18);
                        Pilot argp4 = null;
                        if (IsNecessarySkillSatisfied(argnabilities, p: argp4))
                        {
                            // ランクアップが可能になったので最初からやり直す
                            goto TryAgain;
                        }
                    }
                }
            }

            if (CountPilot() > 0)
            {
                // パイロット能力をアップデート
                var loopTo5 = CountPilot();
                for (i = 2; i <= loopTo5; i++)
                {
                    Pilot localPilot1() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    localPilot1().Update();
                }

                var loopTo6 = CountSupport();
                for (i = 1; i <= loopTo6; i++)
                {
                    Pilot localSupport1() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    localSupport1().Update();
                }

                // メインパイロットは他のパイロットのサポートを受ける関係上
                // 最後にアップデートする
                object argIndex20 = 1;
                Pilot(argIndex20).Update();
                object argIndex21 = 1;
                object argIndex22 = 1;
                if (!ReferenceEquals(MainPilot(), Pilot(argIndex22)))
                {
                    MainPilot().Update();
                }
            }

            // ユニット画像用ファイル名に変化がある場合はユニット画像を更新
            if (BitmapID != 0)
            {
                if ((ubitmap ?? "") != (get_Bitmap(false) ?? ""))
                {
                    var argu2 = this;
                    BitmapID = GUI.MakeUnitBitmap(argu2);
                    var loopTo7 = CountOtherForm();
                    for (i = 1; i <= loopTo7; i++)
                    {
                        Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                        localOtherForm().BitmapID = 0;
                    }

                    if (!without_refresh)
                    {
                        if (Status_Renamed == "出撃")
                        {
                            if (!GUI.IsPictureVisible & !string.IsNullOrEmpty(Map.MapFileName))
                            {
                                var argu3 = this;
                                GUI.PaintUnitBitmap(argu3);
                            }
                        }
                    }
                }
            }

            // ユニットの表示、非表示が切り替わった場合
            string argfname9 = "非表示";
            if (is_invisible != IsFeatureAvailable(argfname9))
            {
                if (Status_Renamed == "出撃")
                {
                    if (!GUI.IsPictureVisible & !string.IsNullOrEmpty(Map.MapFileName))
                    {
                        var argu4 = this;
                        BitmapID = GUI.MakeUnitBitmap(argu4);
                        string argfname8 = "非表示";
                        if (IsFeatureAvailable(argfname8))
                        {
                            GUI.EraseUnitBitmap(x, y, !without_refresh);
                        }
                        else if (!without_refresh)
                        {
                            var argu5 = this;
                            GUI.PaintUnitBitmap(argu5);
                        }
                    }
                }
            }

            // 各種パラメータ
            {
                var withBlock7 = Data;
                lngMaxHP = withBlock7.HP + 200 * Rank;
                intMaxEN = (withBlock7.EN + 10 * Rank);
                lngArmor = withBlock7.Armor + 100 * Rank;
                intMobility = (withBlock7.Mobility + 5 * Rank);
                intSpeed = withBlock7.Speed;
            }

            // ボスランクによる修正
            string argoname1 = "等身大基準";
            if (IsHero() | Expression.IsOptionDefined(argoname1))
            {
                switch (BossRank)
                {
                    case 1:
                        {
                            lngMaxHP = lngMaxHP + Data.HP;
                            break;
                        }

                    case 2:
                        {
                            lngMaxHP = lngMaxHP + Data.HP + 10000;
                            break;
                        }

                    case 3:
                        {
                            lngMaxHP = lngMaxHP + Data.HP + 20000;
                            break;
                        }

                    case 4:
                        {
                            lngMaxHP = lngMaxHP + Data.HP + 40000;
                            break;
                        }

                    case 5:
                        {
                            lngMaxHP = lngMaxHP + Data.HP + 80000;
                            break;
                        }
                }

                if (BossRank > 0)
                {
                    lngArmor = lngArmor + 200 * BossRank;
                }
            }
            else
            {
                switch (BossRank)
                {
                    case 1:
                        {
                            lngMaxHP = (lngMaxHP + 0.5d * Data.HP);
                            break;
                        }

                    case 2:
                        {
                            lngMaxHP = lngMaxHP + Data.HP;
                            break;
                        }

                    case 3:
                        {
                            lngMaxHP = lngMaxHP + Data.HP + 10000;
                            break;
                        }

                    case 4:
                        {
                            lngMaxHP = lngMaxHP + Data.HP + 20000;
                            break;
                        }

                    case 5:
                        {
                            lngMaxHP = lngMaxHP + Data.HP + 40000;
                            break;
                        }
                }

                string argoname = "BossRank装甲修正低下";
                if (Expression.IsOptionDefined(argoname))
                {
                    if (BossRank > 0)
                    {
                        lngArmor = lngArmor + 300 * BossRank;
                    }
                }
                else
                {
                    switch (BossRank)
                    {
                        case 1:
                            {
                                lngArmor = lngArmor + 300;
                                break;
                            }

                        case 2:
                            {
                                lngArmor = lngArmor + 600;
                                break;
                            }

                        case 3:
                            {
                                lngArmor = lngArmor + 1000;
                                break;
                            }

                        case 4:
                            {
                                lngArmor = lngArmor + 1500;
                                break;
                            }

                        case 5:
                            {
                                lngArmor = lngArmor + 2500;
                                break;
                            }
                    }
                }
            }

            if (BossRank > 0)
            {
                intMaxEN = (intMaxEN + 20 * BossRank);
                intMobility = (intMobility + 5 * BossRank);
            }

            // ＨＰ成長オプション
            string argoname2 = "ＨＰ成長";
            if (Expression.IsOptionDefined(argoname2))
            {
                if (CountPilot() > 0)
                {
                    lngMaxHP = GeneralLib.MinLng((lngMaxHP / 100d * (100 + this.MainPilot().Level)), 9999999);
                }
            }

            // ＥＮ成長オプション
            string argoname3 = "ＥＮ成長";
            if (Expression.IsOptionDefined(argoname3))
            {
                if (CountPilot() > 0)
                {
                    intMaxEN = GeneralLib.MinLng((intMaxEN / 100d * (100 + this.MainPilot().Level)), 9999);
                }
            }

            // 特殊能力による修正
            if (CountPilot() > 0)
            {
                pmorale = MainPilot().Morale;
            }
            else
            {
                pmorale = 100;
            }

            foreach (FeatureData currentFd2 in colFeature)
            {
                fd = currentFd2;
                switch (fd.Name ?? "")
                {
                    // 固定値による強化
                    case "ＨＰ強化":
                        {
                            int localStrToLng() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng())
                            {
                                lngMaxHP = (lngMaxHP + 200d * fd.Level);
                            }

                            break;
                        }

                    case "ＥＮ強化":
                        {
                            int localStrToLng1() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng1())
                            {
                                intMaxEN = (intMaxEN + 10d * fd.Level);
                            }

                            break;
                        }

                    case "装甲強化":
                        {
                            int localStrToLng2() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng2())
                            {
                                lngArmor = (lngArmor + 100d * fd.Level);
                            }

                            break;
                        }

                    case "運動性強化":
                        {
                            int localStrToLng3() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng3())
                            {
                                intMobility = (intMobility + 5d * fd.Level);
                            }

                            break;
                        }

                    case "移動力強化":
                        {
                            int localStrToLng4() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng4())
                            {
                                intSpeed = (intSpeed + fd.Level);
                            }

                            break;
                        }
                    // 割合による強化
                    case "ＨＰ割合強化":
                        {
                            int localStrToLng5() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng5())
                            {
                                lngMaxHP = (lngMaxHP + (long)(Data.HP * fd.Level) / 20L);
                            }

                            break;
                        }

                    case "ＥＮ割合強化":
                        {
                            int localStrToLng6() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng6())
                            {
                                intMaxEN = (intMaxEN + (long)(Data.EN * fd.Level) / 20L);
                            }

                            break;
                        }

                    case "装甲割合強化":
                        {
                            int localStrToLng7() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng7())
                            {
                                lngArmor = (lngArmor + (long)(Data.Armor * fd.Level) / 20L);
                            }

                            break;
                        }

                    case "運動性割合強化":
                        {
                            int localStrToLng8() { string argexpr = GeneralLib.LIndex(fd.StrData, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (pmorale >= localStrToLng8())
                            {
                                intMobility = (intMobility + (long)(Data.Mobility * fd.Level) / 20L);
                            }

                            break;
                        }
                }
            }

            // アイテムによる修正
            foreach (Item currentItm2 in colItem)
            {
                itm = currentItm2;
                if (itm.Activated)
                {
                    lngMaxHP = lngMaxHP + itm.HP();
                    intMaxEN = (intMaxEN + itm.EN());
                    lngArmor = lngArmor + itm.Armor();
                    intMobility = (intMobility + itm.Mobility());
                    intSpeed = (intSpeed + itm.Speed());
                }
            }

            // 装備している「Ｖ－ＵＰ=ユニット」アイテムによる修正
            num = 0;
            object argIndex24 = "Ｖ－ＵＰ";
            if (IsConditionSatisfied(argIndex24))
            {
                object argIndex23 = "Ｖ－ＵＰ";
                switch (FeatureData(argIndex23) ?? "")
                {
                    case "全":
                    case "ユニット":
                        {
                            num = (num + 1);
                            break;
                        }
                }
            }

            foreach (Item currentItm3 in colItem)
            {
                itm = currentItm3;
                string argfname10 = "Ｖ－ＵＰ";
                if (itm.IsFeatureAvailable(argfname10))
                {
                    object argIndex25 = "Ｖ－ＵＰ";
                    switch (itm.FeatureData(argIndex25) ?? "")
                    {
                        case "全":
                        case "ユニット":
                            {
                                num = (num + 1);
                                break;
                            }
                    }
                }
            }

            if (CountPilot() > 0)
            {
                {
                    var withBlock8 = MainPilot().Data;
                    string argfname11 = "Ｖ－ＵＰ";
                    if (withBlock8.IsFeatureAvailable(argfname11))
                    {
                        object argIndex26 = "Ｖ－ＵＰ";
                        switch (withBlock8.FeatureData(argIndex26) ?? "")
                        {
                            case "全":
                            case "ユニット":
                                {
                                    num = (num + 1);
                                    break;
                                }
                        }
                    }
                }
            }

            if (num > 0)
            {
                {
                    var withBlock9 = Data;
                    lngMaxHP = lngMaxHP + 100 * num * (withBlock9.ItemNum + 1);
                    intMaxEN = (intMaxEN + 20 * num * withBlock9.ItemNum);
                    lngArmor = lngArmor + 50 * num * withBlock9.ItemNum;
                    intMobility = (intMobility + 5 * num * withBlock9.ItemNum);
                }
            }

            // 追加移動力
            string argfname12 = "追加移動力";
            if (IsFeatureAvailable(argfname12))
            {
                foreach (FeatureData currentFd3 in colFeature)
                {
                    fd = currentFd3;
                    if (fd.Name == "追加移動力")
                    {
                        if ((Area ?? "") == (GeneralLib.LIndex(fd.StrData, 2) ?? ""))
                        {
                            intSpeed = (intSpeed + fd.Level);
                        }
                    }
                }

                intSpeed = GeneralLib.MaxLng(intSpeed, 0);
            }

            // 上限値を超えないように
            lngMaxHP = GeneralLib.MinLng(lngMaxHP, 9999999);
            intMaxEN = GeneralLib.MinLng(intMaxEN, 9999);
            lngArmor = GeneralLib.MinLng(lngArmor, 99999);
            intMobility = GeneralLib.MinLng(intMobility, 9999);
            intSpeed = GeneralLib.MinLng(intSpeed, 99);

            // ＨＰ、ＥＮの最大値の変動に対応
            HP = (MaxHP * hp_ratio / 100d);
            EN = (MaxEN * en_ratio / 100d);

            // 切り下げの結果ＨＰが0になることを防ぐ
            if (hp_ratio > 0d)
            {
                if (HP == 0)
                {
                    HP = 1;
                }
            }

            // 地形適応
            for (i = 1; i <= 4; i++)
            {
                switch (Strings.Mid(Data.Adaption, i, 1) ?? "")
                {
                    case "S":
                        {
                            uadaption[i] = 5;
                            break;
                        }

                    case "A":
                        {
                            uadaption[i] = 4;
                            break;
                        }

                    case "B":
                        {
                            uadaption[i] = 3;
                            break;
                        }

                    case "C":
                        {
                            uadaption[i] = 2;
                            break;
                        }

                    case "D":
                        {
                            uadaption[i] = 1;
                            break;
                        }

                    case "E":
                    case "-":
                        {
                            uadaption[i] = 0;
                            break;
                        }
                }
            }

            // 移動タイプ追加による地形適応修正
            string argfname13 = "空中移動";
            if (IsFeatureAvailable(argfname13))
            {
                uadaption[1] = GeneralLib.MaxLng(uadaption[1], 4);
            }

            string argfname14 = "陸上移動";
            if (IsFeatureAvailable(argfname14))
            {
                uadaption[2] = GeneralLib.MaxLng(uadaption[2], 4);
            }

            string argfname15 = "水中移動";
            if (IsFeatureAvailable(argfname15))
            {
                uadaption[3] = GeneralLib.MaxLng(uadaption[3], 4);
            }

            string argfname16 = "宇宙移動";
            if (IsFeatureAvailable(argfname16))
            {
                uadaption[4] = GeneralLib.MaxLng(uadaption[4], 4);
            }

            // 地形適応変更能力による修正
            foreach (FeatureData currentFd4 in colFeature)
            {
                fd = currentFd4;
                switch (fd.Name ?? "")
                {
                    case "地形適応変更":
                        {
                            for (i = 1; i <= 4; i++)
                            {
                                string argexpr = GeneralLib.LIndex(fd.StrData, i);
                                num = GeneralLib.StrToLng(argexpr);
                                if (num > 0)
                                {
                                    if (uadaption[i] < 4)
                                    {
                                        uadaption[i] = (uadaption[i] + num);
                                        // 地形適応はAより高くはならない
                                        if (uadaption[i] > 4)
                                        {
                                            uadaption[i] = 4;
                                        }
                                    }
                                }
                                else
                                {
                                    uadaption[i] = (uadaption[i] + num);
                                }
                            }

                            break;
                        }

                    case "地形適応固定変更":
                        {
                            for (i = 1; i <= 4; i++)
                            {
                                string argexpr1 = GeneralLib.LIndex(fd.StrData, i);
                                num = GeneralLib.StrToLng(argexpr1);
                                if (GeneralLib.LIndex(fd.StrData, 5) == "強制")
                                {
                                    // 強制変更の場合
                                    if (num >= 0 & num <= 5)
                                    {
                                        uadaption[i] = num;
                                    }
                                }
                                // 高いほうを優先する場合
                                else if (num > uadaption[i] & num <= 5)
                                {
                                    uadaption[i] = num;
                                }
                            }

                            break;
                        }
                }
            }

            strAdaption = "";
            for (i = 1; i <= 4; i++)
            {
                switch (uadaption[i])
                {
                    case var @case when @case >= 5:
                        {
                            strAdaption = strAdaption + "S";
                            break;
                        }

                    case 4:
                        {
                            strAdaption = strAdaption + "A";
                            break;
                        }

                    case 3:
                        {
                            strAdaption = strAdaption + "B";
                            break;
                        }

                    case 2:
                        {
                            strAdaption = strAdaption + "C";
                            break;
                        }

                    case 1:
                        {
                            strAdaption = strAdaption + "D";
                            break;
                        }

                    case var case1 when case1 <= 0:
                        {
                            strAdaption = strAdaption + "-";
                            break;
                        }
                }
            }

            // 空中に留まることが出来るかチェック
            string argarea_name1 = "空";
            if (Status_Renamed == "出撃" & Area == "空中" & !IsTransAvailable(argarea_name1))
            {
                // 地上(水中)に戻す
                switch (Map.TerrainClass(x, y) ?? "")
                {
                    case "陸":
                    case "屋内":
                        {
                            Area = "地上";
                            break;
                        }

                    case "水":
                    case "深水":
                        {
                            string argarea_name = "水上";
                            if (IsTransAvailable(argarea_name))
                            {
                                Area = "水上";
                            }
                            else
                            {
                                Area = "水中";
                            }

                            break;
                        }
                }

                if (!without_refresh)
                {
                    if (!GUI.IsPictureVisible & !string.IsNullOrEmpty(Map.MapFileName))
                    {
                        var argu6 = this;
                        GUI.PaintUnitBitmap(argu6);
                    }
                }
            }

            // 攻撃への耐性を更新
            strAbsorb = "";
            strImmune = "";
            strResist = "";
            strWeakness = "";
            strEffective = "";
            strSpecialEffectImmune = "";
            // 特殊能力によって得られた耐性
            foreach (FeatureData currentFd5 in colFeature)
            {
                fd = currentFd5;
                switch (fd.Name ?? "")
                {
                    case "吸収":
                        {
                            strAbsorb = strAbsorb + fd.StrData;
                            break;
                        }

                    case "無効化":
                        {
                            strImmune = strImmune + fd.StrData;
                            break;
                        }

                    case "耐性":
                        {
                            strResist = strResist + fd.StrData;
                            break;
                        }

                    case "弱点":
                        {
                            strWeakness = strWeakness + fd.StrData;
                            break;
                        }

                    case "有効":
                        {
                            strEffective = strEffective + fd.StrData;
                            break;
                        }

                    case "特殊効果無効化":
                        {
                            strSpecialEffectImmune = strSpecialEffectImmune + fd.StrData;
                            break;
                        }
                }
            }
            // 弱点、有効付加属性攻撃による弱点、有効の付加
            var loopTo8 = CountCondition();
            for (i = 1; i <= loopTo8; i++)
            {
                object argIndex28 = i;
                if (ConditionLifetime(argIndex28) != 0)
                {
                    object argIndex27 = i;
                    ch = Condition(argIndex27);
                    switch (Strings.Right(ch, 6) ?? "")
                    {
                        case "属性弱点付加":
                            {
                                strWeakness = strWeakness + Strings.Left(ch, Strings.Len(ch) - 6);
                                break;
                            }

                        case "属性有効付加":
                            {
                                strEffective = strEffective + Strings.Left(ch, Strings.Len(ch) - 6);
                                break;
                            }
                    }
                }
            }
            // 属性のダブりをなくす
            buf = "";
            var loopTo9 = Strings.Len(strAbsorb);
            for (i = 1; i <= loopTo9; i++)
            {
                ch = GeneralLib.GetClassBundle(strAbsorb, i);
                if (GeneralLib.InStrNotNest(buf, ch) == 0)
                {
                    buf = buf + ch;
                }
            }

            strAbsorb = buf;
            buf = "";
            var loopTo10 = Strings.Len(strImmune);
            for (i = 1; i <= loopTo10; i++)
            {
                ch = GeneralLib.GetClassBundle(strImmune, i);
                if (GeneralLib.InStrNotNest(buf, ch) == 0)
                {
                    buf = buf + ch;
                }
            }

            strImmune = buf;
            buf = "";
            var loopTo11 = Strings.Len(strResist);
            for (i = 1; i <= loopTo11; i++)
            {
                ch = GeneralLib.GetClassBundle(strResist, i);
                if (GeneralLib.InStrNotNest(buf, ch) == 0)
                {
                    buf = buf + ch;
                }
            }

            strResist = buf;
            buf = "";
            var loopTo12 = Strings.Len(strWeakness);
            for (i = 1; i <= loopTo12; i++)
            {
                ch = GeneralLib.GetClassBundle(strWeakness, i);
                if (GeneralLib.InStrNotNest(buf, ch) == 0)
                {
                    buf = buf + ch;
                }
            }

            strWeakness = buf;
            buf = "";
            var loopTo13 = Strings.Len(strEffective);
            for (i = 1; i <= loopTo13; i++)
            {
                ch = GeneralLib.GetClassBundle(strEffective, i);
                if (GeneralLib.InStrNotNest(buf, ch) == 0)
                {
                    buf = buf + ch;
                }
            }

            strEffective = buf;
            buf = "";
            var loopTo14 = Strings.Len(strSpecialEffectImmune);
            for (i = 1; i <= loopTo14; i++)
            {
                ch = GeneralLib.GetClassBundle(strSpecialEffectImmune, i);
                if (GeneralLib.InStrNotNest(buf, ch) == 0)
                {
                    buf = buf + ch;
                }
            }

            strSpecialEffectImmune = buf;

            // 武器データを更新
            prev_wdata = new WeaponData[Information.UBound(WData) + 1];
            prev_wbullets = new double[Information.UBound(WData) + 1];
            var loopTo15 = Information.UBound(WData);
            for (i = 1; i <= loopTo15; i++)
            {
                prev_wdata[i] = WData[i];
                prev_wbullets[i] = dblBullet[i];
            }

            {
                var withBlock10 = Data;
                WData = new WeaponData[(withBlock10.CountWeapon() + 1)];
                var loopTo16 = withBlock10.CountWeapon();
                for (i = 1; i <= loopTo16; i++)
                {
                    object argIndex29 = i;
                    WData[i] = withBlock10.Weapon(argIndex29);
                }
            }

            if (CountPilot() > 0)
            {
                {
                    var withBlock11 = MainPilot().Data;
                    var loopTo17 = withBlock11.CountWeapon();
                    for (i = 1; i <= loopTo17; i++)
                    {
                        Array.Resize(WData, Information.UBound(WData) + 1 + 1);
                        object argIndex30 = i;
                        WData[Information.UBound(WData)] = withBlock11.Weapon(argIndex30);
                    }
                }

                var loopTo18 = CountPilot();
                for (i = 2; i <= loopTo18; i++)
                {
                    Pilot localPilot2() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    {
                        var withBlock12 = localPilot2().Data;
                        var loopTo19 = withBlock12.CountWeapon();
                        for (j = 1; j <= loopTo19; j++)
                        {
                            Array.Resize(WData, Information.UBound(WData) + 1 + 1);
                            object argIndex31 = j;
                            WData[Information.UBound(WData)] = withBlock12.Weapon(argIndex31);
                        }
                    }
                }

                var loopTo20 = CountSupport();
                for (i = 1; i <= loopTo20; i++)
                {
                    Pilot localSupport2() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    {
                        var withBlock13 = localSupport2().Data;
                        var loopTo21 = withBlock13.CountWeapon();
                        for (j = 1; j <= loopTo21; j++)
                        {
                            Array.Resize(WData, Information.UBound(WData) + 1 + 1);
                            object argIndex32 = j;
                            WData[Information.UBound(WData)] = withBlock13.Weapon(argIndex32);
                        }
                    }
                }

                string argfname17 = "追加サポート";
                if (IsFeatureAvailable(argfname17))
                {
                    {
                        var withBlock14 = AdditionalSupport().Data;
                        var loopTo22 = withBlock14.CountWeapon();
                        for (i = 1; i <= loopTo22; i++)
                        {
                            Array.Resize(WData, Information.UBound(WData) + 1 + 1);
                            object argIndex33 = i;
                            WData[Information.UBound(WData)] = withBlock14.Weapon(argIndex33);
                        }
                    }
                }
            }

            foreach (Item currentItm4 in colItem)
            {
                itm = currentItm4;
                if (itm.Activated)
                {
                    var loopTo23 = itm.CountWeapon();
                    for (i = 1; i <= loopTo23; i++)
                    {
                        Array.Resize(WData, Information.UBound(WData) + 1 + 1);
                        object argIndex34 = i;
                        WData[Information.UBound(WData)] = itm.Weapon(argIndex34);
                    }
                }
            }

            // 武器属性を更新
            strWeaponClass = new string[(CountWeapon() + 1)];
            var loopTo24 = CountWeapon();
            for (i = 1; i <= loopTo24; i++)
                strWeaponClass[i] = Weapon(i).Class_Renamed;
            string hidden_attr;
            bool skipped;
            string argfname18 = "攻撃属性";
            if (IsFeatureAvailable(argfname18))
            {
                var loopTo25 = CountWeapon();
                for (i = 1; i <= loopTo25; i++)
                {
                    {
                        var withBlock15 = Weapon(i);
                        wname = withBlock15.Name;
                        wnickname = WeaponNickname(i);
                        wnskill = withBlock15.NecessarySkill;
                    }

                    wclass = strWeaponClass[i];

                    // 非表示の属性がある場合は一旦抜き出す
                    string argstring22 = "|";
                    if (GeneralLib.InStrNotNest(wclass, argstring22) > 0)
                    {
                        string argstring2 = "|";
                        strWeaponClass[i] = Strings.Left(wclass, GeneralLib.InStrNotNest(wclass, argstring2) - 1);
                        string argstring21 = "|";
                        hidden_attr = Strings.Mid(wclass, GeneralLib.InStrNotNest(wclass, argstring21) + 1);
                    }
                    else
                    {
                        hidden_attr = "";
                    }

                    var loopTo26 = CountFeature();
                    for (j = 1; j <= loopTo26; j++)
                    {
                        object argIndex36 = j;
                        if (Feature(argIndex36) == "攻撃属性")
                        {
                            object argIndex35 = j;
                            fdata = FeatureData(argIndex35);

                            // 「"」を除去
                            if (Strings.Left(fdata, 1) == "\"")
                            {
                                fdata = Strings.Mid(fdata, 2, Strings.Len(fdata) - 2);
                            }

                            flen = GeneralLib.LLength(fdata);
                            if (flen == 1)
                            {
                                // 武器指定がない場合はすべての武器に属性を付加
                                flag = true;
                                k = 2;
                            }
                            else if (GeneralLib.LIndex(fdata, 1) == "非表示")
                            {
                                // 非表示指定がある場合 (武器指定がある場合を含む)
                                if (flen == 2)
                                {
                                    // 武器指定無し
                                    flag = true;
                                }
                                else
                                {
                                    // 武器指定あり
                                    flag = false;
                                }

                                k = 3;
                            }
                            else
                            {
                                // 武器指定がある場合
                                flag = false;
                                k = 2;
                            }

                            // 武器指定がある場合はそれぞれの指定をチェック
                            false_count = 0;
                            while (k <= flen)
                            {
                                wtype = GeneralLib.LIndex(fdata, k);
                                if (Strings.Left(wtype, 1) == "!")
                                {
                                    wtype = Strings.Mid(wtype, 2);
                                    with_not = true;
                                }
                                else
                                {
                                    with_not = false;
                                }

                                found = false;
                                switch (wtype ?? "")
                                {
                                    case "全":
                                        {
                                            found = true;
                                            break;
                                        }

                                    case "物":
                                        {
                                            string argstring23 = "魔";
                                            string argstring24 = "魔武";
                                            string argstring25 = "魔突";
                                            string argstring26 = "魔接";
                                            string argstring27 = "魔銃";
                                            string argstring28 = "魔実";
                                            if (GeneralLib.InStrNotNest(wclass, argstring23) == 0 | GeneralLib.InStrNotNest(wclass, argstring24) > 0 | GeneralLib.InStrNotNest(wclass, argstring25) > 0 | GeneralLib.InStrNotNest(wclass, argstring26) > 0 | GeneralLib.InStrNotNest(wclass, argstring27) > 0 | GeneralLib.InStrNotNest(wclass, argstring28) > 0)
                                            {
                                                found = true;
                                            }

                                            break;
                                        }

                                    default:
                                        {
                                            if (GeneralLib.InStrNotNest(wclass, wtype) > 0 | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                            {
                                                found = true;
                                            }
                                            else
                                            {
                                                var loopTo27 = GeneralLib.LLength(wnskill);
                                                for (l = 1; l <= loopTo27; l++)
                                                {
                                                    sname = GeneralLib.LIndex(wnskill, l);
                                                    if (Strings.InStr(sname, "Lv") > 0)
                                                    {
                                                        sname = Strings.Left(sname, Strings.InStr(sname, "Lv") - 1);
                                                    }

                                                    if ((sname ?? "") == (wtype ?? ""))
                                                    {
                                                        found = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            break;
                                        }
                                }

                                if (with_not)
                                {
                                    // !指定あり
                                    if (found)
                                    {
                                        // 条件を満たした場合は適用しない
                                        flag = false;
                                        false_count = (false_count + 1);
                                    }
                                }
                                else if (found)
                                {
                                    // !指定無しの条件を満たした
                                    flag = true;
                                }
                                else
                                {
                                    // !指定無しの条件を満たさず
                                    false_count = (false_count + 1);
                                }

                                k = (k + 1);
                            }

                            // 属性を追加
                            if (flag | false_count == 0)
                            {
                                buf = GeneralLib.LIndex(fdata, 1);
                                if (buf == "非表示")
                                {
                                    // 非表示の属性の場合
                                    hidden_attr = hidden_attr + GeneralLib.LIndex(fdata, 2);
                                }
                                else
                                {
                                    // 属性が重複しないように付加
                                    skipped = false;
                                    var loopTo28 = Strings.Len(buf);
                                    for (k = 1; k <= loopTo28; k++)
                                    {
                                        ch = GeneralLib.GetClassBundle(buf, k);
                                        if (!Information.IsNumeric(ch) & ch != "L" & ch != ".")
                                        {
                                            skipped = false;
                                        }

                                        if ((GeneralLib.InStrNotNest(strWeaponClass[i], ch) == 0 | Information.IsNumeric(ch) | ch == "L" | ch == ".") & !skipped)
                                        {
                                            if (ch == "魔")
                                            {
                                                // 魔属性を付加する場合は武器を魔法武器化する
                                                string argstring29 = "武";
                                                l = GeneralLib.InStrNotNest(strWeaponClass[i], argstring29);
                                                string argstring210 = "突";
                                                l = GeneralLib.MaxLng(GeneralLib.InStrNotNest(strWeaponClass[i], argstring210), l);
                                                string argstring211 = "接";
                                                l = GeneralLib.MaxLng(GeneralLib.InStrNotNest(strWeaponClass[i], argstring211), l);
                                                string argstring212 = "銃";
                                                l = GeneralLib.MaxLng(GeneralLib.InStrNotNest(strWeaponClass[i], argstring212), l);
                                                string argstring213 = "実";
                                                l = GeneralLib.MaxLng(GeneralLib.InStrNotNest(strWeaponClass[i], argstring213), l);
                                                if (l > 0)
                                                {
                                                    strWeaponClass[i] = Strings.Left(strWeaponClass[i], l - 1) + ch + Strings.Mid(strWeaponClass[i], l);
                                                }
                                                else
                                                {
                                                    strWeaponClass[i] = strWeaponClass[i] + ch;
                                                }
                                            }
                                            else
                                            {
                                                strWeaponClass[i] = strWeaponClass[i] + ch;
                                            }
                                        }
                                        else
                                        {
                                            skipped = true;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // 非表示の属性を追加
                    if (Strings.Len(hidden_attr) > 0)
                    {
                        strWeaponClass[i] = strWeaponClass[i] + "|" + hidden_attr;
                    }
                }
            }

            // 武器攻撃力を更新
            lngWeaponPower = new int[(CountWeapon() + 1)];

            // 装備している「Ｖ－ＵＰ=武器」アイテムの個数をカウントしておく
            num = 0;
            object argIndex38 = "Ｖ－ＵＰ";
            if (IsConditionSatisfied(argIndex38))
            {
                object argIndex37 = "Ｖ－ＵＰ";
                switch (FeatureData(argIndex37) ?? "")
                {
                    case "全":
                    case "武器":
                        {
                            num = (num + 1);
                            break;
                        }
                }
            }

            foreach (Item currentItm5 in colItem)
            {
                itm = currentItm5;
                if (itm.Activated)
                {
                    string argfname19 = "Ｖ－ＵＰ";
                    if (itm.IsFeatureAvailable(argfname19))
                    {
                        object argIndex39 = "Ｖ－ＵＰ";
                        switch (itm.FeatureData(argIndex39) ?? "")
                        {
                            case "全":
                            case "武器":
                                {
                                    num = (num + 1);
                                    break;
                                }
                        }
                    }
                }
            }

            if (CountPilot() > 0)
            {
                {
                    var withBlock16 = MainPilot().Data;
                    string argfname20 = "Ｖ－ＵＰ";
                    if (withBlock16.IsFeatureAvailable(argfname20))
                    {
                        object argIndex40 = "Ｖ－ＵＰ";
                        switch (withBlock16.FeatureData(argIndex40) ?? "")
                        {
                            case "全":
                            case "武器":
                                {
                                    num = (num + 1);
                                    break;
                                }
                        }
                    }
                }
            }

            num = (num * Data.ItemNum);
            var loopTo29 = CountWeapon();
            for (i = 1; i <= loopTo29; i++)
            {
                lngWeaponPower[i] = Weapon(i).Power;

                // もともと攻撃力が0の武器は0に固定
                if (lngWeaponPower[i] == 0)
                {
                    goto NextWeapon;
                }

                // 武器強化による修正
                string argfname21 = "武器強化";
                if (IsFeatureAvailable(argfname21))
                {
                    {
                        var withBlock17 = Weapon(i);
                        wname = withBlock17.Name;
                        wnickname = WeaponNickname(i);
                        wnskill = withBlock17.NecessarySkill;
                    }

                    wclass = strWeaponClass[i];
                    var loopTo30 = CountFeature();
                    for (j = 1; j <= loopTo30; j++)
                    {
                        object argIndex42 = j;
                        if (Feature(argIndex42) == "武器強化")
                        {
                            object argIndex41 = j;
                            fdata = FeatureData(argIndex41);

                            // 「"」を除去
                            if (Strings.Left(fdata, 1) == "\"")
                            {
                                fdata = Strings.Mid(fdata, 2, Strings.Len(fdata) - 2);
                            }

                            flen = GeneralLib.LLength(fdata);
                            flag = false;

                            // 武器指定がない場合はすべての武器を強化
                            if (flen == 0)
                            {
                                flag = true;
                            }

                            // 武器指定がある場合はそれぞれの指定をチェック
                            false_count = 0;
                            var loopTo31 = flen;
                            for (k = 1; k <= loopTo31; k++)
                            {
                                wtype = GeneralLib.LIndex(fdata, k);
                                if (Strings.Left(wtype, 1) == "!")
                                {
                                    wtype = Strings.Mid(wtype, 2);
                                    with_not = true;
                                }
                                else
                                {
                                    with_not = false;
                                }

                                found = false;
                                string argattr = "固";
                                if (IsWeaponClassifiedAs(i, argattr))
                                {
                                    // ダメージ固定武器は武器指定が武器名、武器表示名、「固」の
                                    // いずれかで行われた場合にのみ強化
                                    if (wtype == "固" | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                    {
                                        found = true;
                                    }
                                }
                                else
                                {
                                    switch (wtype ?? "")
                                    {
                                        case "全":
                                            {
                                                found = true;
                                                break;
                                            }

                                        case "物":
                                            {
                                                string argstring214 = "魔";
                                                string argstring215 = "魔武";
                                                string argstring216 = "魔突";
                                                string argstring217 = "魔接";
                                                string argstring218 = "魔銃";
                                                string argstring219 = "魔実";
                                                if (GeneralLib.InStrNotNest(wclass, argstring214) == 0 | GeneralLib.InStrNotNest(wclass, argstring215) > 0 | GeneralLib.InStrNotNest(wclass, argstring216) > 0 | GeneralLib.InStrNotNest(wclass, argstring217) > 0 | GeneralLib.InStrNotNest(wclass, argstring218) > 0 | GeneralLib.InStrNotNest(wclass, argstring219) > 0)
                                                {
                                                    found = true;
                                                }

                                                break;
                                            }

                                        default:
                                            {
                                                if (GeneralLib.InStrNotNest(wclass, wtype) > 0 | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                                {
                                                    found = true;
                                                }
                                                else
                                                {
                                                    // 必要技能による指定
                                                    var loopTo32 = GeneralLib.LLength(wnskill);
                                                    for (l = 1; l <= loopTo32; l++)
                                                    {
                                                        sname = GeneralLib.LIndex(wnskill, l);
                                                        if (Strings.InStr(sname, "Lv") > 0)
                                                        {
                                                            sname = Strings.Left(sname, Strings.InStr(sname, "Lv") - 1);
                                                        }

                                                        if ((sname ?? "") == (wtype ?? ""))
                                                        {
                                                            found = true;
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            }
                                    }
                                }

                                if (with_not)
                                {
                                    // !指定あり
                                    if (found)
                                    {
                                        // 条件を満たした場合は適用しない
                                        flag = false;
                                        false_count = (false_count + 1);
                                    }
                                }
                                else if (found)
                                {
                                    // !指定無しの条件を満たした
                                    flag = true;
                                }
                                else
                                {
                                    // !指定無しの条件を満たさず
                                    false_count = (false_count + 1);
                                }
                            }

                            if (flag | false_count == 0)
                            {
                                double localFeatureLevel() { object argIndex1 = j; var ret = FeatureLevel(argIndex1); return ret; }

                                lngWeaponPower[i] = (lngWeaponPower[i] + 100d * localFeatureLevel());
                            }
                        }
                    }
                }

                // ADD START MARGE
                // 武器割合強化による修正
                string argfname22 = "武器割合強化";
                if (IsFeatureAvailable(argfname22))
                {
                    {
                        var withBlock18 = Weapon(i);
                        wname = withBlock18.Name;
                        wnickname = WeaponNickname(i);
                        wnskill = withBlock18.NecessarySkill;
                    }

                    wclass = strWeaponClass[i];
                    var loopTo33 = CountFeature();
                    for (j = 1; j <= loopTo33; j++)
                    {
                        object argIndex44 = j;
                        if (Feature(argIndex44) == "武器割合強化")
                        {
                            object argIndex43 = j;
                            fdata = FeatureData(argIndex43);

                            // 「"」を除去
                            if (Strings.Left(fdata, 1) == "\"")
                            {
                                fdata = Strings.Mid(fdata, 2, Strings.Len(fdata) - 2);
                            }

                            flen = GeneralLib.LLength(fdata);
                            flag = false;

                            // 武器指定がない場合はすべての武器を強化
                            if (flen == 0)
                            {
                                flag = true;
                            }

                            // 武器指定がある場合はそれぞれの指定をチェック
                            false_count = 0;
                            var loopTo34 = flen;
                            for (k = 1; k <= loopTo34; k++)
                            {
                                wtype = GeneralLib.LIndex(fdata, k);
                                if (Strings.Left(wtype, 1) == "!")
                                {
                                    wtype = Strings.Mid(wtype, 2);
                                    with_not = true;
                                }
                                else
                                {
                                    with_not = false;
                                }

                                found = false;
                                string argattr1 = "固";
                                if (IsWeaponClassifiedAs(i, argattr1))
                                {
                                    // ダメージ固定武器は武器指定が武器名、武器表示名、「固」の
                                    // いずれかで行われた場合にのみ強化
                                    if (wtype == "固" | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                    {
                                        found = true;
                                    }
                                }
                                else
                                {
                                    switch (wtype ?? "")
                                    {
                                        case "全":
                                            {
                                                found = true;
                                                break;
                                            }

                                        case "物":
                                            {
                                                string argstring220 = "魔";
                                                string argstring221 = "魔武";
                                                string argstring222 = "魔突";
                                                string argstring223 = "魔接";
                                                string argstring224 = "魔銃";
                                                string argstring225 = "魔実";
                                                if (GeneralLib.InStrNotNest(wclass, argstring220) == 0 | GeneralLib.InStrNotNest(wclass, argstring221) > 0 | GeneralLib.InStrNotNest(wclass, argstring222) > 0 | GeneralLib.InStrNotNest(wclass, argstring223) > 0 | GeneralLib.InStrNotNest(wclass, argstring224) > 0 | GeneralLib.InStrNotNest(wclass, argstring225) > 0)
                                                {
                                                    found = true;
                                                }

                                                break;
                                            }

                                        default:
                                            {
                                                if (GeneralLib.InStrNotNest(wclass, wtype) > 0 | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                                {
                                                    found = true;
                                                }
                                                else
                                                {
                                                    // 必要技能による指定
                                                    var loopTo35 = GeneralLib.LLength(wnskill);
                                                    for (l = 1; l <= loopTo35; l++)
                                                    {
                                                        sname = GeneralLib.LIndex(wnskill, l);
                                                        if (Strings.InStr(sname, "Lv") > 0)
                                                        {
                                                            sname = Strings.Left(sname, Strings.InStr(sname, "Lv") - 1);
                                                        }

                                                        if ((sname ?? "") == (wtype ?? ""))
                                                        {
                                                            found = true;
                                                            break;
                                                        }
                                                    }
                                                }

                                                break;
                                            }
                                    }
                                }

                                if (with_not)
                                {
                                    // !指定あり
                                    if (found)
                                    {
                                        // 条件を満たした場合は適用しない
                                        flag = false;
                                        false_count = (false_count + 1);
                                    }
                                }
                                else if (found)
                                {
                                    // !指定無しの条件を満たした
                                    flag = true;
                                }
                                else
                                {
                                    // !指定無しの条件を満たさず
                                    false_count = (false_count + 1);
                                }
                            }

                            if (flag | false_count == 0)
                            {
                                double localFeatureLevel1() { object argIndex1 = j; var ret = FeatureLevel(argIndex1); return ret; }

                                lngWeaponPower[i] = (lngWeaponPower[i] + (long)(this.Weapon(i).Power * localFeatureLevel1()) / 20L);
                            }
                        }
                    }
                }
                // ADD END MARGE

                // ダメージ固定武器
                string argattr2 = "固";
                if (IsWeaponClassifiedAs(i, argattr2))
                {
                    goto NextWeapon;
                }

                string argattr29 = "Ｒ";
                string argattr30 = "改";
                if (IsWeaponClassifiedAs(i, argattr29))
                {
                    // 低成長型の攻撃
                    string argattr20 = "Ｒ";
                    if (IsWeaponLevelSpecified(i, argattr20))
                    {
                        // レベル設定されている場合、増加量をレベル×１０×ランクにする
                        string argattr3 = "Ｒ";
                        lngWeaponPower[i] = (lngWeaponPower[i] + 10d * WeaponLevel(i, argattr3) * (Rank + num));
                        // オ・シ・超と併用した場合
                        string argattr11 = "オ";
                        string argattr12 = "超";
                        string argattr13 = "シ";
                        if (IsWeaponClassifiedAs(i, argattr11) | IsWeaponClassifiedAs(i, argattr12) | IsWeaponClassifiedAs(i, argattr13))
                        {
                            string argattr4 = "Ｒ";
                            lngWeaponPower[i] = (lngWeaponPower[i] + 10d * (10d - WeaponLevel(i, argattr4)) * (Rank + num));

                            // オーラ技
                            string argattr6 = "オ";
                            if (IsWeaponClassifiedAs(i, argattr6))
                            {
                                string argattr5 = "Ｒ";
                                lngWeaponPower[i] = (lngWeaponPower[i] + 10d * WeaponLevel(i, argattr5) * AuraLevel());
                            }

                            // サイキック攻撃
                            string argattr8 = "超";
                            if (IsWeaponClassifiedAs(i, argattr8))
                            {
                                string argattr7 = "Ｒ";
                                lngWeaponPower[i] = (lngWeaponPower[i] + 10d * WeaponLevel(i, argattr7) * PsychicLevel());
                            }

                            // 同調率対象攻撃
                            string argattr10 = "シ";
                            if (IsWeaponClassifiedAs(i, argattr10))
                            {
                                if (CountPilot() > 0)
                                {
                                    if (MainPilot().SynchroRate() > 0)
                                    {
                                        string argattr9 = "Ｒ";
                                        lngWeaponPower[i] = (lngWeaponPower[i] + (long)(15d * WeaponLevel(i, argattr9) * (SyncLevel() - 50d)) / 10L);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        // レベル指定されていない場合は今までどおりランク×５０
                        lngWeaponPower[i] = lngWeaponPower[i] + 50 * (Rank + num);

                        // オ・シ・超と併用した場合
                        string argattr17 = "オ";
                        string argattr18 = "超";
                        string argattr19 = "シ";
                        if (IsWeaponClassifiedAs(i, argattr17) | IsWeaponClassifiedAs(i, argattr18) | IsWeaponClassifiedAs(i, argattr19))
                        {
                            lngWeaponPower[i] = lngWeaponPower[i] + 50 * (Rank + num);

                            // オーラ技
                            string argattr14 = "オ";
                            if (IsWeaponClassifiedAs(i, argattr14))
                            {
                                lngWeaponPower[i] = (lngWeaponPower[i] + 50d * AuraLevel());
                            }

                            // サイキック攻撃
                            string argattr15 = "超";
                            if (IsWeaponClassifiedAs(i, argattr15))
                            {
                                lngWeaponPower[i] = (lngWeaponPower[i] + 50d * PsychicLevel());
                            }

                            // 同調率対象攻撃
                            string argattr16 = "シ";
                            if (IsWeaponClassifiedAs(i, argattr16))
                            {
                                if (CountPilot() > 0)
                                {
                                    if (MainPilot().SynchroRate() > 0)
                                    {
                                        lngWeaponPower[i] = (lngWeaponPower[i] + (long)(15d * (SyncLevel() - 50d)) / 2L);
                                    }
                                }
                            }
                        }
                    }
                }
                else if (IsWeaponClassifiedAs(i, argattr30))
                {
                    // 改属性＝オ・超・シ属性を無視したＲ属性
                    string argattr25 = "改";
                    if (IsWeaponLevelSpecified(i, argattr25))
                    {
                        // レベル設定されている場合、増加量をレベル×１０×ランクにする
                        string argattr24 = "改";
                        lngWeaponPower[i] = (lngWeaponPower[i] + 10d * WeaponLevel(i, argattr24) * (Rank + num));
                    }
                    else
                    {
                        // レベル指定がない場合、増加量は５０×ランク
                        lngWeaponPower[i] = lngWeaponPower[i] + 50 * (Rank + num);
                    }

                    // オーラ技
                    string argattr26 = "オ";
                    if (IsWeaponClassifiedAs(i, argattr26))
                    {
                        lngWeaponPower[i] = (lngWeaponPower[i] + 100d * AuraLevel());
                    }

                    // サイキック攻撃
                    string argattr27 = "超";
                    if (IsWeaponClassifiedAs(i, argattr27))
                    {
                        lngWeaponPower[i] = (lngWeaponPower[i] + 100d * PsychicLevel());
                    }

                    // 同調率対象攻撃
                    string argattr28 = "シ";
                    if (IsWeaponClassifiedAs(i, argattr28))
                    {
                        if (CountPilot() > 0)
                        {
                            if (MainPilot().SynchroRate() > 0)
                            {
                                lngWeaponPower[i] = (lngWeaponPower[i] + 15d * (SyncLevel() - 50d));
                            }
                        }
                    }
                }
                else
                {
                    // Ｒ、改属性が両方ともない場合
                    lngWeaponPower[i] = lngWeaponPower[i] + 100 * (Rank + num);

                    // オーラ技
                    string argattr21 = "オ";
                    if (IsWeaponClassifiedAs(i, argattr21))
                    {
                        lngWeaponPower[i] = (lngWeaponPower[i] + 100d * AuraLevel());
                    }

                    // サイキック攻撃
                    string argattr22 = "超";
                    if (IsWeaponClassifiedAs(i, argattr22))
                    {
                        lngWeaponPower[i] = (lngWeaponPower[i] + 100d * PsychicLevel());
                    }

                    // 同調率対象攻撃
                    string argattr23 = "シ";
                    if (IsWeaponClassifiedAs(i, argattr23))
                    {
                        if (CountPilot() > 0)
                        {
                            if (MainPilot().SynchroRate() > 0)
                            {
                                lngWeaponPower[i] = (lngWeaponPower[i] + 15d * (SyncLevel() - 50d));
                            }
                        }
                    }
                }

                // ボスランクによる修正
                if (BossRank > 0)
                {
                    lngWeaponPower[i] = lngWeaponPower[i] + GeneralLib.MinLng(100 * BossRank, 300);
                }

                // 攻撃力の最高値は99999
                if (lngWeaponPower[i] > 99999)
                {
                    lngWeaponPower[i] = 99999;
                }

                // 最低値は1
                if (lngWeaponPower[i] <= 0)
                {
                    lngWeaponPower[i] = 1;
                }

                NextWeapon:
                ;
            }

            // 武器射程を更新
            intWeaponMaxRange = new int[(CountWeapon() + 1)];
            var loopTo36 = CountWeapon();
            for (i = 1; i <= loopTo36; i++)
            {
                intWeaponMaxRange[i] = Weapon(i).MaxRange;

                // 最大射程がもともと１ならそれ以上変化しない
                if (intWeaponMaxRange[i] == 1)
                {
                    goto NextWeapon2;
                }

                // 思念誘導攻撃のＮＴ能力による射程延長
                string argstring226 = "サ";
                if (GeneralLib.InStrNotNest(strWeaponClass[i], argstring226) > 0)
                {
                    if (CountPilot() > 0)
                    {
                        {
                            var withBlock19 = MainPilot();
                            object argIndex45 = "超感覚";
                            string argref_mode = "";
                            object argIndex46 = "知覚強化";
                            string argref_mode1 = "";
                            intWeaponMaxRange[i] = (intWeaponMaxRange[i] + (long)withBlock19.SkillLevel(argIndex45, ref_mode: argref_mode) / 4L + (long)withBlock19.SkillLevel(argIndex46, ref_mode: argref_mode1) / 4L);
                        }
                    }
                }

                // マップ攻撃には適用されない
                string argstring227 = "Ｍ";
                if (GeneralLib.InStrNotNest(strWeaponClass[i], argstring227) > 0)
                {
                    goto NextWeapon2;
                }

                // 接近戦武器には適用されない
                string argstring228 = "武";
                string argstring229 = "突";
                string argstring230 = "接";
                if (GeneralLib.InStrNotNest(strWeaponClass[i], argstring228) > 0 | GeneralLib.InStrNotNest(strWeaponClass[i], argstring229) > 0 | GeneralLib.InStrNotNest(strWeaponClass[i], argstring230) > 0)
                {
                    goto NextWeapon2;
                }

                // 有線式誘導攻撃には適用されない
                string argstring231 = "有";
                if (GeneralLib.InStrNotNest(strWeaponClass[i], argstring231) > 0)
                {
                    goto NextWeapon2;
                }

                // 射程延長による修正
                string argfname23 = "射程延長";
                if (IsFeatureAvailable(argfname23))
                {
                    {
                        var withBlock20 = Weapon(i);
                        wname = withBlock20.Name;
                        wnickname = WeaponNickname(i);
                        wnskill = withBlock20.NecessarySkill;
                    }

                    wclass = strWeaponClass[i];
                    var loopTo37 = CountFeature();
                    for (j = 1; j <= loopTo37; j++)
                    {
                        object argIndex48 = j;
                        if (Feature(argIndex48) == "射程延長")
                        {
                            object argIndex47 = j;
                            fdata = FeatureData(argIndex47);

                            // 「"」を除去
                            if (Strings.Left(fdata, 1) == "\"")
                            {
                                fdata = Strings.Mid(fdata, 2, Strings.Len(fdata) - 2);
                            }

                            flen = GeneralLib.LLength(fdata);
                            flag = false;

                            // 武器指定がない場合はすべての武器を強化
                            if (flen == 0)
                            {
                                flag = true;
                            }

                            // 武器指定がある場合はそれぞれの指定をチェック
                            false_count = 0;
                            var loopTo38 = flen;
                            for (k = 1; k <= loopTo38; k++)
                            {
                                wtype = GeneralLib.LIndex(fdata, k);
                                if (Strings.Left(wtype, 1) == "!")
                                {
                                    wtype = Strings.Mid(wtype, 2);
                                    with_not = true;
                                }
                                else
                                {
                                    with_not = false;
                                }

                                found = false;
                                switch (wtype ?? "")
                                {
                                    case "全":
                                        {
                                            found = true;
                                            break;
                                        }

                                    case "物":
                                        {
                                            string argstring232 = "魔";
                                            string argstring233 = "魔武";
                                            string argstring234 = "魔突";
                                            string argstring235 = "魔接";
                                            string argstring236 = "魔銃";
                                            string argstring237 = "魔実";
                                            if (GeneralLib.InStrNotNest(wclass, argstring232) == 0 | GeneralLib.InStrNotNest(wclass, argstring233) > 0 | GeneralLib.InStrNotNest(wclass, argstring234) > 0 | GeneralLib.InStrNotNest(wclass, argstring235) > 0 | GeneralLib.InStrNotNest(wclass, argstring236) > 0 | GeneralLib.InStrNotNest(wclass, argstring237) > 0)
                                            {
                                                found = true;
                                            }

                                            break;
                                        }

                                    default:
                                        {
                                            if (GeneralLib.InStrNotNest(wclass, wtype) > 0 | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                            {
                                                found = true;
                                            }
                                            else
                                            {
                                                var loopTo39 = GeneralLib.LLength(wnskill);
                                                for (l = 1; l <= loopTo39; l++)
                                                {
                                                    sname = GeneralLib.LIndex(wnskill, l);
                                                    if (Strings.InStr(sname, "Lv") > 0)
                                                    {
                                                        sname = Strings.Left(sname, Strings.InStr(sname, "Lv") - 1);
                                                    }

                                                    if ((sname ?? "") == (wtype ?? ""))
                                                    {
                                                        found = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            break;
                                        }
                                }

                                if (with_not)
                                {
                                    // !指定あり
                                    if (found)
                                    {
                                        // 条件を満たした場合は適用しない
                                        flag = false;
                                        false_count = (false_count + 1);
                                    }
                                }
                                else if (found)
                                {
                                    // !指定無しの条件を満たした
                                    flag = true;
                                }
                                else
                                {
                                    // !指定無しの条件を満たさず
                                    false_count = (false_count + 1);
                                }
                            }

                            if (flag | false_count == 0)
                            {
                                double localFeatureLevel2() { object argIndex1 = j; var ret = FeatureLevel(argIndex1); return ret; }

                                intWeaponMaxRange[i] = (intWeaponMaxRange[i] + localFeatureLevel2());
                            }
                        }
                    }
                }

                // 最低値は1
                if (intWeaponMaxRange[i] <= 0)
                {
                    intWeaponMaxRange[i] = 1;
                }

                NextWeapon2:
                ;
            }

            // 武器命中率を更新
            intWeaponPrecision = new int[(CountWeapon() + 1)];
            var loopTo40 = CountWeapon();
            for (i = 1; i <= loopTo40; i++)
            {
                intWeaponPrecision[i] = Weapon(i).Precision;

                // 武器強化による修正
                string argfname24 = "命中率強化";
                if (IsFeatureAvailable(argfname24))
                {
                    {
                        var withBlock21 = Weapon(i);
                        wname = withBlock21.Name;
                        wnickname = WeaponNickname(i);
                        wnskill = withBlock21.NecessarySkill;
                    }

                    wclass = strWeaponClass[i];
                    var loopTo41 = CountFeature();
                    for (j = 1; j <= loopTo41; j++)
                    {
                        object argIndex50 = j;
                        if (Feature(argIndex50) == "命中率強化")
                        {
                            object argIndex49 = j;
                            fdata = FeatureData(argIndex49);

                            // 「"」を除去
                            if (Strings.Left(fdata, 1) == "\"")
                            {
                                fdata = Strings.Mid(fdata, 2, Strings.Len(fdata) - 2);
                            }

                            flen = GeneralLib.LLength(fdata);
                            flag = false;

                            // 武器指定がない場合はすべての武器を強化
                            if (flen == 0)
                            {
                                flag = true;
                            }

                            // 武器指定がある場合はそれぞれの指定をチェック
                            false_count = 0;
                            var loopTo42 = flen;
                            for (k = 1; k <= loopTo42; k++)
                            {
                                wtype = GeneralLib.LIndex(fdata, k);
                                if (Strings.Left(wtype, 1) == "!")
                                {
                                    wtype = Strings.Mid(wtype, 2);
                                    with_not = true;
                                }
                                else
                                {
                                    with_not = false;
                                }

                                found = false;
                                switch (wtype ?? "")
                                {
                                    case "全":
                                        {
                                            found = true;
                                            break;
                                        }

                                    case "物":
                                        {
                                            string argstring238 = "魔";
                                            string argstring239 = "魔武";
                                            string argstring240 = "魔突";
                                            string argstring241 = "魔接";
                                            string argstring242 = "魔銃";
                                            string argstring243 = "魔実";
                                            if (GeneralLib.InStrNotNest(wclass, argstring238) == 0 | GeneralLib.InStrNotNest(wclass, argstring239) > 0 | GeneralLib.InStrNotNest(wclass, argstring240) > 0 | GeneralLib.InStrNotNest(wclass, argstring241) > 0 | GeneralLib.InStrNotNest(wclass, argstring242) > 0 | GeneralLib.InStrNotNest(wclass, argstring243) > 0)
                                            {
                                                found = true;
                                            }

                                            break;
                                        }

                                    default:
                                        {
                                            if (GeneralLib.InStrNotNest(wclass, wtype) > 0 | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                            {
                                                found = true;
                                            }
                                            else
                                            {
                                                var loopTo43 = GeneralLib.LLength(wnskill);
                                                for (l = 1; l <= loopTo43; l++)
                                                {
                                                    sname = GeneralLib.LIndex(wnskill, l);
                                                    if (Strings.InStr(sname, "Lv") > 0)
                                                    {
                                                        sname = Strings.Left(sname, Strings.InStr(sname, "Lv") - 1);
                                                    }

                                                    if ((sname ?? "") == (wtype ?? ""))
                                                    {
                                                        found = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            break;
                                        }
                                }

                                if (with_not)
                                {
                                    // !指定あり
                                    if (found)
                                    {
                                        // 条件を満たした場合は適用しない
                                        flag = false;
                                        false_count = (false_count + 1);
                                    }
                                }
                                else if (found)
                                {
                                    // !指定無しの条件を満たした
                                    flag = true;
                                }
                                else
                                {
                                    // !指定無しの条件を満たさず
                                    false_count = (false_count + 1);
                                }
                            }

                            if (flag | false_count == 0)
                            {
                                double localFeatureLevel3() { object argIndex1 = j; var ret = FeatureLevel(argIndex1); return ret; }

                                intWeaponPrecision[i] = (intWeaponPrecision[i] + 5d * localFeatureLevel3());
                            }
                        }
                    }
                }
            }

            // 武器のＣＴ率を更新
            intWeaponCritical = new int[(CountWeapon() + 1)];
            var loopTo44 = CountWeapon();
            for (i = 1; i <= loopTo44; i++)
            {
                intWeaponCritical[i] = Weapon(i).Critical;

                // ＣＴ率強化による修正
                string argfname25 = "ＣＴ率強化";
                if (IsFeatureAvailable(argfname25) & IsNormalWeapon(i))
                {
                    {
                        var withBlock22 = Weapon(i);
                        wname = withBlock22.Name;
                        wnickname = WeaponNickname(i);
                        wnskill = withBlock22.NecessarySkill;
                    }

                    wclass = strWeaponClass[i];
                    var loopTo45 = CountFeature();
                    for (j = 1; j <= loopTo45; j++)
                    {
                        object argIndex52 = j;
                        if (Feature(argIndex52) == "ＣＴ率強化")
                        {
                            object argIndex51 = j;
                            fdata = FeatureData(argIndex51);

                            // 「"」を除去
                            if (Strings.Left(fdata, 1) == "\"")
                            {
                                fdata = Strings.Mid(fdata, 2, Strings.Len(fdata) - 2);
                            }

                            flen = GeneralLib.LLength(fdata);
                            flag = false;

                            // 武器指定がない場合はすべての武器を強化
                            if (flen == 0)
                            {
                                flag = true;
                            }

                            // 武器指定がある場合はそれぞれの指定をチェック
                            false_count = 0;
                            var loopTo46 = flen;
                            for (k = 1; k <= loopTo46; k++)
                            {
                                wtype = GeneralLib.LIndex(fdata, k);
                                if (Strings.Left(wtype, 1) == "!")
                                {
                                    wtype = Strings.Mid(wtype, 2);
                                    with_not = true;
                                }
                                else
                                {
                                    with_not = false;
                                }

                                found = false;
                                switch (wtype ?? "")
                                {
                                    case "全":
                                        {
                                            found = true;
                                            break;
                                        }

                                    case "物":
                                        {
                                            string argstring244 = "魔";
                                            string argstring245 = "魔武";
                                            string argstring246 = "魔突";
                                            string argstring247 = "魔接";
                                            string argstring248 = "魔銃";
                                            string argstring249 = "魔実";
                                            if (GeneralLib.InStrNotNest(wclass, argstring244) == 0 | GeneralLib.InStrNotNest(wclass, argstring245) > 0 | GeneralLib.InStrNotNest(wclass, argstring246) > 0 | GeneralLib.InStrNotNest(wclass, argstring247) > 0 | GeneralLib.InStrNotNest(wclass, argstring248) > 0 | GeneralLib.InStrNotNest(wclass, argstring249) > 0)
                                            {
                                                found = !with_not;
                                            }

                                            break;
                                        }

                                    default:
                                        {
                                            if (GeneralLib.InStrNotNest(wclass, wtype) > 0 | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                            {
                                                found = true;
                                            }
                                            else
                                            {
                                                var loopTo47 = GeneralLib.LLength(wnskill);
                                                for (l = 1; l <= loopTo47; l++)
                                                {
                                                    sname = GeneralLib.LIndex(wnskill, l);
                                                    if (Strings.InStr(sname, "Lv") > 0)
                                                    {
                                                        sname = Strings.Left(sname, Strings.InStr(sname, "Lv") - 1);
                                                    }

                                                    if ((sname ?? "") == (wtype ?? ""))
                                                    {
                                                        found = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            break;
                                        }
                                }

                                if (with_not)
                                {
                                    // !指定あり
                                    if (found)
                                    {
                                        // 条件を満たした場合は適用しない
                                        flag = false;
                                        false_count = (false_count + 1);
                                    }
                                }
                                else if (found)
                                {
                                    // !指定無しの条件を満たした
                                    flag = true;
                                }
                                else
                                {
                                    // !指定無しの条件を満たさず
                                    false_count = (false_count + 1);
                                }
                            }

                            if (flag | false_count == 0)
                            {
                                double localFeatureLevel4() { object argIndex1 = j; var ret = FeatureLevel(argIndex1); return ret; }

                                intWeaponCritical[i] = (intWeaponCritical[i] + 5d * localFeatureLevel4());
                            }
                        }
                    }
                }

                // 特殊効果発動率強化による修正
                string argfname26 = "特殊効果発動率強化";
                if (IsFeatureAvailable(argfname26) & !IsNormalWeapon(i))
                {
                    {
                        var withBlock23 = Weapon(i);
                        wname = withBlock23.Name;
                        wnickname = WeaponNickname(i);
                        wnskill = withBlock23.NecessarySkill;
                    }

                    wclass = strWeaponClass[i];
                    var loopTo48 = CountFeature();
                    for (j = 1; j <= loopTo48; j++)
                    {
                        object argIndex54 = j;
                        if (Feature(argIndex54) == "特殊効果発動率強化")
                        {
                            object argIndex53 = j;
                            fdata = FeatureData(argIndex53);

                            // 「"」を除去
                            if (Strings.Left(fdata, 1) == "\"")
                            {
                                fdata = Strings.Mid(fdata, 2, Strings.Len(fdata) - 2);
                            }

                            flen = GeneralLib.LLength(fdata);
                            flag = false;

                            // 武器指定がない場合はすべての武器を強化
                            if (flen == 0)
                            {
                                flag = true;
                            }

                            // 武器指定がある場合はそれぞれの指定をチェック
                            false_count = 0;
                            var loopTo49 = flen;
                            for (k = 1; k <= loopTo49; k++)
                            {
                                wtype = GeneralLib.LIndex(fdata, k);
                                if (Strings.Left(wtype, 1) == "!")
                                {
                                    wtype = Strings.Mid(wtype, 2);
                                    with_not = true;
                                }
                                else
                                {
                                    with_not = false;
                                }

                                found = false;
                                switch (wtype ?? "")
                                {
                                    case "全":
                                        {
                                            found = true;
                                            break;
                                        }

                                    case "物":
                                        {
                                            string argstring250 = "魔";
                                            string argstring251 = "魔武";
                                            string argstring252 = "魔突";
                                            string argstring253 = "魔接";
                                            string argstring254 = "魔銃";
                                            string argstring255 = "魔実";
                                            if (GeneralLib.InStrNotNest(wclass, argstring250) == 0 | GeneralLib.InStrNotNest(wclass, argstring251) > 0 | GeneralLib.InStrNotNest(wclass, argstring252) > 0 | GeneralLib.InStrNotNest(wclass, argstring253) > 0 | GeneralLib.InStrNotNest(wclass, argstring254) > 0 | GeneralLib.InStrNotNest(wclass, argstring255) > 0)
                                            {
                                                found = true;
                                            }

                                            break;
                                        }

                                    default:
                                        {
                                            if (GeneralLib.InStrNotNest(wclass, wtype) > 0 | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                            {
                                                found = true;
                                            }
                                            else
                                            {
                                                var loopTo50 = GeneralLib.LLength(wnskill);
                                                for (l = 1; l <= loopTo50; l++)
                                                {
                                                    buf = GeneralLib.LIndex(wnskill, l);
                                                    if (Strings.InStr(buf, "Lv") > 0)
                                                    {
                                                        buf = Strings.Left(buf, Strings.InStr(buf, "Lv") - 1);
                                                    }

                                                    if ((buf ?? "") == (wtype ?? ""))
                                                    {
                                                        found = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            break;
                                        }
                                }

                                if (with_not)
                                {
                                    // !指定あり
                                    if (found)
                                    {
                                        // 条件を満たした場合は適用しない
                                        flag = false;
                                        false_count = (false_count + 1);
                                    }
                                }
                                else if (found)
                                {
                                    // !指定無しの条件を満たした
                                    flag = true;
                                }
                                else
                                {
                                    // !指定無しの条件を満たさず
                                    false_count = (false_count + 1);
                                }
                            }

                            if (flag | false_count == 0)
                            {
                                double localFeatureLevel5() { object argIndex1 = j; var ret = FeatureLevel(argIndex1); return ret; }

                                intWeaponCritical[i] = (intWeaponCritical[i] + 5d * localFeatureLevel5());
                            }
                        }
                    }
                }
            }

            // 最大弾数を更新
            intMaxBullet = new int[(CountWeapon() + 1)];
            // UPGRADE_NOTE: rate は rate_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
            double rate_Renamed;
            var loopTo51 = CountWeapon();
            for (i = 1; i <= loopTo51; i++)
            {
                intMaxBullet[i] = Weapon(i).Bullet;

                // 最大弾数の増加率
                rate_Renamed = 0d;

                // ボスランクによる修正
                if (intBossRank > 0)
                {
                    rate_Renamed = 0.2d * BossRank;
                }

                // 最大弾数増加による修正
                string argfname27 = "最大弾数増加";
                if (IsFeatureAvailable(argfname27))
                {
                    {
                        var withBlock24 = Weapon(i);
                        wname = withBlock24.Name;
                        wnickname = WeaponNickname(i);
                        wnskill = withBlock24.NecessarySkill;
                    }

                    wclass = strWeaponClass[i];
                    var loopTo52 = CountFeature();
                    for (j = 1; j <= loopTo52; j++)
                    {
                        object argIndex56 = j;
                        if (Feature(argIndex56) == "最大弾数増加")
                        {
                            object argIndex55 = j;
                            fdata = FeatureData(argIndex55);

                            // 「"」を除去
                            if (Strings.Left(fdata, 1) == "\"")
                            {
                                fdata = Strings.Mid(fdata, 2, Strings.Len(fdata) - 2);
                            }

                            flen = GeneralLib.LLength(fdata);
                            flag = false;

                            // 武器指定がない場合はすべての武器の弾数を増加
                            if (flen == 0)
                            {
                                flag = true;
                            }

                            // 武器指定がある場合はそれぞれの指定をチェック
                            false_count = 0;
                            var loopTo53 = flen;
                            for (k = 1; k <= loopTo53; k++)
                            {
                                wtype = GeneralLib.LIndex(fdata, k);
                                if (Strings.Left(wtype, 1) == "!")
                                {
                                    wtype = Strings.Mid(wtype, 2);
                                    with_not = true;
                                }
                                else
                                {
                                    with_not = false;
                                }

                                found = false;
                                switch (wtype ?? "")
                                {
                                    case "全":
                                        {
                                            found = true;
                                            break;
                                        }

                                    case "物":
                                        {
                                            string argstring256 = "魔";
                                            string argstring257 = "魔武";
                                            string argstring258 = "魔突";
                                            string argstring259 = "魔接";
                                            string argstring260 = "魔銃";
                                            string argstring261 = "魔実";
                                            if (GeneralLib.InStrNotNest(wclass, argstring256) == 0 | GeneralLib.InStrNotNest(wclass, argstring257) > 0 | GeneralLib.InStrNotNest(wclass, argstring258) > 0 | GeneralLib.InStrNotNest(wclass, argstring259) > 0 | GeneralLib.InStrNotNest(wclass, argstring260) > 0 | GeneralLib.InStrNotNest(wclass, argstring261) > 0)
                                            {
                                                found = true;
                                            }

                                            break;
                                        }

                                    default:
                                        {
                                            if (GeneralLib.InStrNotNest(wclass, wtype) > 0 | (wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                                            {
                                                found = true;
                                            }
                                            else
                                            {
                                                var loopTo54 = GeneralLib.LLength(wnskill);
                                                for (l = 1; l <= loopTo54; l++)
                                                {
                                                    sname = GeneralLib.LIndex(wnskill, l);
                                                    if (Strings.InStr(sname, "Lv") > 0)
                                                    {
                                                        sname = Strings.Left(sname, Strings.InStr(sname, "Lv") - 1);
                                                    }

                                                    if ((sname ?? "") == (wtype ?? ""))
                                                    {
                                                        found = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            break;
                                        }
                                }

                                if (with_not)
                                {
                                    // !指定あり
                                    if (found)
                                    {
                                        // 条件を満たした場合は適用しない
                                        flag = false;
                                        false_count = (false_count + 1);
                                    }
                                }
                                else if (found)
                                {
                                    // !指定無しの条件を満たした
                                    flag = true;
                                }
                                else
                                {
                                    // !指定無しの条件を満たさず
                                    false_count = (false_count + 1);
                                }
                            }

                            if (flag | false_count == 0)
                            {
                                double localFeatureLevel6() { object argIndex1 = j; var ret = FeatureLevel(argIndex1); return ret; }

                                rate_Renamed = rate_Renamed + 0.5d * localFeatureLevel6();
                            }
                        }
                    }
                }

                // 増加率に合わせて弾数を修正
                intMaxBullet[i] = ((1d + rate_Renamed) * intMaxBullet[i]);

                // 最大値は99
                if (intMaxBullet[i] > 99)
                {
                    intMaxBullet[i] = 99;
                }
                // 最低値は0
                if (intMaxBullet[i] < 0)
                {
                    intMaxBullet[i] = 0;
                }
            }

            // 弾数を更新
            Array.Resize(dblBullet, CountWeapon() + 1);
            flags = new bool[Information.UBound(prev_wdata) + 1];
            var loopTo55 = CountWeapon();
            for (i = 1; i <= loopTo55; i++)
            {
                dblBullet[i] = 1d;
                var loopTo56 = Information.UBound(prev_wdata);
                for (j = 1; j <= loopTo56; j++)
                {
                    if (ReferenceEquals(WData[i], prev_wdata[j]) & !flags[j])
                    {
                        dblBullet[i] = prev_wbullets[j];
                        flags[j] = true;
                        break;
                    }
                }
            }

            // アビリティデータを更新
            prev_adata = new AbilityData[Information.UBound(adata) + 1];
            prev_astocks = new double[Information.UBound(adata) + 1];
            var loopTo57 = Information.UBound(adata);
            for (i = 1; i <= loopTo57; i++)
            {
                prev_adata[i] = adata[i];
                prev_astocks[i] = dblStock[i];
            }

            {
                var withBlock25 = Data;
                adata = new AbilityData[(withBlock25.CountAbility() + 1)];
                var loopTo58 = withBlock25.CountAbility();
                for (i = 1; i <= loopTo58; i++)
                {
                    object argIndex57 = i;
                    adata[i] = withBlock25.Ability(argIndex57);
                }
            }

            if (CountPilot() > 0)
            {
                {
                    var withBlock26 = MainPilot().Data;
                    var loopTo59 = withBlock26.CountAbility();
                    for (i = 1; i <= loopTo59; i++)
                    {
                        Array.Resize(adata, Information.UBound(adata) + 1 + 1);
                        object argIndex58 = i;
                        adata[Information.UBound(adata)] = withBlock26.Ability(argIndex58);
                    }
                }

                var loopTo60 = CountPilot();
                for (i = 2; i <= loopTo60; i++)
                {
                    Pilot localPilot3() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    {
                        var withBlock27 = localPilot3().Data;
                        var loopTo61 = withBlock27.CountAbility();
                        for (j = 1; j <= loopTo61; j++)
                        {
                            Array.Resize(adata, Information.UBound(adata) + 1 + 1);
                            object argIndex59 = j;
                            adata[Information.UBound(adata)] = withBlock27.Ability(argIndex59);
                        }
                    }
                }

                var loopTo62 = CountSupport();
                for (i = 1; i <= loopTo62; i++)
                {
                    Pilot localSupport3() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    {
                        var withBlock28 = localSupport3().Data;
                        var loopTo63 = withBlock28.CountAbility();
                        for (j = 1; j <= loopTo63; j++)
                        {
                            Array.Resize(adata, Information.UBound(adata) + 1 + 1);
                            object argIndex60 = j;
                            adata[Information.UBound(adata)] = withBlock28.Ability(argIndex60);
                        }
                    }
                }

                string argfname28 = "追加サポート";
                if (IsFeatureAvailable(argfname28))
                {
                    {
                        var withBlock29 = AdditionalSupport().Data;
                        var loopTo64 = withBlock29.CountAbility();
                        for (i = 1; i <= loopTo64; i++)
                        {
                            Array.Resize(adata, Information.UBound(adata) + 1 + 1);
                            object argIndex61 = i;
                            adata[Information.UBound(adata)] = withBlock29.Ability(argIndex61);
                        }
                    }
                }
            }

            foreach (Item currentItm6 in colItem)
            {
                itm = currentItm6;
                if (itm.Activated)
                {
                    var loopTo65 = itm.CountAbility();
                    for (i = 1; i <= loopTo65; i++)
                    {
                        Array.Resize(adata, Information.UBound(adata) + 1 + 1);
                        object argIndex62 = i;
                        adata[Information.UBound(adata)] = itm.Ability(argIndex62);
                    }
                }
            }

            // 使用回数を更新
            Array.Resize(dblStock, CountAbility() + 1);
            flags = new bool[Information.UBound(prev_adata) + 1];
            var loopTo66 = CountAbility();
            for (i = 1; i <= loopTo66; i++)
            {
                dblStock[i] = 1d;
                var loopTo67 = Information.UBound(prev_adata);
                for (j = 1; j <= loopTo67; j++)
                {
                    if (ReferenceEquals(adata[i], prev_adata[j]) & !flags[j])
                    {
                        dblStock[i] = prev_astocks[j];
                        flags[j] = true;
                        break;
                    }
                }
            }

            if (Status_Renamed != "出撃")
            {
                return;
            }

            // 制御不能？
            string argfname29 = "制御不可";
            if (IsFeatureAvailable(argfname29))
            {
                if (!is_uncontrollable)
                {
                    string argcname5 = "暴走";
                    string argcdata = "";
                    AddCondition(argcname5, -1, cdata: argcdata);
                }
            }
            else if (is_uncontrollable)
            {
                object argIndex64 = "暴走";
                if (IsConditionSatisfied(argIndex64))
                {
                    object argIndex63 = "暴走";
                    DeleteCondition(argIndex63);
                }
            }

            // 不安定？
            string argfname30 = "不安定";
            if (IsFeatureAvailable(argfname30))
            {
                if (!is_stable)
                {
                    if (HP <= MaxHP / 4)
                    {
                        string argcname6 = "暴走";
                        string argcdata1 = "";
                        AddCondition(argcname6, -1, cdata: argcdata1);
                    }
                }
            }
            else if (is_stable)
            {
                object argIndex66 = "暴走";
                if (IsConditionSatisfied(argIndex66))
                {
                    object argIndex65 = "暴走";
                    DeleteCondition(argIndex65);
                }
            }
        }

        // 特殊能力を登録
        private void AddFeatures(Collection fdc, bool is_item = false)
        {
            if (fdc is null)
            {
                return;
            }

            foreach (FeatureData fd in fdc)
            {
                // アイテムで指定された下記の能力はアイテムそのものの属性なので
                // ユニット側には追加しない
                if (is_item)
                {
                    switch (fd.Name ?? "")
                    {
                        case "必要技能":
                        case "不必要技能":
                        case "表示":
                        case "非表示":
                        case "呪い":
                            {
                                goto NextFeature;
                                break;
                            }
                    }
                }

                // 封印されている？
                bool localIsDisabled() { string argfname = GeneralLib.LIndex(fd.StrData, 1); var ret = IsDisabled(argfname); return ret; }

                if (IsDisabled(fd.Name) | localIsDisabled())
                {
                    goto NextFeature;
                }

                // 既にその能力が登録されている？
                if (!IsFeatureRegistered(fd.Name))
                {
                    colFeature.Add(fd, fd.Name);
                }
                else
                {
                    colFeature.Add(fd, fd.Name + ":" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(colFeature.Count));
                }

                NextFeature:
                ;
            }
        }

        // 特殊能力を登録済み？
        private bool IsFeatureRegistered(string fname)
        {
            bool IsFeatureRegisteredRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 107792


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colFeature[fname];
            IsFeatureRegisteredRet = true;
            return IsFeatureRegisteredRet;
            ErrorHandler:
            ;
            IsFeatureRegisteredRet = false;
        }

        // 特殊能力を登録済み？(必要条件を満たさない特殊能力を含む)
        private bool IsAllFeatureRegistered(string fname)
        {
            bool IsAllFeatureRegisteredRet = default;
            FeatureData fd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 108130


            Input:

                    On Error GoTo ErrorHandler

             */
            fd = (FeatureData)colAllFeature[fname];
            IsAllFeatureRegisteredRet = true;
            return IsAllFeatureRegisteredRet;
            ErrorHandler:
            ;
            IsAllFeatureRegisteredRet = false;
        }

        // 特殊能力が必要条件を満たしているかどうか判定し、満たしていない能力を削除する
        // fnameが指定された場合、指定された特殊能力に対してのみ必要技能を判定
        private void UpdateFeatures(string fname = "")
        {
            FeatureData fd;
            FeatureData[] farray;
            int i;
            bool found;
            if (!string.IsNullOrEmpty(fname))
            {
                // 必要技能＆条件を満たしてない特殊能力を削除。
                found = false;
                i = 1;
                {
                    var withBlock = colFeature;
                    while (i <= withBlock.Count)
                    {
                        // 必要技能を満たしている？
                        // UPGRADE_WARNING: オブジェクト colFeature.Item(i).Name の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                        if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(fname, withBlock[i].Name, false)))
                        {
                            // UPGRADE_WARNING: オブジェクト colFeature.Item().NecessaryCondition の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                            // UPGRADE_WARNING: オブジェクト colFeature.Item().NecessarySkill の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                            bool localIsNecessarySkillSatisfied() { string argnabilities = Conversions.ToString(withBlock[i].NecessarySkill); Pilot argp = null; var ret = IsNecessarySkillSatisfied(argnabilities, p: argp); return ret; }

                            bool localIsNecessarySkillSatisfied1() { string argnabilities = Conversions.ToString(withBlock[i].NecessaryCondition); Pilot argp = null; var ret = IsNecessarySkillSatisfied(argnabilities, p: argp); return ret; }

                            if (!localIsNecessarySkillSatisfied() | !localIsNecessarySkillSatisfied1())
                            {
                                // 必要技能＆条件を満たしていないので削除
                                withBlock.Remove(i);
                                found = true;
                            }
                            else
                            {
                                i = (i + 1);
                            }
                        }
                        else
                        {
                            i = (i + 1);
                        }
                    }
                }
            }
            else
            {
                // 必要技能を満たしてない特殊能力を削除。
                found = false;
                i = 1;
                {
                    var withBlock1 = colFeature;
                    while (i <= withBlock1.Count)
                    {
                        // 必要技能を満たしている？
                        // UPGRADE_WARNING: オブジェクト colFeature.Item().NecessarySkill の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                        bool localIsNecessarySkillSatisfied2() { string argnabilities = Conversions.ToString(withBlock1[i].NecessarySkill); Pilot argp = null; var ret = IsNecessarySkillSatisfied(argnabilities, p: argp); return ret; }

                        if (!localIsNecessarySkillSatisfied2())
                        {
                            // 必要技能を満たしていないので削除
                            withBlock1.Remove(i);
                            found = true;
                        }
                        else
                        {
                            i = (i + 1);
                        }
                    }
                }

                // 必要条件を適用する前の特殊能力を保存
                {
                    var withBlock2 = colAllFeature;
                    foreach (FeatureData currentFd in colAllFeature)
                    {
                        fd = currentFd;
                        withBlock2.Remove(1);
                    }

                    foreach (FeatureData currentFd1 in colFeature)
                    {
                        fd = currentFd1;
                        if (!IsAllFeatureRegistered(fd.Name))
                        {
                            withBlock2.Add(fd, fd.Name);
                        }
                        else
                        {
                            withBlock2.Add(fd, fd.Name + ":" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock2.Count + 1));
                        }
                    }
                }

                // 必要条件を満たしてない特殊能力を削除。
                i = 1;
                {
                    var withBlock3 = colFeature;
                    while (i <= withBlock3.Count)
                    {
                        // 必要条件を満たしている？
                        // UPGRADE_WARNING: オブジェクト colFeature.Item().NecessaryCondition の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                        bool localIsNecessarySkillSatisfied3() { string argnabilities = Conversions.ToString(withBlock3[i].NecessaryCondition); Pilot argp = null; var ret = IsNecessarySkillSatisfied(argnabilities, p: argp); return ret; }

                        if (!localIsNecessarySkillSatisfied3())
                        {
                            // 必要条件を満たしていないので削除
                            withBlock3.Remove(i);
                            found = true;
                        }
                        else
                        {
                            i = (i + 1);
                        }
                    }
                }
            }

            // 特殊能力が削除された場合、特殊能力の保持判定が正しく行われるように特殊能力を
            // 登録しなおす必要がある。
            if (found)
            {
                {
                    var withBlock4 = colFeature;
                    farray = new FeatureData[withBlock4.Count + 1];
                    var loopTo = withBlock4.Count;
                    for (i = 1; i <= loopTo; i++)
                        farray[i] = (FeatureData)withBlock4[i];
                    var loopTo1 = withBlock4.Count;
                    for (i = 1; i <= loopTo1; i++)
                        withBlock4.Remove(1);
                    var loopTo2 = Information.UBound(farray);
                    for (i = 1; i <= loopTo2; i++)
                    {
                        if (!IsFeatureRegistered(farray[i].Name))
                        {
                            withBlock4.Add(farray[i], farray[i].Name);
                        }
                        else
                        {
                            withBlock4.Add(farray[i], farray[i].Name + ":" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(i));
                        }
                    }
                }
            }
        }


        // === 他形態関連処理 ===

        // 他形態を登録
        public void AddOtherForm(Unit u)
        {
            colOtherForm.Add(u, u.ID);
        }

        // 他形態を削除
        public void DeleteOtherForm(object Index)
        {
            int i;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 112015


            Input:

                    On Error GoTo ErrorHandler

             */
            colOtherForm.Remove(Index);
            return;
            ErrorHandler:
            ;

            // 見つからなければユニット名称で検索
            var loopTo = colOtherForm.Count;
            for (i = 1; i <= loopTo; i++)
            {
                // UPGRADE_WARNING: オブジェクト colOtherForm(i).Name の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(colOtherForm[i].Name, Index, false)))
                {
                    colOtherForm.Remove(i);
                    return;
                }
            }
        }

        // 他形態の総数
        public int CountOtherForm()
        {
            int CountOtherFormRet = default;
            CountOtherFormRet = colOtherForm.Count;
            return CountOtherFormRet;
        }

        // 他形態
        public Unit OtherForm(object Index)
        {
            Unit OtherFormRet = default;
            Unit u;
            string uname;
            int i;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 112769


            Input:

                    On Error GoTo ErrorHandler

             */
            OtherFormRet = (Unit)colOtherForm[Index];
            return OtherFormRet;
            ErrorHandler:
            ;

            // 見つからなければユニット名称で検索
            // UPGRADE_WARNING: オブジェクト Index の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
            uname = Conversions.ToString(Index);
            foreach (Unit currentU in colOtherForm)
            {
                u = currentU;
                if ((u.Name ?? "") == (uname ?? ""))
                {
                    OtherFormRet = u;
                    return OtherFormRet;
                }
            }

            // 該当するユニットがなければ作成して追加
            object argIndex1 = uname;
            if (SRC.UDList.IsDefined(argIndex1))
            {
                u = new Unit();
                {
                    var withBlock = u;
                    UnitData localItem() { object argIndex1 = uname; var ret = SRC.UDList.Item(argIndex1); return ret; }

                    withBlock.Name = localItem().Name;
                    withBlock.Rank = Rank;
                    withBlock.BossRank = BossRank;
                    withBlock.Party = Party0;
                    withBlock.ID = SRC.UList.CreateID(uname);
                    withBlock.Status_Renamed = "他形態";
                    withBlock.x = x;
                    withBlock.y = y;
                    var loopTo = CountOtherForm();
                    for (i = 1; i <= loopTo; i++)
                    {
                        Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                        var argu = localOtherForm();
                        withBlock.AddOtherForm(argu);
                        Unit localOtherForm1() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                        localOtherForm1().AddOtherForm(u);
                    }

                    var argu1 = this;
                    withBlock.AddOtherForm(argu1);
                    AddOtherForm(u);
                }

                SRC.UList.Add2(u);
                OtherFormRet = u;
            }
            else
            {
                string argmsg = "ユニットデータ「" + uname + "」が見つかりません";
                GUI.ErrorMessage(argmsg);
            }
        }

        // 指定した他形態が登録されているか？
        public bool IsOtherFormDefined(string uname)
        {
            bool IsOtherFormDefinedRet = default;
            foreach (Unit u in colOtherForm)
            {
                if ((u.Name ?? "") == (uname ?? ""))
                {
                    IsOtherFormDefinedRet = true;
                    return IsOtherFormDefinedRet;
                }
            }

            IsOtherFormDefinedRet = false;
            return IsOtherFormDefinedRet;
        }

        // 不要な形態を削除
        public void DeleteTemporaryOtherForm()
        {
            string[] uarray;
            string fname, fdata;
            int k, i, j, n;

            // 必要な形態の一覧を作成
            n = 1;
            uarray = new string[2];
            uarray[1] = Name;
            var loopTo = CountFeature();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex1 = i;
                fname = Feature(argIndex1);
                switch (fname ?? "")
                {
                    case "変形":
                        {
                            object argIndex2 = fname;
                            fdata = FeatureData(argIndex2);
                            n = (n + GeneralLib.LLength(fdata) - 1);
                            Array.Resize(uarray, n + 1);
                            var loopTo1 = (GeneralLib.LLength(fdata) - 1);
                            for (j = 1; j <= loopTo1; j++)
                                uarray[n - j + 1] = GeneralLib.LIndex(fdata, (j + 1));
                            break;
                        }

                    case "換装":
                    case "他形態":
                        {
                            object argIndex3 = fname;
                            fdata = FeatureData(argIndex3);
                            n = (n + GeneralLib.LLength(fdata));
                            Array.Resize(uarray, n + 1);
                            var loopTo2 = GeneralLib.LLength(fdata);
                            for (j = 1; j <= loopTo2; j++)
                                uarray[n - j + 1] = GeneralLib.LIndex(fdata, j);
                            break;
                        }

                    case "ハイパーモード":
                    case "パーツ分離":
                    case "変形技":
                        {
                            object argIndex4 = fname;
                            fdata = FeatureData(argIndex4);
                            n = (n + 1);
                            Array.Resize(uarray, n + 1);
                            uarray[n] = GeneralLib.LIndex(fdata, 2);
                            break;
                        }

                    case "ノーマルモード":
                    case "パーツ合体":
                        {
                            object argIndex5 = fname;
                            fdata = FeatureData(argIndex5);
                            n = (n + 1);
                            Array.Resize(uarray, n + 1);
                            uarray[n] = GeneralLib.LIndex(fdata, 1);
                            break;
                        }
                }
            }

            // 他形態から必要ない形態へのリンクを削除
            var loopTo3 = CountOtherForm();
            for (i = 1; i <= loopTo3; i++)
            {
                object argIndex8 = i;
                {
                    var withBlock = OtherForm(argIndex8);
                    if (withBlock.Status_Renamed == "他形態")
                    {
                        j = 1;
                        while (j <= withBlock.CountOtherForm())
                        {
                            object argIndex6 = j;
                            {
                                var withBlock1 = withBlock.OtherForm(argIndex6);
                                var loopTo4 = n;
                                for (k = 1; k <= loopTo4; k++)
                                {
                                    if ((withBlock1.Name ?? "") == (uarray[k] ?? ""))
                                    {
                                        break;
                                    }
                                }
                            }

                            if (k > n)
                            {
                                object argIndex7 = j;
                                withBlock.DeleteOtherForm(argIndex7);
                            }
                            else
                            {
                                j = (j + 1);
                            }
                        }
                    }
                }
            }

            // 必要ない形態を破棄し、リンクを削除
            i = 1;
            while (i <= CountOtherForm())
            {
                object argIndex9 = i;
                {
                    var withBlock2 = OtherForm(argIndex9);
                    var loopTo5 = n;
                    for (j = 1; j <= loopTo5; j++)
                    {
                        if ((withBlock2.Name ?? "") == (uarray[j] ?? ""))
                        {
                            break;
                        }
                    }
                }

                if (j > n)
                {
                    Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                    localOtherForm().Status_Renamed = "破棄";
                    object argIndex10 = i;
                    DeleteOtherForm(argIndex10);
                }
                else
                {
                    i = (i + 1);
                }
            }
        }


        // === パイロット関連処理 ===

        // パイロットを追加
        public void AddPilot(Pilot p)
        {
            colPilot.Add(p, p.ID);
        }

        // パイロットを削除
        public void DeletePilot(object Index)
        {
            colPilot.Remove(Index);
        }

        // パイロットの入れ替え
        public void ReplacePilot(Pilot p, object Index)
        {
            int i;
            Pilot prev_p;
            Pilot[] pilot_list;
            p.Unit_Renamed = this;
            prev_p = (Pilot)colPilot[Index];
            pilot_list = new Pilot[colPilot.Count + 1];
            var loopTo = Information.UBound(pilot_list);
            for (i = 1; i <= loopTo; i++)
                pilot_list[i] = (Pilot)colPilot[i];
            var loopTo1 = Information.UBound(pilot_list);
            for (i = 1; i <= loopTo1; i++)
                colPilot.Remove(1);
            var loopTo2 = Information.UBound(pilot_list);
            for (i = 1; i <= loopTo2; i++)
            {
                if (ReferenceEquals(pilot_list[i], prev_p))
                {
                    colPilot.Add(p, p.ID);
                }
                else
                {
                    colPilot.Add(pilot_list[i], pilot_list[i].ID);
                }
            }
            // UPGRADE_NOTE: オブジェクト prev_p.Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            prev_p.Unit_Renamed = null;
            prev_p.Alive = false;
        }

        // 搭乗員数
        public int CountPilot()
        {
            int CountPilotRet = default;
            CountPilotRet = colPilot.Count;
            return CountPilotRet;
        }

        // パイロット
        public Pilot Pilot(object Index)
        {
            Pilot PilotRet = default;
            PilotRet = (Pilot)colPilot[Index];
            return PilotRet;
        }

        // メインパイロット
        // 各判定にはこのパイロットの能力を用いる
        public Pilot MainPilot(bool without_update = false)
        {
            Pilot MainPilotRet = default;
            string pname;
            Pilot p;
            int i;
            bool need_update;

            // パイロットが乗っていない？
            if (CountPilot() == 0)
            {
                string argfname = "追加パイロット";
                if (!IsFeatureAvailable(argfname))
                {
                    string argmsg = "ユニット「" + Name + "」にパイロットが乗っていません";
                    GUI.ErrorMessage(argmsg);
                    SRC.TerminateSRC();
                }
            }

            // 破棄された場合はメインパイロットの変更を行わない
            if (Status_Renamed == "破棄")
            {
                MainPilotRet = (Pilot)colPilot[1];
                return MainPilotRet;
            }

            // 能力コピー中は同じパイロットが複数のユニットのメインパイロットに使用されるのを防ぐため
            // 追加パイロットと暴走時パイロットを使用しない
            object argIndex1 = "能力コピー";
            if (IsConditionSatisfied(argIndex1))
            {
                MainPilotRet = (Pilot)colPilot[1];
                return MainPilotRet;
            }

            // 暴走時の特殊パイロット
            object argIndex12 = "暴走";
            if (IsConditionSatisfied(argIndex12))
            {
                string argfname1 = "暴走時パイロット";
                if (IsFeatureAvailable(argfname1))
                {
                    object argIndex2 = "暴走時パイロット";
                    pname = FeatureData(argIndex2);
                    object argIndex3 = pname;
                    if (SRC.PDList.IsDefined(argIndex3))
                    {
                        PilotData localItem() { object argIndex1 = pname; var ret = SRC.PDList.Item(argIndex1); return ret; }

                        pname = localItem().Name;
                    }
                    else
                    {
                        string argmsg1 = "暴走時パイロット「" + pname + "」のデータが定義されていません";
                        GUI.ErrorMessage(argmsg1);
                    }

                    object argIndex11 = pname;
                    if (SRC.PList.IsDefined(argIndex11))
                    {
                        // 既に暴走時パイロットが作成済み
                        object argIndex4 = pname;
                        MainPilotRet = SRC.PList.Item(argIndex4);
                        MainPilotRet.Unit_Renamed = this;
                        object argIndex5 = 1;
                        MainPilotRet.Morale = Pilot(argIndex5).Morale;
                        object argIndex6 = 1;
                        MainPilotRet.Level = Pilot(argIndex6).Level;
                        object argIndex7 = 1;
                        MainPilotRet.Exp = Pilot(argIndex7).Exp;
                        if (!without_update)
                        {
                            if (!ReferenceEquals(MainPilotRet.Unit_Renamed, this))
                            {
                                MainPilotRet.Unit_Renamed = this;
                                MainPilotRet.Update();
                                MainPilotRet.UpdateSupportMod();
                            }
                        }

                        return MainPilotRet;
                    }
                    else
                    {
                        // 暴走時パイロットが作成されていないので作成する
                        object argIndex8 = 1;
                        string argpparty = Party0;
                        string arggid = "";
                        MainPilotRet = SRC.PList.Add(pname, Pilot(argIndex8).Level, argpparty, gid: arggid);
                        this.Party0 = argpparty;
                        object argIndex9 = 1;
                        MainPilotRet.Morale = Pilot(argIndex9).Morale;
                        object argIndex10 = 1;
                        MainPilotRet.Exp = Pilot(argIndex10).Exp;
                        MainPilotRet.Unit_Renamed = this;
                        MainPilotRet.Update();
                        MainPilotRet.UpdateSupportMod();
                        return MainPilotRet;
                    }
                }
            }

            // 追加パイロットがいれば、それを使用
            string argfname2 = "追加パイロット";
            if (IsFeatureAvailable(argfname2))
            {
                object argIndex13 = "追加パイロット";
                pname = FeatureData(argIndex13);
                object argIndex14 = pname;
                if (SRC.PDList.IsDefined(argIndex14))
                {
                    PilotData localItem1() { object argIndex1 = pname; var ret = SRC.PDList.Item(argIndex1); return ret; }

                    pname = localItem1().Name;
                }
                else
                {
                    string argmsg2 = "追加パイロット「" + pname + "」のデータが定義されていません";
                    GUI.ErrorMessage(argmsg2);
                }

                // 登録済みのパイロットをまずチェック
                if (pltAdditionalPilot is object)
                {
                    if ((pltAdditionalPilot.Name ?? "") == (pname ?? ""))
                    {
                        MainPilotRet = pltAdditionalPilot;
                        {
                            var withBlock = pltAdditionalPilot;
                            if (withBlock.IsAdditionalPilot & !ReferenceEquals(withBlock.Unit_Renamed, this))
                            {
                                withBlock.Unit_Renamed = this;
                                withBlock.Party = Party0;
                                object argIndex15 = 1;
                                withBlock.Exp = Pilot(argIndex15).Exp;
                                if (withBlock.Personality != "機械")
                                {
                                    object argIndex16 = 1;
                                    withBlock.Morale = Pilot(argIndex16).Morale;
                                }

                                object argIndex18 = 1;
                                if (withBlock.Level != this.Pilot(argIndex18).Level)
                                {
                                    object argIndex17 = 1;
                                    withBlock.Level = Pilot(argIndex17).Level;
                                    withBlock.Update();
                                }
                            }
                        }

                        return MainPilotRet;
                    }
                }

                var loopTo = CountOtherForm();
                for (i = 1; i <= loopTo; i++)
                {
                    Unit localOtherForm2() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                    Unit localOtherForm3() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm3().pltAdditionalPilot is object)
                    {
                        Unit localOtherForm1() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                        {
                            var withBlock1 = localOtherForm1().pltAdditionalPilot;
                            if ((withBlock1.Name ?? "") == (pname ?? ""))
                            {
                                Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                                pltAdditionalPilot = localOtherForm().pltAdditionalPilot;
                                withBlock1.Party = Party0;
                                withBlock1.Unit_Renamed = this;
                                if (withBlock1.IsAdditionalPilot & !ReferenceEquals(withBlock1.Unit_Renamed, this))
                                {
                                    object argIndex19 = 1;
                                    withBlock1.Level = Pilot(argIndex19).Level;
                                    object argIndex20 = 1;
                                    withBlock1.Exp = Pilot(argIndex20).Exp;
                                    if (withBlock1.Personality != "機械")
                                    {
                                        object argIndex21 = 1;
                                        withBlock1.Morale = Pilot(argIndex21).Morale;
                                    }

                                    withBlock1.Update();
                                    withBlock1.UpdateSupportMod();
                                }

                                MainPilotRet = pltAdditionalPilot;
                                return MainPilotRet;
                            }
                        }
                    }
                }

                // 次に搭乗しているパイロットから検索
                if (CountPilot() > 0)
                {
                    // 単なるメインパイロットの交代として扱うため、IsAdditionalPilotのフラグは立てない
                    var loopTo1 = CountPilot();
                    for (i = 1; i <= loopTo1; i++)
                    {
                        Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                        if ((localPilot().Name ?? "") == (pname ?? ""))
                        {
                            object argIndex22 = i;
                            pltAdditionalPilot = Pilot(argIndex22);
                            MainPilotRet = pltAdditionalPilot;
                            return MainPilotRet;
                        }
                    }
                }

                // 既に作成されていればそれを使う
                // (ただし複数作成可能なパイロットで、他のユニットの追加パイロットとして登録済みの場合は除く)
                object argIndex27 = pname;
                if (SRC.PList.IsDefined(argIndex27))
                {
                    object argIndex23 = pname;
                    p = SRC.PList.Item(argIndex23);
                    if (!p.IsAdditionalPilot | Strings.InStr(pname, "(ザコ)") == 0 & Strings.InStr(pname, "(汎用)") == 0)
                    {
                        pltAdditionalPilot = p;
                        {
                            var withBlock2 = pltAdditionalPilot;
                            withBlock2.IsAdditionalPilot = true;
                            withBlock2.Party = Party0;
                            object argIndex24 = 1;
                            withBlock2.Level = Pilot(argIndex24).Level;
                            object argIndex25 = 1;
                            withBlock2.Exp = Pilot(argIndex25).Exp;
                            if (withBlock2.Personality != "機械")
                            {
                                object argIndex26 = 1;
                                withBlock2.Morale = Pilot(argIndex26).Morale;
                            }

                            if (!without_update)
                            {
                                if (!ReferenceEquals(withBlock2.Unit_Renamed, this))
                                {
                                    withBlock2.Unit_Renamed = this;
                                    withBlock2.Update();
                                    withBlock2.UpdateSupportMod();
                                }
                            }
                            else
                            {
                                withBlock2.Unit_Renamed = this;
                            }
                        }

                        MainPilotRet = pltAdditionalPilot;
                        return MainPilotRet;
                    }
                }

                // まだ作成されていないので作成する
                if (CountPilot() > 0)
                {
                    object argIndex28 = 1;
                    string argpparty1 = Party0;
                    string arggid1 = "";
                    pltAdditionalPilot = SRC.PList.Add(pname, Pilot(argIndex28).Level, argpparty1, gid: arggid1);
                    this.Party0 = argpparty1;
                    {
                        var withBlock3 = pltAdditionalPilot;
                        withBlock3.IsAdditionalPilot = true;
                        object argIndex29 = 1;
                        withBlock3.Exp = Pilot(argIndex29).Exp;
                        if (withBlock3.Personality != "機械")
                        {
                            object argIndex30 = 1;
                            withBlock3.Morale = Pilot(argIndex30).Morale;
                        }
                    }
                }
                else
                {
                    string argpparty2 = Party0;
                    string arggid2 = "";
                    pltAdditionalPilot = SRC.PList.Add(pname, 1, argpparty2, gid: arggid2);
                    this.Party0 = argpparty2;
                    pltAdditionalPilot.IsAdditionalPilot = true;
                }

                {
                    var withBlock4 = pltAdditionalPilot;
                    withBlock4.Unit_Renamed = this;
                    if (!without_update)
                    {
                        withBlock4.Update();
                        withBlock4.UpdateSupportMod();
                    }
                }

                MainPilotRet = pltAdditionalPilot;
                return MainPilotRet;
            }

            // そうでなければ第１パイロットを使用
            MainPilotRet = (Pilot)colPilot[1];
            return MainPilotRet;
        }


        // サポートパイロットを追加
        public void AddSupport(Pilot p)
        {
            colSupport.Add(p, p.Name);
        }

        // サポートパイロットを削除
        public void DeleteSupport(object Index)
        {
            colSupport.Remove(Index);
        }

        // サポートパイロットの入れ替え
        public void ReplaceSupport(Pilot p, object Index)
        {
            int i;
            Pilot prev_p;
            Pilot[] support_list;
            p.Unit_Renamed = this;
            prev_p = (Pilot)colSupport[Index];
            support_list = new Pilot[colSupport.Count + 1];
            var loopTo = Information.UBound(support_list);
            for (i = 1; i <= loopTo; i++)
                support_list[i] = (Pilot)colSupport[i];
            var loopTo1 = Information.UBound(support_list);
            for (i = 1; i <= loopTo1; i++)
                colSupport.Remove(1);
            var loopTo2 = Information.UBound(support_list);
            for (i = 1; i <= loopTo2; i++)
            {
                if ((support_list[i].ID ?? "") == (prev_p.ID ?? ""))
                {
                    colSupport.Add(p, p.ID);
                }
                else
                {
                    colSupport.Add(support_list[i], support_list[i].ID);
                }
            }
            // UPGRADE_NOTE: オブジェクト prev_p.Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            prev_p.Unit_Renamed = null;
            prev_p.Alive = false;
        }

        // 総サポートパイロット数
        public int CountSupport()
        {
            int CountSupportRet = default;
            CountSupportRet = colSupport.Count;
            return CountSupportRet;
        }

        // サポート
        public Pilot Support(object Index)
        {
            Pilot SupportRet = default;
            SupportRet = (Pilot)colSupport[Index];
            return SupportRet;
        }

        // 追加サポート
        public Pilot AdditionalSupport()
        {
            Pilot AdditionalSupportRet = default;
            string pname;
            Pilot p;
            int i;

            // 追加サポートパイロットの名称
            object argIndex1 = "追加サポート";
            pname = FeatureData(argIndex1);

            // 追加サポートが存在しない？
            if (string.IsNullOrEmpty(pname))
            {
                return AdditionalSupportRet;
            }

            // 他にパイロットが乗っていない場合は無効
            if (CountPilot() == 0)
            {
                return AdditionalSupportRet;
            }

            // 既に登録済みであるかチェック
            if (pltAdditionalSupport is object)
            {
                if ((pltAdditionalSupport.Name ?? "") == (pname ?? ""))
                {
                    AdditionalSupportRet = pltAdditionalSupport;
                    pltAdditionalSupport.Unit_Renamed = this;
                    return AdditionalSupportRet;
                }
            }

            var loopTo = CountOtherForm();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex2 = i;
                {
                    var withBlock = OtherForm(argIndex2);
                    if (withBlock.pltAdditionalSupport is object)
                    {
                        if ((withBlock.pltAdditionalSupport.Name ?? "") == (pname ?? ""))
                        {
                            withBlock.pltAdditionalSupport.Unit_Renamed = this;
                            AdditionalSupportRet = withBlock.pltAdditionalSupport;
                            return AdditionalSupportRet;
                        }
                    }
                }
            }

            // 既に作成されていればそれを使う
            // (ただし他のユニットの追加サポートとして登録済みの場合は除く)
            object argIndex7 = pname;
            if (SRC.PList.IsDefined(argIndex7))
            {
                object argIndex3 = pname;
                p = SRC.PList.Item(argIndex3);
                if (!p.IsAdditionalSupport | Strings.InStr(pname, "(ザコ)") == 0 & Strings.InStr(pname, "(汎用)") == 0)
                {
                    pltAdditionalSupport = p;
                    {
                        var withBlock1 = pltAdditionalSupport;
                        withBlock1.IsAdditionalSupport = true;
                        withBlock1.Party = Party0;
                        withBlock1.Unit_Renamed = this;
                        object argIndex4 = 1;
                        withBlock1.Level = Pilot(argIndex4).Level;
                        object argIndex5 = 1;
                        withBlock1.Exp = Pilot(argIndex5).Exp;
                        if (withBlock1.Personality != "機械")
                        {
                            object argIndex6 = 1;
                            withBlock1.Morale = Pilot(argIndex6).Morale;
                        }
                    }

                    AdditionalSupportRet = pltAdditionalSupport;
                    return AdditionalSupportRet;
                }
            }

            // まだ作成されていないので作成する
            bool localIsDefined() { object argIndex1 = pname; var ret = SRC.PDList.IsDefined(argIndex1); return ret; }

            if (!localIsDefined())
            {
                string argmsg = "追加サポート「" + pname + "」のデータが定義されていません";
                GUI.ErrorMessage(argmsg);
                return AdditionalSupportRet;
            }

            object argIndex8 = 1;
            string argpparty = Party0;
            string arggid = "";
            pltAdditionalSupport = SRC.PList.Add(pname, Pilot(argIndex8).Level, argpparty, gid: arggid);
            this.Party0 = argpparty;
            {
                var withBlock2 = pltAdditionalSupport;
                withBlock2.IsAdditionalSupport = true;
                withBlock2.Unit_Renamed = this;
                object argIndex9 = 1;
                withBlock2.Exp = Pilot(argIndex9).Exp;
                if (withBlock2.Personality != "機械")
                {
                    object argIndex10 = 1;
                    withBlock2.Morale = Pilot(argIndex10).Morale;
                }
            }

            AdditionalSupportRet = pltAdditionalSupport;
            return AdditionalSupportRet;
        }

        // いずれかのパイロットが特殊能力 sname を持っているか判定
        public bool IsSkillAvailable(string sname)
        {
            bool IsSkillAvailableRet = default;
            int i;
            if (CountPilot() == 0)
            {
                return IsSkillAvailableRet;
            }

            // メインパイロット
            if (MainPilot().IsSkillAvailable(sname))
            {
                IsSkillAvailableRet = true;
                return IsSkillAvailableRet;
            }

            // パイロット数が負の場合はメインパイロットの能力のみが有効
            if (Data.PilotNum > 0)
            {
                var loopTo = CountPilot();
                for (i = 2; i <= loopTo; i++)
                {
                    Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    if (localPilot().IsSkillAvailable(sname))
                    {
                        IsSkillAvailableRet = true;
                        return IsSkillAvailableRet;
                    }
                }
            }

            // サポート
            var loopTo1 = CountSupport();
            for (i = 1; i <= loopTo1; i++)
            {
                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                if (localSupport().IsSkillAvailable(sname))
                {
                    IsSkillAvailableRet = true;
                    return IsSkillAvailableRet;
                }
            }

            // 追加サポート
            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                if (AdditionalSupport().IsSkillAvailable(sname))
                {
                    IsSkillAvailableRet = true;
                    return IsSkillAvailableRet;
                }
            }

            IsSkillAvailableRet = false;
            return IsSkillAvailableRet;
        }

        // パイロット全員によるパイロット能力レベル
        public double SkillLevel(string sname, double default_slevel = 1d)
        {
            double SkillLevelRet = default;
            if (CountPilot() == 0)
            {
                return SkillLevelRet;
            }

            // エリアスが設定されてるかチェック
            object argIndex1 = sname;
            if (SRC.ALDList.IsDefined(argIndex1))
            {
                AliasDataType localItem() { object argIndex1 = sname; var ret = SRC.ALDList.Item(argIndex1); return ret; }

                sname = localItem().get_AliasType(1);
            }

            switch (sname ?? "")
            {
                case "同調率":
                    {
                        SkillLevelRet = SyncLevel();
                        break;
                    }

                case "霊力":
                    {
                        SkillLevelRet = PlanaLevel();
                        break;
                    }

                case "オーラ":
                    {
                        SkillLevelRet = AuraLevel();
                        break;
                    }

                case "超能力":
                    {
                        SkillLevelRet = PsychicLevel();
                        break;
                    }

                case "Ｓ防御":
                case "切り払い":
                    {
                        object argIndex2 = sname;
                        string argref_mode = 1.ToString();
                        SkillLevelRet = MainPilot().SkillLevel(argIndex2, argref_mode);
                        break;
                    }

                case "超感覚":
                    {
                        string argsname2 = "超感覚";
                        string argsname3 = "知覚強化";
                        if (MaxSkillLevel(argsname2, 1d) > MaxSkillLevel(argsname3, 1d))
                        {
                            string argsname = "超感覚";
                            SkillLevelRet = MaxSkillLevel(argsname, 1d);
                        }
                        else
                        {
                            string argsname1 = "知覚強化";
                            SkillLevelRet = MaxSkillLevel(argsname1, 1d);
                        }

                        break;
                    }

                default:
                    {
                        SkillLevelRet = MaxSkillLevel(sname, default_slevel);
                        break;
                    }
            }

            return SkillLevelRet;
        }

        // パイロット中での最も高いパイロット能力レベルを返す
        private double MaxSkillLevel(string sname, double default_slevel)
        {
            double MaxSkillLevelRet = default;
            double slevel;
            int i;
            if (CountPilot() == 0)
            {
                return MaxSkillLevelRet;
            }

            // メインパイロット
            {
                var withBlock = MainPilot();
                object argIndex2 = sname;
                if (withBlock.IsSkillLevelSpecified(argIndex2))
                {
                    object argIndex1 = sname;
                    string argref_mode = "";
                    MaxSkillLevelRet = withBlock.SkillLevel(argIndex1, ref_mode: argref_mode);
                }
                else if (withBlock.IsSkillAvailable(sname))
                {
                    MaxSkillLevelRet = default_slevel;
                }
                else
                {
                    MaxSkillLevelRet = 0d;
                }
            }

            // パイロット数が負の場合はメインパイロットの能力のみが有効
            if (Data.PilotNum > 0)
            {
                var loopTo = CountPilot();
                for (i = 2; i <= loopTo; i++)
                {
                    object argIndex5 = i;
                    {
                        var withBlock1 = Pilot(argIndex5);
                        object argIndex4 = sname;
                        if (withBlock1.IsSkillLevelSpecified(argIndex4))
                        {
                            object argIndex3 = sname;
                            string argref_mode1 = "";
                            slevel = withBlock1.SkillLevel(argIndex3, ref_mode: argref_mode1);
                        }
                        else if (withBlock1.IsSkillAvailable(sname))
                        {
                            slevel = default_slevel;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        if (slevel > MaxSkillLevelRet)
                        {
                            MaxSkillLevelRet = slevel;
                        }
                    }
                }
            }

            // サポート
            var loopTo1 = CountSupport();
            for (i = 1; i <= loopTo1; i++)
            {
                object argIndex8 = i;
                {
                    var withBlock2 = Support(argIndex8);
                    object argIndex7 = sname;
                    if (withBlock2.IsSkillLevelSpecified(argIndex7))
                    {
                        object argIndex6 = sname;
                        string argref_mode2 = "";
                        slevel = withBlock2.SkillLevel(argIndex6, ref_mode: argref_mode2);
                    }
                    else if (withBlock2.IsSkillAvailable(sname))
                    {
                        slevel = default_slevel;
                    }
                    else
                    {
                        slevel = 0d;
                    }

                    if (slevel > MaxSkillLevelRet)
                    {
                        MaxSkillLevelRet = slevel;
                    }
                }
            }

            // 追加サポート
            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                {
                    var withBlock3 = AdditionalSupport();
                    object argIndex10 = sname;
                    if (withBlock3.IsSkillLevelSpecified(argIndex10))
                    {
                        object argIndex9 = sname;
                        string argref_mode3 = "";
                        slevel = withBlock3.SkillLevel(argIndex9, ref_mode: argref_mode3);
                    }
                    else if (withBlock3.IsSkillAvailable(sname))
                    {
                        slevel = default_slevel;
                    }
                    else
                    {
                        slevel = 0d;
                    }

                    if (slevel > MaxSkillLevelRet)
                    {
                        MaxSkillLevelRet = slevel;
                    }
                }
            }

            return MaxSkillLevelRet;
        }

        // ユニットのオーラ力レベル
        public double AuraLevel(bool no_limit = false)
        {
            double AuraLevelRet = default;
            switch (CountPilot())
            {
                case 0:
                    {
                        return AuraLevelRet;
                    }

                case 1:
                    {
                        object argIndex1 = "オーラ";
                        string argref_mode = "";
                        AuraLevelRet = MainPilot().SkillLevel(argIndex1, ref_mode: argref_mode);
                        break;
                    }

                default:
                    {
                        // パイロットが２名以上の場合は２人目のオーラ力を加算
                        object argIndex2 = "オーラ";
                        string argref_mode1 = "";
                        object argIndex3 = 2;
                        object argIndex4 = "オーラ";
                        string argref_mode2 = "";
                        AuraLevelRet = MainPilot().SkillLevel(argIndex2, ref_mode: argref_mode1) + Pilot(argIndex3).SkillLevel(argIndex4, ref_mode: argref_mode2) / 2d;
                        break;
                    }
            }

            // サポートのオーラ力を加算
            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex5 = "オーラ";
                string argref_mode3 = "";
                AuraLevelRet = AuraLevelRet + AdditionalSupport().SkillLevel(argIndex5, ref_mode: argref_mode3) / 2d;
            }
            else if (CountSupport() > 0)
            {
                object argIndex6 = 1;
                object argIndex7 = "オーラ";
                string argref_mode4 = "";
                AuraLevelRet = AuraLevelRet + Support(argIndex6).SkillLevel(argIndex7, ref_mode: argref_mode4) / 2d;
            }

            // オーラ変換器レベルによる制限
            string argfname1 = "オーラ変換器";
            if (IsFeatureAvailable(argfname1) & !no_limit)
            {
                object argIndex9 = "オーラ変換器";
                if (IsFeatureLevelSpecified(argIndex9))
                {
                    object argIndex8 = "オーラ変換器";
                    AuraLevelRet = GeneralLib.MinDbl(AuraLevelRet, FeatureLevel(argIndex8));
                }
            }

            return AuraLevelRet;
        }

        // ユニットの超能力レベル
        public double PsychicLevel(bool no_limit = false)
        {
            double PsychicLevelRet = default;
            switch (CountPilot())
            {
                case 0:
                    {
                        return PsychicLevelRet;
                    }

                case 1:
                    {
                        object argIndex1 = "超能力";
                        string argref_mode = "";
                        PsychicLevelRet = MainPilot().SkillLevel(argIndex1, ref_mode: argref_mode);
                        break;
                    }

                default:
                    {
                        // パイロットが２名以上の場合は２人目の超能力を加算
                        object argIndex2 = "超能力";
                        string argref_mode1 = "";
                        object argIndex3 = 2;
                        object argIndex4 = "超能力";
                        string argref_mode2 = "";
                        PsychicLevelRet = MainPilot().SkillLevel(argIndex2, ref_mode: argref_mode1) + Pilot(argIndex3).SkillLevel(argIndex4, ref_mode: argref_mode2) / 2d;
                        break;
                    }
            }

            // サポートのオーラ力を加算
            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex5 = "超能力";
                string argref_mode3 = "";
                PsychicLevelRet = PsychicLevelRet + AdditionalSupport().SkillLevel(argIndex5, ref_mode: argref_mode3) / 2d;
            }
            else if (CountSupport() > 0)
            {
                // サポートの超能力を加算
                object argIndex6 = 1;
                object argIndex7 = "超能力";
                string argref_mode4 = "";
                PsychicLevelRet = PsychicLevelRet + Support(argIndex6).SkillLevel(argIndex7, ref_mode: argref_mode4) / 2d;
            }

            // サイキックドライブによる制限
            string argfname1 = "サイキックドライブ";
            if (IsFeatureAvailable(argfname1) & !no_limit)
            {
                object argIndex9 = "サイキックドライブ";
                if (IsFeatureLevelSpecified(argIndex9))
                {
                    object argIndex8 = "サイキックドライブ";
                    PsychicLevelRet = GeneralLib.MinDbl(PsychicLevelRet, FeatureLevel(argIndex8));
                }
            }

            return PsychicLevelRet;
        }

        // ユニットの同調率
        public double SyncLevel(bool no_limit = false)
        {
            double SyncLevelRet = default;
            if (CountPilot() == 0)
            {
                return SyncLevelRet;
            }

            SyncLevelRet = MainPilot().SynchroRate();

            // シンクロドライブレベルによる制限
            string argfname = "シンクロドライブ";
            if (IsFeatureAvailable(argfname) & !no_limit)
            {
                object argIndex2 = "シンクロドライブ";
                if (IsFeatureLevelSpecified(argIndex2))
                {
                    object argIndex1 = "シンクロドライブ";
                    SyncLevelRet = GeneralLib.MinDbl(SyncLevelRet, FeatureLevel(argIndex1));
                }
            }

            return SyncLevelRet;
        }

        // ユニットの霊力レベル
        public double PlanaLevel(bool no_limit = false)
        {
            double PlanaLevelRet = default;
            if (CountPilot() == 0)
            {
                return PlanaLevelRet;
            }

            PlanaLevelRet = MainPilot().Plana;

            // 霊力変換器レベルによる制限
            string argfname = "霊力変換器";
            if (IsFeatureAvailable(argfname) & !no_limit)
            {
                object argIndex2 = "霊力変換器";
                if (IsFeatureLevelSpecified(argIndex2))
                {
                    object argIndex1 = "霊力変換器";
                    PlanaLevelRet = GeneralLib.MinDbl(PlanaLevelRet, FeatureLevel(argIndex1));
                }
            }

            return PlanaLevelRet;
        }

        // パイロット全員からパイロット能力名を検索
        public string SkillName0(string sname)
        {
            string SkillName0Ret = default;
            int i;
            object argIndex1 = sname;
            if (SRC.ALDList.IsDefined(argIndex1))
            {
                AliasDataType localItem() { object argIndex1 = sname; var ret = SRC.ALDList.Item(argIndex1); return ret; }

                sname = localItem().get_AliasType(1);
            }

            if (CountPilot() == 0)
            {
                SkillName0Ret = sname;
                return SkillName0Ret;
            }

            // メインパイロット
            object argIndex2 = sname;
            SkillName0Ret = MainPilot().SkillName0(argIndex2);
            if ((SkillName0Ret ?? "") != (sname ?? ""))
            {
                return SkillName0Ret;
            }

            // パイロット数が負の場合はメインパイロットの能力のみが有効
            if (Data.PilotNum > 0)
            {
                var loopTo = CountPilot();
                for (i = 2; i <= loopTo; i++)
                {
                    Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    object argIndex3 = sname;
                    SkillName0Ret = localPilot().SkillName0(argIndex3);
                    if ((SkillName0Ret ?? "") != (sname ?? ""))
                    {
                        return SkillName0Ret;
                    }
                }
            }

            // サポート
            var loopTo1 = CountSupport();
            for (i = 1; i <= loopTo1; i++)
            {
                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                object argIndex4 = sname;
                SkillName0Ret = localSupport().SkillName0(argIndex4);
                if ((SkillName0Ret ?? "") != (sname ?? ""))
                {
                    return SkillName0Ret;
                }
            }

            // 追加サポート
            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex5 = sname;
                SkillName0Ret = AdditionalSupport().SkillName0(argIndex5);
            }

            return SkillName0Ret;
        }


        // === 行動数関連処理 ===

        // １ターンに可能な行動数
        public int MaxAction(bool ignore_en = false)
        {
            int MaxActionRet = default;
            // ステータス異常？
            object argIndex1 = "行動不能";
            object argIndex2 = "麻痺";
            object argIndex3 = "石化";
            object argIndex4 = "凍結";
            object argIndex5 = "睡眠";
            object argIndex6 = "チャージ";
            object argIndex7 = "消耗";
            string argsptype = "行動不能";
            if (IsConditionSatisfied(argIndex1) | IsConditionSatisfied(argIndex2) | IsConditionSatisfied(argIndex3) | IsConditionSatisfied(argIndex4) | IsConditionSatisfied(argIndex5) | IsConditionSatisfied(argIndex6) | IsConditionSatisfied(argIndex7) | IsUnderSpecialPowerEffect(argsptype))
            {
                return MaxActionRet;
            }

            // ＥＮ切れ？
            if (!ignore_en)
            {
                if (EN == 0)
                {
                    string argoname = "ＥＮ０時行動可";
                    if (!Expression.IsOptionDefined(argoname))
                    {
                        return MaxActionRet;
                    }
                }
            }

            if (CountPilot() == 0)
            {
                return MaxActionRet;
            }

            // ２回行動可能？
            string argoname1 = "２回行動能力使用";
            if (Expression.IsOptionDefined(argoname1))
            {
                string argsname = "２回行動";
                if (MainPilot().IsSkillAvailable(argsname))
                {
                    MaxActionRet = 2;
                }
                else
                {
                    MaxActionRet = 1;
                }
            }
            else if (this.MainPilot().Intuition >= 200)
            {
                MaxActionRet = 2;
            }
            else
            {
                MaxActionRet = 1;
            }

            return MaxActionRet;
        }

        // 行動数を消費
        public void UseAction()
        {
            int max_action;

            // ２回行動可能？
            string argoname = "２回行動能力使用";
            if (CountPilot() == 0)
            {
                max_action = 1;
            }
            else if (Expression.IsOptionDefined(argoname))
            {
                string argsname = "２回行動";
                if (MainPilot().IsSkillAvailable(argsname))
                {
                    max_action = 2;
                }
                else
                {
                    max_action = 1;
                }
            }
            else if (this.MainPilot().Intuition >= 200)
            {
                max_action = 2;
            }
            else
            {
                max_action = 1;
            }

            // 最大行動数まで行動消費量をカウント
            UsedAction = GeneralLib.MinLng(UsedAction + 1, max_action);
        }


        // === スペシャルパワー関連処理 ===

        // 影響下にあるスペシャルパワー一覧
        public string SpecialPowerInEffect()
        {
            string SpecialPowerInEffectRet = default;
            Condition cnd;
            foreach (Condition currentCnd in colSpecialPowerInEffect)
            {
                cnd = currentCnd;
                {
                    var withBlock = SRC.SPDList.Item((object)cnd.Name);
                    if (withBlock.intName == "非表示")
                    {
                        // イベント専用
                        goto NextSpecialPower;
                    }

                    if (withBlock.Duration == "みがわり")
                    {
                        // みがわりは別表示
                        goto NextSpecialPower;
                    }

                    SpecialPowerInEffectRet = SpecialPowerInEffectRet + withBlock.intName;
                }

                NextSpecialPower:
                ;
            }

            // みがわりはかばってくれるユニットを表示する
            foreach (Condition currentCnd1 in colSpecialPowerInEffect)
            {
                cnd = currentCnd1;
                {
                    var withBlock1 = SRC.SPDList.Item((object)cnd.Name);
                    if (withBlock1.Duration == "みがわり")
                    {
                        if (SRC.PList.IsDefined((object)cnd.StrData))
                        {
                            SpecialPowerInEffectRet = SpecialPowerInEffectRet + withBlock1.intName + "(" + SRC.PList.Item((object)cnd.StrData).get_Nickname(false) + ")";
                        }

                        return SpecialPowerInEffectRet;
                    }
                }
            }

            return SpecialPowerInEffectRet;
        }

        // ユニットがスペシャルパワー sname の影響下にあるかどうか
        public bool IsSpecialPowerInEffect(string sname)
        {
            bool IsSpecialPowerInEffectRet = default;
            Condition cnd;
            if (colSpecialPowerInEffect.Count == 0)
            {
                return IsSpecialPowerInEffectRet;
            };
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 137362


            Input:

                    On Error GoTo ErrorHandler

             */
            cnd = (Condition)colSpecialPowerInEffect[sname];
            IsSpecialPowerInEffectRet = true;
            return IsSpecialPowerInEffectRet;
            ErrorHandler:
            ;
        }

        // ユニットがスペシャルパワー効果 sptype の影響下にあるかどうか
        public bool IsUnderSpecialPowerEffect(string sptype)
        {
            bool IsUnderSpecialPowerEffectRet = default;
            int i;
            foreach (Condition cnd in colSpecialPowerInEffect)
            {
                {
                    var withBlock = SRC.SPDList.Item((object)cnd.Name);
                    var loopTo = withBlock.CountEffect();
                    for (i = 1; i <= loopTo; i++)
                    {
                        if ((withBlock.EffectType(i) ?? "") == (sptype ?? ""))
                        {
                            IsUnderSpecialPowerEffectRet = true;
                            return IsUnderSpecialPowerEffectRet;
                        }
                    }
                }
            }

            IsUnderSpecialPowerEffectRet = false;
            return IsUnderSpecialPowerEffectRet;
        }

        // 影響下にあるスペシャルパワーの総数
        public int CountSpecialPower()
        {
            int CountSpecialPowerRet = default;
            CountSpecialPowerRet = colSpecialPowerInEffect.Count;
            return CountSpecialPowerRet;
        }

        // 影響下にあるスペシャルパワー
        public SpecialPowerData SpecialPower(object Index)
        {
            SpecialPowerData SpecialPowerRet = default;
            Condition cnd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 138333


            Input:

                    On Error GoTo ErrorHandler

             */
            cnd = (Condition)colSpecialPowerInEffect[Index];
            SpecialPowerRet = SRC.SPDList.Item((object)cnd.Name);
            return SpecialPowerRet;
            ErrorHandler:
            ;

            // UPGRADE_NOTE: オブジェクト SpecialPower をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            SpecialPowerRet = null;
        }

        // スペシャルパワー mname の効果レベル
        public double SpecialPowerEffectLevel(string sname)
        {
            double SpecialPowerEffectLevelRet = default;
            int i;
            double lv;
            lv = SRC.DEFAULT_LEVEL;
            foreach (Condition cnd in colSpecialPowerInEffect)
            {
                {
                    var withBlock = SRC.SPDList.Item((object)cnd.Name);
                    var loopTo = withBlock.CountEffect();
                    for (i = 1; i <= loopTo; i++)
                    {
                        if ((withBlock.EffectType(i) ?? "") == (sname ?? ""))
                        {
                            if (withBlock.EffectLevel(i) > lv)
                            {
                                lv = withBlock.EffectLevel(i);
                            }

                            break;
                        }
                    }
                }
            }

            if (lv != SRC.DEFAULT_LEVEL)
            {
                SpecialPowerEffectLevelRet = lv;
            }

            return SpecialPowerEffectLevelRet;
        }

        // スペシャルパワーのデータ
        public string SpecialPowerData(object Index)
        {
            string SpecialPowerDataRet = default;
            Condition cnd;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 139541


            Input:

                    On Error GoTo ErrorHandler

             */
            cnd = (Condition)colSpecialPowerInEffect[Index];
            SpecialPowerDataRet = cnd.StrData;
            return SpecialPowerDataRet;
            ErrorHandler:
            ;
        }

        // スペシャルパワー sname の効果を適用
        public void MakeSpecialPowerInEffect(string sname, [Optional, DefaultParameterValue("")] string sdata)
        {
            var cnd = new Condition();

            // すでに使用されていればなにもしない
            if (IsSpecialPowerInEffect(sname))
            {
                return;
            }

            cnd.Name = sname;
            cnd.StrData = sdata;
            colSpecialPowerInEffect.Add(cnd, sname);
        }

        // 持続時間が stype であるスペシャルパワーの効果を発動後、取り除く
        public void RemoveSpecialPowerInEffect(string stype)
        {
            SpecialPowerData sd;
            int i;
            bool is_message_form_visible;
            string pid;

            // メッセージウィンドウが表示されているか記録
            is_message_form_visible = My.MyProject.Forms.frmMessage.Visible;
            i = 1;
            while (i <= CurrentForm().CountSpecialPower())
            {
                object argIndex1 = i;
                sd = SpecialPower(argIndex1);

                // スペシャルパワーの持続期間が指定したものと一致しているかチェック
                if ((stype ?? "") != (sd.Duration ?? ""))
                {
                    i = (i + 1);
                    goto NextSP;
                }

                // 持続期間が敵ターンの場合、スペシャルパワーをかけてきた敵のフェイズ
                // が来るまで効果を削除しない
                if (stype == "敵ターン")
                {
                    object argIndex3 = SpecialPowerData((object)sd.Name);
                    if (SRC.PList.IsDefined(argIndex3))
                    {
                        object argIndex2 = SpecialPowerData((object)sd.Name);
                        {
                            var withBlock = SRC.PList.Item(argIndex2);
                            if (withBlock.Unit_Renamed is object)
                            {
                                if ((withBlock.Unit_Renamed.CurrentForm().Party ?? "") != (SRC.Stage ?? ""))
                                {
                                    i = (i + 1);
                                    goto NextSP;
                                }
                            }
                        }
                    }
                }

                // 消去するスペシャルパワーの効果を発動
                if (CurrentForm().Status_Renamed == "出撃")
                {
                    sd.Apply(CurrentForm().MainPilot(), CurrentForm(), false, true);
                }

                // スペシャルパワーの効果を削除
                object argIndex4 = i;
                CurrentForm().RemoveSpecialPowerInEffect2(argIndex4);
                NextSP:
                ;
            }

            // メッセージウィンドウが元から表示されていなければ閉じておく
            if (!is_message_form_visible & My.MyProject.Forms.frmMessage.Visible)
            {
                GUI.CloseMessageForm();
            }
        }

        // スペシャルパワー sname の効果を取り除く
        public void RemoveSpecialPowerInEffect2(object Index)
        {
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 141635


            Input:
                    On Error GoTo ErrorHandler

             */
            colSpecialPowerInEffect.Remove(Index);
            return;
            ErrorHandler:
            ;
        }

        // 全てのスペシャルパワーの効果を取り除く
        public void RemoveAllSpecialPowerInEffect()
        {
            int i;
            {
                var withBlock = colSpecialPowerInEffect;
                var loopTo = withBlock.Count;
                for (i = 1; i <= loopTo; i++)
                    withBlock.Remove(1);
            }
        }

        // スペシャルパワーの効果をユニット u にコピーする
        public void CopySpecialPowerInEffect(Unit u)
        {
            foreach (Condition cnd in colSpecialPowerInEffect)
                u.MakeSpecialPowerInEffect(cnd.Name, cnd.StrData);
        }


        // === 特殊状態関連処理 ===

        // 特殊状態を付加
        public void AddCondition(string cname, int ltime, double clevel = SRC.DEFAULT_LEVEL, [Optional, DefaultParameterValue("")] string cdata)
        {
            var new_condition = new Condition();

            // 同じ特殊状態が既に付加されている？
            foreach (Condition cnd in colCondition)
            {
                if ((cnd.Name ?? "") == (cname ?? ""))
                {
                    if (cnd.Lifetime < 0 | ltime < 0)
                    {
                        cnd.Lifetime = -1;
                    }
                    else
                    {
                        cnd.Lifetime = GeneralLib.MaxLng(cnd.Lifetime, ltime);
                    }

                    cnd.Name = cname;
                    cnd.Level = clevel;
                    cnd.StrData = cdata;
                    return;
                }
            }

            // 特殊状態を付加
            new_condition.Name = cname;
            new_condition.Lifetime = ltime;
            new_condition.Level = clevel;
            new_condition.StrData = cdata;
            colCondition.Add(new_condition, cname);
        }

        // 特殊状態を削除
        public void DeleteCondition(object Index)
        {
            {
                var withBlock = colCondition[Index];
                colCondition.Remove(Index);

                // 特殊能力付加の場合はユニットのステータスをアップデート
                // UPGRADE_WARNING: オブジェクト colCondition.Item().StrData の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                // UPGRADE_WARNING: オブジェクト colCondition.Item().Name の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Strings.Right(Conversions.ToString(withBlock.Name), 2) == "付加" & Strings.InStr(Conversions.ToString(withBlock.StrData), "パイロット能力付加") == 0)
                {
                    Update();
                }
            }
        }

        public void DeleteCondition0(object Index)
        {
            colCondition.Remove(Index);
        }

        // 付加された特殊状態の総数
        public int CountCondition()
        {
            int CountConditionRet = default;
            CountConditionRet = colCondition.Count;
            return CountConditionRet;
        }

        // 特殊状態
        public string Condition(object Index)
        {
            string ConditionRet = default;
            // UPGRADE_WARNING: オブジェクト colCondition.Item().Name の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
            ConditionRet = Conversions.ToString(colCondition[Index].Name);
            return ConditionRet;
        }

        // 特殊状態の残りターン数
        public int ConditionLifetime(object Index)
        {
            int ConditionLifetimeRet = default;
            ;
            // UPGRADE_WARNING: オブジェクト colCondition.Item().Lifetime の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
            ConditionLifetimeRet = Conversions.Toint(colCondition[Index].Lifetime);
            return ConditionLifetimeRet;
            ErrorHandler:
            ;
            ConditionLifetimeRet = -1;
        }

        // 指定した特殊能力が付加されているか？
        public bool IsConditionSatisfied(object Index)
        {
            bool IsConditionSatisfiedRet = default;
            int ltime;
            ;
            // UPGRADE_WARNING: オブジェクト colCondition.Item().Lifetime の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
            ltime = Conversions.Toint(colCondition[Index].Lifetime);
            IsConditionSatisfiedRet = true;
            return IsConditionSatisfiedRet;
            ErrorHandler:
            ;
            IsConditionSatisfiedRet = false;
        }

        // 特殊状態のレベル
        public double ConditionLevel(object Index)
        {
            double ConditionLevelRet = default;
            ;
            // UPGRADE_WARNING: オブジェクト colCondition.Item().Level の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
            ConditionLevelRet = Conversions.ToDouble(colCondition[Index].Level);
            return ConditionLevelRet;
            ErrorHandler:
            ;
            ConditionLevelRet = 0d;
        }

        // 特殊状態のレベルの変更
        public void SetConditionLevel(object Index, double lv)
        {
            ;
            // UPGRADE_WARNING: オブジェクト colCondition.Item().Level の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
            colCondition[Index].Level = lv;
            ErrorHandler:
            ;
        }

        // 特殊能力のデータ
        public string ConditionData(object Index)
        {
            string ConditionDataRet = default;
            ;
            // UPGRADE_WARNING: オブジェクト colCondition.Item().StrData の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
            ConditionDataRet = Conversions.ToString(colCondition[Index].StrData);
            return ConditionDataRet;
            ErrorHandler:
            ;
            ConditionDataRet = "";
        }

        // 特殊能力の残りターン数を更新
        public void UpdateCondition(bool decrement_lifetime = false)
        {
            var update_is_necessary = default(bool);
            var charge_complete = default(bool);
            foreach (Condition cnd in colCondition)
            {
                if (decrement_lifetime)
                {
                    // 残りターン数を1減らす
                    if (cnd.Lifetime > 0)
                    {
                        cnd.Lifetime = (cnd.Lifetime - 1);
                    }
                }

                if (cnd.Lifetime == 0)
                {
                    // 残りターン数が0なら削除
                    colCondition.Remove(cnd.Name);
                    switch (cnd.Name ?? "")
                    {
                        case "魅了":
                            {
                                // 魅了を解除
                                if (Master is object)
                                {
                                    object argIndex1 = ID;
                                    Master.CurrentForm().DeleteSlave(argIndex1);
                                    // UPGRADE_NOTE: オブジェクト Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                    Master = null;
                                }

                                Mode = "通常";
                                break;
                            }

                        case "チャージ":
                            {
                                // チャージ完了
                                charge_complete = true;
                                break;
                            }

                        case "活動限界":
                            {
                                // 活動限界時間切れ
                                GUI.Center(x, y);
                                Escape();
                                Unit argu1 = null;
                                Unit argu2 = null;
                                GUI.OpenMessageForm(u1: argu1, u2: argu2);
                                GUI.DisplaySysMessage(Nickname + "は強制的に退却させられた。");
                                GUI.CloseMessageForm();
                                Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                                break;
                            }

                        default:
                            {
                                // 特殊能力付加を解除
                                if (Strings.Right(cnd.Name, 2) == "付加" | Strings.Right(cnd.Name, 2) == "強化")
                                {
                                    update_is_necessary = true;
                                }

                                break;
                            }
                    }
                }
            }

            // チャージ状態が終了したらチャージ完了状態にする
            if (charge_complete)
            {
                string argcname = "チャージ完了";
                string argcdata = "";
                AddCondition(argcname, 1, cdata: argcdata);
            }

            // ユニットのステータス変化あり？
            if (update_is_necessary)
            {
                Update();
            }
        }


        // === 武器関連処理 ===

        // 武器
        public WeaponData Weapon(int w)
        {
            WeaponData WeaponRet = default;
            WeaponRet = WData[w];
            return WeaponRet;
        }

        // 武器の総数
        public int CountWeapon()
        {
            int CountWeaponRet = default;
            CountWeaponRet = Information.UBound(WData);
            return CountWeaponRet;
        }

        // 武器の愛称
        public string WeaponNickname(int w)
        {
            string WeaponNicknameRet = default;
            Unit u;

            // 愛称内の式置換のため、デフォルトユニットを一時的に変更する
            u = Event_Renamed.SelectedUnitForEvent;
            Event_Renamed.SelectedUnitForEvent = this;
            WeaponNicknameRet = WData[w].Nickname();
            Event_Renamed.SelectedUnitForEvent = u;
            return WeaponNicknameRet;
        }

        // 武器の攻撃力
        // tarea は敵のいる地形
        public int WeaponPower(int w, string tarea)
        {
            int WeaponPowerRet = default;
            int pat;
            // 攻撃補正一時保存
            double ed_atk;
            WeaponPowerRet = lngWeaponPower[w];

            // 「体」属性を持つ武器は残りＨＰに応じて攻撃力が増える
            string argattr1 = "体";
            if (IsWeaponClassifiedAs(w, argattr1))
            {
                string argattr = "体";
                WeaponPowerRet = (WeaponPowerRet + HP / (double)MaxHP * 100d * WeaponLevel(w, argattr));
            }

            // 「尽」属性を持つ武器は残りＥＮに応じて攻撃力が増える
            string argattr3 = "尽";
            if (IsWeaponClassifiedAs(w, argattr3))
            {
                if (EN >= WeaponENConsumption(w))
                {
                    string argattr2 = "尽";
                    WeaponPowerRet = (WeaponPowerRet + (EN - WeaponENConsumption(w)) * WeaponLevel(w, argattr2));
                }
            }

            // ダメージ固定武器
            double wad;
            string argattr5 = "固";
            if (IsWeaponClassifiedAs(w, argattr5))
            {

                // 武器一覧の場合は攻撃力をそのまま表示
                if (string.IsNullOrEmpty(tarea))
                {
                    return WeaponPowerRet;
                }

                // マップ攻撃は攻撃開始時に保存した攻撃力をそのまま使う
                string argattr4 = "Ｍ";
                if (IsWeaponClassifiedAs(w, argattr4))
                {
                    if (SelectedMapAttackPower > 0)
                    {
                        WeaponPowerRet = SelectedMapAttackPower;
                    }
                }

                // 地形適応による修正のみを適用
                wad = WeaponAdaption(w, tarea);

                // 地形適応修正繰り下げオプションの効果は適用しない
                string argoname1 = "地形適応修正繰り下げ";
                if (Expression.IsOptionDefined(argoname1))
                {
                    string argoname = "地形適応修正緩和";
                    if (Expression.IsOptionDefined(argoname))
                    {
                        wad = wad + 0.1d;
                    }
                    else
                    {
                        wad = wad + 0.2d;
                    }
                }

                // 地形適応がＡの場合に攻撃力と同じダメージを与えるようにする
                string argoname2 = "地形適応修正緩和";
                if (Expression.IsOptionDefined(argoname2))
                {
                    wad = wad - 0.1d;
                }
                else
                {
                    wad = wad - 0.2d;
                }

                if (wad > 0d)
                {
                    WeaponPowerRet = (WeaponPowerRet * wad);
                }
                else
                {
                    WeaponPowerRet = 0;
                }

                return WeaponPowerRet;
            }

            // 部隊ユニットはダメージを受けると攻撃力が低下
            string argfname = "部隊ユニット";
            if (IsFeatureAvailable(argfname))
            {
                WeaponPowerRet = ((long)(WeaponPowerRet * (50d + 50 * HP / (double)MaxHP)) / 100L);
            }

            // 標的のいる地形が設定されていないときは武器の一覧表示用なので各種補正を省く
            if (string.IsNullOrEmpty(tarea))
            {
                return WeaponPowerRet;
            }

            {
                var withBlock = MainPilot();
                object argIndex2 = "攻撃補正";
                if (SRC.BCList.IsDefined(argIndex2))
                {
                    // バトルコンフィグデータの設定による修正
                    string argattr6 = "複";
                    string argattr7 = "格闘系";
                    if (IsWeaponClassifiedAs(w, argattr6))
                    {
                        pat = (withBlock.Infight + withBlock.Shooting) / 2;
                    }
                    else if (IsWeaponClassifiedAs(w, argattr7))
                    {
                        pat = withBlock.Infight;
                    }
                    else
                    {
                        pat = withBlock.Shooting;
                    }

                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = this;
                    BCVariable.AtkUnit = this;
                    // UPGRADE_NOTE: オブジェクト BCVariable.DefUnit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                    BCVariable.DefUnit = null;
                    BCVariable.WeaponNumber = w;
                    BCVariable.AttackExp = pat;
                    BCVariable.WeaponPower = WeaponPowerRet;
                    string argIndex1 = "攻撃補正";
                    WeaponPowerRet = SRC.BCList.Item(argIndex1).Calculate();
                }
                else
                {
                    // パイロットの攻撃力による修正

                    string argattr8 = "複";
                    string argattr9 = "格闘系";
                    if (IsWeaponClassifiedAs(w, argattr8))
                    {
                        WeaponPowerRet = WeaponPowerRet * (withBlock.Infight + withBlock.Shooting) / 200;
                    }
                    else if (IsWeaponClassifiedAs(w, argattr9))
                    {
                        WeaponPowerRet = WeaponPowerRet * withBlock.Infight / 100;
                    }
                    else
                    {
                        WeaponPowerRet = WeaponPowerRet * withBlock.Shooting / 100;
                    }

                    // 気力による修正
                    string argoname3 = "気力効果小";
                    if (Expression.IsOptionDefined(argoname3))
                    {
                        WeaponPowerRet = WeaponPowerRet * (50 + (withBlock.Morale + withBlock.MoraleMod) / 2) / 100;
                    }
                    else
                    {
                        WeaponPowerRet = WeaponPowerRet * (withBlock.Morale + withBlock.MoraleMod) / 100;
                    }
                }

                // 覚悟
                if (HP <= MaxHP / 4)
                {
                    string argsname = "覚悟";
                    if (withBlock.IsSkillAvailable(argsname))
                    {
                        string argoname4 = "ダメージ倍率低下";
                        if (Expression.IsOptionDefined(argoname4))
                        {
                            WeaponPowerRet = (1.1d * WeaponPowerRet);
                        }
                        else
                        {
                            WeaponPowerRet = (1.2d * WeaponPowerRet);
                        }
                    }
                }
            }

            // マップ攻撃用に攻撃力算出
            if (tarea == "初期値")
            {
                return WeaponPowerRet;
            }

            // マップ攻撃は攻撃開始時に保存した攻撃力をそのまま使う
            string argattr10 = "Ｍ";
            if (IsWeaponClassifiedAs(w, argattr10))
            {
                if (SelectedMapAttackPower > 0)
                {
                    WeaponPowerRet = SelectedMapAttackPower;
                }
            }

            // 地形補正
            object argIndex4 = "攻撃地形補正";
            if (SRC.BCList.IsDefined(argIndex4))
            {
                // 事前にデータを登録
                BCVariable.DataReset();
                BCVariable.MeUnit = this;
                BCVariable.AtkUnit = this;
                // UPGRADE_NOTE: オブジェクト BCVariable.DefUnit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                BCVariable.DefUnit = null;
                BCVariable.WeaponNumber = w;
                BCVariable.AttackExp = WeaponPowerRet;
                BCVariable.TerrainAdaption = WeaponAdaption(w, tarea);
                string argIndex3 = "攻撃地形補正";
                WeaponPowerRet = SRC.BCList.Item(argIndex3).Calculate();
            }
            else
            {
                WeaponPowerRet = (WeaponPowerRet * WeaponAdaption(w, tarea));
            }

            return WeaponPowerRet;
        }

        // 武器 w の地形 tarea におけるダメージ修正値
        public double WeaponAdaption(int w, string tarea)
        {
            double WeaponAdaptionRet = default;
            int wad = default, uad, xad;
            int ind;

            // 武器の地形適応値の計算に使用する適応値を決定
            switch (tarea ?? "")
            {
                case "空中":
                    {
                        ind = 1;
                        break;
                    }

                case "地上":
                    {
                        if (Map.TerrainClass(x, y) == "月面")
                        {
                            ind = 4;
                        }
                        else
                        {
                            ind = 2;
                        }

                        break;
                    }

                case "水上":
                    {
                        if (Strings.Mid(Weapon(w).Adaption, 3, 1) == "A")
                        {
                            ind = 3;
                        }
                        else
                        {
                            ind = 2;
                        }

                        break;
                    }

                case "水中":
                    {
                        ind = 3;
                        break;
                    }

                case "宇宙":
                    {
                        ind = 4;
                        break;
                    }

                case "地中":
                    {
                        WeaponAdaptionRet = 0d;
                        return WeaponAdaptionRet;
                    }

                default:
                    {
                        xad = 4;
                        goto CalcAdaption;
                        break;
                    }
            }

            // 武器の地形適応値
            switch (Strings.Mid(Weapon(w).Adaption, ind, 1) ?? "")
            {
                case "S":
                    {
                        wad = 5;
                        break;
                    }

                case "A":
                    {
                        wad = 4;
                        break;
                    }

                case "B":
                    {
                        wad = 3;
                        break;
                    }

                case "C":
                    {
                        wad = 2;
                        break;
                    }

                case "D":
                    {
                        wad = 1;
                        break;
                    }

                case "-":
                    {
                        WeaponAdaptionRet = 0d;
                        return WeaponAdaptionRet;
                    }
            }

            // ユニットの地形適応値の計算に使用する適応値を決定
            string argattr4 = "武";
            string argattr5 = "突";
            string argattr6 = "接";
            if (!IsWeaponClassifiedAs(w, argattr4) & !IsWeaponClassifiedAs(w, argattr5) & !IsWeaponClassifiedAs(w, argattr6))
            {
                // 格闘戦以外の場合はユニットがいる地形を参照
                switch (Area ?? "")
                {
                    case "空中":
                        {
                            ind = 1;
                            break;
                        }

                    case "地上":
                        {
                            if (Map.TerrainClass(x, y) == "月面")
                            {
                                ind = 4;
                            }
                            else
                            {
                                ind = 2;
                            }

                            break;
                        }

                    case "水上":
                        {
                            ind = 2;
                            break;
                        }

                    case "水中":
                        {
                            ind = 3;
                            break;
                        }

                    case "宇宙":
                        {
                            ind = 4;
                            break;
                        }

                    case "地中":
                        {
                            WeaponAdaptionRet = 0d;
                            return WeaponAdaptionRet;
                        }
                }
                // ユニットの地形適応値
                uad = get_Adaption(ind);
            }
            else
            {
                // 格闘戦の場合はターゲットがいる地形を参照
                switch (tarea ?? "")
                {
                    case "空中":
                        {
                            uad = get_Adaption(1);
                            // ジャンプ攻撃
                            string argattr1 = "Ｊ";
                            if (IsWeaponClassifiedAs(w, argattr1))
                            {
                                string argattr = "Ｊ";
                                uad = (uad + WeaponLevel(w, argattr));
                            }

                            break;
                        }

                    case "地上":
                        {
                            if (get_Adaption(2) > 0)
                            {
                                uad = get_Adaption(2);
                            }
                            else
                            {
                                // 空中専用ユニットが地上のユニットに格闘戦をしかけられるようにする
                                uad = GeneralLib.MaxLng(get_Adaption(1) - 1, 0);
                            }

                            break;
                        }

                    case "水上":
                        {
                            // 水中専用ユニットが水上のユニットに格闘戦をしかけられるようにする
                            uad = GeneralLib.MaxDbl(get_Adaption(2), get_Adaption(3));
                            if (uad <= 0)
                            {
                                // 空中専用ユニットが地上のユニットに格闘戦をしかけられるようにする
                                uad = GeneralLib.MaxLng(get_Adaption(1) - 1, 0);
                            }

                            break;
                        }

                    case "水中":
                        {
                            uad = get_Adaption(3);
                            break;
                        }

                    case "宇宙":
                        {
                            uad = get_Adaption(4);
                            if (Area == "地上" & Map.TerrainClass(x, y) == "月面")
                            {
                                // 月面からのジャンプ攻撃
                                string argattr3 = "Ｊ";
                                if (IsWeaponClassifiedAs(w, argattr3))
                                {
                                    string argattr2 = "Ｊ";
                                    uad = (uad + WeaponLevel(w, argattr2));
                                }
                            }

                            break;
                        }

                    default:
                        {
                            uad = get_Adaption(ind);
                            break;
                        }
                }
            }

            // 地形適応が命中率に適応される場合、ユニットの地形適応は攻撃可否の判定にのみ用いる
            string argoname = "地形適応命中率修正";
            if (Expression.IsOptionDefined(argoname))
            {
                if (uad > 0)
                {
                    xad = wad;
                    goto CalcAdaption;
                }
                else
                {
                    WeaponAdaptionRet = 0d;
                    return WeaponAdaptionRet;
                }
            }

            // 武器側とユニット側の地形適応の低い方を優先
            if (uad > wad)
            {
                xad = wad;
            }
            else
            {
                xad = uad;
            }

            CalcAdaption:
            ;


            // Optionコマンドの設定に従って地形適応値を算出
            string argoname3 = "地形適応修正緩和";
            if (Expression.IsOptionDefined(argoname3))
            {
                string argoname1 = "地形適応修正繰り下げ";
                if (Expression.IsOptionDefined(argoname1))
                {
                    switch (xad)
                    {
                        case 5:
                            {
                                WeaponAdaptionRet = 1.1d;
                                break;
                            }

                        case 4:
                            {
                                WeaponAdaptionRet = 1d;
                                break;
                            }

                        case 3:
                            {
                                WeaponAdaptionRet = 0.9d;
                                break;
                            }

                        case 2:
                            {
                                WeaponAdaptionRet = 0.8d;
                                break;
                            }

                        case 1:
                            {
                                WeaponAdaptionRet = 0.7d;
                                break;
                            }

                        default:
                            {
                                WeaponAdaptionRet = 0d;
                                break;
                            }
                    }
                }
                else
                {
                    switch (xad)
                    {
                        case 5:
                            {
                                WeaponAdaptionRet = 1.2d;
                                break;
                            }

                        case 4:
                            {
                                WeaponAdaptionRet = 1.1d;
                                break;
                            }

                        case 3:
                            {
                                WeaponAdaptionRet = 1d;
                                break;
                            }

                        case 2:
                            {
                                WeaponAdaptionRet = 0.9d;
                                break;
                            }

                        case 1:
                            {
                                WeaponAdaptionRet = 0.8d;
                                break;
                            }

                        default:
                            {
                                WeaponAdaptionRet = 0d;
                                break;
                            }
                    }
                }
            }
            else
            {
                string argoname2 = "地形適応修正繰り下げ";
                if (Expression.IsOptionDefined(argoname2))
                {
                    switch (xad)
                    {
                        case 5:
                            {
                                WeaponAdaptionRet = 1.2d;
                                break;
                            }

                        case 4:
                            {
                                WeaponAdaptionRet = 1d;
                                break;
                            }

                        case 3:
                            {
                                WeaponAdaptionRet = 0.8d;
                                break;
                            }

                        case 2:
                            {
                                WeaponAdaptionRet = 0.6d;
                                break;
                            }

                        case 1:
                            {
                                WeaponAdaptionRet = 0.4d;
                                break;
                            }

                        default:
                            {
                                WeaponAdaptionRet = 0d;
                                break;
                            }
                    }
                }
                else
                {
                    switch (xad)
                    {
                        case 5:
                            {
                                WeaponAdaptionRet = 1.4d;
                                break;
                            }

                        case 4:
                            {
                                WeaponAdaptionRet = 1.2d;
                                break;
                            }

                        case 3:
                            {
                                WeaponAdaptionRet = 1d;
                                break;
                            }

                        case 2:
                            {
                                WeaponAdaptionRet = 0.8d;
                                break;
                            }

                        case 1:
                            {
                                WeaponAdaptionRet = 0.6d;
                                break;
                            }

                        default:
                            {
                                WeaponAdaptionRet = 0d;
                                break;
                            }
                    }
                }
            }

            return WeaponAdaptionRet;
        }

        // 武器 w の最大射程
        public int WeaponMaxRange(int w)
        {
            int WeaponMaxRangeRet = default;
            WeaponMaxRangeRet = intWeaponMaxRange[w];

            // 最大射程がもともと１ならそれ以上変化しない
            if (WeaponMaxRangeRet == 1)
            {
                return WeaponMaxRangeRet;
            }

            // マップ攻撃には適用されない
            string argattr = "Ｍ";
            if (IsWeaponClassifiedAs(w, argattr))
            {
                return WeaponMaxRangeRet;
            }

            // 接近戦武器には適用されない
            string argattr1 = "武";
            string argattr2 = "突";
            string argattr3 = "接";
            if (IsWeaponClassifiedAs(w, argattr1) | IsWeaponClassifiedAs(w, argattr2) | IsWeaponClassifiedAs(w, argattr3))
            {
                return WeaponMaxRangeRet;
            }

            // 有線式誘導攻撃には適用されない
            string argattr4 = "有";
            if (IsWeaponClassifiedAs(w, argattr4))
            {
                return WeaponMaxRangeRet;
            }

            // スペシャルパワーによる射程延長
            string argsptype = "射程延長";
            if (IsUnderSpecialPowerEffect(argsptype))
            {
                string argsname = "射程延長";
                WeaponMaxRangeRet = (WeaponMaxRangeRet + SpecialPowerEffectLevel(argsname));
            }

            return WeaponMaxRangeRet;
        }

        // 武器 w の消費ＥＮ
        public int WeaponENConsumption(int w)
        {
            int WeaponENConsumptionRet = default;
            // UPGRADE_NOTE: rate は rate_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
            double rate_Renamed;
            int i;
            {
                var withBlock = Weapon(w);
                WeaponENConsumptionRet = withBlock.ENConsumption;

                // パイロットの能力によって術及び技の消費ＥＮは減少する
                if (CountPilot() > 0)
                {
                    // 術に該当するか？
                    if (IsSpellWeapon(w))
                    {
                        // 術に該当する場合は術技能によってＥＮ消費量を変える
                        object argIndex1 = "術";
                        string argref_mode = "";
                        switch (MainPilot().SkillLevel(argIndex1, ref_mode: argref_mode))
                        {
                            case 1d:
                                {
                                    break;
                                }

                            case 2d:
                                {
                                    WeaponENConsumptionRet = (0.9d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 3d:
                                {
                                    WeaponENConsumptionRet = (0.8d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 4d:
                                {
                                    WeaponENConsumptionRet = (0.7d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 5d:
                                {
                                    WeaponENConsumptionRet = (0.6d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 6d:
                                {
                                    WeaponENConsumptionRet = (0.5d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 7d:
                                {
                                    WeaponENConsumptionRet = (0.45d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 8d:
                                {
                                    WeaponENConsumptionRet = (0.4d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 9d:
                                {
                                    WeaponENConsumptionRet = (0.35d * WeaponENConsumptionRet);
                                    break;
                                }

                            case var @case when @case >= 10d:
                                {
                                    WeaponENConsumptionRet = (0.3d * WeaponENConsumptionRet);
                                    break;
                                }
                        }

                        WeaponENConsumptionRet = GeneralLib.MinLng(GeneralLib.MaxLng(WeaponENConsumptionRet, 5), withBlock.ENConsumption);
                    }

                    // 技に該当するか？
                    if (IsFeatWeapon(w))
                    {
                        // 技に該当する場合は技技能によってＥＮ消費量を変える
                        object argIndex2 = "技";
                        string argref_mode1 = "";
                        switch (MainPilot().SkillLevel(argIndex2, ref_mode: argref_mode1))
                        {
                            case 1d:
                                {
                                    break;
                                }

                            case 2d:
                                {
                                    WeaponENConsumptionRet = (0.9d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 3d:
                                {
                                    WeaponENConsumptionRet = (0.8d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 4d:
                                {
                                    WeaponENConsumptionRet = (0.7d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 5d:
                                {
                                    WeaponENConsumptionRet = (0.6d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 6d:
                                {
                                    WeaponENConsumptionRet = (0.5d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 7d:
                                {
                                    WeaponENConsumptionRet = (0.45d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 8d:
                                {
                                    WeaponENConsumptionRet = (0.4d * WeaponENConsumptionRet);
                                    break;
                                }

                            case 9d:
                                {
                                    WeaponENConsumptionRet = (0.35d * WeaponENConsumptionRet);
                                    break;
                                }

                            case var case1 when case1 >= 10d:
                                {
                                    WeaponENConsumptionRet = (0.3d * WeaponENConsumptionRet);
                                    break;
                                }
                        }

                        WeaponENConsumptionRet = GeneralLib.MinLng(GeneralLib.MaxLng(WeaponENConsumptionRet, 5), withBlock.ENConsumption);
                    }
                }

                // ＥＮ消費減少能力による修正
                rate_Renamed = 1d;
                string argfname = "ＥＮ消費減少";
                if (IsFeatureAvailable(argfname))
                {
                    var loopTo = CountFeature();
                    for (i = 1; i <= loopTo; i++)
                    {
                        object argIndex3 = i;
                        if (Feature(argIndex3) == "ＥＮ消費減少")
                        {
                            double localFeatureLevel() { object argIndex1 = i; var ret = FeatureLevel(argIndex1); return ret; }

                            rate_Renamed = rate_Renamed - 0.1d * localFeatureLevel();
                        }
                    }
                }

                if (rate_Renamed < 0.1d)
                {
                    rate_Renamed = 0.1d;
                }

                WeaponENConsumptionRet = (rate_Renamed * WeaponENConsumptionRet);
            }

            return WeaponENConsumptionRet;
        }

        // 武器 w の命中率
        public int WeaponPrecision(int w)
        {
            int WeaponPrecisionRet = default;
            WeaponPrecisionRet = intWeaponPrecision[w];
            return WeaponPrecisionRet;
        }

        // 武器 w のＣＴ率
        public int WeaponCritical(int w)
        {
            int WeaponCriticalRet = default;
            WeaponCriticalRet = intWeaponCritical[w];
            return WeaponCriticalRet;
        }

        // 武器 w の属性
        public string WeaponClass(int w)
        {
            string WeaponClassRet = default;
            WeaponClassRet = strWeaponClass[w];
            return WeaponClassRet;
        }

        // 武器 w が武器属性 attr を持っているかどうか
        public bool IsWeaponClassifiedAs(int w, string attr)
        {
            bool IsWeaponClassifiedAsRet = default;
            string wclass;
            wclass = strWeaponClass[w];

            // 属性が２文字以下ならそのまま判定
            if (Strings.Len(attr) <= 2)
            {
                if (GeneralLib.InStrNotNest(wclass, attr) > 0)
                {
                    IsWeaponClassifiedAsRet = true;
                }
                else
                {
                    IsWeaponClassifiedAsRet = false;
                }

                return IsWeaponClassifiedAsRet;
            }

            // 属性の頭文字が弱攻剋ならそのまま判定
            if (Strings.InStr("弱効剋", Strings.Left(attr, 1)) > 0)
            {
                if (GeneralLib.InStrNotNest(wclass, attr) > 0)
                {
                    IsWeaponClassifiedAsRet = true;
                }
                else
                {
                    IsWeaponClassifiedAsRet = false;
                }

                return IsWeaponClassifiedAsRet;
            }

            // 条件が複雑な場合
            switch (attr ?? "")
            {
                case "格闘系":
                    {
                        string argstring2 = "格";
                        string argstring21 = "射";
                        if (GeneralLib.InStrNotNest(wclass, argstring2) > 0)
                        {
                            IsWeaponClassifiedAsRet = true;
                        }
                        else if (GeneralLib.InStrNotNest(wclass, argstring21) > 0)
                        {
                            IsWeaponClassifiedAsRet = false;
                        }
                        else if (this.Weapon(w).MaxRange == 1)
                        {
                            IsWeaponClassifiedAsRet = true;
                        }
                        else
                        {
                            IsWeaponClassifiedAsRet = false;
                        }

                        return IsWeaponClassifiedAsRet;
                    }

                case "射撃系":
                    {
                        string argstring22 = "格";
                        string argstring23 = "射";
                        if (GeneralLib.InStrNotNest(wclass, argstring22) > 0)
                        {
                            IsWeaponClassifiedAsRet = false;
                        }
                        else if (GeneralLib.InStrNotNest(wclass, argstring23) > 0)
                        {
                            IsWeaponClassifiedAsRet = true;
                        }
                        else if (this.Weapon(w).MaxRange == 1)
                        {
                            IsWeaponClassifiedAsRet = false;
                        }
                        else
                        {
                            IsWeaponClassifiedAsRet = true;
                        }

                        break;
                    }

                case "移動後攻撃可":
                    {
                        string argsptype = "全武器移動後使用可能";
                        string argstring25 = "Ｍ";
                        string argstring26 = "Ｑ";
                        string argstring27 = "Ｐ";
                        if (IsUnderSpecialPowerEffect(argsptype) & GeneralLib.InStrNotNest(wclass, argstring25) == 0 & GeneralLib.InStrNotNest(wclass, argstring26) == 0)
                        {
                            IsWeaponClassifiedAsRet = true;
                        }
                        else if (this.Weapon(w).MaxRange == 1)
                        {
                            string argstring24 = "Ｑ";
                            if (GeneralLib.InStrNotNest(wclass, argstring24) == 0)
                            {
                                IsWeaponClassifiedAsRet = true;
                            }
                            else
                            {
                                IsWeaponClassifiedAsRet = false;
                            }
                        }
                        else if (GeneralLib.InStrNotNest(wclass, argstring27) > 0)
                        {
                            IsWeaponClassifiedAsRet = true;
                        }

                        break;
                    }
            }

            return IsWeaponClassifiedAsRet;
        }

        // 武器 w の属性 attr におけるレベル
        public double WeaponLevel(int w, string attr)
        {
            double WeaponLevelRet = default;
            string attrlv, wclass;
            int start_idx, i;
            string c;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 164587


            Input:

                    On Error GoTo ErrorHandler

             */
            attrlv = attr + "L";

            // 武器属性を調べてみる
            wclass = strWeaponClass[w];

            // レベル指定があるか？
            start_idx = GeneralLib.InStrNotNest(wclass, attrlv);
            if (start_idx == 0)
            {
                return WeaponLevelRet;
            }

            // レベル指定部分の切り出し
            start_idx = (start_idx + Strings.Len(attrlv));
            i = start_idx;
            while (true)
            {
                c = Strings.Mid(wclass, i, 1);
                if (string.IsNullOrEmpty(c))
                {
                    break;
                }

                switch (Strings.Asc(c))
                {
                    case var @case when 45 <= @case && @case <= 46:
                    case var case1 when 48 <= case1 && case1 <= 57: // "-", ".", 0-9
                        {
                            break;
                        }

                    default:
                        {
                            break;
                        }
                }

                i = (i + 1);
            }

            WeaponLevelRet = Conversions.ToDouble(Strings.Mid(wclass, start_idx, i - start_idx));
            return WeaponLevelRet;
            ErrorHandler:
            ;
            string argmsg = Name + "の" + "武装「" + Weapon(w).Name + "」の" + "属性「" + attr + "」のレベル指定が不正です";
            GUI.ErrorMessage(argmsg);
        }

        // 武器 w の属性 attr にレベル指定がなされているか
        public bool IsWeaponLevelSpecified(int w, string attr)
        {
            bool IsWeaponLevelSpecifiedRet = default;
            if (Strings.InStr(strWeaponClass[w], attr + "L") > 0)
            {
                IsWeaponLevelSpecifiedRet = true;
                return IsWeaponLevelSpecifiedRet;
            }

            return IsWeaponLevelSpecifiedRet;
        }

        // 武器 w が通常武器かどうか
        public bool IsNormalWeapon(int w)
        {
            bool IsNormalWeaponRet = default;
            int i;
            string wclass;
            int ret;

            // 特殊効果属性を持つ？
            wclass = strWeaponClass[w];
            var loopTo = Strings.Len(wclass);
            for (i = 1; i <= loopTo; i++)
            {
                ret = Strings.InStr("Ｓ縛劣中石凍痺眠乱魅恐踊狂ゾ害憑盲毒撹不止黙除即告脱Ｄ低吹Ｋ引転衰滅盗習写化弱効剋", Strings.Mid(wclass, i, 1));
                if (ret > 0)
                {
                    return IsNormalWeaponRet;
                }
            }

            IsNormalWeaponRet = true;
            return IsNormalWeaponRet;
        }

        // 武器が持つ特殊効果の数を返す
        public int CountWeaponEffect(int w)
        {
            int CountWeaponEffectRet = default;
            string wclass, wattr;
            int i, ret;
            wclass = strWeaponClass[w];
            var loopTo = Strings.Len(wclass);
            for (i = 1; i <= loopTo; i++)
            {
                // 弱Ｓのような入れ子があれば、入れ子の分カウントを進める
                wattr = GeneralLib.GetClassBundle(wclass, i, 1);

                // 非表示部分は無視
                if (wattr == "|")
                {
                    break;
                }

                // ＣＴ時発動系
                ret = Strings.InStr("Ｓ縛劣中石凍痺眠乱魅恐踊狂ゾ害憑盲毒撹不止黙除即告脱Ｄ低吹Ｋ引転衰滅盗習写化弱効剋", wattr);
                if (ret > 0)
                {
                    CountWeaponEffectRet = (CountWeaponEffectRet + 1);
                }

                // それ以外
                ret = Strings.InStr("先再忍貫固殺無浸破間浄吸減奪", wattr);
                if (ret > 0)
                {
                    CountWeaponEffectRet = (CountWeaponEffectRet + 1);
                }
            }

            return CountWeaponEffectRet;
        }

        // 武器 w が術かどうか
        public bool IsSpellWeapon(int w)
        {
            bool IsSpellWeaponRet = default;
            int i;
            string nskill;
            string argattr = "術";
            if (IsWeaponClassifiedAs(w, argattr))
            {
                IsSpellWeaponRet = true;
                return IsSpellWeaponRet;
            }

            {
                var withBlock = MainPilot();
                var loopTo = GeneralLib.LLength(Weapon(w).NecessarySkill);
                for (i = 1; i <= loopTo; i++)
                {
                    nskill = GeneralLib.LIndex(Weapon(w).NecessarySkill, i);
                    if (Strings.InStr(nskill, "Lv") > 0)
                    {
                        nskill = Strings.Left(nskill, Strings.InStr(nskill, "Lv") - 1);
                    }

                    if (withBlock.SkillType(nskill) == "術")
                    {
                        IsSpellWeaponRet = true;
                        return IsSpellWeaponRet;
                    }
                }
            }

            return IsSpellWeaponRet;
        }

        // 武器 w が技かどうか
        public bool IsFeatWeapon(int w)
        {
            bool IsFeatWeaponRet = default;
            int i;
            string nskill;
            string argattr = "技";
            if (IsWeaponClassifiedAs(w, argattr))
            {
                IsFeatWeaponRet = true;
                return IsFeatWeaponRet;
            }

            {
                var withBlock = MainPilot();
                var loopTo = GeneralLib.LLength(Weapon(w).NecessarySkill);
                for (i = 1; i <= loopTo; i++)
                {
                    nskill = GeneralLib.LIndex(Weapon(w).NecessarySkill, i);
                    if (Strings.InStr(nskill, "Lv") > 0)
                    {
                        nskill = Strings.Left(nskill, Strings.InStr(nskill, "Lv") - 1);
                    }

                    if (withBlock.SkillType(nskill) == "技")
                    {
                        IsFeatWeaponRet = true;
                        return IsFeatWeaponRet;
                    }
                }
            }

            return IsFeatWeaponRet;
        }

        // 武器 w が使用可能かどうか
        // ref_mode はユニットの状態（移動前、移動後）を示す
        public bool IsWeaponAvailable(int w, string ref_mode)
        {
            bool IsWeaponAvailableRet = default;
            int i;
            WeaponData wd;
            string wclass;
            IsWeaponAvailableRet = false;

            // ADD START MARGE
            // 武器が取得できない場合はFalse（防御や無抵抗の場合、wが0や-1になる）
            if (!(w > 0))
            {
                return IsWeaponAvailableRet;
            }
            // ADD END MARGE

            wd = Weapon(w);
            wclass = WeaponClass(w);

            // イベントコマンド「Disable」で封印されている？
            if (IsDisabled(wd.Name))
            {
                return IsWeaponAvailableRet;
            }

            // パイロットが乗っていなければ常に使用可能と判定
            if (CountPilot() == 0)
            {
                IsWeaponAvailableRet = true;
                return IsWeaponAvailableRet;
            }

            // 必要技能＆必要条件
            if (ref_mode != "必要技能無視")
            {
                if (!IsWeaponMastered(w))
                {
                    return IsWeaponAvailableRet;
                }

                if (!IsWeaponEnabled(w))
                {
                    return IsWeaponAvailableRet;
                }
            }

            // ステータス表示では必要技能だけ満たしていればＯＫ
            if (ref_mode == "インターミッション" | string.IsNullOrEmpty(ref_mode))
            {
                IsWeaponAvailableRet = true;
                return IsWeaponAvailableRet;
            }

            {
                var withBlock = MainPilot();
                // 必要気力
                if (wd.NecessaryMorale > 0)
                {
                    if (withBlock.Morale < wd.NecessaryMorale)
                    {
                        return IsWeaponAvailableRet;
                    }
                }

                // 霊力消費攻撃
                string argstring2 = "霊";
                string argstring21 = "プ";
                if (GeneralLib.InStrNotNest(wclass, argstring2) > 0)
                {
                    string argattr = "霊";
                    if (withBlock.Plana < WeaponLevel(w, argattr) * 5d)
                    {
                        return IsWeaponAvailableRet;
                    }
                }
                else if (GeneralLib.InStrNotNest(wclass, argstring21) > 0)
                {
                    string argattr1 = "プ";
                    if (withBlock.Plana < WeaponLevel(w, argattr1) * 5d)
                    {
                        return IsWeaponAvailableRet;
                    }
                }
            }

            // 属性使用不能状態
            object argIndex1 = "オーラ使用不能";
            if (ConditionLifetime(argIndex1) > 0)
            {
                string argattr2 = "オ";
                if (IsWeaponClassifiedAs(w, argattr2))
                {
                    return IsWeaponAvailableRet;
                }
            }

            object argIndex2 = "超能力使用不能";
            if (ConditionLifetime(argIndex2) > 0)
            {
                string argattr3 = "超";
                if (IsWeaponClassifiedAs(w, argattr3))
                {
                    return IsWeaponAvailableRet;
                }
            }

            object argIndex3 = "同調率使用不能";
            if (ConditionLifetime(argIndex3) > 0)
            {
                string argattr4 = "シ";
                if (IsWeaponClassifiedAs(w, argattr4))
                {
                    return IsWeaponAvailableRet;
                }
            }

            object argIndex4 = "超感覚使用不能";
            if (ConditionLifetime(argIndex4) > 0)
            {
                string argattr5 = "サ";
                if (IsWeaponClassifiedAs(w, argattr5))
                {
                    return IsWeaponAvailableRet;
                }
            }

            object argIndex5 = "知覚強化使用不能";
            if (ConditionLifetime(argIndex5) > 0)
            {
                string argattr6 = "サ";
                if (IsWeaponClassifiedAs(w, argattr6))
                {
                    return IsWeaponAvailableRet;
                }
            }

            object argIndex6 = "霊力使用不能";
            if (ConditionLifetime(argIndex6) > 0)
            {
                string argattr7 = "霊";
                if (IsWeaponClassifiedAs(w, argattr7))
                {
                    return IsWeaponAvailableRet;
                }
            }

            object argIndex7 = "術使用不能";
            if (ConditionLifetime(argIndex7) > 0)
            {
                string argattr8 = "術";
                if (IsWeaponClassifiedAs(w, argattr8))
                {
                    return IsWeaponAvailableRet;
                }
            }

            object argIndex8 = "技使用不能";
            if (ConditionLifetime(argIndex8) > 0)
            {
                string argattr9 = "技";
                if (IsWeaponClassifiedAs(w, argattr9))
                {
                    return IsWeaponAvailableRet;
                }
            }

            var loopTo = CountCondition();
            for (i = 1; i <= loopTo; i++)
            {
                string localCondition3() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                if (Strings.Len(localCondition3()) > 6)
                {
                    string localCondition2() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                    if (Strings.Right(localCondition2(), 6) == "属性使用不能")
                    {
                        string localCondition() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                        string localCondition1() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                        string argstring1 = WeaponClass(w);
                        string argstring22 = Strings.Left(localCondition(), Strings.Len(localCondition1()) - 6);
                        if (GeneralLib.InStrNotNest(argstring1, argstring22) > 0)
                        {
                            return IsWeaponAvailableRet;
                        }
                    }
                }
            }

            // 弾数が足りるか
            if (wd.Bullet > 0)
            {
                if (Bullet(w) < 1)
                {
                    return IsWeaponAvailableRet;
                }
            }

            // ＥＮが足りるか
            if (wd.ENConsumption > 0)
            {
                if (EN < WeaponENConsumption(w))
                {
                    return IsWeaponAvailableRet;
                }
            }

            // お金が足りるか……
            if (Party == "味方")
            {
                string argstring23 = "銭";
                if (GeneralLib.InStrNotNest(wclass, argstring23) > 0)
                {
                    string argattr10 = "銭";
                    if (SRC.Money < GeneralLib.MaxLng(WeaponLevel(w, argattr10), 1) * Value / 10)
                    {
                        return IsWeaponAvailableRet;
                    }
                }
            }

            // 攻撃不能？
            if (ref_mode != "ステータス")
            {
                object argIndex9 = "攻撃不能";
                if (IsConditionSatisfied(argIndex9))
                {
                    return IsWeaponAvailableRet;
                }
            }

            if (Area == "地中")
            {
                return IsWeaponAvailableRet;
            }

            // 移動不能時には移動型マップ攻撃は使用不能
            object argIndex10 = "移動不能";
            if (IsConditionSatisfied(argIndex10))
            {
                string argstring24 = "Ｍ移";
                if (GeneralLib.InStrNotNest(wclass, argstring24) > 0)
                {
                    return IsWeaponAvailableRet;
                }
            }

            // 術および音は沈黙状態では使用不能
            object argIndex11 = "沈黙";
            if (IsConditionSatisfied(argIndex11))
            {
                string argstring25 = "音";
                if (IsSpellWeapon(w) | GeneralLib.InStrNotNest(wclass, argstring25) > 0)
                {
                    return IsWeaponAvailableRet;
                }
            }

            // 合体技の処理
            string argstring26 = "合";
            if (GeneralLib.InStrNotNest(wclass, argstring26) > 0)
            {
                if (!IsCombinationAttackAvailable(w))
                {
                    return IsWeaponAvailableRet;
                }
            }

            // 変形技の場合は今いる地形で変形できる必要あり
            string argstring27 = "変";
            if (GeneralLib.InStrNotNest(wclass, argstring27) > 0)
            {
                string argfname = "変形技";
                string argfname1 = "ノーマルモード";
                if (IsFeatureAvailable(argfname))
                {
                    var loopTo1 = CountFeature();
                    for (i = 1; i <= loopTo1; i++)
                    {
                        string localFeature() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                        string localFeatureData1() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localLIndex1() { string arglist = hs333745e4b9954fad9f002aac9fe60516(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        if (localFeature() == "変形技" & (localLIndex1() ?? "") == (wd.Name ?? ""))
                        {
                            string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string localLIndex() { string arglist = hsabc0da5e677a47f9bc7fb2c4e22fffab(); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                            Unit localOtherForm() { object argIndex1 = (object)hs70465cd27baa4b1bac8f45eec4036bb3(); var ret = OtherForm(argIndex1); return ret; }

                            if (!localOtherForm().IsAbleToEnter(x, y))
                            {
                                return IsWeaponAvailableRet;
                            }
                        }
                    }
                }
                else if (IsFeatureAvailable(argfname1))
                {
                    string localLIndex2() { object argIndex1 = "ノーマルモード"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                    Unit localOtherForm1() { object argIndex1 = (object)hs8f54e202dcbe4b6290740ebc209beb99(); var ret = OtherForm(argIndex1); return ret; }

                    if (!localOtherForm1().IsAbleToEnter(x, y))
                    {
                        return IsWeaponAvailableRet;
                    }
                }

                object argIndex12 = "形態固定";
                if (IsConditionSatisfied(argIndex12))
                {
                    return IsWeaponAvailableRet;
                }

                object argIndex13 = "機体固定";
                if (IsConditionSatisfied(argIndex13))
                {
                    return IsWeaponAvailableRet;
                }
            }

            // 瀕死時限定
            string argstring28 = "瀕";
            if (GeneralLib.InStrNotNest(wclass, argstring28) > 0)
            {
                if (HP > MaxHP / 4)
                {
                    return IsWeaponAvailableRet;
                }
            }

            // 自動チャージ攻撃を再充填中
            object argIndex14 = WeaponNickname(w) + "充填中";
            if (IsConditionSatisfied(argIndex14))
            {
                return IsWeaponAvailableRet;
            }
            // 共有武器＆アビリティが充填中の場合も使用不可
            int lv;
            string argstring29 = "共";
            if (GeneralLib.InStrNotNest(wclass, argstring29) > 0)
            {
                string argattr11 = "共";
                lv = WeaponLevel(w, argattr11);
                var loopTo2 = CountWeapon();
                for (i = 1; i <= loopTo2; i++)
                {
                    string argattr13 = "共";
                    if (IsWeaponClassifiedAs(i, argattr13))
                    {
                        string argattr12 = "共";
                        if (lv == WeaponLevel(i, argattr12))
                        {
                            object argIndex15 = WeaponNickname(i) + "充填中";
                            if (IsConditionSatisfied(argIndex15))
                            {
                                return IsWeaponAvailableRet;
                            }
                        }
                    }
                }

                var loopTo3 = CountAbility();
                for (i = 1; i <= loopTo3; i++)
                {
                    string argattr15 = "共";
                    if (IsAbilityClassifiedAs(i, argattr15))
                    {
                        string argattr14 = "共";
                        if (lv == AbilityLevel(i, argattr14))
                        {
                            object argIndex16 = AbilityNickname(i) + "充填中";
                            if (IsConditionSatisfied(argIndex16))
                            {
                                return IsWeaponAvailableRet;
                            }
                        }
                    }
                }
            }

            // 能力コピー
            string argstring210 = "写";
            string argstring211 = "化";
            if (GeneralLib.InStrNotNest(wclass, argstring210) > 0 | GeneralLib.InStrNotNest(wclass, argstring211) > 0)
            {
                string argfname2 = "ノーマルモード";
                if (IsFeatureAvailable(argfname2))
                {
                    // 既に変身済みの場合はコピー出来ない
                    return IsWeaponAvailableRet;
                }
            }

            // 使用禁止
            string argstring212 = "禁";
            if (GeneralLib.InStrNotNest(wclass, argstring212) > 0)
            {
                return IsWeaponAvailableRet;
            }

            // チャージ判定であればここまででＯＫ
            if (ref_mode == "チャージ")
            {
                IsWeaponAvailableRet = true;
                return IsWeaponAvailableRet;
            }

            // チャージ式攻撃
            string argstring213 = "Ｃ";
            if (GeneralLib.InStrNotNest(wclass, argstring213) > 0)
            {
                object argIndex17 = "チャージ完了";
                if (!IsConditionSatisfied(argIndex17))
                {
                    return IsWeaponAvailableRet;
                }
            }

            if (ref_mode == "ステータス")
            {
                IsWeaponAvailableRet = true;
                return IsWeaponAvailableRet;
            }

            // 反撃かどうかの判定
            // 自軍のフェイズでなければ反撃時である
            if ((Party ?? "") != (SRC.Stage ?? ""))
            {
                // 反撃ではマップ攻撃、合体技は使用できない
                string argstring214 = "Ｍ";
                string argstring215 = "合";
                if (GeneralLib.InStrNotNest(wclass, argstring214) > 0 | GeneralLib.InStrNotNest(wclass, argstring215) > 0)
                {
                    return IsWeaponAvailableRet;
                }

                // 攻撃専用武器
                string argstring216 = "攻";
                if (GeneralLib.InStrNotNest(wclass, argstring216) > 0)
                {
                    var loopTo4 = Strings.Len(wclass);
                    for (i = 1; i <= loopTo4; i++)
                    {
                        if (Strings.Mid(wclass, i, 1) == "攻")
                        {
                            if (i == 1)
                            {
                                return IsWeaponAvailableRet;
                            }

                            if (Strings.Mid(wclass, i - 1, 1) != "低")
                            {
                                return IsWeaponAvailableRet;
                            }
                        }
                    }
                }
            }
            else
            {
                // 反撃専用攻撃
                string argstring217 = "反";
                if (GeneralLib.InStrNotNest(wclass, argstring217) > 0)
                {
                    return IsWeaponAvailableRet;
                }
            }

            // 移動前か後か……
            if (ref_mode == "移動前" | ref_mode == "必要技能無視" | !ReferenceEquals(Commands.SelectedUnit, this))
            {
                IsWeaponAvailableRet = true;
                return IsWeaponAvailableRet;
            }

            // 移動後の場合
            string argsptype = "全武器移動後使用可能";
            string argstring220 = "Ｍ";
            if (IsUnderSpecialPowerEffect(argsptype) & !(GeneralLib.InStrNotNest(wclass, argstring220) > 0))
            {
                IsWeaponAvailableRet = true;
            }
            else if (WeaponMaxRange(w) > 1)
            {
                string argstring219 = "Ｐ";
                if (GeneralLib.InStrNotNest(wclass, argstring219) > 0)
                {
                    IsWeaponAvailableRet = true;
                }
                else
                {
                    IsWeaponAvailableRet = false;
                }
            }
            else
            {
                string argstring218 = "Ｑ";
                if (GeneralLib.InStrNotNest(wclass, argstring218) > 0)
                {
                    IsWeaponAvailableRet = false;
                }
                else
                {
                    IsWeaponAvailableRet = true;
                }
            }

            return IsWeaponAvailableRet;
        }

        // 武器 w の使用技能を満たしているか。
        public bool IsWeaponMastered(int w)
        {
            bool IsWeaponMasteredRet = default;
            Pilot argp = null;
            IsWeaponMasteredRet = IsNecessarySkillSatisfied(Weapon(w).NecessarySkill, p: argp);
            return IsWeaponMasteredRet;
        }

        // 武器 w の使用条件を満たしているか。
        public bool IsWeaponEnabled(int w)
        {
            bool IsWeaponEnabledRet = default;
            Pilot argp = null;
            IsWeaponEnabledRet = IsNecessarySkillSatisfied(Weapon(w).NecessaryCondition, p: argp);
            return IsWeaponEnabledRet;
        }

        // 武器が使用可能であり、かつ射程内に敵がいるかどうか
        public bool IsWeaponUseful(int w, string ref_mode)
        {
            bool IsWeaponUsefulRet = default;
            int i, j;
            Unit u;
            int max_range;

            // 武器が使用可能か？
            if (!IsWeaponAvailable(w, ref_mode))
            {
                IsWeaponUsefulRet = false;
                return IsWeaponUsefulRet;
            }

            // 扇型マップ攻撃は特殊なので判定ができない
            // 移動型マップ攻撃は移動手段として使うことを考慮
            string argattr = "Ｍ扇";
            string argattr1 = "Ｍ移";
            if (IsWeaponClassifiedAs(w, argattr) | IsWeaponClassifiedAs(w, argattr1))
            {
                IsWeaponUsefulRet = true;
                return IsWeaponUsefulRet;
            }

            max_range = WeaponMaxRange(w);

            // 投下型マップ攻撃は効果範囲が広い
            string argattr2 = "Ｍ投";
            max_range = (max_range + WeaponLevel(w, argattr2));

            // 敵の存在判定
            var loopTo = GeneralLib.MinLng(x + max_range, Map.MapWidth);
            for (i = GeneralLib.MaxLng(x - max_range, 1); i <= loopTo; i++)
            {
                var loopTo1 = GeneralLib.MinLng(y + max_range, Map.MapHeight);
                for (j = GeneralLib.MaxLng(y - max_range, 1); j <= loopTo1; j++)
                {
                    u = Map.MapDataForUnit[i, j];
                    if (u is null)
                    {
                        goto NextUnit;
                    }

                    {
                        var withBlock = u;
                        switch (Party ?? "")
                        {
                            case "味方":
                            case "ＮＰＣ":
                                {
                                    switch (withBlock.Party ?? "")
                                    {
                                        case "味方":
                                        case "ＮＰＣ":
                                            {
                                                // ステータス異常の場合は味方ユニットでも排除可能
                                                object argIndex1 = "暴走";
                                                object argIndex2 = "混乱";
                                                object argIndex3 = "魅了";
                                                object argIndex4 = "憑依";
                                                object argIndex5 = "睡眠";
                                                if (!withBlock.IsConditionSatisfied(argIndex1) & !withBlock.IsConditionSatisfied(argIndex2) & !withBlock.IsConditionSatisfied(argIndex3) & !withBlock.IsConditionSatisfied(argIndex4) & !withBlock.IsConditionSatisfied(argIndex5))
                                                {
                                                    goto NextUnit;
                                                }

                                                break;
                                            }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if ((Party ?? "") == (withBlock.Party ?? ""))
                                    {
                                        // ステータス異常の場合は味方ユニットでも排除可能
                                        object argIndex6 = "暴走";
                                        object argIndex7 = "混乱";
                                        object argIndex8 = "魅了";
                                        object argIndex9 = "憑依";
                                        if (!withBlock.IsConditionSatisfied(argIndex6) & !withBlock.IsConditionSatisfied(argIndex7) & !withBlock.IsConditionSatisfied(argIndex8) & !withBlock.IsConditionSatisfied(argIndex9))
                                        {
                                            goto NextUnit;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    if (IsTargetWithinRange(w, u))
                    {
                        if (this.Weapon(w).Power > 0)
                        {
                            if (Damage(w, u, true) != 0)
                            {
                                IsWeaponUsefulRet = true;
                                return IsWeaponUsefulRet;
                            }
                        }
                        else if (CriticalProbability(w, u) > 0)
                        {
                            IsWeaponUsefulRet = true;
                            return IsWeaponUsefulRet;
                        }
                    }

                    NextUnit:
                    ;
                }
            }

            // 敵は見つからなかった
            IsWeaponUsefulRet = false;
            return IsWeaponUsefulRet;
        }


        // ユニット t が武器 w の射程範囲内にいるかをチェック
        public bool IsTargetWithinRange(int w, Unit t)
        {
            bool IsTargetWithinRangeRet = default;
            int max_range, distance, range_mod;
            int lv;
            IsTargetWithinRangeRet = true;
            var partners = default(Unit[]);
            // 距離を算出
            distance = (Math.Abs((x - t.x)) + Math.Abs((y - t.y)));

            // Ｍ投武器は目標地点からさらに効果範囲が伸びるので射程修正を行う
            string argattr = "Ｍ投";
            range_mod = WeaponLevel(w, argattr);

            // 最大射程チェック
            max_range = WeaponMaxRange(w);
            if (distance > (max_range + range_mod))
            {
                IsTargetWithinRangeRet = false;
                return IsTargetWithinRangeRet;
            }

            // 最小射程チェック
            if (distance < (this.Weapon(w).MinRange - range_mod))
            {
                IsTargetWithinRangeRet = false;
                return IsTargetWithinRangeRet;
            }

            // 敵がステルスの場合
            string argfname1 = "ステルス";
            if (t.IsFeatureAvailable(argfname1))
            {
                object argIndex2 = "ステルス";
                if (t.IsFeatureLevelSpecified(argIndex2))
                {
                    object argIndex1 = "ステルス";
                    lv = t.FeatureLevel(argIndex1);
                }
                else
                {
                    lv = 3;
                }

                object argIndex3 = "ステルス無効";
                string argfname = "ステルス無効化";
                if (!t.IsConditionSatisfied(argIndex3) & !IsFeatureAvailable(argfname) & distance > lv)
                {
                    IsTargetWithinRangeRet = false;
                    return IsTargetWithinRangeRet;
                }
            }

            // 隠れ身中？
            string argsptype1 = "隠れ身";
            if (t.IsUnderSpecialPowerEffect(argsptype1))
            {
                string argsptype = "無防備";
                if (!t.IsUnderSpecialPowerEffect(argsptype))
                {
                    IsTargetWithinRangeRet = false;
                    return IsTargetWithinRangeRet;
                }
            }

            // 攻撃できない地形にいる場合は射程外とみなす
            if (WeaponAdaption(w, t.Area) == 0d)
            {
                IsTargetWithinRangeRet = false;
                return IsTargetWithinRangeRet;
            }

            // 合体技で射程が１の場合は相手を囲んでいる必要がある
            string argattr1 = "合";
            string argattr2 = "Ｍ";
            if (IsWeaponClassifiedAs(w, argattr1) & !IsWeaponClassifiedAs(w, argattr2) & max_range == 1)
            {
                string argctype_Renamed = "武装";
                CombinationPartner(argctype_Renamed, w, partners, t.x, t.y);
                if (Information.UBound(partners) == 0)
                {
                    IsTargetWithinRangeRet = false;
                    return IsTargetWithinRangeRet;
                }
            }

            return IsTargetWithinRangeRet;
        }

        // 移動を併用した場合にユニット t が武器 w の射程範囲内にいるかをチェック
        public bool IsTargetReachable(int w, Unit t)
        {
            bool IsTargetReachableRet = default;
            int i, j;
            int max_range, min_range;
            var partners = default(Unit[]);
            // 地形適応をチェック
            if (WeaponAdaption(w, t.Area) == 0d)
            {
                IsTargetReachableRet = false;
                return IsTargetReachableRet;
            }

            // 隠れ身使用中？
            string argsptype1 = "隠れ身";
            if (t.IsUnderSpecialPowerEffect(argsptype1))
            {
                string argsptype = "無防備";
                if (!t.IsUnderSpecialPowerEffect(argsptype))
                {
                    IsTargetReachableRet = false;
                    return IsTargetReachableRet;
                }
            }

            // 射程計算
            min_range = Weapon(w).MinRange;
            max_range = WeaponMaxRange(w);
            // 敵がステルスの場合
            string argfname = "ステルス";
            object argIndex3 = "ステルス無効";
            string argfname1 = "ステルス無効化";
            if (t.IsFeatureAvailable(argfname) & !t.IsConditionSatisfied(argIndex3) & !IsFeatureAvailable(argfname1))
            {
                object argIndex2 = "ステルス";
                if (t.IsFeatureLevelSpecified(argIndex2))
                {
                    object argIndex1 = "ステルス";
                    max_range = GeneralLib.MinLng(max_range, (t.FeatureLevel(argIndex1) + 1d));
                }
                else
                {
                    max_range = GeneralLib.MinLng(max_range, 4);
                }
            }

            // 隣接していれば必ず届く
            if (min_range == 1 & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
            {
                // ただし合体技の場合は例外……
                // 合体技で射程が１の場合は相手を囲んでいる必要がある
                string argattr = "合";
                string argattr1 = "Ｍ";
                if (IsWeaponClassifiedAs(w, argattr) & !IsWeaponClassifiedAs(w, argattr1) & WeaponMaxRange(w) == 1)
                {
                    string argctype_Renamed = "武装";
                    CombinationPartner(argctype_Renamed, w, partners, t.x, t.y);
                    if (Information.UBound(partners) == 0)
                    {
                        IsTargetReachableRet = false;
                        return IsTargetReachableRet;
                    }
                }

                IsTargetReachableRet = true;
                return IsTargetReachableRet;
            }

            // 移動範囲から敵に攻撃が届くかをチェック
            var loopTo = GeneralLib.MinLng(t.x + max_range, Map.MapWidth);
            for (i = GeneralLib.MaxLng(t.x - max_range, 1); i <= loopTo; i++)
            {
                var loopTo1 = GeneralLib.MinLng(t.y + (max_range - Math.Abs((t.x - i))), Map.MapHeight);
                for (j = GeneralLib.MaxLng(t.y - (max_range - Math.Abs((t.x - i))), 1); j <= loopTo1; j++)
                {
                    if (min_range <= (Math.Abs((t.x - i)) + Math.Abs((t.y - i))))
                    {
                        if (!Map.MaskData[i, j])
                        {
                            IsTargetReachableRet = true;
                            return IsTargetReachableRet;
                        }
                    }
                }
            }

            IsTargetReachableRet = false;
            return IsTargetReachableRet;
        }

        // 武器 w のユニット t に対する命中率
        // 敵ユニットはスペシャルパワー等による補正を考慮しないので
        // is_true_value によって補正を省くかどうかを指定できるようにしている
        public int HitProbability(int w, Unit t, bool is_true_value)
        {
            int HitProbabilityRet = default;
            int prob;
            int mpskill;
            int i, j;
            Unit u;
            var wclass = default(string);
            double ecm_lv = default, eccm_lv = default;
            string buf;
            string fdata;
            double flevel, prob_mod;
            int nmorale;
            // 命中、回避、地形補正、サイズ補正の数値を定義
            int ed_hit, ed_avd;
            double ed_aradap, ed_size = default;

            // 初期値
            ed_aradap = 1d;

            // スペシャルパワーによる捨て身状態
            string argsptype = "無防備";
            if (t.IsUnderSpecialPowerEffect(argsptype))
            {
                HitProbabilityRet = 100;
                return HitProbabilityRet;
            }

            // パイロットの技量によって命中率を正確に予測できるか左右される
            mpskill = MainPilot().TacticalTechnique();

            // スペシャルパワーによる影響
            if (is_true_value | mpskill >= 160)
            {
                string argsptype1 = "絶対回避";
                if (t.IsUnderSpecialPowerEffect(argsptype1))
                {
                    HitProbabilityRet = 0;
                    return HitProbabilityRet;
                }

                string argsptype2 = "絶対命中";
                if (IsUnderSpecialPowerEffect(argsptype2))
                {
                    HitProbabilityRet = 1000;
                    return HitProbabilityRet;
                }
            }

            // 自ユニットによる修正
            {
                var withBlock = MainPilot();
                object argIndex2 = "命中補正";
                if (SRC.BCList.IsDefined(argIndex2))
                {
                    // 命中を一時保存
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = this;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    BCVariable.AttackExp = WeaponPrecision(w);
                    string argIndex1 = "命中補正";
                    ed_hit = SRC.BCList.Item(argIndex1).Calculate();
                }
                else
                {
                    // 命中を一時保存
                    ed_hit = 100 + withBlock.Hit + withBlock.Intuition + get_Mobility("") + WeaponPrecision(w);
                }
            }

            // 敵ユニットによる修正
            {
                var withBlock1 = t.MainPilot();
                object argIndex4 = "回避補正";
                if (SRC.BCList.IsDefined(argIndex4))
                {
                    // 回避を一時保存
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = t;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    string argIndex3 = "回避補正";
                    ed_avd = SRC.BCList.Item(argIndex3).Calculate();
                }
                else
                {
                    // 回避を一時保存
                    ed_avd = (withBlock1.Dodge + withBlock1.Intuition) + t.get_Mobility("");
                }
            }

            // 地形適応、サイズ修正の位置を変更
            var uadaption = default(double);
            string tarea;
            int tx, ty;
            {
                var withBlock2 = t;
                // 地形修正
                if (withBlock2.Area != "空中" & (withBlock2.Area != "宇宙" | Map.TerrainClass(withBlock2.x, withBlock2.y) != "月面"))
                {
                    // 地形修正を一時保存
                    ed_aradap = ed_aradap * (100 - Map.TerrainEffectForHit(withBlock2.x, withBlock2.y)) / 100d;
                }

                // 地形適応修正
                string argoname = "地形適応命中率修正";
                if (Expression.IsOptionDefined(argoname))
                {

                    // 接近戦攻撃の場合はターゲット側の地形を参照
                    string argattr = "武";
                    string argattr1 = "突";
                    string argattr2 = "接";
                    if (IsWeaponClassifiedAs(w, argattr) | IsWeaponClassifiedAs(w, argattr1) | IsWeaponClassifiedAs(w, argattr2))
                    {
                        tarea = withBlock2.Area;
                        tx = withBlock2.x;
                        ty = withBlock2.y;
                    }
                    else
                    {
                        tarea = Area;
                        tx = x;
                        ty = y;
                    }

                    switch (tarea ?? "")
                    {
                        case "空中":
                            {
                                uadaption = get_AdaptionMod(1, 0);
                                // ジャンプ攻撃の場合はＪ属性による修正を加える
                                string argarea_name = "空";
                                if ((withBlock2.Area == "空中" | withBlock2.Area == "宇宙") & Area != "空中" & Area != "宇宙" & !IsTransAvailable(argarea_name))
                                {
                                    string argstring2 = "武";
                                    string argstring21 = "突";
                                    string argstring22 = "接";
                                    if (Conversions.ToBoolean(GeneralLib.InStrNotNest(wclass, argstring2) | GeneralLib.InStrNotNest(wclass, argstring21) | GeneralLib.InStrNotNest(wclass, argstring22)))
                                    {
                                        string argattr3 = "Ｊ";
                                        uadaption = get_AdaptionMod(1, WeaponLevel(w, argattr3));
                                    }
                                }

                                break;
                            }

                        case "地上":
                            {
                                if (Map.TerrainClass(tx, ty) == "月面")
                                {
                                    uadaption = get_AdaptionMod(4, 0);
                                }
                                else
                                {
                                    uadaption = get_AdaptionMod(2, 0);
                                }

                                break;
                            }

                        case "水上":
                            {
                                uadaption = get_AdaptionMod(2, 0);
                                break;
                            }

                        case "水中":
                            {
                                uadaption = get_AdaptionMod(3, 0);
                                break;
                            }

                        case "宇宙":
                            {
                                uadaption = get_AdaptionMod(4, 0);
                                break;
                            }

                        case "地中":
                            {
                                HitProbabilityRet = 0;
                                return HitProbabilityRet;
                            }
                    }

                    // 地形修正を一時保存
                    ed_aradap = ed_aradap * uadaption;
                }

                // サイズ補正
                switch (withBlock2.Size ?? "")
                {
                    case "M":
                        {
                            ed_size = 1d;
                            break;
                        }

                    case "L":
                        {
                            ed_size = 1.2d;
                            break;
                        }

                    case "S":
                        {
                            ed_size = 0.8d;
                            break;
                        }

                    case "LL":
                        {
                            ed_size = 1.4d;
                            break;
                        }

                    case "SS":
                        {
                            ed_size = 0.5d;
                            break;
                        }

                    case "XL":
                        {
                            ed_size = 2d;
                            break;
                        }
                }
            }

            // 命中率計算実行
            object argIndex6 = "命中率";
            if (SRC.BCList.IsDefined(argIndex6))
            {
                // 事前にデータを登録
                BCVariable.DataReset();
                BCVariable.MeUnit = this;
                BCVariable.AtkUnit = this;
                BCVariable.DefUnit = t;
                BCVariable.WeaponNumber = w;
                BCVariable.AttackVariable = ed_hit;
                BCVariable.DffenceVariable = ed_avd;
                BCVariable.TerrainAdaption = ed_aradap;
                BCVariable.SizeMod = ed_size;
                string argIndex5 = "命中率";
                prob = SRC.BCList.Item(argIndex5).Calculate();
            }
            else
            {
                prob = ((ed_hit - ed_avd) * ed_aradap * ed_size);
            }

            // 不意打ち
            string argfname = "ステルス";
            object argIndex7 = "ステルス無効";
            string argfname1 = "ステルス無効化";
            if (IsFeatureAvailable(argfname) & !IsConditionSatisfied(argIndex7) & !t.IsFeatureAvailable(argfname1))
            {
                prob = prob + 20;
            }

            wclass = WeaponClass(w);
            int uad;
            {
                var withBlock3 = t;
                // 散属性武器は指定したレベル以上離れるほど命中がアップ
                string argstring23 = "散";
                if (GeneralLib.InStrNotNest(wclass, argstring23) > 0)
                {
                    switch ((Math.Abs((x - withBlock3.x)) + Math.Abs((y - withBlock3.y))))
                    {
                        case 1:
                            {
                                break;
                            }
                        // 修正なし
                        case 2:
                            {
                                prob = prob + 5;
                                break;
                            }

                        case 3:
                            {
                                prob = prob + 10;
                                break;
                            }

                        case 4:
                            {
                                prob = prob + 15;
                                break;
                            }

                        default:
                            {
                                prob = prob + 20;
                                break;
                            }
                    }
                }

                string argstring27 = "サ";
                string argstring28 = "有";
                string argstring29 = "誘";
                string argstring210 = "追";
                string argstring211 = "武";
                string argstring212 = "突";
                string argstring213 = "接";
                if (GeneralLib.InStrNotNest(wclass, argstring27) == 0 & GeneralLib.InStrNotNest(wclass, argstring28) == 0 & GeneralLib.InStrNotNest(wclass, argstring29) == 0 & GeneralLib.InStrNotNest(wclass, argstring210) == 0 & GeneralLib.InStrNotNest(wclass, argstring211) == 0 & GeneralLib.InStrNotNest(wclass, argstring212) == 0 & GeneralLib.InStrNotNest(wclass, argstring213) == 0)
                {
                    // 距離修正
                    string argoname3 = "距離修正";
                    if (Expression.IsOptionDefined(argoname3))
                    {
                        string argstring24 = "Ｈ";
                        string argstring25 = "Ｍ";
                        if (GeneralLib.InStrNotNest(wclass, argstring24) == 0 & GeneralLib.InStrNotNest(wclass, argstring25) == 0)
                        {
                            string argoname1 = "大型マップ";
                            string argoname2 = "小型マップ";
                            if (Expression.IsOptionDefined(argoname1))
                            {
                                switch ((Math.Abs((x - withBlock3.x)) + Math.Abs((y - withBlock3.y))))
                                {
                                    case var @case when 1 <= @case && @case <= 4:
                                        {
                                            break;
                                        }
                                    // 修正なし
                                    case 5:
                                    case 6:
                                        {
                                            prob = (0.9d * prob);
                                            break;
                                        }

                                    case 7:
                                    case 8:
                                        {
                                            prob = (0.8d * prob);
                                            break;
                                        }

                                    case 9:
                                    case 10:
                                        {
                                            prob = (0.7d * prob);
                                            break;
                                        }

                                    default:
                                        {
                                            prob = (0.6d * prob);
                                            break;
                                        }
                                }
                            }
                            else if (Expression.IsOptionDefined(argoname2))
                            {
                                switch ((Math.Abs((x - withBlock3.x)) + Math.Abs((y - withBlock3.y))))
                                {
                                    case 1:
                                        {
                                            break;
                                        }
                                    // 修正なし
                                    case 2:
                                        {
                                            prob = (0.9d * prob);
                                            break;
                                        }

                                    case 3:
                                        {
                                            prob = (0.8d * prob);
                                            break;
                                        }

                                    case 4:
                                        {
                                            prob = (0.75d * prob);
                                            break;
                                        }

                                    case 5:
                                        {
                                            prob = (0.7d * prob);
                                            break;
                                        }

                                    case 6:
                                        {
                                            prob = (0.65d * prob);
                                            break;
                                        }

                                    default:
                                        {
                                            prob = (0.6d * prob);
                                            break;
                                        }
                                }
                            }
                            else
                            {
                                switch ((Math.Abs((x - withBlock3.x)) + Math.Abs((y - withBlock3.y))))
                                {
                                    case var case1 when 1 <= case1 && case1 <= 3:
                                        {
                                            break;
                                        }
                                    // 修正なし
                                    case 4:
                                        {
                                            prob = (0.9d * prob);
                                            break;
                                        }

                                    case 5:
                                        {
                                            prob = (0.8d * prob);
                                            break;
                                        }

                                    case 6:
                                        {
                                            prob = (0.7d * prob);
                                            break;
                                        }

                                    default:
                                        {
                                            prob = (0.6d * prob);
                                            break;
                                        }
                                }
                            }
                        }
                    }

                    // ＥＣＭ
                    var loopTo = GeneralLib.MinLng(withBlock3.x + 2, Map.MapWidth);
                    for (i = GeneralLib.MaxLng(withBlock3.x - 2, 1); i <= loopTo; i++)
                    {
                        var loopTo1 = GeneralLib.MinLng(withBlock3.y + 2, Map.MapHeight);
                        for (j = GeneralLib.MaxLng(withBlock3.y - 2, 1); j <= loopTo1; j++)
                        {
                            if (Math.Abs((withBlock3.x - i)) + Math.Abs((withBlock3.y - j)) <= 3)
                            {
                                u = Map.MapDataForUnit[i, j];
                                if (u is object)
                                {
                                    var argt = this;
                                    if (u.IsAlly(t))
                                    {
                                        object argIndex8 = "ＥＣＭ";
                                        ecm_lv = GeneralLib.MaxDbl(ecm_lv, u.FeatureLevel(argIndex8));
                                    }
                                    else if (u.IsAlly(argt))
                                    {
                                        object argIndex9 = "ＥＣＭ";
                                        eccm_lv = GeneralLib.MaxDbl(eccm_lv, u.FeatureLevel(argIndex9));
                                    }
                                }
                            }
                        }
                    }
                    // ホーミング攻撃はＥＣＭの影響を強く受ける
                    string argstring26 = "Ｈ";
                    if (GeneralLib.InStrNotNest(wclass, argstring26) > 0)
                    {
                        prob = ((long)(prob * (100d - 10d * GeneralLib.MaxDbl(ecm_lv - eccm_lv, 0d))) / 100L);
                    }
                    else
                    {
                        prob = ((long)(prob * (100d - 5d * GeneralLib.MaxDbl(ecm_lv - eccm_lv, 0d))) / 100L);
                    }
                }

                // ステルスによる補正
                string argfname2 = "ステルス";
                string argfname3 = "ステルス無効化";
                if (withBlock3.IsFeatureAvailable(argfname2) & !IsFeatureAvailable(argfname3))
                {
                    object argIndex11 = "ステルス";
                    if (withBlock3.IsFeatureLevelSpecified(argIndex11))
                    {
                        object argIndex10 = "ステルス";
                        if (Math.Abs((x - withBlock3.x)) + Math.Abs((y - withBlock3.y)) > withBlock3.FeatureLevel(argIndex10))
                        {
                            prob = (prob * 0.8d);
                        }
                    }
                    else if (Math.Abs((x - withBlock3.x)) + Math.Abs((y - withBlock3.y)) > 3)
                    {
                        prob = (prob * 0.8d);
                    }
                }

                // 地上から空中の敵に攻撃する
                if ((withBlock3.Area == "空中" | withBlock3.Area == "宇宙") & Area != "空中" & Area != "宇宙")
                {
                    string argstring216 = "武";
                    string argstring217 = "突";
                    string argstring218 = "接";
                    if (Conversions.ToBoolean(GeneralLib.InStrNotNest(wclass, argstring216) | GeneralLib.InStrNotNest(wclass, argstring217) | GeneralLib.InStrNotNest(wclass, argstring218)))
                    {
                        // ジャンプ攻撃
                        string argoname4 = "地形適応命中率修正";
                        if (!Expression.IsOptionDefined(argoname4))
                        {
                            string argarea_name1 = "空";
                            if (!IsTransAvailable(argarea_name1))
                            {
                                uad = get_Adaption(1);
                                string argstring214 = "Ｊ";
                                if (GeneralLib.InStrNotNest(wclass, argstring214) > 0)
                                {
                                    string argattr4 = "Ｊ";
                                    uad = GeneralLib.MinLng((uad + WeaponLevel(w, argattr4)), 4);
                                }

                                uad = GeneralLib.MinLng(uad, 4);
                                prob = (uad + 6) * prob / 10;
                            }
                        }
                    }
                    else
                    {
                        // 通常攻撃
                        string argoname5 = "高度修正";
                        if (Expression.IsOptionDefined(argoname5))
                        {
                            string argstring215 = "空";
                            if (GeneralLib.InStrNotNest(wclass, argstring215) == 0)
                            {
                                prob = (0.7d * prob);
                            }
                        }
                    }
                }

                // 局地戦能力
                string argfname4 = "地形適応";
                if (withBlock3.IsFeatureAvailable(argfname4))
                {
                    var loopTo2 = withBlock3.CountFeature();
                    for (i = 1; i <= loopTo2; i++)
                    {
                        object argIndex13 = i;
                        if (withBlock3.Feature(argIndex13) == "地形適応")
                        {
                            object argIndex12 = i;
                            buf = withBlock3.FeatureData(argIndex12);
                            var loopTo3 = GeneralLib.LLength(buf);
                            for (j = 2; j <= loopTo3; j++)
                            {
                                if ((Map.TerrainName(withBlock3.x, withBlock3.y) ?? "") == (GeneralLib.LIndex(buf, j) ?? ""))
                                {
                                    prob = prob - 10;
                                    break;
                                }
                            }
                        }
                    }
                }

                // 攻撃回避
                string argfname5 = "攻撃回避";
                if (withBlock3.IsFeatureAvailable(argfname5))
                {
                    prob_mod = 0d;
                    var loopTo4 = withBlock3.CountFeature();
                    for (i = 1; i <= loopTo4; i++)
                    {
                        object argIndex16 = i;
                        if (withBlock3.Feature(argIndex16) == "攻撃回避")
                        {
                            object argIndex14 = i;
                            fdata = withBlock3.FeatureData(argIndex14);
                            object argIndex15 = i;
                            flevel = withBlock3.FeatureLevel(argIndex15);

                            // 必要条件
                            if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                            {
                                nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                            }
                            else
                            {
                                nmorale = 0;
                            }

                            // 発動可能？
                            bool localIsAttributeClassified() { string argaclass1 = GeneralLib.LIndex(fdata, 2); var ret = withBlock3.IsAttributeClassified(argaclass1, wclass); return ret; }

                            if (withBlock3.MainPilot().Morale >= nmorale & localIsAttributeClassified())
                            {
                                // 攻撃回避発動
                                prob_mod = prob_mod + flevel;
                            }
                        }
                    }

                    prob = ((long)(prob * (10d - prob_mod)) / 10L);
                }

                // 動けなければ絶対に命中
                object argIndex17 = "行動不能";
                object argIndex18 = "麻痺";
                object argIndex19 = "睡眠";
                object argIndex20 = "石化";
                object argIndex21 = "凍結";
                string argsptype3 = "行動不能";
                if (withBlock3.IsConditionSatisfied(argIndex17) | withBlock3.IsConditionSatisfied(argIndex18) | withBlock3.IsConditionSatisfied(argIndex19) | withBlock3.IsConditionSatisfied(argIndex20) | withBlock3.IsConditionSatisfied(argIndex21) | withBlock3.IsUnderSpecialPowerEffect(argsptype3))
                {
                    HitProbabilityRet = 1000;
                    return HitProbabilityRet;
                }

                // ステータス異常による修正
                string argstring219 = "Ｈ";
                string argstring220 = "追";
                if (GeneralLib.InStrNotNest(wclass, argstring219) == 0 & GeneralLib.InStrNotNest(wclass, argstring220) == 0)
                {
                    object argIndex22 = "撹乱";
                    if (IsConditionSatisfied(argIndex22))
                    {
                        prob = prob / 2;
                    }

                    object argIndex23 = "恐怖";
                    if (IsConditionSatisfied(argIndex23))
                    {
                        prob = prob / 2;
                    }

                    object argIndex24 = "盲目";
                    if (IsConditionSatisfied(argIndex24))
                    {
                        prob = prob / 2;
                    }
                }

                // ターゲットのステータス異常による修正
                object argIndex25 = "盲目";
                if (withBlock3.IsConditionSatisfied(argIndex25))
                {
                    prob = (1.5d * prob);
                }

                object argIndex26 = "チャージ";
                if (withBlock3.IsConditionSatisfied(argIndex26))
                {
                    prob = (1.5d * prob);
                }

                object argIndex27 = "消耗";
                if (withBlock3.IsConditionSatisfied(argIndex27))
                {
                    prob = (1.5d * prob);
                }

                object argIndex28 = "狂戦士";
                if (withBlock3.IsConditionSatisfied(argIndex28))
                {
                    prob = (1.5d * prob);
                }

                object argIndex29 = "移動不能";
                if (withBlock3.IsConditionSatisfied(argIndex29))
                {
                    prob = (1.5d * prob);
                }

                // 底力
                if (HP <= MaxHP / 4)
                {
                    {
                        var withBlock4 = MainPilot();
                        string argsname = "超底力";
                        string argsname1 = "底力";
                        if (withBlock4.IsSkillAvailable(argsname))
                        {
                            prob = prob + 50;
                        }
                        else if (withBlock4.IsSkillAvailable(argsname1))
                        {
                            prob = prob + 30;
                        }
                    }
                }

                if (withBlock3.HP <= withBlock3.MaxHP / 4)
                {
                    {
                        var withBlock5 = withBlock3.MainPilot();
                        string argsname2 = "超底力";
                        string argsname3 = "底力";
                        if (withBlock5.IsSkillAvailable(argsname2))
                        {
                            prob = prob - 50;
                        }
                        else if (withBlock5.IsSkillAvailable(argsname3))
                        {
                            prob = prob - 30;
                        }
                    }
                }

                // スペシャルパワー及び特殊状態による補正
                if (is_true_value | mpskill >= 160)
                {
                    string argsptype4 = "命中強化";
                    object argIndex30 = "運動性ＵＰ";
                    if (IsUnderSpecialPowerEffect(argsptype4))
                    {
                        string argsname4 = "命中強化";
                        prob = (prob + 10d * SpecialPowerEffectLevel(argsname4));
                    }
                    else if (IsConditionSatisfied(argIndex30))
                    {
                        prob = prob + 15;
                    }

                    string argsptype5 = "回避強化";
                    object argIndex31 = "運動性ＵＰ";
                    if (withBlock3.IsUnderSpecialPowerEffect(argsptype5))
                    {
                        string argsname5 = "回避強化";
                        prob = (prob - 10d * withBlock3.SpecialPowerEffectLevel(argsname5));
                    }
                    else if (withBlock3.IsConditionSatisfied(argIndex31))
                    {
                        prob = prob - 15;
                    }

                    object argIndex32 = "運動性ＤＯＷＮ";
                    if (IsConditionSatisfied(argIndex32))
                    {
                        prob = prob - 15;
                    }

                    object argIndex33 = "運動性ＤＯＷＮ";
                    if (withBlock3.IsConditionSatisfied(argIndex33))
                    {
                        prob = prob + 15;
                    }

                    string argsptype6 = "命中低下";
                    if (IsUnderSpecialPowerEffect(argsptype6))
                    {
                        string argsname6 = "命中低下";
                        prob = (prob - 10d * SpecialPowerEffectLevel(argsname6));
                    }

                    string argsptype7 = "回避低下";
                    if (withBlock3.IsUnderSpecialPowerEffect(argsptype7))
                    {
                        string argsname7 = "回避低下";
                        prob = (prob + 10d * withBlock3.SpecialPowerEffectLevel(argsname7));
                    }

                    string argsptype8 = "命中率低下";
                    if (IsUnderSpecialPowerEffect(argsptype8))
                    {
                        string argsname8 = "命中率低下";
                        prob = ((long)(prob * (10d - SpecialPowerEffectLevel(argsname8))) / 10L);
                    }
                }
            }

            // 最終命中率を定義する。これがないときは何もしない
            object argIndex35 = "最終命中率";
            if (SRC.BCList.IsDefined(argIndex35))
            {
                // 事前にデータを登録
                BCVariable.DataReset();
                BCVariable.MeUnit = this;
                BCVariable.AtkUnit = this;
                BCVariable.DefUnit = t;
                BCVariable.WeaponNumber = w;
                BCVariable.LastVariable = prob;
                string argIndex34 = "最終命中率";
                prob = SRC.BCList.Item(argIndex34).Calculate();
            }

            if (prob < 0)
            {
                HitProbabilityRet = 0;
            }
            else
            {
                HitProbabilityRet = prob;
            }

            return HitProbabilityRet;
        }

        // 武器 w のユニット t に対するダメージ
        // 敵ユニットはスペシャルパワー等による補正を考慮しないので
        // is_true_value によって補正を省くかどうかを指定できるようにしている
        public int Damage(int w, Unit t, bool is_true_value, bool is_support_attack = false)
        {
            int DamageRet = default;
            int arm, arm_mod;
            int j, i, idx;
            string ch, wclass, buf;
            int mpskill;
            string fname, fdata;
            double flevel;
            double slevel;
            string sdata;
            int nmorale;
            bool neautralize;
            double lv_mod;
            string opt;
            string tname;
            double dmg_mod, uadaption = default;
            // 装甲、装甲補正一時保存
            double ed_amr;
            double ed_amr_fix;
            wclass = WeaponClass(w);

            // パイロットの技量によってダメージを正確に予測できるか左右される
            mpskill = MainPilot().TacticalTechnique();
            // 武器攻撃力
            DamageRet = WeaponPower(w, t.Area);
            // 攻撃力が0の場合は常にダメージ0
            if (DamageRet == 0)
            {
                return DamageRet;
            }

            // 基本装甲値
            arm = t.get_Armor("");

            // アーマー能力
            string argfname = "アーマー";
            if (!t.IsFeatureAvailable(argfname))
            {
                goto SkipArmor;
            }
            // ザコはアーマーを考慮しない
            if (!is_true_value & mpskill < 150)
            {
                goto SkipArmor;
            }

            arm_mod = 0;
            var loopTo = t.CountFeature();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex6 = i;
                if (t.Feature(argIndex6) == "アーマー")
                {
                    object argIndex1 = i;
                    fname = t.FeatureName0(argIndex1);
                    object argIndex2 = i;
                    fdata = t.FeatureData(argIndex2);
                    object argIndex3 = i;
                    flevel = t.FeatureLevel(argIndex3);

                    // 必要条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo1 = GeneralLib.LLength(fdata);
                    for (j = 4; j <= loopTo1; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (opt ?? "")
                        {
                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * (t.MainPilot().SynchroRate() - 30);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 2d;
                                    }

                                    slevel = lv_mod * t.MainPilot().Plana;
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 50d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 50d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超感覚":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 50d;
                                    }

                                    object argIndex4 = "超感覚";
                                    string argref_mode = "";
                                    object argIndex5 = "知覚強化";
                                    string argref_mode1 = "";
                                    slevel = lv_mod * (t.MainPilot().SkillLevel(argIndex4, ref_mode: argref_mode) + t.MainPilot().SkillLevel(argIndex5, ref_mode: argref_mode1));
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 50d;
                                    }

                                    double localSkillLevel() { object argIndex1 = opt; string argref_mode = ""; var ret = t.MainPilot().SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                    slevel = lv_mod * localSkillLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified() { string argaclass1 = GeneralLib.LIndex(fdata, 2); var ret = t.IsAttributeClassified(argaclass1, wclass); return ret; }

                    if (t.MainPilot().Morale >= nmorale & localIsAttributeClassified() & !neautralize)
                    {
                        // アーマー発動
                        arm_mod = (arm_mod + 100d * flevel + slevel);
                    }
                }
            }

            // 装甲が劣化している場合はアーマーによる装甲追加も半減
            object argIndex7 = "装甲劣化";
            if (t.IsConditionSatisfied(argIndex7))
            {
                arm_mod = arm_mod / 2;
            }

            arm = arm + arm_mod;
            SkipArmor:
            ;


            // 地形適応による装甲修正
            string argoname = "地形適応命中率修正";
            if (!Expression.IsOptionDefined(argoname))
            {
                switch (t.Area ?? "")
                {
                    case "空中":
                        {
                            uadaption = t.get_AdaptionMod(1, 0);
                            break;
                        }

                    case "地上":
                        {
                            if (Map.TerrainClass(t.x, t.y) == "月面")
                            {
                                uadaption = t.get_AdaptionMod(4, 0);
                            }
                            else
                            {
                                uadaption = t.get_AdaptionMod(2, 0);
                            }

                            break;
                        }

                    case "水上":
                        {
                            uadaption = t.get_AdaptionMod(2, 0);
                            break;
                        }

                    case "水中":
                        {
                            uadaption = t.get_AdaptionMod(3, 0);
                            break;
                        }

                    case "宇宙":
                        {
                            uadaption = t.get_AdaptionMod(4, 0);
                            break;
                        }

                    case "地中":
                        {
                            DamageRet = 0;
                            return DamageRet;
                        }
                }

                if (uadaption == 0d)
                {
                    uadaption = 0.6d;
                }
            }
            else if (t.Area == "地中")
            {
                DamageRet = 0;
                return DamageRet;
            }
            else
            {
                uadaption = 1d;
            }

            // 不屈による装甲修正
            string argsname = "不屈";
            if (t.MainPilot().IsSkillAvailable(argsname))
            {
                string argoname1 = "防御力倍率低下";
                if (Expression.IsOptionDefined(argoname1))
                {
                    if (t.HP <= t.MaxHP / 8)
                    {
                        arm = (1.15d * arm);
                    }
                    else if (t.HP <= t.MaxHP / 4)
                    {
                        arm = (1.1d * arm);
                    }
                    else if (t.HP <= t.MaxHP / 2)
                    {
                        arm = (1.05d * arm);
                    }
                }
                else if (t.HP <= t.MaxHP / 8)
                {
                    arm = (1.3d * arm);
                }
                else if (t.HP <= t.MaxHP / 4)
                {
                    arm = (1.2d * arm);
                }
                else if (t.HP <= t.MaxHP / 2)
                {
                    arm = (1.1d * arm);
                }
            }

            // スペシャルパワーによる無防備状態
            string argsptype = "無防備";
            if (t.IsUnderSpecialPowerEffect(argsptype))
            {
                arm = 0;
            }

            if (is_true_value | mpskill >= 160)
            {
                // スペシャルパワーによる修正
                string argsptype1 = "装甲強化";
                // 装甲強化
                object argIndex8 = "防御力ＵＰ";
                if (t.IsUnderSpecialPowerEffect(argsptype1))
                {
                    string argsname1 = "装甲強化";
                    arm = (arm * (1d + 0.1d * t.SpecialPowerEffectLevel(argsname1)));
                }
                else if (t.IsConditionSatisfied(argIndex8))
                {
                    string argoname2 = "防御力倍率低下";
                    if (Expression.IsOptionDefined(argoname2))
                    {
                        arm = (1.25d * arm);
                    }
                    else
                    {
                        arm = (1.5d * arm);
                    }
                }

                string argsptype2 = "装甲低下";
                object argIndex9 = "防御力ＤＯＷＮ";
                if (t.IsUnderSpecialPowerEffect(argsptype2))
                {
                    string argsname2 = "装甲低下";
                    arm = (arm * (1d + 0.1d * t.SpecialPowerEffectLevel(argsname2)));
                }
                else if (t.IsConditionSatisfied(argIndex9))
                {
                    arm = (0.75d * arm);
                }
            }

            // 貫通型攻撃
            string argsptype3 = "貫通攻撃";
            string argattr2 = "貫";
            if (IsUnderSpecialPowerEffect(argsptype3))
            {
                arm = arm / 2;
            }
            else if (IsWeaponClassifiedAs(w, argattr2))
            {
                string argattr1 = "貫";
                if (IsWeaponLevelSpecified(w, argattr1))
                {
                    string argattr = "貫";
                    arm = ((long)(arm * (10d - WeaponLevel(w, argattr))) / 10L);
                }
                else
                {
                    arm = arm / 2;
                }
            }

            if (is_true_value | mpskill >= 140)
            {
                // 弱点
                if (t.Weakness(wclass))
                {
                    arm = arm / 2;
                }
                // 吸収する場合は装甲を無視して判定
                else if (!t.Effective(wclass) & t.Absorb(wclass))
                {
                    arm = 0;
                }
            }

            object argIndex11 = "防御補正";
            if (SRC.BCList.IsDefined(argIndex11))
            {
                // バトルコンフィグデータによる計算実行
                BCVariable.DataReset();
                BCVariable.MeUnit = t;
                BCVariable.AtkUnit = this;
                BCVariable.DefUnit = t;
                BCVariable.WeaponNumber = w;
                BCVariable.Armor = arm;
                BCVariable.TerrainAdaption = uadaption;
                string argIndex10 = "防御補正";
                arm = SRC.BCList.Item(argIndex10).Calculate();
            }
            else
            {
                {
                    var withBlock = t.MainPilot();
                    // 気力による装甲修正
                    string argoname3 = "気力効果小";
                    if (Expression.IsOptionDefined(argoname3))
                    {
                        arm = arm * (50 + (withBlock.Morale + withBlock.MoraleMod) / 2) / 100;
                    }
                    else
                    {
                        arm = arm * (withBlock.Morale + withBlock.MoraleMod) / 100;
                    }

                    // レベルアップによる装甲修正＋耐久能力
                    arm = arm * withBlock.Defense / 100;
                }

                // 地形適応による装甲修正
                arm = (arm * uadaption);
            }

            // ダメージ固定武器の場合は装甲と地形＆距離修正を無視
            string argstring2 = "固";
            if (GeneralLib.InStrNotNest(wclass, argstring2) > 0)
            {
                goto SkipDamageMod;
            }

            object argIndex13 = "ダメージ";
            if (SRC.BCList.IsDefined(argIndex13))
            {
                // バトルコンフィグデータによる計算実行
                // 事前にデータを登録
                BCVariable.DataReset();
                BCVariable.MeUnit = this;
                BCVariable.AtkUnit = this;
                BCVariable.DefUnit = t;
                BCVariable.WeaponNumber = w;
                BCVariable.AttackVariable = DamageRet;
                BCVariable.DffenceVariable = arm;
                if (Map.TerrainClass(t.x, t.y) == "月面")
                {
                    if (t.Area == "地上")
                    {
                        BCVariable.TerrainAdaption = (100 - Map.TerrainEffectForDamage(t.x, t.y)) / 100d;
                    }
                    else
                    {
                        BCVariable.TerrainAdaption = 1d;
                    }
                }
                else if (t.Area != "空中")
                {
                    BCVariable.TerrainAdaption = (100 - Map.TerrainEffectForDamage(t.x, t.y)) / 100d;
                }
                else
                {
                    BCVariable.TerrainAdaption = 1d;
                }

                string argIndex12 = "ダメージ";
                DamageRet = SRC.BCList.Item(argIndex12).Calculate();
            }
            else
            {
                // 装甲値によってダメージを軽減
                DamageRet = DamageRet - arm;

                // 地形補正
                if (Map.TerrainClass(t.x, t.y) == "月面")
                {
                    if (t.Area == "地上")
                    {
                        DamageRet = (DamageRet * ((100 - Map.TerrainEffectForDamage(t.x, t.y)) / 100d));
                    }
                }
                else if (t.Area != "空中")
                {
                    DamageRet = (DamageRet * ((100 - Map.TerrainEffectForDamage(t.x, t.y)) / 100d));
                }
            }

            // 散属性武器は離れるほどダメージダウン
            string argstring21 = "散";
            if (GeneralLib.InStrNotNest(wclass, argstring21) > 0)
            {
                switch ((Math.Abs((x - t.x)) + Math.Abs((y - t.y))))
                {
                    case 1:
                        {
                            break;
                        }
                    // 修正なし
                    case 2:
                        {
                            DamageRet = (0.95d * DamageRet);
                            break;
                        }

                    case 3:
                        {
                            DamageRet = (0.9d * DamageRet);
                            break;
                        }

                    case 4:
                        {
                            DamageRet = (0.85d * DamageRet);
                            break;
                        }

                    default:
                        {
                            DamageRet = (0.8d * DamageRet);
                            break;
                        }
                }
            }

            // 距離修正
            string argoname6 = "距離修正";
            if (Expression.IsOptionDefined(argoname6))
            {
                string argstring22 = "実";
                string argstring23 = "武";
                string argstring24 = "突";
                string argstring25 = "接";
                string argstring26 = "爆";
                if (GeneralLib.InStrNotNest(wclass, argstring22) == 0 & GeneralLib.InStrNotNest(wclass, argstring23) == 0 & GeneralLib.InStrNotNest(wclass, argstring24) == 0 & GeneralLib.InStrNotNest(wclass, argstring25) == 0 & GeneralLib.InStrNotNest(wclass, argstring26) == 0)
                {
                    string argoname4 = "大型マップ";
                    string argoname5 = "小型マップ";
                    if (Expression.IsOptionDefined(argoname4))
                    {
                        switch ((Math.Abs((x - t.x)) + Math.Abs((y - t.y))))
                        {
                            case var @case when 1 <= @case && @case <= 4:
                                {
                                    break;
                                }
                            // 修正なし
                            case 5:
                            case 6:
                                {
                                    DamageRet = (0.95d * DamageRet);
                                    break;
                                }

                            case 7:
                            case 8:
                                {
                                    DamageRet = (0.9d * DamageRet);
                                    break;
                                }

                            case 9:
                            case 10:
                                {
                                    DamageRet = (0.85d * DamageRet);
                                    break;
                                }

                            default:
                                {
                                    DamageRet = (0.8d * DamageRet);
                                    break;
                                }
                        }
                    }
                    else if (Expression.IsOptionDefined(argoname5))
                    {
                        switch ((Math.Abs((x - t.x)) + Math.Abs((y - t.y))))
                        {
                            case 1:
                                {
                                    break;
                                }
                            // 修正なし
                            case 2:
                                {
                                    DamageRet = (0.95d * DamageRet);
                                    break;
                                }

                            case 3:
                                {
                                    DamageRet = (0.9d * DamageRet);
                                    break;
                                }

                            case 4:
                                {
                                    DamageRet = (0.85d * DamageRet);
                                    break;
                                }

                            case 5:
                                {
                                    DamageRet = (0.8d * DamageRet);
                                    break;
                                }

                            case 6:
                                {
                                    DamageRet = (0.75d * DamageRet);
                                    break;
                                }

                            default:
                                {
                                    DamageRet = (0.7d * DamageRet);
                                    break;
                                }
                        }
                    }
                    else
                    {
                        switch ((Math.Abs((x - t.x)) + Math.Abs((y - t.y))))
                        {
                            case var case1 when 1 <= case1 && case1 <= 3:
                                {
                                    break;
                                }
                            // 修正なし
                            case 4:
                                {
                                    DamageRet = (0.95d * DamageRet);
                                    break;
                                }

                            case 5:
                                {
                                    DamageRet = (0.9d * DamageRet);
                                    break;
                                }

                            case 6:
                                {
                                    DamageRet = (0.85d * DamageRet);
                                    break;
                                }

                            default:
                                {
                                    DamageRet = (0.8d * DamageRet);
                                    break;
                                }
                        }
                    }
                }
            }

            SkipDamageMod:
            ;


            // 封印攻撃は弱点もしくは有効を持つユニット以外には効かない
            string argstring27 = "封";
            if (GeneralLib.InStrNotNest(wclass, argstring27) > 0)
            {
                buf = t.strWeakness + t.strEffective;
                var loopTo2 = Strings.Len(buf);
                for (i = 1; i <= loopTo2; i++)
                {
                    // 属性をひとまとめずつ取得
                    ch = GeneralLib.GetClassBundle(buf, i);
                    if (ch != "物" & ch != "魔")
                    {
                        if (GeneralLib.InStrNotNest(wclass, ch) > 0)
                        {
                            break;
                        }
                    }
                }

                if (i > Strings.Len(buf))
                {
                    DamageRet = 0;
                    return DamageRet;
                }
            }

            // 限定攻撃は指定属性に対して弱点もしくは有効を持つユニット以外には効かない
            string argstring28 = "限";
            idx = GeneralLib.InStrNotNest(wclass, argstring28);
            if (idx > 0)
            {
                buf = t.strWeakness + t.strEffective;
                var loopTo3 = Strings.Len(buf);
                for (i = 1; i <= loopTo3; i++)
                {
                    // 属性をひとまとめずつ取得
                    ch = GeneralLib.GetClassBundle(buf, i);
                    if (ch != "物" & ch != "魔")
                    {
                        if (GeneralLib.InStrNotNest(wclass, ch) > idx)
                        {
                            break;
                        }
                    }
                }

                if (i > Strings.Len(buf))
                {
                    DamageRet = 0;
                    return DamageRet;
                }
            }

            // 特定レベル限定攻撃
            string argattr4 = "対";
            if (WeaponLevel(w, argattr4) > 0d)
            {
                // UPGRADE_WARNING: Mod に新しい動作が指定されています。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="9B7D5ADD-D8FE-4819-A36C-6DEDAF088CC7"' をクリックしてください。
                string argattr3 = "対";
                if (t.MainPilot().Level % WeaponLevel(w, argattr3) != 0d)
                {
                    DamageRet = 0;
                    return DamageRet;
                }
            }

            if (is_true_value | mpskill >= 140)
            {
                // 弱点、有効、吸収を優先
                if (!t.Weakness(wclass) & !t.Effective(wclass) & !t.Absorb(wclass))
                {
                    // 無効化
                    if (t.Immune(wclass))
                    {
                        DamageRet = 0;
                        return DamageRet;
                    }
                    // 耐性
                    else if (t.Resist(wclass))
                    {
                        DamageRet = DamageRet / 2;
                    }
                }
            }

            // 盲目状態には視覚攻撃は効かない
            if (is_true_value | mpskill >= 140)
            {
                string argstring29 = "視";
                if (GeneralLib.InStrNotNest(wclass, argstring29) > 0)
                {
                    object argIndex14 = "盲目";
                    if (t.IsConditionSatisfied(argIndex14))
                    {
                        DamageRet = 0;
                        return DamageRet;
                    }
                }
            }

            // 機械には精神攻撃は効かない
            if (is_true_value | mpskill >= 140)
            {
                string argstring210 = "精";
                if (GeneralLib.InStrNotNest(wclass, argstring210) > 0)
                {
                    if (t.MainPilot().Personality == "機械")
                    {
                        DamageRet = 0;
                        return DamageRet;
                    }
                }
            }

            // 性別限定武器
            string argstring211 = "♂";
            if (GeneralLib.InStrNotNest(wclass, argstring211) > 0)
            {
                if (t.MainPilot().Sex != "男性")
                {
                    DamageRet = 0;
                    return DamageRet;
                }
            }

            string argstring212 = "♀";
            if (GeneralLib.InStrNotNest(wclass, argstring212) > 0)
            {
                if (t.MainPilot().Sex != "女性")
                {
                    DamageRet = 0;
                    return DamageRet;
                }
            }

            // 寝こみを襲うとダメージ1.5倍
            object argIndex15 = "睡眠";
            if (t.IsConditionSatisfied(argIndex15))
            {
                DamageRet = (1.5d * DamageRet);
            }

            {
                var withBlock1 = MainPilot();
                // 高気力時のダメージ増加能力
                if (withBlock1.Morale >= 130)
                {
                    string argoname7 = "ダメージ倍率低下";
                    if (Expression.IsOptionDefined(argoname7))
                    {
                        string argsname3 = "潜在力開放";
                        if (withBlock1.IsSkillAvailable(argsname3))
                        {
                            DamageRet = (1.2d * DamageRet);
                        }

                        string argfname1 = "ブースト";
                        if (IsFeatureAvailable(argfname1))
                        {
                            DamageRet = (1.2d * DamageRet);
                        }
                    }
                    else
                    {
                        string argsname4 = "潜在力開放";
                        if (withBlock1.IsSkillAvailable(argsname4))
                        {
                            DamageRet = (1.25d * DamageRet);
                        }

                        string argfname2 = "ブースト";
                        if (IsFeatureAvailable(argfname2))
                        {
                            DamageRet = (1.25d * DamageRet);
                        }
                    }
                }

                // 得意技
                string argsname5 = "得意技";
                if (withBlock1.IsSkillAvailable(argsname5))
                {
                    object argIndex16 = "得意技";
                    sdata = withBlock1.SkillData(argIndex16);
                    var loopTo4 = Strings.Len(sdata);
                    for (i = 1; i <= loopTo4; i++)
                    {
                        string argstring213 = Strings.Mid(sdata, i, 1);
                        if (GeneralLib.InStrNotNest(wclass, argstring213) > 0)
                        {
                            DamageRet = (1.2d * DamageRet);
                            break;
                        }
                    }
                }

                // 不得手
                string argsname6 = "不得手";
                if (withBlock1.IsSkillAvailable(argsname6))
                {
                    object argIndex17 = "不得手";
                    sdata = withBlock1.SkillData(argIndex17);
                    var loopTo5 = Strings.Len(sdata);
                    for (i = 1; i <= loopTo5; i++)
                    {
                        string argstring214 = Strings.Mid(sdata, i, 1);
                        if (GeneralLib.InStrNotNest(wclass, argstring214) > 0)
                        {
                            DamageRet = (0.8d * DamageRet);
                            break;
                        }
                    }
                }
            }

            // ハンター能力
            // (ターゲットのMainPilotを参照するため、「With .MainPilot」は使えない)
            string argsname7 = "ハンター";
            if (MainPilot().IsSkillAvailable(argsname7))
            {
                var loopTo6 = MainPilot().CountSkill();
                for (i = 1; i <= loopTo6; i++)
                {
                    object argIndex19 = i;
                    if (MainPilot().Skill(argIndex19) == "ハンター")
                    {
                        object argIndex18 = i;
                        sdata = MainPilot().SkillData(argIndex18);
                        var loopTo7 = GeneralLib.LLength(sdata);
                        for (j = 2; j <= loopTo7; j++)
                        {
                            tname = GeneralLib.LIndex(sdata, j);
                            if ((t.Name ?? "") == (tname ?? "") | (t.Class0 ?? "") == (tname ?? "") | (t.Size + "サイズ" ?? "") == (tname ?? "") | (t.MainPilot().Name ?? "") == (tname ?? "") | (t.MainPilot().Sex ?? "") == (tname ?? ""))
                            {
                                break;
                            }
                        }

                        if (j <= GeneralLib.LLength(sdata))
                        {
                            double localSkillLevel1() { object argIndex1 = i; string argref_mode = ""; var ret = MainPilot().SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                            DamageRet = ((long)((10d + localSkillLevel1()) * DamageRet) / 10L);
                            break;
                        }
                    }
                }

                object argIndex22 = "ハンター付加";
                object argIndex23 = "ハンター付加２";
                if (IsConditionSatisfied(argIndex22) | IsConditionSatisfied(argIndex23))
                {
                    object argIndex20 = "ハンター";
                    sdata = MainPilot().SkillData(argIndex20);
                    var loopTo8 = GeneralLib.LLength(sdata);
                    for (i = 2; i <= loopTo8; i++)
                    {
                        tname = GeneralLib.LIndex(sdata, i);
                        if ((t.Name ?? "") == (tname ?? "") | (t.Class0 ?? "") == (tname ?? "") | (t.Size + "サイズ" ?? "") == (tname ?? "") | (t.MainPilot().Name ?? "") == (tname ?? "") | (t.MainPilot().Sex ?? "") == (tname ?? ""))
                        {
                            break;
                        }
                    }

                    if (i <= GeneralLib.LLength(sdata))
                    {
                        object argIndex21 = "ハンター";
                        string argref_mode2 = "";
                        DamageRet = ((long)((10d + MainPilot().SkillLevel(argIndex21, ref_mode: argref_mode2)) * DamageRet) / 10L);
                    }
                }
            }

            // スペシャルパワー、特殊状態によるダメージ増加
            dmg_mod = 1d;
            object argIndex24 = "攻撃力ＵＰ";
            object argIndex25 = "狂戦士";
            if (IsConditionSatisfied(argIndex24) | IsConditionSatisfied(argIndex25))
            {
                string argoname8 = "ダメージ倍率低下";
                if (Expression.IsOptionDefined(argoname8))
                {
                    dmg_mod = 1.2d;
                }
                else
                {
                    dmg_mod = 1.25d;
                }
            }
            // サポートアタックの場合はスペシャルパワーによる修正が無い
            if (!is_support_attack)
            {
                if (is_true_value | mpskill >= 160)
                {
                    // スペシャルパワーによるダメージ増加は特殊状態による増加と重複しない
                    string argsname8 = "ダメージ増加";
                    dmg_mod = GeneralLib.MaxDbl(dmg_mod, 1d + 0.1d * SpecialPowerEffectLevel(argsname8));
                    string argsname9 = "被ダメージ増加";
                    dmg_mod = dmg_mod + 0.1d * t.SpecialPowerEffectLevel(argsname9);
                }
            }

            DamageRet = (dmg_mod * DamageRet);

            // スペシャルパワー、特殊状態、サポートアタックによるダメージ低下
            if (is_true_value | mpskill >= 160)
            {
                dmg_mod = 1d;
                string argsname10 = "ダメージ低下";
                dmg_mod = dmg_mod - 0.1d * SpecialPowerEffectLevel(argsname10);
                string argsname11 = "被ダメージ低下";
                dmg_mod = dmg_mod - 0.1d * t.SpecialPowerEffectLevel(argsname11);
                DamageRet = (dmg_mod * DamageRet);
            }

            object argIndex26 = "攻撃力ＤＯＷＮ";
            if (IsConditionSatisfied(argIndex26))
            {
                DamageRet = (0.75d * DamageRet);
            }

            object argIndex27 = "恐怖";
            if (IsConditionSatisfied(argIndex27))
            {
                DamageRet = (0.8d * DamageRet);
            }

            if (is_support_attack)
            {
                // サポートアタックダメージ低下
                string argoname9 = "サポートアタックダメージ低下";
                if (Expression.IsOptionDefined(argoname9))
                {
                    DamageRet = (0.7d * DamageRet);
                }
            }

            // レジスト能力
            dmg_mod = 0d;
            string argfname3 = "レジスト";
            if (!t.IsFeatureAvailable(argfname3))
            {
                goto SkipResist;
            }
            // ザコはレジストを考慮しない
            if (!is_true_value & mpskill < 150)
            {
                goto SkipResist;
            }

            var loopTo9 = t.CountFeature();
            for (i = 1; i <= loopTo9; i++)
            {
                object argIndex33 = i;
                if (t.Feature(argIndex33) == "レジスト")
                {
                    object argIndex28 = i;
                    fname = t.FeatureName0(argIndex28);
                    object argIndex29 = i;
                    fdata = t.FeatureData(argIndex29);
                    object argIndex30 = i;
                    flevel = t.FeatureLevel(argIndex30);

                    // 必要条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo10 = GeneralLib.LLength(fdata);
                    for (j = 4; j <= loopTo10; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr1 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr1);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (opt ?? "")
                        {
                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 0.5d;
                                    }

                                    slevel = lv_mod * (t.MainPilot().SynchroRate() - 30);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 0.2d;
                                    }

                                    slevel = lv_mod * t.MainPilot().Plana;
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超感覚":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    object argIndex31 = "超感覚";
                                    string argref_mode3 = "";
                                    object argIndex32 = "知覚強化";
                                    string argref_mode4 = "";
                                    slevel = lv_mod * (t.MainPilot().SkillLevel(argIndex31, ref_mode: argref_mode3) + t.MainPilot().SkillLevel(argIndex32, ref_mode: argref_mode4));
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    double localSkillLevel2() { object argIndex1 = opt; string argref_mode = ""; var ret = t.MainPilot().SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                    slevel = lv_mod * localSkillLevel2();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified1() { string argaclass1 = GeneralLib.LIndex(fdata, 2); var ret = t.IsAttributeClassified(argaclass1, wclass); return ret; }

                    if (t.MainPilot().Morale >= nmorale & localIsAttributeClassified1() & !neautralize)
                    {
                        // レジスト発動
                        dmg_mod = dmg_mod + 10d * flevel + slevel;
                    }
                }
            }

            DamageRet = ((long)(DamageRet * (100d - dmg_mod)) / 100L);
            SkipResist:
            ;
            object argIndex35 = "最終ダメージ";
            if (SRC.BCList.IsDefined(argIndex35))
            {
                // バトルコンフィグデータによる計算実行
                BCVariable.DataReset();
                BCVariable.MeUnit = this;
                BCVariable.AtkUnit = this;
                BCVariable.DefUnit = t;
                BCVariable.WeaponNumber = w;
                BCVariable.LastVariable = DamageRet;
                string argIndex34 = "最終ダメージ";
                DamageRet = SRC.BCList.Item(argIndex34).Calculate();
            }

            // 最低ダメージは10
            if (dmg_mod < 100d)
            {
                if (DamageRet < 10)
                {
                    // MOD START MARGE
                    // Damage = 10
                    string argoname10 = "ダメージ下限解除";
                    string argoname11 = "ダメージ下限１";
                    if (Expression.IsOptionDefined(argoname10))
                    {
                        DamageRet = GeneralLib.MaxLng(DamageRet, 0);
                    }
                    else if (Expression.IsOptionDefined(argoname11))
                    {
                        DamageRet = GeneralLib.MaxLng(DamageRet, 1);
                    }
                    else
                    {
                        DamageRet = 10;
                    }
                    // MOD END MARGE
                }
            }

            // ダメージを吸収する場合は最後に反転
            if (is_true_value | mpskill >= 140)
            {
                // 弱点、有効を優先
                if (!t.Weakness(wclass) & !t.Effective(wclass))
                {
                    // 吸収
                    if (DamageRet > 0 & t.Absorb(wclass))
                    {
                        DamageRet = -DamageRet / 2;
                    }
                }
            }

            return DamageRet;
        }

        // クリティカルの発生率
        public int CriticalProbability(int w, Unit t, string def_mode = "")
        {
            int CriticalProbabilityRet = default;
            int i, prob, idx;
            string wclass;
            string buf, c;
            var is_special = default(bool);
            // クリティカル攻撃、防御の一時保存変数
            int ed_crtatk, ed_crtdfe;
            if (IsNormalWeapon(w))
            {
                // 通常攻撃

                // スペシャルパワーとの効果の重ね合わせが禁止されている場合
                string argoname = "スペシャルパワー使用時クリティカル無効";
                string argoname1 = "精神コマンド使用時クリティカル無効";
                if (Expression.IsOptionDefined(argoname) | Expression.IsOptionDefined(argoname1))
                {
                    string argsptype = "ダメージ増加";
                    if (IsUnderSpecialPowerEffect(argsptype))
                    {
                        return CriticalProbabilityRet;
                    }
                }

                // 攻撃側による補正
                object argIndex2 = "クリティカル攻撃補正";
                if (SRC.BCList.IsDefined(argIndex2))
                {
                    // バトルコンフィグデータの設定による修正
                    // 一時保存変数に一時保存
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = this;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    BCVariable.AttackExp = WeaponCritical(w);
                    string argIndex1 = "クリティカル攻撃補正";
                    ed_crtatk = SRC.BCList.Item(argIndex1).Calculate();
                }
                else
                {
                    // 一時保存変数に一時保存
                    ed_crtatk = (WeaponCritical(w) + this.MainPilot().Technique);
                }

                // 防御側による補正
                object argIndex4 = "クリティカル防御補正";
                if (SRC.BCList.IsDefined(argIndex4))
                {
                    // バトルコンフィグデータの設定による修正
                    // 一時保存変数に一時保存
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = t;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    string argIndex3 = "クリティカル防御補正";
                    ed_crtdfe = SRC.BCList.Item(argIndex3).Calculate();
                }
                else
                {
                    // 一時保存変数に一時保存
                    ed_crtdfe = t.MainPilot().Technique;
                }

                // クリティカル発生率計算
                object argIndex6 = "クリティカル発生率";
                if (SRC.BCList.IsDefined(argIndex6))
                {
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = this;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    BCVariable.AttackVariable = ed_crtatk;
                    BCVariable.DffenceVariable = ed_crtdfe;
                    string argIndex5 = "クリティカル発生率";
                    prob = SRC.BCList.Item(argIndex5).Calculate();
                }
                else
                {
                    prob = (ed_crtatk - ed_crtdfe);
                }

                // 超反応による修正
                object argIndex7 = "超反応";
                string argref_mode = "";
                object argIndex8 = "超反応";
                string argref_mode1 = "";
                prob = (prob + 2d * MainPilot().SkillLevel(argIndex7, ref_mode: argref_mode) - 2d * t.MainPilot().SkillLevel(argIndex8, ref_mode: argref_mode1));

                // 超能力による修正
                string argsname = "超能力";
                if (MainPilot().IsSkillAvailable(argsname))
                {
                    prob = (prob + 5);
                }

                // 底力、超底力、覚悟による修正
                if (HP <= MaxHP / 4)
                {
                    string argsname1 = "底力";
                    string argsname2 = "超底力";
                    string argsname3 = "覚悟";
                    if (MainPilot().IsSkillAvailable(argsname1) | MainPilot().IsSkillAvailable(argsname2) | MainPilot().IsSkillAvailable(argsname3))
                    {
                        prob = (prob + 50);
                    }
                }

                // スペシャルパワーにる修正
                string argsname4 = "クリティカル率増加";
                prob = (prob + 10d * SpecialPowerEffectLevel(argsname4));
            }
            else
            {
                // 特殊効果を伴う攻撃
                is_special = true;

                // 攻撃側による補正
                object argIndex10 = "特殊効果攻撃補正";
                if (SRC.BCList.IsDefined(argIndex10))
                {
                    // バトルコンフィグデータの設定による修正
                    // 一時保存変数に一時保存
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = this;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    BCVariable.AttackExp = WeaponCritical(w);
                    string argIndex9 = "特殊効果攻撃補正";
                    ed_crtatk = SRC.BCList.Item(argIndex9).Calculate();
                }
                else
                {
                    // 一時保存変数に一時保存
                    ed_crtatk = (WeaponCritical(w) + this.MainPilot().Technique / 2);
                }

                // 防御側による補正
                object argIndex12 = "特殊効果防御補正";
                if (SRC.BCList.IsDefined(argIndex12))
                {
                    // バトルコンフィグデータの設定による修正
                    // 一時保存変数に一時保存
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = t;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    // 特殊効果の場合は相手がザコの時に確率が増加
                    if (Strings.InStr(t.MainPilot().Name, "(ザコ)") > 0)
                    {
                        BCVariable.CommonEnemy = 30;
                    }

                    string argIndex11 = "特殊効果防御補正";
                    ed_crtdfe = SRC.BCList.Item(argIndex11).Calculate();
                }
                else
                {
                    // 一時保存変数に一時保存
                    ed_crtdfe = (t.MainPilot().Technique / 2);

                    // 特殊効果の場合は相手がザコの時に確率が増加
                    if (Strings.InStr(t.MainPilot().Name, "(ザコ)") > 0)
                    {
                        // 一時保存変数に一時保存
                        ed_crtdfe = (ed_crtdfe - 30);
                    }
                }

                // 特殊効果発生率計算
                object argIndex14 = "特殊効果発生率";
                if (SRC.BCList.IsDefined(argIndex14))
                {
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = this;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    BCVariable.AttackVariable = ed_crtatk;
                    BCVariable.DffenceVariable = ed_crtdfe;
                    string argIndex13 = "特殊効果発生率";
                    prob = SRC.BCList.Item(argIndex13).Calculate();
                }
                else
                {
                    prob = (ed_crtatk - ed_crtdfe);
                }

                // 抵抗力による修正
                object argIndex15 = "抵抗力";
                prob = (prob - 10d * t.FeatureLevel(argIndex15));
            }

            // 不意打ち
            string argfname = "ステルス";
            object argIndex16 = "ステルス無効";
            string argfname1 = "ステルス無効化";
            string argattr = "忍";
            if (IsFeatureAvailable(argfname) & !IsConditionSatisfied(argIndex16) & !t.IsFeatureAvailable(argfname1) & IsWeaponClassifiedAs(w, argattr))
            {
                prob = (prob + 10);
            }

            // 相手が動けなければ確率アップ
            object argIndex17 = "行動不能";
            object argIndex18 = "石化";
            object argIndex19 = "凍結";
            object argIndex20 = "麻痺";
            object argIndex21 = "睡眠";
            string argsptype1 = "行動不能";
            if (t.IsConditionSatisfied(argIndex17) | t.IsConditionSatisfied(argIndex18) | t.IsConditionSatisfied(argIndex19) | t.IsConditionSatisfied(argIndex20) | t.IsConditionSatisfied(argIndex21) | t.IsUnderSpecialPowerEffect(argsptype1))
            {
                prob = (prob + 10);
            }

            // 以下の修正は特殊効果発動確率にのみ影響
            if (is_special)
            {
                wclass = WeaponClass(w);

                // 封印攻撃は弱点、有効を持つユニット以外には効かない
                string argstring2 = "封";
                if (GeneralLib.InStrNotNest(wclass, argstring2) > 0)
                {
                    buf = t.strWeakness + t.strEffective;
                    var loopTo = Strings.Len(buf);
                    for (i = 1; i <= loopTo; i++)
                    {
                        // 属性をひとまとめずつ取得
                        c = GeneralLib.GetClassBundle(buf, i);
                        if (c != "物" & c != "魔")
                        {
                            if (GeneralLib.InStrNotNest(wclass, c) > 0)
                            {
                                break;
                            }
                        }
                    }

                    if (i > Strings.Len(buf))
                    {
                        CriticalProbabilityRet = 0;
                        return CriticalProbabilityRet;
                    }
                }

                // 限定攻撃は弱点、有効を持つユニット以外には効かない
                string argstring21 = "限";
                idx = GeneralLib.InStrNotNest(wclass, argstring21);
                if (idx > 0)
                {
                    buf = t.strWeakness + t.strEffective;
                    var loopTo1 = Strings.Len(buf);
                    for (i = 1; i <= loopTo1; i++)
                    {
                        // 属性をひとまとめずつ取得
                        c = GeneralLib.GetClassBundle(buf, i);
                        if (c != "物" & c != "魔")
                        {
                            if (GeneralLib.InStrNotNest(wclass, c) > idx)
                            {
                                break;
                            }
                        }
                    }

                    if (i > Strings.Len(buf))
                    {
                        CriticalProbabilityRet = 0;
                        return CriticalProbabilityRet;
                    }
                }

                // 特定レベル限定攻撃
                string argstring22 = "対";
                if (GeneralLib.InStrNotNest(wclass, argstring22) > 0)
                {
                    // UPGRADE_WARNING: Mod に新しい動作が指定されています。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="9B7D5ADD-D8FE-4819-A36C-6DEDAF088CC7"' をクリックしてください。
                    string argattr1 = "対";
                    if (t.MainPilot().Level % WeaponLevel(w, argattr1) != 0d)
                    {
                        CriticalProbabilityRet = 0;
                        return CriticalProbabilityRet;
                    }
                }

                // クリティカル率については、
                // 弱、効属性の指定属性に対しての防御特性を考慮する。
                buf = "";
                string argstring23 = "弱";
                i = GeneralLib.InStrNotNest(wclass, argstring23);
                while (i > 0)
                {
                    buf = buf + Strings.Mid(GeneralLib.GetClassBundle(wclass, i), 2);
                    string argstring24 = "弱";
                    i = GeneralLib.InStrNotNest(wclass, argstring24, (i + 1));
                }

                string argstring25 = "効";
                i = GeneralLib.InStrNotNest(wclass, argstring25);
                while (i > 0)
                {
                    buf = buf + Strings.Mid(GeneralLib.GetClassBundle(wclass, i), 2);
                    string argstring26 = "効";
                    i = GeneralLib.InStrNotNest(wclass, argstring26, (i + 1));
                }

                buf = buf + wclass;

                // 弱点
                // 変化なし
                // 封印技
                string argstring27 = "封";
                // 限定技
                string argstring28 = "限";
                if (t.Weakness(buf))
                {
                    prob = (prob + 10);
                }
                // 有効
                else if (t.Effective(buf))
                {
                }
                else if (GeneralLib.InStrNotNest(wclass, argstring27) > 0)
                {
                    CriticalProbabilityRet = 0;
                    return CriticalProbabilityRet;
                }
                else if (GeneralLib.InStrNotNest(wclass, argstring28) > 0)
                {
                    CriticalProbabilityRet = 0;
                    return CriticalProbabilityRet;
                }
                // 吸収
                else if (t.Absorb(buf))
                {
                    CriticalProbabilityRet = 0;
                    return CriticalProbabilityRet;
                }
                // 無効化
                else if (t.Immune(buf))
                {
                    CriticalProbabilityRet = 0;
                    return CriticalProbabilityRet;
                }
                // 耐性
                else if (t.Resist(buf))
                {
                    prob = (prob / 2);
                }

                // 盲目状態には視覚攻撃は効かない
                string argstring29 = "視";
                if (GeneralLib.InStrNotNest(wclass, argstring29) > 0)
                {
                    object argIndex22 = "盲目";
                    if (t.IsConditionSatisfied(argIndex22))
                    {
                        CriticalProbabilityRet = 0;
                        return CriticalProbabilityRet;
                    }
                }

                // 機械には精神攻撃は効かない
                string argstring210 = "精";
                if (GeneralLib.InStrNotNest(wclass, argstring210) > 0)
                {
                    if (t.MainPilot().Personality == "機械")
                    {
                        CriticalProbabilityRet = 0;
                        return CriticalProbabilityRet;
                    }
                }

                // 性別限定武器
                string argstring211 = "♂";
                if (GeneralLib.InStrNotNest(wclass, argstring211) > 0)
                {
                    if (t.MainPilot().Sex != "男性")
                    {
                        CriticalProbabilityRet = 0;
                        return CriticalProbabilityRet;
                    }
                }

                string argstring212 = "♀";
                if (GeneralLib.InStrNotNest(wclass, argstring212) > 0)
                {
                    if (t.MainPilot().Sex != "女性")
                    {
                        CriticalProbabilityRet = 0;
                        return CriticalProbabilityRet;
                    }
                }
            }

            // 防御時はクリティカル発生確率が半減
            if (def_mode == "防御")
            {
                prob = (prob / 2);
            }

            // 最終クリティカル/特殊効果を定義する。これがないときは何もしない
            if (IsNormalWeapon(w))
            {
                // クリティカル
                object argIndex24 = "最終クリティカル発生率";
                if (SRC.BCList.IsDefined(argIndex24))
                {
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = this;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    BCVariable.LastVariable = prob;
                    string argIndex23 = "最終クリティカル発生率";
                    prob = SRC.BCList.Item(argIndex23).Calculate();
                }
            }
            else
            {
                // 特殊効果
                object argIndex26 = "最終特殊効果発生率";
                if (SRC.BCList.IsDefined(argIndex26))
                {
                    // 事前にデータを登録
                    BCVariable.DataReset();
                    BCVariable.MeUnit = this;
                    BCVariable.AtkUnit = this;
                    BCVariable.DefUnit = t;
                    BCVariable.WeaponNumber = w;
                    BCVariable.LastVariable = prob;
                    string argIndex25 = "最終特殊効果発生率";
                    prob = SRC.BCList.Item(argIndex25).Calculate();
                }
            }

            if (prob > 100)
            {
                CriticalProbabilityRet = 100;
            }
            else if (prob < 1)
            {
                CriticalProbabilityRet = 1;
            }
            else
            {
                CriticalProbabilityRet = prob;
            }

            return CriticalProbabilityRet;
        }

        // 武器wでユニットtに攻撃をかけた時のダメージの期待値
        public int ExpDamage(int w, Unit t, bool is_true_value, double dmg_mod = 0d)
        {
            int ExpDamageRet = default;
            int dmg;
            int j, i, idx;
            double slevel;
            string wclass;
            string fname, fdata;
            double flevel;
            int ecost, nmorale;
            bool neautralize;
            double lv_mod;
            string opt;
            wclass = WeaponClass(w);

            // 攻撃力が0であれば常にダメージ0
            string argtarea = "";
            if (WeaponPower(w, argtarea) <= 0)
            {
                return ExpDamageRet;
            }

            // ダメージ
            dmg = Damage(w, t, is_true_value);

            // ダメージに修正を加える場合
            if (dmg_mod > 0d)
            {
                string argstring2 = "殺";
                if (GeneralLib.InStrNotNest(wclass, argstring2) == 0)
                {
                    dmg = (dmg * dmg_mod);
                }
            }

            // 抹殺攻撃は一撃で相手を倒せない限り効果がない
            string argstring21 = "殺";
            if (GeneralLib.InStrNotNest(wclass, argstring21) > 0)
            {
                if (t.HP > dmg)
                {
                    return ExpDamageRet;
                }
            }

            // ダメージが与えられない場合
            if (dmg <= 0)
            {
                // 地形適応や封印武器、限定武器、性別限定武器、無効化、吸収が原因であれば期待値は0
                string argstring22 = "封";
                string argstring23 = "限";
                string argstring24 = "♂";
                string argstring25 = "♀";
                if (WeaponAdaption(w, t.Area) == 0d | GeneralLib.InStrNotNest(wclass, argstring22) > 0 | GeneralLib.InStrNotNest(wclass, argstring23) > 0 | GeneralLib.InStrNotNest(wclass, argstring24) > 0 | GeneralLib.InStrNotNest(wclass, argstring25) > 0 | t.Immune(wclass) | t.Absorb(wclass))
                {
                    return ExpDamageRet;
                }

                // それ以外の要因であればダミーでダメージwとする。
                // こうしておかないと敵が攻撃が無駄の場合はまったく自分から
                // 攻撃しなくなってしまうので。
                // 単純にExpDamage=1などとしないのは攻撃力の高い武器を優先させて使わせるため
                ExpDamageRet = w;
                return ExpDamageRet;
            }

            // バリア無効化
            string argstring27 = "無";
            string argsptype = "防御能力無効化";
            if (GeneralLib.InStrNotNest(wclass, argstring27) > 0 | IsUnderSpecialPowerEffect(argsptype))
            {
                // 抹殺攻撃は一撃で相手を倒せない限り効果がない
                string argstring26 = "殺";
                if (GeneralLib.InStrNotNest(wclass, argstring26) > 0)
                {
                    if (t.HP > dmg)
                    {
                        return ExpDamageRet;
                    }
                }

                ExpDamageRet = dmg;
                return ExpDamageRet;
            }

            // 技量の低い敵はバリアを考慮せず攻撃をかける
            {
                var withBlock = MainPilot();
                if (!is_true_value & withBlock.TacticalTechnique() < 150)
                {
                    // 抹殺攻撃は一撃で相手を倒せない限り効果がない
                    string argstring28 = "殺";
                    if (GeneralLib.InStrNotNest(wclass, argstring28) > 0)
                    {
                        if (t.HP > dmg)
                        {
                            return ExpDamageRet;
                        }
                    }

                    ExpDamageRet = dmg;
                    return ExpDamageRet;
                }
            }
            // バリア能力
            var loopTo = t.CountFeature();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex8 = i;
                if (t.Feature(argIndex8) == "バリア")
                {
                    object argIndex1 = i;
                    fname = t.FeatureName0(argIndex1);
                    object argIndex2 = i;
                    fdata = t.FeatureData(argIndex2);
                    object argIndex3 = i;
                    flevel = t.FeatureLevel(argIndex3);

                    // 必要条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 10;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo1 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo1; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (opt ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex4 = "バリア";
                                    string argfdata2 = FeatureData(argIndex4);
                                    if (IsSameCategory(fdata, argfdata2) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex6 = "バリア";
                                    string argfdata21 = FeatureData(argIndex6);
                                    if (IsSameCategory(fdata, argfdata21) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        object argIndex5 = "バリア";
                                        flevel = flevel - FeatureLevel(argIndex5);
                                        if (flevel <= 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argstring29 = "武";
                                    string argstring210 = "突";
                                    string argstring211 = "接";
                                    if (GeneralLib.InStrNotNest(wclass, argstring29) > 0 | GeneralLib.InStrNotNest(wclass, argstring210) > 0 | GeneralLib.InStrNotNest(wclass, argstring211) > 0)
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    neautralize = true;
                                    break;
                                }

                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex7 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex7))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified() { string argaclass1 = GeneralLib.LIndex(fdata, 2); var ret = t.IsAttributeClassified(argaclass1, wclass); return ret; }

                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified() & !neautralize)
                    {
                        // バリア発動
                        if (dmg <= 1000d * flevel + slevel)
                        {
                            ExpDamageRet = w;
                            return ExpDamageRet;
                        }
                    }
                }
            }

            // フィールド能力
            var loopTo2 = t.CountFeature();
            for (i = 1; i <= loopTo2; i++)
            {
                object argIndex16 = i;
                if (t.Feature(argIndex16) == "フィールド")
                {
                    object argIndex9 = i;
                    fname = t.FeatureName0(argIndex9);
                    object argIndex10 = i;
                    fdata = t.FeatureData(argIndex10);
                    object argIndex11 = i;
                    flevel = t.FeatureLevel(argIndex11);

                    // 必要条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 0;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo3 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo3; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr1 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr1);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (opt ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex12 = "フィールド";
                                    string argfdata22 = FeatureData(argIndex12);
                                    if (IsSameCategory(fdata, argfdata22) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex14 = "フィールド";
                                    string argfdata23 = FeatureData(argIndex14);
                                    if (IsSameCategory(fdata, argfdata23) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        object argIndex13 = "フィールド";
                                        flevel = flevel - FeatureLevel(argIndex13);
                                        if (flevel <= 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argstring212 = "武";
                                    string argstring213 = "突";
                                    string argstring214 = "接";
                                    if (GeneralLib.InStrNotNest(wclass, argstring212) > 0 | GeneralLib.InStrNotNest(wclass, argstring213) > 0 | GeneralLib.InStrNotNest(wclass, argstring214) > 0)
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    neautralize = true;
                                    break;
                                }

                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex15 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex15))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified1() { string argaclass1 = GeneralLib.LIndex(fdata, 2); var ret = t.IsAttributeClassified(argaclass1, wclass); return ret; }

                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified1() & !neautralize)
                    {
                        // フィールド発動
                        if (dmg <= 500d * flevel + slevel)
                        {
                            ExpDamageRet = w;
                            return ExpDamageRet;
                        }
                        else if (flevel > 0d | slevel > 0d)
                        {
                            dmg = (dmg - 500d * flevel - slevel);
                        }
                    }
                }
            }

            // プロテクション能力
            var loopTo4 = t.CountFeature();
            for (i = 1; i <= loopTo4; i++)
            {
                object argIndex24 = i;
                if (t.Feature(argIndex24) == "プロテクション")
                {
                    object argIndex17 = i;
                    fname = t.FeatureName0(argIndex17);
                    object argIndex18 = i;
                    fdata = t.FeatureData(argIndex18);
                    object argIndex19 = i;
                    flevel = t.FeatureLevel(argIndex19);

                    // 必要条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 10;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo5 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo5; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr2 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr2);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (opt ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex20 = "プロテクション";
                                    string argfdata24 = FeatureData(argIndex20);
                                    if (IsSameCategory(fdata, argfdata24) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex22 = "プロテクション";
                                    string argfdata25 = FeatureData(argIndex22);
                                    if (IsSameCategory(fdata, argfdata25) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        object argIndex21 = "プロテクション";
                                        flevel = flevel - FeatureLevel(argIndex21);
                                        if (flevel <= 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argstring215 = "武";
                                    string argstring216 = "突";
                                    string argstring217 = "接";
                                    if (GeneralLib.InStrNotNest(wclass, argstring215) > 0 | GeneralLib.InStrNotNest(wclass, argstring216) > 0 | GeneralLib.InStrNotNest(wclass, argstring217) > 0)
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    neautralize = true;
                                    break;
                                }

                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 0.5d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 0.2d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex23 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex23))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified2() { string argaclass1 = GeneralLib.LIndex(fdata, 2); var ret = t.IsAttributeClassified(argaclass1, wclass); return ret; }

                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified2() & !neautralize)
                    {
                        // プロテクション発動
                        dmg = ((long)(dmg * (100d - 10d * flevel - slevel)) / 100L);
                        if (dmg <= 0)
                        {
                            ExpDamageRet = w;
                            return ExpDamageRet;
                        }
                    }
                }
            }

            // 対ビーム用防御能力
            string argstring218 = "Ｂ";
            if (GeneralLib.InStrNotNest(wclass, argstring218) > 0)
            {
                // ビーム吸収
                string argfname = "ビーム吸収";
                if (t.IsFeatureAvailable(argfname))
                {
                    ExpDamageRet = w;
                    return ExpDamageRet;
                }
            }

            // 抹殺攻撃は一撃で相手を倒せる場合にのみ有効
            string argstring219 = "殺";
            if (GeneralLib.InStrNotNest(wclass, argstring219) > 0)
            {
                if (dmg < t.HP)
                {
                    dmg = 0;
                }
            }

            // 盾防御
            string argfname1 = "盾";
            string argsname = "Ｓ防御";
            string argattr1 = "精";
            string argattr2 = "浸";
            string argattr3 = "殺";
            object argIndex27 = "盾付加";
            object argIndex28 = "盾";
            object argIndex29 = "盾ダメージ";
            if (t.IsFeatureAvailable(argfname1) & t.MainPilot().IsSkillAvailable(argsname) & t.MaxAction() > 0 & !IsWeaponClassifiedAs(w, argattr1) & !IsWeaponClassifiedAs(w, argattr2) & !IsWeaponClassifiedAs(w, argattr3) & (t.IsConditionSatisfied(argIndex27) | t.FeatureLevel(argIndex28) > t.ConditionLevel(argIndex29)))
            {
                string argattr = "破";
                if (IsWeaponClassifiedAs(w, argattr))
                {
                    object argIndex25 = "Ｓ防御";
                    string argref_mode = "";
                    dmg = (dmg - 50d * (t.MainPilot().SkillLevel(argIndex25, ref_mode: argref_mode) + 4d));
                }
                else
                {
                    object argIndex26 = "Ｓ防御";
                    string argref_mode1 = "";
                    dmg = (dmg - 100d * (t.MainPilot().SkillLevel(argIndex26, ref_mode: argref_mode1) + 4d));
                }
            }

            // ダメージが減少されて0以下になった場合もダミーで1ダメージ
            if (dmg <= 0)
            {
                dmg = 1;
            }

            // 抹殺攻撃は一撃で相手を倒せない限り効果がない
            if (Strings.InStr(w.ToString(), "殺") > 0)
            {
                if (t.HP > dmg)
                {
                    return ExpDamageRet;
                }
            }

            ExpDamageRet = dmg;
            return ExpDamageRet;
        }


        // === 防御属性判定処理 ===

        // 属性 aname に対して吸収属性を持つか？
        public bool Absorb(string aname)
        {
            bool AbsorbRet = default;
            string c;
            int i;
            int slen;

            // 全属性に有効な場合
            string argstring2 = "全";
            if (GeneralLib.InStrNotNest(strAbsorb, argstring2) > 0)
            {
                AbsorbRet = true;
                return AbsorbRet;
            }

            // 無属性は物理攻撃に分類される
            if (Strings.Len(aname) == 0)
            {
                string argstring21 = "物";
                if (GeneralLib.InStrNotNest(strAbsorb, argstring21) > 0)
                {
                    AbsorbRet = true;
                }

                return AbsorbRet;
            }

            // 属性に該当するかを判定
            i = 1;
            slen = Strings.Len(strAbsorb);
            while (i <= slen)
            {
                // 属性をひとまとめずつ取得
                c = GeneralLib.GetClassBundle(strAbsorb, i);
                switch (c ?? "")
                {
                    case "物":
                        {
                            string argstring22 = "魔";
                            string argstring23 = "精";
                            if (GeneralLib.InStrNotNest(aname, argstring22) == 0 & GeneralLib.InStrNotNest(aname, argstring23) == 0)
                            {
                                AbsorbRet = true;
                                break;
                            }

                            break;
                        }

                    case "魔":
                        {
                            // 魔法武器以外の魔属性なら特性が有効
                            string argstring29 = "魔";
                            if (GeneralLib.InStrNotNest(aname, argstring29) > 0)
                            {
                                string argstring24 = "魔武";
                                string argstring25 = "魔突";
                                string argstring26 = "魔接";
                                string argstring27 = "魔銃";
                                string argstring28 = "魔実";
                                if (GeneralLib.InStrNotNest(aname, argstring24) == 0 & GeneralLib.InStrNotNest(aname, argstring25) == 0 & GeneralLib.InStrNotNest(aname, argstring26) == 0 & GeneralLib.InStrNotNest(aname, argstring27) == 0 & GeneralLib.InStrNotNest(aname, argstring28) == 0)
                                {
                                    AbsorbRet = true;
                                    break;
                                }
                            }

                            break;
                        }

                    default:
                        {
                            if (GeneralLib.InStrNotNest(aname, c) > 0)
                            {
                                AbsorbRet = true;
                                break;
                            }

                            break;
                        }
                }

                i = (i + 1);
            }

            return AbsorbRet;
        }

        // 属性 aname に対して無効化属性を持つか？
        public bool Immune(string aname)
        {
            bool ImmuneRet = default;
            string c;
            int i;
            int slen;

            // 全属性に有効な場合
            string argstring2 = "全";
            if (GeneralLib.InStrNotNest(strImmune, argstring2) > 0)
            {
                ImmuneRet = true;
                return ImmuneRet;
            }

            // 無属性は物理攻撃に分類される
            if (Strings.Len(aname) == 0)
            {
                string argstring21 = "物";
                if (GeneralLib.InStrNotNest(strImmune, argstring21) > 0)
                {
                    ImmuneRet = true;
                }

                return ImmuneRet;
            }

            // 属性に該当するかを判定
            i = 1;
            slen = Strings.Len(strImmune);
            while (i <= slen)
            {
                // 属性をひとまとめずつ取得
                c = GeneralLib.GetClassBundle(strImmune, i);
                switch (c ?? "")
                {
                    case "物":
                        {
                            string argstring22 = "魔";
                            string argstring23 = "精";
                            if (GeneralLib.InStrNotNest(aname, argstring22) == 0 & GeneralLib.InStrNotNest(aname, argstring23) == 0)
                            {
                                ImmuneRet = true;
                                break;
                            }

                            break;
                        }

                    case "魔":
                        {
                            // 魔法武器以外の魔属性なら特性が有効
                            string argstring24 = "魔";
                            string argstring25 = "魔武";
                            string argstring26 = "魔突";
                            string argstring27 = "魔接";
                            string argstring28 = "魔銃";
                            string argstring29 = "魔実";
                            if (GeneralLib.InStrNotNest(aname, argstring24) > 0 & GeneralLib.InStrNotNest(aname, argstring25) == 0 & GeneralLib.InStrNotNest(aname, argstring26) == 0 & GeneralLib.InStrNotNest(aname, argstring27) == 0 & GeneralLib.InStrNotNest(aname, argstring28) == 0 & GeneralLib.InStrNotNest(aname, argstring29) == 0)
                            {
                                ImmuneRet = true;
                                break;
                            }

                            break;
                        }

                    default:
                        {
                            if (GeneralLib.InStrNotNest(aname, c) > 0)
                            {
                                ImmuneRet = true;
                                break;
                            }

                            break;
                        }
                }

                i = (i + 1);
            }

            return ImmuneRet;
        }

        // 属性 aname に対して耐性属性を持つか？
        public bool Resist(string aname)
        {
            bool ResistRet = default;
            string c;
            int i;
            int slen;

            // 全属性に有効な場合
            string argstring2 = "全";
            if (GeneralLib.InStrNotNest(strResist, argstring2) > 0)
            {
                ResistRet = true;
                return ResistRet;
            }

            // 無属性は物理攻撃に分類される
            if (Strings.Len(aname) == 0)
            {
                string argstring21 = "物";
                if (GeneralLib.InStrNotNest(strResist, argstring21) > 0)
                {
                    ResistRet = true;
                }

                return ResistRet;
            }

            // 属性に該当するかを判定
            i = 1;
            slen = Strings.Len(strResist);
            while (i <= slen)
            {
                // 属性をひとまとめずつ取得
                c = GeneralLib.GetClassBundle(strResist, i);
                switch (c ?? "")
                {
                    case "物":
                        {
                            string argstring22 = "魔";
                            string argstring23 = "精";
                            if (GeneralLib.InStrNotNest(aname, argstring22) == 0 & GeneralLib.InStrNotNest(aname, argstring23) == 0)
                            {
                                ResistRet = true;
                                break;
                            }

                            break;
                        }

                    case "魔":
                        {
                            // 魔法武器以外の魔属性なら特性が有効
                            string argstring24 = "魔";
                            string argstring25 = "魔武";
                            string argstring26 = "魔突";
                            string argstring27 = "魔接";
                            string argstring28 = "魔銃";
                            string argstring29 = "魔実";
                            if (GeneralLib.InStrNotNest(aname, argstring24) > 0 & GeneralLib.InStrNotNest(aname, argstring25) == 0 & GeneralLib.InStrNotNest(aname, argstring26) == 0 & GeneralLib.InStrNotNest(aname, argstring27) == 0 & GeneralLib.InStrNotNest(aname, argstring28) == 0 & GeneralLib.InStrNotNest(aname, argstring29) == 0)
                            {
                                ResistRet = true;
                                break;
                            }

                            break;
                        }

                    default:
                        {
                            if (GeneralLib.InStrNotNest(aname, c) > 0)
                            {
                                ResistRet = true;
                                break;
                            }

                            break;
                        }
                }

                i = (i + 1);
            }

            return ResistRet;
        }

        // 属性 aname に対して弱点属性を持つか？
        public bool Weakness(string aname)
        {
            bool WeaknessRet = default;
            string c;
            int i;
            int slen;

            // 全属性に有効な場合
            string argstring2 = "全";
            if (GeneralLib.InStrNotNest(strWeakness, argstring2) > 0)
            {
                WeaknessRet = true;
                return WeaknessRet;
            }

            if (Strings.Len(aname) == 0)
            {
                string argstring21 = "物";
                if (GeneralLib.InStrNotNest(strWeakness, argstring21) > 0)
                {
                    WeaknessRet = true;
                }

                return WeaknessRet;
            }

            i = 1;
            slen = Strings.Len(strWeakness);
            while (i <= slen)
            {
                // 属性をひとまとめずつ取得
                c = GeneralLib.GetClassBundle(strWeakness, i);
                switch (c ?? "")
                {
                    case "物":
                        {
                            string argstring22 = "魔";
                            string argstring23 = "精";
                            if (GeneralLib.InStrNotNest(aname, argstring22) == 0 & GeneralLib.InStrNotNest(aname, argstring23) == 0)
                            {
                                WeaknessRet = true;
                                break;
                            }

                            break;
                        }

                    default:
                        {
                            if (GeneralLib.InStrNotNest(aname, c) > 0)
                            {
                                WeaknessRet = true;
                                break;
                            }

                            break;
                        }
                }

                i = (i + 1);
            }

            return WeaknessRet;
        }

        // 属性 aname に対して有効属性を持つか？
        public bool Effective(string aname)
        {
            bool EffectiveRet = default;
            string c;
            int i;
            int slen;

            // 全属性に有効な場合
            string argstring2 = "全";
            if (GeneralLib.InStrNotNest(strEffective, argstring2) > 0)
            {
                EffectiveRet = true;
                return EffectiveRet;
            }

            if (Strings.Len(aname) == 0)
            {
                string argstring21 = "物";
                if (GeneralLib.InStrNotNest(strEffective, argstring21) > 0)
                {
                    EffectiveRet = true;
                }

                return EffectiveRet;
            }

            i = 1;
            slen = Strings.Len(strEffective);
            while (i <= slen)
            {
                // 属性をひとまとめずつ取得
                c = GeneralLib.GetClassBundle(strEffective, i);
                switch (c ?? "")
                {
                    case "物":
                        {
                            string argstring22 = "魔";
                            string argstring23 = "精";
                            if (GeneralLib.InStrNotNest(aname, argstring22) == 0 & GeneralLib.InStrNotNest(aname, argstring23) == 0)
                            {
                                EffectiveRet = true;
                                break;
                            }

                            break;
                        }

                    default:
                        {
                            if (GeneralLib.InStrNotNest(aname, c) > 0)
                            {
                                EffectiveRet = true;
                                break;
                            }

                            break;
                        }
                }

                i = (i + 1);
            }

            return EffectiveRet;
        }

        // 属性 aname に対して特殊効果無効化属性を持つか？
        public bool SpecialEffectImmune(string aname)
        {
            bool SpecialEffectImmuneRet = default;
            // 全属性に有効な場合
            string argstring2 = "全";
            if (GeneralLib.InStrNotNest(strSpecialEffectImmune, argstring2) > 0)
            {
                SpecialEffectImmuneRet = true;
                return SpecialEffectImmuneRet;
            }

            if (Strings.Len(aname) == 0)
            {
                return SpecialEffectImmuneRet;
            }

            if (GeneralLib.InStrNotNest(strSpecialEffectImmune, aname) > 0)
            {
                SpecialEffectImmuneRet = true;
                return SpecialEffectImmuneRet;
            }

            // 無効化や弱点と違い、クリティカル率のみなので
            // 「火」に対する防御特性が「弱火」のクリティカル率に影響する点について
            // 直接関数内に記述できる。
            if (Strings.Left(aname, 1) == "弱" | Strings.Left(aname, 1) == "効")
            {
                if (GeneralLib.InStrNotNest(strSpecialEffectImmune, aname) > 0)
                {
                    SpecialEffectImmuneRet = true;
                    return SpecialEffectImmuneRet;
                }
            }

            return SpecialEffectImmuneRet;
        }

        // 属性の該当判定
        // aclass1 が防御属性、aclass2 が武器属性
        public bool IsAttributeClassified(string aclass1, string aclass2)
        {
            bool IsAttributeClassifiedRet = default;
            string attr;
            int alen, i;
            var with_not = default(bool);
            if (Strings.Len(aclass1) == 0)
            {
                IsAttributeClassifiedRet = true;
                return IsAttributeClassifiedRet;
            }

            if (aclass1 == "全")
            {
                IsAttributeClassifiedRet = true;
                return IsAttributeClassifiedRet;
            }

            // 無属性の攻撃は物理攻撃に分類される
            if (Strings.Len(aclass2) == 0)
            {
                string argstring2 = "物";
                if (GeneralLib.InStrNotNest(aclass1, argstring2) > 0)
                {
                    IsAttributeClassifiedRet = true;
                }

                string argstring21 = "!";
                if (GeneralLib.InStrNotNest(aclass1, argstring21) > 0)
                {
                    IsAttributeClassifiedRet = !IsAttributeClassifiedRet;
                }

                goto EndOfFunction;
            }

            i = 1;
            alen = Strings.Len(aclass1);
            while (i <= alen)
            {
                attr = GeneralLib.GetClassBundle(aclass1, i);
                switch (attr ?? "")
                {
                    case "物":
                        {
                            string argstring22 = "魔";
                            string argstring23 = "精";
                            if (GeneralLib.InStrNotNest(aclass2, argstring22) == 0 & GeneralLib.InStrNotNest(aclass2, argstring23) == 0)
                            {
                                IsAttributeClassifiedRet = true;
                                break;
                            }

                            break;
                        }

                    case "魔":
                        {
                            // 魔法武器以外の魔属性なら特性が有効
                            string argstring29 = "魔";
                            if (GeneralLib.InStrNotNest(aclass2, argstring29) > 0)
                            {
                                string argstring24 = "魔武";
                                string argstring25 = "魔突";
                                string argstring26 = "魔接";
                                string argstring27 = "魔銃";
                                string argstring28 = "魔実";
                                if (GeneralLib.InStrNotNest(aclass2, argstring24) == 0 & GeneralLib.InStrNotNest(aclass2, argstring25) == 0 & GeneralLib.InStrNotNest(aclass2, argstring26) == 0 & GeneralLib.InStrNotNest(aclass2, argstring27) == 0 & GeneralLib.InStrNotNest(aclass2, argstring28) == 0)
                                {
                                    IsAttributeClassifiedRet = true;
                                }
                                else if (with_not)
                                {
                                    IsAttributeClassifiedRet = true;
                                }

                                break;
                            }

                            break;
                        }

                    case "!":
                        {
                            with_not = true;
                            break;
                        }

                    default:
                        {
                            if (GeneralLib.InStrNotNest(aclass2, attr) > 0)
                            {
                                IsAttributeClassifiedRet = true;
                                break;
                            }

                            break;
                        }
                }

                i = (i + 1);
            }

            EndOfFunction:
            ;
            if (with_not)
            {
                IsAttributeClassifiedRet = !IsAttributeClassifiedRet;
            }

            return IsAttributeClassifiedRet;
        }



        // === 攻撃関連処理 ===

        // 武器 w でユニット t に攻撃
        // attack_mode は攻撃の種類
        // def_mode はユニット t の防御態勢
        // is_event はイベント(Attackコマンド)による攻撃かどうかを現す
        public void Attack(int w, Unit t, string attack_mode, string def_mode, bool is_event = false)
        {
            int prob;
            int dmg, prev_hp;
            bool is_hit = default, is_critical;
            string critical_type;
            bool use_shield, use_shield_msg;
            bool is_penetrated;
            bool use_protect_msg;
            bool use_support_guard;
            string wname, wnickname;
            string fname, uname = default;
            string msg, buf;
            int k, i, j, num;
            Unit su = default, orig_t;
            Unit[] partners;
            int tx, ty;
            string tarea;
            int prev_x = default, prev_y = default;
            var prev_area = default(string);
            var second_attack = default(bool);
            bool be_quiet;
            int attack_num = default, hit_count = default;
            int slevel;
            Unit saved_selected_unit;
            double hp_ratio, en_ratio;
            bool separate_parts;
            int orig_w;
            // ADD START MARGE
            bool is_ext_anime_defined;
            // ADD END MARGE

            wname = Weapon(w).Name;
            wnickname = WeaponNickname(w);

            // メッセージ表示用に選択状況を切り替え
            Commands.SaveSelections();
            saved_selected_unit = Commands.SelectedUnit;
            if (attack_mode == "反射")
            {
                Commands.SelectedUnit = Commands.SelectedTarget;
                Commands.SelectedTarget = this;
                Event_Renamed.SelectedUnitForEvent = Event_Renamed.SelectedTargetForEvent;
                Event_Renamed.SelectedTargetForEvent = this;
                Commands.SelectedWeapon = w;
                Commands.SelectedWeaponName = wname;
            }
            else
            {
                if (ReferenceEquals(Commands.SelectedUnit, t))
                {
                    Commands.SelectedTWeapon = Commands.SelectedWeapon;
                    Commands.SelectedTWeaponName = Commands.SelectedWeaponName;
                }

                Commands.SelectedWeapon = w;
                Commands.SelectedWeaponName = wname;
                Commands.SelectedUnit = this;
                Commands.SelectedTarget = t;
                Event_Renamed.SelectedUnitForEvent = this;
                Event_Renamed.SelectedTargetForEvent = t;
            }

            // サポートガードを行ったユニットに関する情報をクリア
            if (!IsDefense())
            {
                // UPGRADE_NOTE: オブジェクト SupportGuardUnit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Commands.SupportGuardUnit = null;
                // UPGRADE_NOTE: オブジェクト SupportGuardUnit2 をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Commands.SupportGuardUnit2 = null;
            }

            // パイロットのセリフを表示するかどうかを判定
            if (attack_mode == "マップ攻撃" | attack_mode == "反射" | attack_mode == "当て身技" | attack_mode == "自動反撃")
            {
                be_quiet = true;
            }
            else
            {
                be_quiet = false;
            }

            // 戦闘アニメを表示する場合はマップウィンドウをクリアする
            if (SRC.BattleAnimation)
            {
                if (GUI.MainWidth != 15)
                {
                    Status.ClearUnitStatus();
                }

                string argoname = "戦闘中画面初期化無効";
                if (!Expression.IsOptionDefined(argoname))
                {
                    GUI.RedrawScreen();
                }
            }

            orig_t = t;

            // かばった時にターゲットの位置を元のターゲットの位置と一致させるため記録
            tx = t.x;
            ty = t.y;
            tarea = t.Area;
            begin:
            ;


            // 情報を更新
            Update();
            MainPilot().UpdateSupportMod();
            t.Update();
            t.MainPilot().UpdateSupportMod();

            // ダメージ表示のため、ターゲットのＨＰを記録しておく
            prev_hp = t.HP;

            // 各種設定をリセット
            msg = "";
            is_critical = false;
            critical_type = "";
            use_shield = false;
            use_shield_msg = false;
            use_protect_msg = false;
            use_support_guard = false;
            is_penetrated = false;

            // 命中率を算出
            prob = HitProbability(w, t, true);

            // ダメージを算出
            dmg = Damage(w, t, true, Strings.InStr(attack_mode, "援護攻撃") > 0);

            // 特殊効果を持たない武器ならクリティカルの可能性あり
            if (IsNormalWeapon(w) & dmg > 0)
            {
                if (CriticalProbability(w, t, def_mode) >= GeneralLib.Dice(100) | attack_mode == "統率" | attack_mode == "同時援護攻撃")
                {
                    is_critical = true;
                }
            }

            partners = new Unit[1];
            Commands.SelectedPartners = new Unit[1];
            if (attack_mode != "マップ攻撃" & attack_mode != "反射" & !second_attack)
            {
                string argattr = "合";
                if (IsWeaponClassifiedAs(w, argattr))
                {
                    // 合体技の場合にパートナーをハイライト表示
                    if (WeaponMaxRange(w) == 1)
                    {
                        string argctype_Renamed = "武装";
                        CombinationPartner(argctype_Renamed, w, partners, tx, ty);
                    }
                    else
                    {
                        string argctype_Renamed1 = "武装";
                        CombinationPartner(argctype_Renamed1, w, partners);
                    }

                    var loopTo = Information.UBound(partners);
                    for (i = 1; i <= loopTo; i++)
                    {
                        {
                            var withBlock = partners[i];
                            Map.MaskData[withBlock.x, withBlock.y] = false;
                        }
                    }

                    if (!SRC.BattleAnimation)
                    {
                        GUI.MaskScreen();
                    }
                }
                else if (!is_critical & dmg > 0 & Strings.InStr(attack_mode, "援護攻撃") == 0)
                {
                    // 連携攻撃が発動するかを判定
                    // （連携攻撃は合体技では発動しない）
                    if (this.Weapon(w).MaxRange > 1)
                    {
                        su = LookForAttackHelp(x, y);
                    }
                    else
                    {
                        su = LookForAttackHelp(tx, ty);
                    }

                    if (su is object)
                    {
                        // 連携攻撃発動
                        Map.MaskData[su.x, su.y] = false;
                        if (!SRC.BattleAnimation)
                        {
                            GUI.MaskScreen();
                        }

                        string argmain_situation = "連携攻撃(" + su.MainPilot().Name + ")";
                        if (IsMessageDefined(argmain_situation, true))
                        {
                            string argSituation = "連携攻撃(" + su.MainPilot().Name + ")";
                            string argmsg_mode = "";
                            PilotMessage(argSituation, msg_mode: argmsg_mode);
                        }
                        else
                        {
                            string argSituation1 = "連携攻撃(" + su.MainPilot().get_Nickname(false) + ")";
                            string argmsg_mode1 = "";
                            PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                        }

                        is_critical = true;
                        // UPGRADE_NOTE: オブジェクト su をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                        su = null;
                    }
                }
            }

            // クリティカルならダメージ1.5倍
            if (is_critical)
            {
                string argoname1 = "ダメージ倍率低下";
                if (Expression.IsOptionDefined(argoname1))
                {
                    string argattr2 = "痛";
                    if (IsWeaponClassifiedAs(w, argattr2))
                    {
                        string argattr1 = "痛";
                        dmg = ((1d + 0.1d * (WeaponLevel(w, argattr1) + 2d)) * dmg);
                    }
                    else
                    {
                        dmg = (1.2d * dmg);
                    }
                }
                else
                {
                    string argattr4 = "痛";
                    if (IsWeaponClassifiedAs(w, argattr4))
                    {
                        string argattr3 = "痛";
                        dmg = ((1d + 0.25d * (WeaponLevel(w, argattr3) + 2d)) * dmg);
                    }
                    else
                    {
                        dmg = (1.5d * dmg);
                    }
                }
            }

            // 攻撃種類のアニメ表示
            if (SRC.BattleAnimation)
            {
                switch (attack_mode ?? "")
                {
                    case "援護攻撃":
                    case "同時援護攻撃":
                        {
                            string arganame = "援護攻撃発動";
                            Effect.ShowAnimation(arganame);
                            break;
                        }

                    case "カウンター":
                        {
                            string arganame1 = "カウンター発動";
                            Effect.ShowAnimation(arganame1);
                            break;
                        }
                }
            }

            // 攻撃側のメッセージ表示
            if (!be_quiet)
            {
                // 攻撃準備の効果音
                bool localIsSpecialEffectDefined() { string argmain_situation = wname + "(準備)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                string argmain_situation4 = wname + "(準備)";
                string argsub_situation3 = "";
                string argsub_situation4 = "";
                string argoname2 = "武器準備アニメ非表示";
                if (IsAnimationDefined(argmain_situation4, sub_situation: argsub_situation3))
                {
                    string argmain_situation1 = wname + "(準備)";
                    string argsub_situation = "";
                    PlayAnimation(argmain_situation1, sub_situation: argsub_situation);
                }
                else if (IsAnimationDefined(wname, sub_situation: argsub_situation4) & !Expression.IsOptionDefined(argoname2) & SRC.WeaponAnimation)
                {
                    string argmain_situation2 = wname + "(準備)";
                    string argsub_situation1 = "";
                    PlayAnimation(argmain_situation2, sub_situation: argsub_situation1);
                }
                else if (localIsSpecialEffectDefined())
                {
                    string argmain_situation3 = wname + "(準備)";
                    string argsub_situation2 = "";
                    SpecialEffect(argmain_situation3, sub_situation: argsub_situation2);
                }
                else
                {
                    var argu = this;
                    Effect.PrepareWeaponEffect(argu, w);
                }

                // 攻撃メッセージの前に出力されるメッセージ
                string argattr5 = "合";
                if (second_attack)
                {
                    string argSituation2 = "再攻撃";
                    string argmsg_mode2 = "";
                    PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                }
                else if (Strings.InStr(attack_mode, "援護攻撃") > 0)
                {
                    {
                        var withBlock1 = Commands.AttackUnit.CurrentForm().MainPilot();
                        bool localIsMessageDefined() { string argmain_situation = "サポートアタック(" + withBlock1.get_Nickname(false) + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                        string argmain_situation5 = "サポートアタック(" + withBlock1.Name + ")";
                        string argmain_situation6 = "サポートアタック";
                        if (IsMessageDefined(argmain_situation5))
                        {
                            string argSituation3 = "サポートアタック(" + withBlock1.Name + ")";
                            string argmsg_mode3 = "";
                            PilotMessage(argSituation3, msg_mode: argmsg_mode3);
                        }
                        else if (localIsMessageDefined())
                        {
                            string argSituation4 = "サポートアタック(" + withBlock1.get_Nickname(false) + ")";
                            string argmsg_mode4 = "";
                            PilotMessage(argSituation4, msg_mode: argmsg_mode4);
                        }
                        else if (IsMessageDefined(argmain_situation6))
                        {
                            string argSituation5 = "サポートアタック";
                            string argmsg_mode5 = "";
                            PilotMessage(argSituation5, msg_mode: argmsg_mode5);
                        }
                    }
                }
                else if (attack_mode == "カウンター")
                {
                    string argSituation6 = "カウンター";
                    string argmsg_mode6 = "";
                    PilotMessage(argSituation6, msg_mode: argmsg_mode6);
                }
                else if (IsMessageDefined(wname) & wname != "格闘" & wname != "射撃" & wname != "攻撃" & !IsWeaponClassifiedAs(w, argattr5))
                {
                    string argmain_situation7 = "かけ声(" + wname + ")";
                    if (IsMessageDefined(argmain_situation7))
                    {
                        string argSituation7 = "かけ声(" + wname + ")";
                        string argmsg_mode7 = "";
                        PilotMessage(argSituation7, msg_mode: argmsg_mode7);
                    }
                    else if (IsDefense())
                    {
                        string argSituation9 = "かけ声(反撃)";
                        string argmsg_mode9 = "";
                        PilotMessage(argSituation9, msg_mode: argmsg_mode9);
                    }
                    else
                    {
                        string argSituation8 = "かけ声";
                        string argmsg_mode8 = "";
                        PilotMessage(argSituation8, msg_mode: argmsg_mode8);
                    }
                }

                // 攻撃メッセージ
                Sound.IsWavePlayed = false;
                if (!second_attack)
                {
                    if (attack_mode == "カウンター")
                    {
                        string argmsg_mode10 = "カウンター";
                        PilotMessage(wname, argmsg_mode10);
                    }
                    else
                    {
                        string argmsg_mode11 = "攻撃";
                        PilotMessage(wname, argmsg_mode11);
                    }
                }

                // 攻撃アニメ
                bool localIsAnimationDefined() { string argmain_situation = wname + "(反撃)"; string argsub_situation = ""; var ret = IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                bool localIsAnimationDefined1() { string argmain_situation = wname + "(攻撃)"; string argsub_situation = ""; var ret = IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                string argsub_situation8 = "";
                string argsub_situation9 = "";
                if (IsDefense() & localIsAnimationDefined())
                {
                    string argmain_situation8 = wname + "(反撃)";
                    string argsub_situation5 = "";
                    PlayAnimation(argmain_situation8, sub_situation: argsub_situation5);
                }
                else if (localIsAnimationDefined1() | IsAnimationDefined(wname, sub_situation: argsub_situation8))
                {
                    string argmain_situation9 = wname + "(攻撃)";
                    string argsub_situation6 = "";
                    PlayAnimation(argmain_situation9, sub_situation: argsub_situation6);
                }
                else if (IsSpecialEffectDefined(wname, sub_situation: argsub_situation9))
                {
                    string argsub_situation7 = "";
                    SpecialEffect(wname, sub_situation: argsub_situation7);
                }
                else if (!Sound.IsWavePlayed)
                {
                    var argu1 = this;
                    Effect.AttackEffect(argu1, w);
                }
            }
            else if (attack_mode == "自動反撃")
            {
                // 攻撃アニメ
                bool localIsAnimationDefined2() { string argmain_situation = wname + "(反撃)"; string argsub_situation = ""; var ret = IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                bool localIsAnimationDefined3() { string argmain_situation = wname + "(攻撃)"; string argsub_situation = ""; var ret = IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                string argsub_situation13 = "";
                string argsub_situation14 = "";
                if (IsDefense() & localIsAnimationDefined2())
                {
                    string argmain_situation10 = wname + "(反撃)";
                    string argsub_situation10 = "";
                    PlayAnimation(argmain_situation10, sub_situation: argsub_situation10);
                }
                else if (localIsAnimationDefined3() | IsAnimationDefined(wname, sub_situation: argsub_situation13))
                {
                    string argmain_situation11 = wname + "(攻撃)";
                    string argsub_situation11 = "";
                    PlayAnimation(argmain_situation11, sub_situation: argsub_situation11);
                }
                else if (IsSpecialEffectDefined(wname, sub_situation: argsub_situation14))
                {
                    string argsub_situation12 = "";
                    SpecialEffect(wname, sub_situation: argsub_situation12);
                }
                else if (!Sound.IsWavePlayed)
                {
                    var argu2 = this;
                    Effect.AttackEffect(argu2, w);
                }
            }

            if (attack_mode != "マップ攻撃" & attack_mode != "反射")
            {
                // 武器使用による弾数＆ＥＮの消費
                UseWeapon(w);
                // 武器使用によるＥＮ消費の表示
                var argu11 = this;
                object argu21 = t;
                GUI.UpdateMessageForm(argu11, argu21);
            }

            // 防御手段による命中率低下
            if (def_mode == "回避")
            {
                string argsptype = "絶対命中";
                string argsptype1 = "無防備";
                string argfname = "回避不可";
                object argIndex1 = "移動不能";
                if (!IsUnderSpecialPowerEffect(argsptype) & !t.IsUnderSpecialPowerEffect(argsptype1) & !t.IsFeatureAvailable(argfname) & !t.IsConditionSatisfied(argIndex1))
                {
                    prob = (prob / 2);
                }
            }

            // 反射攻撃の場合は命中率が低下
            if (attack_mode == "反射")
            {
                prob = (prob / 2);
            }

            // 攻撃を行ったことについてのシステムメッセージ
            if (!be_quiet)
            {
                switch (Information.UBound(partners))
                {
                    case 0:
                        {
                            // 通常攻撃
                            msg = Nickname + "は";
                            break;
                        }

                    case 1:
                        {
                            // ２体合体攻撃
                            if ((Nickname ?? "") != (partners[1].Nickname ?? ""))
                            {
                                msg = Nickname + "は[" + partners[1].Nickname + "]と共に";
                            }
                            else if ((MainPilot().get_Nickname(false) ?? "") != (partners[1].MainPilot().get_Nickname(false) ?? ""))
                            {
                                msg = MainPilot().get_Nickname(false) + "と[" + partners[1].MainPilot().get_Nickname(false) + "]は";
                            }
                            else
                            {
                                msg = Nickname + "達は";
                            }

                            break;
                        }

                    case 2:
                        {
                            // ３体合体攻撃
                            if ((Nickname ?? "") != (partners[1].Nickname ?? ""))
                            {
                                msg = Nickname + "は[" + partners[1].Nickname + "]、[" + partners[2].Nickname + "]と共に";
                            }
                            else if ((MainPilot().get_Nickname(false) ?? "") != (partners[1].MainPilot().get_Nickname(false) ?? ""))
                            {
                                msg = MainPilot().get_Nickname(false) + "は[" + partners[1].MainPilot().get_Nickname(false) + "]、[" + partners[2].MainPilot().get_Nickname(false) + "]と共に";
                            }
                            else
                            {
                                msg = Nickname + "達は";
                            }

                            break;
                        }

                    default:
                        {
                            // ３体以上による合体攻撃
                            msg = Nickname + "達は";
                            break;
                        }
                }

                // ジャンプ攻撃
                string argattr6 = "武";
                string argattr7 = "突";
                string argattr8 = "接";
                string argarea_name = "空";
                if (t.Area == "空中" & (IsWeaponClassifiedAs(w, argattr6) | IsWeaponClassifiedAs(w, argattr7) | IsWeaponClassifiedAs(w, argattr8)) & !IsTransAvailable(argarea_name))
                {
                    msg = msg + "ジャンプし、";
                }

                if (second_attack)
                {
                    msg = msg + "再度";
                }
                else if (attack_mode == "カウンター" | attack_mode == "先制攻撃")
                {
                    msg = "先制攻撃！;" + msg + "先手を取り";
                }

                // 攻撃の種類によってメッセージを切り替え
                string argattr9 = "盗";
                string argattr10 = "習";
                string argattr11 = "実";
                if (Strings.Right(wnickname, 2) == "攻撃" | Strings.Right(wnickname, 4) == "アタック" | wnickname == "突撃")
                {
                    msg = msg + "[" + wnickname + "]をかけた。;";
                }
                else if (IsSpellWeapon(w))
                {
                    if (Strings.Right(wnickname, 2) == "呪文")
                    {
                        msg = msg + "[" + wnickname + "]を唱えた。;";
                    }
                    else if (Strings.Right(wnickname, 2) == "の杖")
                    {
                        msg = msg + "[" + Strings.Left(wnickname, Strings.Len(wnickname) - 2) + "]の呪文を唱えた。;";
                    }
                    else
                    {
                        msg = msg + "[" + wnickname + "]の呪文を唱えた。;";
                    }
                }
                else if (IsWeaponClassifiedAs(w, argattr9))
                {
                    msg = msg + "[" + t.Nickname + "]の持ち物を盗もうとした。;";
                }
                else if (IsWeaponClassifiedAs(w, argattr10))
                {
                    msg = msg + "[" + t.Nickname + "]の技を習得しようと試みた。;";
                }
                else if (IsWeaponClassifiedAs(w, argattr11) & (Strings.InStr(wnickname, "ミサイル") > 0 | Strings.InStr(wnickname, "ロケット") > 0))
                {
                    msg = msg + "[" + wnickname + "]を発射した。;";
                }
                else if (Strings.Right(wnickname, 1) == "息" | Strings.Right(wnickname, 3) == "ブレス" | Strings.Right(wnickname, 2) == "光線" | Strings.Right(wnickname, 1) == "光" | Strings.Right(wnickname, 3) == "ビーム" | Strings.Right(wnickname, 4) == "レーザー")
                {
                    msg = msg + "[" + wnickname + "]を放った。;";
                }
                else if (Strings.Right(wnickname, 1) == "歌")
                {
                    msg = msg + "[" + wnickname + "]を歌った。;";
                }
                else if (Strings.Right(wnickname, 2) == "踊り")
                {
                    msg = msg + "[" + wnickname + "]を踊った。;";
                }
                else
                {
                    msg = msg + "[" + wnickname + "]で攻撃をかけた。;";
                }

                // 命中率＆ＣＴ率表示
                if (is_event)
                {
                    // イベントによる攻撃の場合は命中率をスペシャルパワーの影響を含めずに表示
                    if (def_mode == "回避")
                    {
                        buf = "命中率 = " + GeneralLib.MinLng(HitProbability(w, t, false) / 2, 100) + "％" + "（" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(CriticalProbability(w, t, def_mode)) + "％）";
                    }
                    else
                    {
                        buf = "命中率 = " + GeneralLib.MinLng(HitProbability(w, t, false), 100) + "％" + "（" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(CriticalProbability(w, t, def_mode)) + "％）";
                    }
                }
                else
                {
                    buf = "命中率 = " + GeneralLib.MinLng(prob, 100) + "％" + "（" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(CriticalProbability(w, t, def_mode)) + "％）";
                }

                // 攻撃解説表示
                string argsub_situation17 = "";
                string argmain_situation13 = "攻撃";
                string argsub_situation18 = "";
                if (IsSysMessageDefined(wname, sub_situation: argsub_situation17))
                {
                    // 「武器名(解説)」のメッセージを使用
                    string argsub_situation15 = "";
                    SysMessage(wname, argsub_situation15, buf);
                }
                else if (IsSysMessageDefined(argmain_situation13, sub_situation: argsub_situation18))
                {
                    // 「攻撃(解説)」のメッセージを使用
                    string argmain_situation12 = "攻撃";
                    string argsub_situation16 = "";
                    SysMessage(argmain_situation12, argsub_situation16, buf);
                }
                else
                {
                    GUI.DisplaySysMessage(msg + buf, SRC.BattleAnimation);
                }
            }

            msg = "";

            // 防御方法を表示
            switch (def_mode ?? "")
            {
                case "回避":
                    {
                        object argIndex2 = "踊り";
                        if (t.IsConditionSatisfied(argIndex2))
                        {
                            msg = t.Nickname + "は踊っている。;";
                        }
                        else
                        {
                            msg = t.Nickname + "は回避運動をとった。;";
                        }

                        break;
                    }

                case "防御":
                    {
                        msg = t.Nickname + "は防御行動をとった。;";
                        break;
                    }
            }

            // スペシャルパワー「必殺」「瀕死」
            string argsptype3 = "絶対破壊";
            string argsptype4 = "絶対瀕死";
            if (IsUnderSpecialPowerEffect(argsptype3) | IsUnderSpecialPowerEffect(argsptype4))
            {
                if (!be_quiet)
                {
                    string argSituation10 = wname + "(命中)";
                    string argmsg_mode12 = "";
                    PilotMessage(argSituation10, msg_mode: argmsg_mode12);
                }

                bool localIsSpecialEffectDefined1() { string argmain_situation = wname + "(命中)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                string argmain_situation16 = wname + "(命中)";
                string argsub_situation21 = "";
                string argsub_situation22 = "";
                if (IsAnimationDefined(argmain_situation16, sub_situation: argsub_situation21) | IsAnimationDefined(wname, sub_situation: argsub_situation22))
                {
                    string argmain_situation14 = wname + "(命中)";
                    string argsub_situation19 = "";
                    PlayAnimation(argmain_situation14, sub_situation: argsub_situation19);
                }
                else if (localIsSpecialEffectDefined1())
                {
                    string argmain_situation15 = wname + "(命中)";
                    string argsub_situation20 = "";
                    SpecialEffect(argmain_situation15, sub_situation: argsub_situation20);
                }
                else if (!Sound.IsWavePlayed)
                {
                    var argu3 = this;
                    Effect.HitEffect(argu3, w, t);
                }

                string argsptype2 = "絶対瀕死";
                if (IsUnderSpecialPowerEffect(argsptype2))
                {
                    // MOD START MARGE
                    // If t.HP > 10 Then
                    // dmg = t.HP - 10
                    // Else
                    // dmg = 0
                    // End If
                    string argoname3 = "ダメージ下限解除";
                    string argoname4 = "ダメージ下限１";
                    if (Expression.IsOptionDefined(argoname3) | Expression.IsOptionDefined(argoname4))
                    {
                        if (t.HP > 1)
                        {
                            dmg = t.HP - 1;
                        }
                        else
                        {
                            dmg = 0;
                        }
                    }
                    else if (t.HP > 10)
                    {
                        dmg = t.HP - 10;
                    }
                    else
                    {
                        dmg = 0;
                    }
                }
                // MOD END MARGE

                else
                {
                    dmg = t.HP;
                }

                goto ApplyDamage;
            }

            // 回避能力の処理
            if (prob > 0)
            {
                if (CheckDodgeFeature(w, t, tx, ty, attack_mode, def_mode, dmg, be_quiet))
                {
                    dmg = 0;
                    goto EndAttack;
                }
            }

            // 攻撃回数を求める
            string argattr13 = "連";
            if (IsWeaponClassifiedAs(w, argattr13))
            {
                string argattr12 = "連";
                attack_num = WeaponLevel(w, argattr12);
            }
            else
            {
                attack_num = 1;
            }

            // 命中回数を求める
            hit_count = 0;
            var loopTo1 = attack_num;
            for (i = 1; i <= loopTo1; i++)
            {
                if (GeneralLib.Dice(100) <= prob)
                {
                    hit_count = hit_count + 1;
                }
            }
            // 命中回数に基いてダメージを修正
            dmg = dmg * hit_count / attack_num;

            // 攻撃回避時の処理
            if (hit_count == 0)
            {
                bool localIsSpecialEffectDefined2() { string argmain_situation = wname + "(回避)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                string argmain_situation21 = wname + "(回避)";
                string argsub_situation27 = "";
                string argmain_situation22 = "回避";
                string argsub_situation28 = "";
                string argmain_situation23 = "回避";
                string argsub_situation29 = "";
                if (IsAnimationDefined(argmain_situation21, sub_situation: argsub_situation27))
                {
                    string argmain_situation17 = wname + "(回避)";
                    string argsub_situation23 = "";
                    PlayAnimation(argmain_situation17, sub_situation: argsub_situation23);
                }
                else if (localIsSpecialEffectDefined2())
                {
                    string argmain_situation18 = wname + "(回避)";
                    string argsub_situation24 = "";
                    SpecialEffect(argmain_situation18, sub_situation: argsub_situation24);
                }
                else if (t.IsAnimationDefined(argmain_situation22, sub_situation: argsub_situation28))
                {
                    string argmain_situation19 = "回避";
                    string argsub_situation25 = "";
                    t.PlayAnimation(argmain_situation19, sub_situation: argsub_situation25);
                }
                else if (t.IsSpecialEffectDefined(argmain_situation23, sub_situation: argsub_situation29))
                {
                    string argmain_situation20 = "回避";
                    string argsub_situation26 = "";
                    t.SpecialEffect(argmain_situation20, sub_situation: argsub_situation26);
                }
                else
                {
                    var argu4 = this;
                    Effect.DodgeEffect(argu4, w);
                }

                if (!be_quiet)
                {
                    string argSituation11 = "回避";
                    string argmsg_mode13 = "";
                    t.PilotMessage(argSituation11, msg_mode: argmsg_mode13);
                    string argSituation12 = wname + "(回避)";
                    string argmsg_mode14 = "";
                    PilotMessage(argSituation12, msg_mode: argmsg_mode14);
                }

                string argmain_situation25 = "回避";
                string argsub_situation31 = "";
                if (t.IsSysMessageDefined(argmain_situation25, sub_situation: argsub_situation31))
                {
                    string argmain_situation24 = "回避";
                    string argsub_situation30 = "";
                    string argadd_msg = "";
                    t.SysMessage(argmain_situation24, sub_situation: argsub_situation30, add_msg: argadd_msg);
                }
                else
                {
                    switch (def_mode ?? "")
                    {
                        case "回避":
                            {
                                object argIndex3 = "踊り";
                                if (t.IsConditionSatisfied(argIndex3))
                                {
                                    GUI.DisplaySysMessage(t.Nickname + "は激しく踊りながら攻撃をかわした。");
                                }
                                else
                                {
                                    GUI.DisplaySysMessage(t.Nickname + "は回避運動をとり、攻撃をかわした。");
                                }

                                break;
                            }

                        case "防御":
                            {
                                GUI.DisplaySysMessage(t.Nickname + "は防御行動をとったが、攻撃は外れた。");
                                break;
                            }

                        default:
                            {
                                GUI.DisplaySysMessage(t.Nickname + "は攻撃をかわした。");
                                break;
                            }
                    }
                }

                goto EndAttack;
            }

            // 敵ユニットがかばわれた場合の処理
            if (su is null)
            {
                use_support_guard = false;
                string argsptype5 = "みがわり";
                if (t.IsUnderSpecialPowerEffect(argsptype5))
                {
                    // スペシャルパワー「みがわり」
                    i = 1;
                    while (i <= t.CountSpecialPower())
                    {
                        // UPGRADE_WARNING: オブジェクト t.SpecialPower(i).IsEffectAvailable(みがわり) の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                        SpecialPowerData localSpecialPower() { object argIndex1 = i; var ret = t.SpecialPower(argIndex1); return ret; }

                        string argename = "みがわり";
                        if (Conversions.ToBoolean(localSpecialPower().IsEffectAvailable(argename)))
                        {
                            string localSpecialPowerData1() { object argIndex1 = i; var ret = t.SpecialPowerData(argIndex1); return ret; }

                            object argIndex4 = localSpecialPowerData1();
                            if (SRC.PList.IsDefined(argIndex4))
                            {
                                string localSpecialPowerData() { object argIndex1 = i; var ret = t.SpecialPowerData(argIndex1); return ret; }

                                Pilot localItem() { object argIndex1 = (object)hs40b56b80c15841019d507de2a6e31457(); var ret = SRC.PList.Item(argIndex1); return ret; }

                                su = localItem().Unit_Renamed;
                                string argstype = "みがわり";
                                t.RemoveSpecialPowerInEffect(argstype);
                                i = (i - 1);
                                if (su is object)
                                {
                                    su = su.CurrentForm();
                                    if (su.Status_Renamed != "出撃")
                                    {
                                        // UPGRADE_NOTE: オブジェクト su をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                        su = null;
                                    }
                                }
                            }
                        }

                        i = (i + 1);
                    }
                }
                else if (!is_event & def_mode != "マップ攻撃" & def_mode != "援護防御")
                {
                    if (t.IsDefense())
                    {
                        // サポートガード
                        if (Commands.UseSupportGuard)
                        {
                            var argt = this;
                            su = t.LookForSupportGuard(argt, w);
                            if (su is object)
                            {
                                use_support_guard = true;
                                // サポートガードの残り回数を減らす
                                su.UsedSupportGuard = (su.UsedSupportGuard + 1);
                            }
                        }
                    }

                    if (su is null)
                    {
                        // かばう
                        var argt1 = this;
                        su = t.LookForGuardHelp(argt1, w, is_critical);
                    }
                }

                if (su is object)
                {
                    su.Update();

                    // メッセージウィンドウの表示を入れ替え
                    if (Party == "味方" | Party == "ＮＰＣ")
                    {
                        object argu22 = this;
                        GUI.UpdateMessageForm(su, argu22);
                    }
                    else
                    {
                        var argu12 = this;
                        object argu23 = su;
                        GUI.UpdateMessageForm(argu12, argu23);
                    }

                    if (!SRC.BattleAnimation)
                    {
                        // 身代わりになるユニットをハイライト表示
                        if (Map.MaskData[su.x, su.y])
                        {
                            Map.MaskData[su.x, su.y] = false;
                            GUI.MaskScreen();
                            Map.MaskData[su.x, su.y] = true;
                        }
                    }

                    // かばう際のメッセージ
                    bool localIsMessageDefined2() { string argmain_situation = "かばう(" + t.MainPilot().Name + ")"; var ret = su.IsMessageDefined(argmain_situation); return ret; }

                    bool localIsMessageDefined3() { string argmain_situation = "かばう(" + t.MainPilot().get_Nickname(false) + ")"; var ret = su.IsMessageDefined(argmain_situation); return ret; }

                    if (use_support_guard)
                    {
                        bool localIsMessageDefined1() { string argmain_situation = "サポートガード(" + t.MainPilot().get_Nickname(false) + ")"; var ret = su.IsMessageDefined(argmain_situation); return ret; }

                        string argmain_situation26 = "サポートガード(" + t.MainPilot().Name + ")";
                        string argmain_situation27 = "サポートガード";
                        if (su.IsMessageDefined(argmain_situation26))
                        {
                            string argSituation13 = "サポートガード(" + t.MainPilot().Name + ")";
                            string argmsg_mode15 = "";
                            su.PilotMessage(argSituation13, msg_mode: argmsg_mode15);
                        }
                        else if (localIsMessageDefined1())
                        {
                            string argSituation14 = "サポートガード(" + t.MainPilot().get_Nickname(false) + ")";
                            string argmsg_mode16 = "";
                            su.PilotMessage(argSituation14, msg_mode: argmsg_mode16);
                        }
                        else if (su.IsMessageDefined(argmain_situation27))
                        {
                            string argSituation15 = "サポートガード";
                            string argmsg_mode17 = "";
                            su.PilotMessage(argSituation15, msg_mode: argmsg_mode17);
                        }
                    }
                    else if (localIsMessageDefined2())
                    {
                        string argSituation16 = "かばう(" + t.MainPilot().Name + ")";
                        string argmsg_mode18 = "";
                        su.PilotMessage(argSituation16, msg_mode: argmsg_mode18);
                        use_protect_msg = true;
                    }
                    else if (localIsMessageDefined3())
                    {
                        string argSituation17 = "かばう(" + t.MainPilot().get_Nickname(false) + ")";
                        string argmsg_mode19 = "";
                        su.PilotMessage(argSituation17, msg_mode: argmsg_mode19);
                        use_protect_msg = true;
                    }

                    msg = su.MainPilot().get_Nickname(false) + "は[" + t.MainPilot().get_Nickname(false) + "]をかばった。;";

                    // 身代わりになるユニットをターゲットの位置まで移動
                    {
                        var withBlock2 = su;
                        // アニメ表示
                        if (SRC.BattleAnimation)
                        {
                            string argmain_situation29 = "サポートガード開始";
                            string argsub_situation33 = "";
                            if (su.IsAnimationDefined(argmain_situation29, sub_situation: argsub_situation33))
                            {
                                string argmain_situation28 = "サポートガード開始";
                                string argsub_situation32 = "";
                                su.PlayAnimation(argmain_situation28, sub_situation: argsub_situation32);
                            }
                            else if (!GUI.IsRButtonPressed())
                            {
                                if (use_support_guard)
                                {
                                    GUI.MoveUnitBitmap(su, withBlock2.x, withBlock2.y, tx, ty, 80, 4);
                                }
                                else
                                {
                                    GUI.MoveUnitBitmap(su, withBlock2.x, withBlock2.y, tx, ty, 50);
                                }
                            }
                        }

                        // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                        Map.MapDataForUnit[withBlock2.x, withBlock2.y] = null;
                        prev_x = withBlock2.x;
                        prev_y = withBlock2.y;
                        prev_area = withBlock2.Area;
                        withBlock2.x = tx;
                        withBlock2.y = ty;
                        withBlock2.Area = tarea;
                        Map.MapDataForUnit[withBlock2.x, withBlock2.y] = su;
                    }

                    // ターゲットを再設定
                    t = su;
                    Commands.SelectedTarget = t;
                    Event_Renamed.SelectedTargetForEvent = t;
                }
            }

            if (su is object)
            {
                // ダメージを再計算
                {
                    var withBlock3 = t;
                    prev_hp = withBlock3.HP;
                    dmg = Damage(w, t, true);
                    if (is_critical)
                    {
                        string argoname5 = "ダメージ倍率低下";
                        if (Expression.IsOptionDefined(argoname5))
                        {
                            string argattr15 = "痛";
                            if (IsWeaponClassifiedAs(w, argattr15))
                            {
                                string argattr14 = "痛";
                                dmg = ((1d + 0.1d * (WeaponLevel(w, argattr14) + 2d)) * dmg);
                            }
                            else
                            {
                                dmg = (1.2d * dmg);
                            }
                        }
                        else
                        {
                            string argattr17 = "痛";
                            if (IsWeaponClassifiedAs(w, argattr17))
                            {
                                string argattr16 = "痛";
                                dmg = ((1d + 0.25d * (WeaponLevel(w, argattr16) + 2d)) * dmg);
                            }
                            else
                            {
                                dmg = (1.5d * dmg);
                            }
                        }
                    }
                }

                // かばう場合は常に全弾命中
                hit_count = attack_num;

                // 常に防御モードに設定
                def_mode = "防御";

                // サポートガードを行うユニットに関する情報を記録
                if (IsDefense())
                {
                    Commands.SupportGuardUnit2 = su;
                    Commands.SupportGuardUnitHPRatio2 = su.HP / (double)su.MaxHP;
                }
                else
                {
                    Commands.SupportGuardUnit = su;
                    Commands.SupportGuardUnitHPRatio = su.HP / (double)su.MaxHP;
                }
            }

            // 受けの処理
            bool argbe_quiet = be_quiet | use_protect_msg;
            if (CheckParryFeature(w, t, tx, ty, attack_mode, def_mode, dmg, msg, argbe_quiet))
            {
                dmg = 0;
                goto EndAttack;
            }

            // 防御＆かばう時はダメージを半減
            string argattr18 = "殺";
            if (!IsWeaponClassifiedAs(w, argattr18))
            {
                string argsptype6 = "無防備";
                string argfname1 = "防御不可";
                if (def_mode == "防御" & !t.IsUnderSpecialPowerEffect(argsptype6) & !t.IsFeatureAvailable(argfname1))
                {
                    dmg = dmg / 2;
                }
            }

            // ダミー
            if (CheckDummyFeature(w, t, be_quiet))
            {
                dmg = 0;
                goto EndAttack;
            }

            // これ以降は命中時の処理

            is_hit = true;

            // シールド防御判定
            CheckShieldFeature(w, t, dmg, be_quiet, use_shield, use_shield_msg);

            // 防御能力の処理
            bool argbe_quiet1 = be_quiet | use_protect_msg;
            if (CheckDefenseFeature(w, t, tx, ty, attack_mode, def_mode, dmg, msg, argbe_quiet1, is_penetrated))
            {
                if (!be_quiet)
                {
                    string argSituation18 = wname + "(攻撃無効化)";
                    string argmsg_mode20 = "";
                    PilotMessage(argSituation18, msg_mode: argmsg_mode20);
                }

                dmg = 0;
                goto EndAttack;
            }

            // 命中時の特殊効果を表示。
            // 防御能力の処理を先に行うのは攻撃無効化の特殊効果を優先させるため。
            Sound.IsWavePlayed = false;
            if (!be_quiet)
            {
                string argSituation19 = wname + "(命中)";
                string argmsg_mode21 = "";
                PilotMessage(argSituation19, msg_mode: argmsg_mode21);
            }

            bool localIsSpecialEffectDefined3() { string argmain_situation = wname + "(命中)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            string argmain_situation32 = wname + "(命中)";
            string argsub_situation36 = "";
            string argsub_situation37 = "";
            if (IsAnimationDefined(argmain_situation32, sub_situation: argsub_situation36) | IsAnimationDefined(wname, sub_situation: argsub_situation37))
            {
                string argmain_situation30 = wname + "(命中)";
                string argsub_situation34 = "";
                PlayAnimation(argmain_situation30, sub_situation: argsub_situation34);
            }
            else if (localIsSpecialEffectDefined3())
            {
                string argmain_situation31 = wname + "(命中)";
                string argsub_situation35 = "";
                SpecialEffect(argmain_situation31, sub_situation: argsub_situation35);
            }
            else if (!Sound.IsWavePlayed)
            {
                var argu5 = this;
                Effect.HitEffect(argu5, w, t, hit_count);
            }

            string argmain_situation33 = wname + "(命中)";
            string argsub_situation38 = "";
            string argadd_msg1 = "";
            SysMessage(argmain_situation33, sub_situation: argsub_situation38, add_msg: argadd_msg1);

            // 無敵の場合
            object argIndex5 = "無敵";
            if (t.IsConditionSatisfied(argIndex5))
            {
                if (!be_quiet)
                {
                    string argSituation20 = "攻撃無効化";
                    string argmsg_mode22 = "";
                    t.PilotMessage(argSituation20, msg_mode: argmsg_mode22);
                    string argSituation21 = wname + "(攻撃無効化)";
                    string argmsg_mode23 = "";
                    PilotMessage(argSituation21, msg_mode: argmsg_mode23);
                }

                GUI.DisplaySysMessage(msg + t.Nickname + "は[" + wnickname + "]を無効化した！");
                dmg = 0;
                goto EndAttack;
            }

            // 抹殺攻撃は一撃で倒せる場合にしか効かない
            string argattr19 = "殺";
            if (IsWeaponClassifiedAs(w, argattr19))
            {
                if (t.HP > dmg)
                {
                    GUI.DisplaySysMessage(msg + t.Nickname + "は攻撃による影響を受けなかった。");
                    goto EndAttack;
                }
            }

            // ターゲット位置を変更する攻撃はサポートガードの場合は無効
            if (su is null & def_mode != "援護防御")
            {
                // 吹き飛ばし
                string argattr20 = "吹";
                string argattr21 = "Ｋ";
                if (IsWeaponClassifiedAs(w, argattr20) | IsWeaponClassifiedAs(w, argattr21))
                {
                    CheckBlowAttack(w, t, dmg, msg, attack_mode, def_mode, critical_type);
                }

                // 引き寄せ
                string argattr22 = "引";
                if (IsWeaponClassifiedAs(w, argattr22))
                {
                    CheckDrawAttack(w, t, msg, def_mode, critical_type);
                }

                // 強制転移
                string argattr23 = "転";
                if (IsWeaponClassifiedAs(w, argattr23))
                {
                    CheckTeleportAwayAttack(w, t, msg, def_mode, critical_type);
                }
            }

            // クリティカルメッセージはこの時点で追加
            if (is_critical)
            {
                msg = msg + "クリティカル！;";
            }

            // シールド防御の効果適用
            int spower;
            if (use_shield)
            {
                string argattr24 = "破";
                if (IsWeaponClassifiedAs(w, argattr24))
                {
                    string argfname2 = "小型シールド";
                    if (t.IsFeatureAvailable(argfname2))
                    {
                        dmg = 5 * dmg / 6;
                    }
                    else
                    {
                        dmg = 3 * dmg / 4;
                    }
                }
                else
                {
                    string argfname3 = "小型シールド";
                    if (t.IsFeatureAvailable(argfname3))
                    {
                        dmg = 2 * dmg / 3;
                    }
                    else
                    {
                        dmg = dmg / 2;
                    }
                }

                string argfname4 = "エネルギーシールド";
                string argattr26 = "無";
                string argsptype7 = "防御能力無効化";
                if (t.IsFeatureAvailable(argfname4) & t.EN > 5 & !IsWeaponClassifiedAs(w, argattr26) & !IsUnderSpecialPowerEffect(argsptype7))
                {
                    t.EN = t.EN - 5;
                    string argattr25 = "破";
                    if (IsWeaponClassifiedAs(w, argattr25))
                    {
                        object argIndex6 = "エネルギーシールド";
                        spower = (50d * t.FeatureLevel(argIndex6));
                    }
                    else
                    {
                        object argIndex7 = "エネルギーシールド";
                        spower = (100d * t.FeatureLevel(argIndex7));
                    }

                    if (dmg <= spower)
                    {
                        if (attack_mode != "反射")
                        {
                            var argu13 = this;
                            object argu24 = t;
                            GUI.UpdateMessageForm(argu13, argu24);
                        }
                        else
                        {
                            var argu14 = this;
                            object argu25 = null;
                            GUI.UpdateMessageForm(argu14, argu25);
                        }

                        object argIndex8 = "エネルギーシールド";
                        fname = t.FeatureName0(argIndex8);
                        if (!be_quiet)
                        {
                            string argmain_situation34 = "攻撃無効化(" + fname + ")";
                            if (t.IsMessageDefined(argmain_situation34))
                            {
                                string argSituation22 = "攻撃無効化(" + fname + ")";
                                string argmsg_mode24 = "";
                                t.PilotMessage(argSituation22, msg_mode: argmsg_mode24);
                            }
                            else
                            {
                                string argSituation23 = "攻撃無効化";
                                string argmsg_mode25 = "";
                                t.PilotMessage(argSituation23, msg_mode: argmsg_mode25);
                            }
                        }

                        string argmain_situation37 = "攻撃無効化";
                        if (t.IsAnimationDefined(argmain_situation37, fname))
                        {
                            string argmain_situation35 = "攻撃無効化";
                            t.PlayAnimation(argmain_situation35, fname);
                        }
                        else
                        {
                            string argmain_situation36 = "攻撃無効化";
                            t.SpecialEffect(argmain_situation36, fname);
                        }

                        GUI.DisplaySysMessage(msg + fname + "が攻撃を防いだ。");
                        goto EndAttack;
                    }

                    dmg = dmg - spower;
                }
            }

            // 最低ダメージは10
            if (dmg > 0 & dmg < 10)
            {
                dmg = 10;
            }

            // 都合により破壊させない場合
            string argsptype8 = "てかげん";
            object argIndex9 = "不死身";
            if (IsUnderSpecialPowerEffect(argsptype8) & this.MainPilot().Technique > t.MainPilot().Technique & Strings.InStr(attack_mode, "援護攻撃") == 0 | t.IsConditionSatisfied(argIndex9))
            {
                if (t.HP <= 10)
                {
                    dmg = 0;
                }
                else if (t.HP - dmg < 10)
                {
                    dmg = t.HP - 10;
                }
            }

            // 特殊効果
            CauseEffect(w, t, msg, critical_type, def_mode, dmg >= t.HP);
            if (Strings.InStr(critical_type, "即死") > 0 & !use_support_guard & !use_protect_msg)
            {
                if (t.IsHero())
                {
                    msg = msg + WeaponNickname(w) + "が" + t.Nickname + "の命を奪った。;";
                }
                else
                {
                    msg = msg + WeaponNickname(w) + "が" + t.Nickname + "を一撃で破壊した。;";
                }

                dmg = t.HP;
            }
            else if (t.HP - dmg < 0)
            {
                dmg = t.HP;
            }


            // 確実に発生する特殊効果
            int prev_en;
            string argattr27 = "減";
            string arganame2 = "減";
            string argattr28 = "奪";
            string arganame3 = "奪";
            if (IsWeaponClassifiedAs(w, argattr27) & !t.SpecialEffectImmune(arganame2))
            {
                string argtname = "ＥＮ";
                msg = msg + wnickname + "が[" + t.Nickname + "]の" + Expression.Term(argtname, t) + "を低下させた。;";
                t.EN = GeneralLib.MaxLng((t.EN - t.MaxEN * (dmg / (double)t.MaxHP)), 0);
            }
            else if (IsWeaponClassifiedAs(w, argattr28) & !t.SpecialEffectImmune(arganame3))
            {
                string argtname1 = "ＥＮ";
                msg = msg + Nickname + "は[" + t.Nickname + "]の" + Expression.Term(argtname1, t) + "を吸収した。;";
                prev_en = t.EN;
                t.EN = GeneralLib.MaxLng((t.EN - t.MaxEN * (dmg / (double)t.MaxHP)), 0);
                EN = EN + (prev_en - t.EN) / 2;
            }

            // クリティカル時メッセージ
            if (is_critical | Strings.Len(critical_type) > 0)
            {
                if (!be_quiet)
                {
                    string argSituation24 = wname + "(クリティカル)";
                    string argmsg_mode26 = "";
                    PilotMessage(argSituation24, msg_mode: argmsg_mode26);
                }

                bool localIsSpecialEffectDefined4() { string argmain_situation = wname + "(クリティカル)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                string argmain_situation40 = wname + "(クリティカル)";
                string argsub_situation41 = "";
                if (IsAnimationDefined(argmain_situation40, sub_situation: argsub_situation41))
                {
                    string argmain_situation38 = wname + "(クリティカル)";
                    string argsub_situation39 = "";
                    PlayAnimation(argmain_situation38, sub_situation: argsub_situation39);
                }
                else if (localIsSpecialEffectDefined4())
                {
                    string argmain_situation39 = wname + "(クリティカル)";
                    string argsub_situation40 = "";
                    SpecialEffect(argmain_situation39, sub_situation: argsub_situation40);
                }
                else
                {
                    Effect.CriticalEffect(critical_type, w, use_support_guard | use_protect_msg);
                }
            }

            ApplyDamage:
            ;

            // ダメージの適用
            t.HP = t.HP - dmg;

            // ＨＰ吸収
            string argattr29 = "吸";
            string arganame4 = "吸";
            if (IsWeaponClassifiedAs(w, argattr29) & !t.SpecialEffectImmune(arganame4))
            {
                if (HP < MaxHP)
                {
                    string argtname2 = "ＨＰ";
                    msg = msg + Nickname + "は[" + t.Nickname + "]の" + Expression.Term(argtname2, t) + "を吸収した。;";
                    HP = HP + (prev_hp - t.HP) / 4;
                }
            }

            // マップ攻撃の場合はメッセージが表示されないので
            // その代わりに少しディレイを入れる
            if (def_mode == "マップ攻撃")
            {
                GUI.Sleep(150);
            }

            // ダメージによるＨＰゲージ減少を表示
            if (attack_mode != "反射")
            {
                var argu15 = this;
                object argu26 = t;
                GUI.UpdateMessageForm(argu15, argu26);
            }
            else
            {
                var argu16 = this;
                object argu27 = null;
                GUI.UpdateMessageForm(argu16, argu27);
            }

            // ダメージ量表示前にカットインは一旦消去しておく
            string argoname6 = "戦闘中画面初期化無効";
            if (!Expression.IsOptionDefined(argoname6) | attack_mode == "マップ攻撃")
            {
                if (GUI.IsPictureVisible)
                {
                    GUI.ClearPicture();
                    // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                    GUI.MainForm.picMain(0).Refresh();
                }
            }

            // ダメージ量をマップウィンドウに表示
            string argoname7 = "ダメージ表示無効";
            if (!Expression.IsOptionDefined(argoname7) | attack_mode == "マップ攻撃")
            {
                string argmain_situation43 = wname + "(ダメージ表示)";
                string argsub_situation44 = "";
                string argmain_situation44 = "ダメージ表示";
                string argsub_situation45 = "";
                if (IsAnimationDefined(argmain_situation43, sub_situation: argsub_situation44))
                {
                    string argmain_situation41 = wname + "(ダメージ表示)";
                    string argsub_situation42 = "";
                    PlayAnimation(argmain_situation41, sub_situation: argsub_situation42);
                }
                else if (IsAnimationDefined(argmain_situation44, sub_situation: argsub_situation45))
                {
                    string argmain_situation42 = "ダメージ表示";
                    string argsub_situation43 = "";
                    PlayAnimation(argmain_situation42, sub_situation: argsub_situation43);
                }
                else
                {
                    string argtarea = "";
                    if (!SRC.BattleAnimation | WeaponPower(w, argtarea) > 0 | dmg > 0)
                    {
                        if (!SRC.BattleAnimation & su is object)
                        {
                            string argmsg = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(dmg);
                            GUI.DrawSysString(prev_x, prev_y, argmsg);
                        }
                        else
                        {
                            string argmsg1 = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(dmg);
                            GUI.DrawSysString(t.x, t.y, argmsg1);
                        }
                    }
                }
            }

            // 自動反撃発動
            if (t.HP > 0)
            {
                bool argbe_quiet2 = be_quiet | use_protect_msg;
                CheckAutoAttack(w, t, attack_mode, def_mode, dmg, argbe_quiet2);
                if (Status_Renamed != "出撃")
                {
                    goto EndAttack;
                }
            }

            // 破壊アニメ
            if (t.HP == 0)
            {
                string argmain_situation47 = "破壊";
                string argsub_situation48 = "";
                if (t.IsAnimationDefined(argmain_situation47, sub_situation: argsub_situation48))
                {
                    string argmain_situation45 = "破壊";
                    string argsub_situation46 = "";
                    t.PlayAnimation(argmain_situation45, sub_situation: argsub_situation46);
                }
                else
                {
                    string argmain_situation46 = "破壊";
                    string argsub_situation47 = "";
                    t.SpecialEffect(argmain_situation46, sub_situation: argsub_situation47);
                }
            }

            // パーツ分離が発動可能かチェック
            separate_parts = false;
            if (t.HP == 0)
            {
                string argfname5 = "パーツ分離";
                if (t.IsFeatureAvailable(argfname5))
                {
                    string localLIndex() { object argIndex1 = "パーツ分離"; string arglist = t.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                    Unit localOtherForm() { object argIndex1 = (object)hs03c1bfcb86cd46eaab84349de7f47706(); var ret = t.OtherForm(argIndex1); return ret; }

                    if (localOtherForm().IsAbleToEnter(t.x, t.y))
                    {
                        object argIndex11 = "パーツ分離";
                        if (t.IsFeatureLevelSpecified(argIndex11))
                        {
                            object argIndex10 = "パーツ分離";
                            if (GeneralLib.Dice(100) <= 10d * t.FeatureLevel(argIndex10))
                            {
                                separate_parts = true;
                            }
                        }
                        else
                        {
                            separate_parts = true;
                        }
                    }
                }
            }

            // 破壊メッセージ
            if (attack_mode != "マップ攻撃" & !use_protect_msg & !use_shield_msg)
            {
                if (t.HP == 0)
                {
                    if (separate_parts)
                    {
                        object argIndex12 = "パーツ分離";
                        fname = t.FeatureName(argIndex12);
                        bool localIsMessageDefined4() { string argmain_situation = "破壊時分離(" + fname + ")"; var ret = t.IsMessageDefined(argmain_situation); return ret; }

                        bool localIsMessageDefined5() { string argmain_situation = "分離(" + t.Name + ")"; var ret = t.IsMessageDefined(argmain_situation); return ret; }

                        bool localIsMessageDefined6() { string argmain_situation = "分離(" + fname + ")"; var ret = t.IsMessageDefined(argmain_situation); return ret; }

                        string argmain_situation48 = "破壊時分離(" + t.Name + ")";
                        string argmain_situation49 = "破壊時";
                        string argmain_situation50 = "分離";
                        if (t.IsMessageDefined(argmain_situation48))
                        {
                            string argSituation25 = "破壊時分離(" + t.Name + ")";
                            string argmsg_mode27 = "";
                            t.PilotMessage(argSituation25, msg_mode: argmsg_mode27);
                        }
                        else if (localIsMessageDefined4())
                        {
                            string argSituation27 = "破壊時分離(" + fname + ")";
                            string argmsg_mode29 = "";
                            t.PilotMessage(argSituation27, msg_mode: argmsg_mode29);
                        }
                        else if (t.IsMessageDefined(argmain_situation49))
                        {
                            string argSituation28 = "破壊時分離";
                            string argmsg_mode30 = "";
                            t.PilotMessage(argSituation28, msg_mode: argmsg_mode30);
                        }
                        else if (localIsMessageDefined5())
                        {
                            string argSituation29 = "分離(" + t.Name + ")";
                            string argmsg_mode31 = "";
                            t.PilotMessage(argSituation29, msg_mode: argmsg_mode31);
                        }
                        else if (localIsMessageDefined6())
                        {
                            string argSituation30 = "分離(" + fname + ")";
                            string argmsg_mode32 = "";
                            t.PilotMessage(argSituation30, msg_mode: argmsg_mode32);
                        }
                        else if (t.IsMessageDefined(argmain_situation50))
                        {
                            string argSituation31 = "分離";
                            string argmsg_mode33 = "";
                            t.PilotMessage(argSituation31, msg_mode: argmsg_mode33);
                        }
                        else
                        {
                            string argSituation26 = "ダメージ大";
                            string argmsg_mode28 = "";
                            t.PilotMessage(argSituation26, msg_mode: argmsg_mode28);
                        }
                    }
                    else
                    {
                        string argSituation32 = "破壊";
                        string argmsg_mode34 = "";
                        t.PilotMessage(argSituation32, msg_mode: argmsg_mode34);
                    }
                }
            }

            if (!be_quiet)
            {
                if (t.HP == 0)
                {
                    // とどめメッセージ
                    string argSituation33 = wname + "(とどめ)";
                    string argmsg_mode35 = "";
                    PilotMessage(argSituation33, msg_mode: argmsg_mode35);
                }
                else
                {
                    // ダメージメッセージ
                    string argSituation34 = wname + "(ダメージ)";
                    string argmsg_mode36 = "";
                    PilotMessage(argSituation34, msg_mode: argmsg_mode36);
                }
            }

            // ダメージアニメ
            if (t.HP == 0)
            {
                // どどめアニメ
                if (attack_mode != "マップ攻撃" & attack_mode != "反射")
                {
                    string argmain_situation53 = wname + "(とどめ)";
                    string argsub_situation51 = "";
                    if (IsAnimationDefined(argmain_situation53, sub_situation: argsub_situation51))
                    {
                        string argmain_situation51 = wname + "(とどめ)";
                        string argsub_situation49 = "";
                        PlayAnimation(argmain_situation51, sub_situation: argsub_situation49);
                    }
                    else
                    {
                        string argmain_situation52 = wname + "(とどめ)";
                        string argsub_situation50 = "";
                        SpecialEffect(argmain_situation52, sub_situation: argsub_situation50);
                    }
                }
            }
            else if ((dmg <= 0.05d * t.MaxHP & t.HP >= 0.25d * t.MaxHP | dmg <= 10) & Strings.Len(critical_type) == 0)
            {
                // ダメージが非常に小さい
                string argmain_situation56 = "ダメージ小";
                string argsub_situation54 = "";
                if (t.IsAnimationDefined(argmain_situation56, sub_situation: argsub_situation54))
                {
                    string argmain_situation54 = "ダメージ小";
                    string argsub_situation52 = "";
                    t.PlayAnimation(argmain_situation54, sub_situation: argsub_situation52);
                }
                else
                {
                    string argmain_situation55 = "ダメージ小";
                    string argsub_situation53 = "";
                    t.SpecialEffect(argmain_situation55, sub_situation: argsub_situation53);
                }
            }
            else if (t.HP < 0.25d * t.MaxHP)
            {
                // ダメージ大
                string argmain_situation62 = "ダメージ大";
                string argsub_situation60 = "";
                if (t.IsAnimationDefined(argmain_situation62, sub_situation: argsub_situation60))
                {
                    string argmain_situation60 = "ダメージ大";
                    string argsub_situation58 = "";
                    t.PlayAnimation(argmain_situation60, sub_situation: argsub_situation58);
                }
                else
                {
                    string argmain_situation61 = "ダメージ大";
                    string argsub_situation59 = "";
                    t.SpecialEffect(argmain_situation61, sub_situation: argsub_situation59);
                }
            }
            else if (t.HP > 0.8d * t.MaxHP & Strings.Len(critical_type) == 0)
            {
                // ダメージ小
                string argmain_situation65 = "ダメージ小";
                string argsub_situation63 = "";
                if (t.IsAnimationDefined(argmain_situation65, sub_situation: argsub_situation63))
                {
                    string argmain_situation63 = "ダメージ小";
                    string argsub_situation61 = "";
                    t.PlayAnimation(argmain_situation63, sub_situation: argsub_situation61);
                }
                else
                {
                    string argmain_situation64 = "ダメージ小";
                    string argsub_situation62 = "";
                    t.SpecialEffect(argmain_situation64, sub_situation: argsub_situation62);
                }
            }
            else
            {
                // ダメージ中
                string argmain_situation59 = "ダメージ中";
                string argsub_situation57 = "";
                if (t.IsAnimationDefined(argmain_situation59, sub_situation: argsub_situation57))
                {
                    string argmain_situation57 = "ダメージ中";
                    string argsub_situation55 = "";
                    t.PlayAnimation(argmain_situation57, sub_situation: argsub_situation55);
                }
                else
                {
                    string argmain_situation58 = "ダメージ中";
                    string argsub_situation56 = "";
                    t.SpecialEffect(argmain_situation58, sub_situation: argsub_situation56);
                }
            }

            // ダメージメッセージ
            if (attack_mode != "マップ攻撃" & !use_protect_msg & !use_shield_msg)
            {
                string argmain_situation66 = "バリア貫通";
                if (t.HP == 0)
                {
                }
                // 破壊時メッセージは既に表示している
                else if ((dmg <= 0.05d * t.MaxHP & t.HP >= 0.25d * t.MaxHP | dmg <= 10) & Strings.Len(critical_type) == 0)
                {
                    // ダメージが非常に小さい
                    string argSituation36 = "ダメージ小";
                    string argmsg_mode38 = "";
                    t.PilotMessage(argSituation36, msg_mode: argmsg_mode38);
                }
                else if (t.HP < 0.25d * t.MaxHP)
                {
                    // ダメージ大
                    string argSituation37 = "ダメージ大";
                    string argmsg_mode39 = "";
                    t.PilotMessage(argSituation37, msg_mode: argmsg_mode39);
                }
                else if (is_penetrated & t.IsMessageDefined(argmain_situation66))
                {
                    string argSituation38 = "バリア貫通";
                    string argmsg_mode40 = "";
                    t.PilotMessage(argSituation38, msg_mode: argmsg_mode40);
                }
                else if (t.HP >= 0.8d * t.MaxHP & Strings.Len(critical_type) == 0)
                {
                    // ステータス異常が起こった場合は最低でもダメージ中のメッセージ
                    string argSituation39 = "ダメージ小";
                    string argmsg_mode41 = "";
                    t.PilotMessage(argSituation39, msg_mode: argmsg_mode41);
                }
                else
                {
                    string argSituation35 = "ダメージ中";
                    string argmsg_mode37 = "";
                    t.PilotMessage(argSituation35, msg_mode: argmsg_mode37);
                }
            }

            // シールド防御
            if (use_shield & t.HP > 0)
            {
                string argfname6 = "シールド";
                string argfname7 = "エネルギーシールド";
                string argattr30 = "無";
                string argsptype9 = "防御能力無効化";
                string argfname8 = "小型シールド";
                string argfname9 = "大型シールド";
                string argfname10 = "アクティブシールド";
                if (t.IsFeatureAvailable(argfname6))
                {
                    object argIndex13 = "シールド";
                    fname = t.FeatureName(argIndex13);
                    string argmain_situation68 = "シールド防御";
                    if (t.IsSysMessageDefined(argmain_situation68, fname))
                    {
                        string argmain_situation67 = "シールド防御";
                        string argadd_msg2 = "";
                        t.SysMessage(argmain_situation67, fname, add_msg: argadd_msg2);
                    }
                    else
                    {
                        msg = msg + t.Nickname + "は[" + fname + "]で防御した。;";
                    }
                }
                else if (t.IsFeatureAvailable(argfname7) & t.EN > 5 & !IsWeaponClassifiedAs(w, argattr30) & !IsUnderSpecialPowerEffect(argsptype9))
                {
                    t.EN = t.EN - 5;
                    object argIndex14 = "エネルギーシールド";
                    fname = t.FeatureName(argIndex14);
                    string argmain_situation70 = "シールド防御";
                    if (t.IsSysMessageDefined(argmain_situation70, fname))
                    {
                        string argmain_situation69 = "シールド防御";
                        string argadd_msg3 = "";
                        t.SysMessage(argmain_situation69, fname, add_msg: argadd_msg3);
                    }
                    else
                    {
                        msg = msg + t.Nickname + "は[" + fname + "]を展開した。;";
                    }
                }
                else if (t.IsFeatureAvailable(argfname8))
                {
                    object argIndex15 = "小型シールド";
                    fname = t.FeatureName(argIndex15);
                    string argmain_situation72 = "シールド防御";
                    if (t.IsSysMessageDefined(argmain_situation72, fname))
                    {
                        string argmain_situation71 = "シールド防御";
                        string argadd_msg4 = "";
                        t.SysMessage(argmain_situation71, fname, add_msg: argadd_msg4);
                    }
                    else
                    {
                        msg = msg + t.Nickname + "は[" + fname + "]で防御した。;";
                    }
                }
                else if (t.IsFeatureAvailable(argfname9))
                {
                    object argIndex16 = "大型シールド";
                    fname = t.FeatureName(argIndex16);
                    string argmain_situation74 = "シールド防御";
                    if (t.IsSysMessageDefined(argmain_situation74, fname))
                    {
                        string argmain_situation73 = "シールド防御";
                        string argadd_msg5 = "";
                        t.SysMessage(argmain_situation73, fname, add_msg: argadd_msg5);
                    }
                    else
                    {
                        msg = msg + t.Nickname + "は[" + fname + "]で防御した。;";
                    }
                }
                else if (t.IsFeatureAvailable(argfname10))
                {
                    object argIndex17 = "アクティブシールド";
                    fname = t.FeatureName(argIndex17);
                    string argmain_situation76 = "シールド防御";
                    if (t.IsSysMessageDefined(argmain_situation76, fname))
                    {
                        string argmain_situation75 = "シールド防御";
                        string argadd_msg6 = "";
                        t.SysMessage(argmain_situation75, fname, add_msg: argadd_msg6);
                    }
                    else if (!t.IsHero())
                    {
                        msg = msg + t.Nickname + "の[" + fname + "]が機体を守った。;";
                    }
                    else
                    {
                        msg = msg + fname + "が[" + t.Nickname + "]を守った。;";
                    }
                }
            }

            // ターゲットが生き残った場合の処理
            if (t.HP > 0)
            {
                object argIndex20 = "データ不明";
                if (dmg == 0)
                {
                    string argattr31 = "盗";
                    string argattr32 = "習";
                    string argattr33 = "写";
                    string argattr34 = "化";
                    if (Strings.Len(critical_type) > 0)
                    {
                        GUI.DisplaySysMessage(msg);
                    }
                    else if (IsWeaponClassifiedAs(w, argattr31))
                    {
                        // 盗み失敗
                        object argIndex18 = "すかんぴん";
                        if (t.IsConditionSatisfied(argIndex18))
                        {
                            GUI.DisplaySysMessage(msg + t.Nickname + "は盗める物を持っていなかった。");
                        }
                        else
                        {
                            GUI.DisplaySysMessage(msg + t.Nickname + "は素早く持ち物を守った。");
                        }
                    }
                    else if (IsWeaponClassifiedAs(w, argattr32))
                    {
                        // ラーニング失敗
                        string argfname11 = "ラーニング可能技";
                        if (t.IsFeatureAvailable(argfname11))
                        {
                            object argIndex19 = "ラーニング可能技";
                            buf = t.FeatureData(argIndex19);
                            switch (GeneralLib.LIndex(buf, 2) ?? "")
                            {
                                case "表示":
                                case var @case when @case == "":
                                    {
                                        fname = GeneralLib.LIndex(buf, 1);
                                        break;
                                    }

                                default:
                                    {
                                        fname = GeneralLib.LIndex(buf, 2);
                                        break;
                                    }
                            }

                            string argsname = GeneralLib.LIndex(buf, 1);
                            if (MainPilot().IsSkillAvailable(argsname))
                            {
                                GUI.DisplaySysMessage(msg + MainPilot().get_Nickname(false) + "は「" + fname + "」を既に習得していた。");
                            }
                            else
                            {
                                GUI.DisplaySysMessage(msg + MainPilot().get_Nickname(false) + "は「" + fname + "」を習得出来なかった。");
                            }
                        }
                        else
                        {
                            GUI.DisplaySysMessage(msg + t.Nickname + "は習得可能な技を持っていなかった。");
                        }
                    }
                    else if (IsWeaponClassifiedAs(w, argattr33) | IsWeaponClassifiedAs(w, argattr34))
                    {
                    }
                    // 能力コピーの判定はこれから
                    else
                    {
                        GUI.DisplaySysMessage(msg + t.Nickname + "は攻撃による影響を受けなかった。");
                    }
                }
                else if (t.IsConditionSatisfied(argIndex20))
                {
                    if (attack_num > 1)
                    {
                        msg = msg + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(hit_count) + "回命中し、";
                    }

                    GUI.DisplaySysMessage(msg + t.Nickname + "は[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(dmg) + "]のダメージを受けた。");
                }
                else
                {
                    if (attack_num > 1)
                    {
                        msg = msg + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(hit_count) + "回命中し、";
                    }

                    GUI.DisplaySysMessage(msg + t.Nickname + "は[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(dmg) + "]のダメージを受けた。;" + "残りＨＰは" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(t.HP) + "（損傷率 = " + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (t.MaxHP - t.HP) / t.MaxHP) + "％）");
                }

                // 特殊能力「不安定」による暴走チェック
                string argfname12 = "不安定";
                if (t.IsFeatureAvailable(argfname12))
                {
                    object argIndex23 = "暴走";
                    if (t.HP <= t.MaxHP / 4 & !t.IsConditionSatisfied(argIndex23))
                    {
                        string argcname = "暴走";
                        string argcdata = "";
                        t.AddCondition(argcname, -1, cdata: argcdata);
                        t.Update();
                        if (t.IsHero())
                        {
                            GUI.DisplaySysMessage(t.Nickname + "は暴走した。");
                        }
                        else
                        {
                            object argIndex22 = "不安定";
                            if (Strings.Len(t.FeatureName(argIndex22)) > 0)
                            {
                                object argIndex21 = "不安定";
                                GUI.DisplaySysMessage(t.Nickname + "は[" + t.FeatureName(argIndex21) + "]の暴走のために制御不能に陥った。");
                            }
                            else
                            {
                                GUI.DisplaySysMessage(t.Nickname + "は制御不能に陥った。");
                            }
                        }
                    }
                }

                // ダメージを受ければ眠りからさめる
                object argIndex25 = "睡眠";
                string argattr35 = "眠";
                if (t.IsConditionSatisfied(argIndex25) & !IsWeaponClassifiedAs(w, argattr35))
                {
                    object argIndex24 = "睡眠";
                    t.DeleteCondition(argIndex24);
                    GUI.DisplaySysMessage(t.Nickname + "は眠りから覚めた。");
                }

                // ダメージを受けると凍結解除
                object argIndex27 = "凍結";
                string argattr36 = "凍";
                if (t.IsConditionSatisfied(argIndex27) & !IsWeaponClassifiedAs(w, argattr36))
                {
                    object argIndex26 = "凍結";
                    t.DeleteCondition(argIndex26);
                    GUI.DisplaySysMessage(t.Nickname + "は凍結状態から開放された。");
                }
            }

            // 破壊された場合の処理
            int morale_mod;
            if (t.HP == 0)
            {
                if (attack_num > 1)
                {
                    msg = msg + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(hit_count) + "回命中し、";
                }

                string argmain_situation78 = "破壊";
                string argsub_situation65 = "";
                if (t.IsSysMessageDefined(argmain_situation78, sub_situation: argsub_situation65))
                {
                    string argmain_situation77 = "破壊";
                    string argsub_situation64 = "";
                    string argadd_msg7 = "";
                    t.SysMessage(argmain_situation77, sub_situation: argsub_situation64, add_msg: argadd_msg7);
                }
                else if (t.IsHero())
                {
                    GUI.DisplaySysMessage(msg + t.Nickname + "は[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(dmg) + "]のダメージを受け倒された。");
                }
                else
                {
                    GUI.DisplaySysMessage(msg + t.Nickname + "は[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(dmg) + "]のダメージを受け破壊された。");
                }

                // 復活するかどうかのチェックを行う

                // スペシャルパワー「復活」
                string argsptype10 = "復活";
                if (t.IsUnderSpecialPowerEffect(argsptype10))
                {
                    string argstype1 = "破壊";
                    t.RemoveSpecialPowerInEffect(argstype1);
                    goto Resurrect;
                }

                // パイロット用特殊能力「英雄」＆「再生」
                string argsptype11 = "絶対破壊";
                if (!is_event & !IsUnderSpecialPowerEffect(argsptype11))
                {
                    object argIndex29 = "英雄";
                    string argref_mode = "";
                    if (GeneralLib.Dice(16) <= t.MainPilot().SkillLevel(argIndex29, ref_mode: argref_mode))
                    {
                        t.HP = t.MaxHP / 2;
                        t.IncreaseMorale(10);
                        string argmain_situation79 = "復活";
                        if (t.IsMessageDefined(argmain_situation79))
                        {
                            string argSituation40 = "復活";
                            string argmsg_mode42 = "";
                            t.PilotMessage(argSituation40, msg_mode: argmsg_mode42);
                        }

                        string argmain_situation82 = "復活";
                        string argsub_situation68 = "";
                        if (t.IsAnimationDefined(argmain_situation82, sub_situation: argsub_situation68))
                        {
                            string argmain_situation80 = "復活";
                            string argsub_situation66 = "";
                            t.PlayAnimation(argmain_situation80, sub_situation: argsub_situation66);
                        }
                        else
                        {
                            string argmain_situation81 = "復活";
                            string argsub_situation67 = "";
                            t.SpecialEffect(argmain_situation81, sub_situation: argsub_situation67);
                        }

                        object argIndex28 = "英雄";
                        buf = t.MainPilot().SkillName0(argIndex28);
                        if (buf == "非表示")
                        {
                            buf = "英雄";
                        }

                        string argmain_situation84 = "復活";
                        if (t.IsSysMessageDefined(argmain_situation84, buf))
                        {
                            string argmain_situation83 = "復活";
                            string argadd_msg8 = "";
                            t.SysMessage(argmain_situation83, buf, add_msg: argadd_msg8);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(t.MainPilot().get_Nickname(false) + "の熱き" + buf + "の心が[" + t.Nickname + "]を復活させた！");
                        }

                        goto Resurrect;
                    }

                    // 浄化の適用
                    string argsname4 = "再生";
                    if (t.MainPilot().IsSkillAvailable(argsname4))
                    {
                        string argattr37 = "浄";
                        if (IsWeaponClassifiedAs(w, argattr37))
                        {
                            string argsname1 = "浄化";
                            if (MainPilot().IsSkillAvailable(argsname1))
                            {
                                bool localIsMessageDefined7() { string argmain_situation = "浄解(" + wname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                                string argmain_situation97 = "浄化(" + wname + ")";
                                string argmain_situation98 = "浄化";
                                string argmain_situation99 = "浄解";
                                if (IsMessageDefined(argmain_situation97))
                                {
                                    string argSituation41 = "浄化(" + wname + ")";
                                    string argmsg_mode43 = "";
                                    PilotMessage(argSituation41, msg_mode: argmsg_mode43);
                                    string argmain_situation87 = "浄化";
                                    if (IsAnimationDefined(argmain_situation87, wname))
                                    {
                                        string argmain_situation85 = "浄化";
                                        PlayAnimation(argmain_situation85, wname);
                                    }
                                    else
                                    {
                                        string argmain_situation86 = "浄化";
                                        SpecialEffect(argmain_situation86, wname);
                                    }
                                }
                                else if (IsMessageDefined(argmain_situation98))
                                {
                                    string argSituation42 = "浄化";
                                    string argmsg_mode44 = "";
                                    PilotMessage(argSituation42, msg_mode: argmsg_mode44);
                                    string argmain_situation90 = "浄化";
                                    if (IsAnimationDefined(argmain_situation90, wname))
                                    {
                                        string argmain_situation88 = "浄化";
                                        PlayAnimation(argmain_situation88, wname);
                                    }
                                    else
                                    {
                                        string argmain_situation89 = "浄化";
                                        SpecialEffect(argmain_situation89, wname);
                                    }
                                }
                                else if (localIsMessageDefined7())
                                {
                                    string argSituation43 = "浄解(" + wname + ")";
                                    string argmsg_mode45 = "";
                                    PilotMessage(argSituation43, msg_mode: argmsg_mode45);
                                    string argmain_situation93 = "浄解";
                                    if (IsAnimationDefined(argmain_situation93, wname))
                                    {
                                        string argmain_situation91 = "浄解";
                                        PlayAnimation(argmain_situation91, wname);
                                    }
                                    else
                                    {
                                        string argmain_situation92 = "浄解";
                                        SpecialEffect(argmain_situation92, wname);
                                    }
                                }
                                else if (IsMessageDefined(argmain_situation99))
                                {
                                    string argSituation44 = "浄解";
                                    string argmsg_mode46 = "";
                                    PilotMessage(argSituation44, msg_mode: argmsg_mode46);
                                    string argmain_situation96 = "浄解";
                                    if (IsAnimationDefined(argmain_situation96, wname))
                                    {
                                        string argmain_situation94 = "浄解";
                                        PlayAnimation(argmain_situation94, wname);
                                    }
                                    else
                                    {
                                        string argmain_situation95 = "浄解";
                                        SpecialEffect(argmain_situation95, wname);
                                    }
                                }

                                string argmain_situation101 = "浄化";
                                string argsub_situation70 = "";
                                if (IsSysMessageDefined(argmain_situation101, sub_situation: argsub_situation70))
                                {
                                    string argmain_situation100 = "浄化";
                                    string argsub_situation69 = "";
                                    string argadd_msg9 = "";
                                    SysMessage(argmain_situation100, sub_situation: argsub_situation69, add_msg: argadd_msg9);
                                }
                                else
                                {
                                    GUI.DisplaySysMessage(MainPilot().get_Nickname(false) + "は浄化を行って[" + t.Nickname + "]の復活を防いだ。");
                                }

                                goto Cure;
                            }

                            var loopTo2 = CountPilot();
                            for (i = 2; i <= loopTo2; i++)
                            {
                                Pilot localPilot1() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                                string argsname2 = "浄化";
                                if (localPilot1().IsSkillAvailable(argsname2))
                                {
                                    bool localIsMessageDefined8() { string argmain_situation = "浄解(" + wname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                                    string argmain_situation114 = "浄化(" + wname + ")";
                                    string argmain_situation115 = "浄化";
                                    string argmain_situation116 = "浄解";
                                    if (IsMessageDefined(argmain_situation114))
                                    {
                                        string argSituation45 = "浄化(" + wname + ")";
                                        string argmsg_mode47 = "";
                                        PilotMessage(argSituation45, msg_mode: argmsg_mode47);
                                        string argmain_situation104 = "浄化";
                                        if (IsAnimationDefined(argmain_situation104, wname))
                                        {
                                            string argmain_situation102 = "浄化";
                                            PlayAnimation(argmain_situation102, wname);
                                        }
                                        else
                                        {
                                            string argmain_situation103 = "浄化";
                                            SpecialEffect(argmain_situation103, wname);
                                        }
                                    }
                                    else if (IsMessageDefined(argmain_situation115))
                                    {
                                        string argSituation46 = "浄化";
                                        string argmsg_mode48 = "";
                                        PilotMessage(argSituation46, msg_mode: argmsg_mode48);
                                        string argmain_situation107 = "浄化";
                                        if (IsAnimationDefined(argmain_situation107, wname))
                                        {
                                            string argmain_situation105 = "浄化";
                                            PlayAnimation(argmain_situation105, wname);
                                        }
                                        else
                                        {
                                            string argmain_situation106 = "浄化";
                                            SpecialEffect(argmain_situation106, wname);
                                        }
                                    }
                                    else if (localIsMessageDefined8())
                                    {
                                        string argSituation47 = "浄解(" + wname + ")";
                                        string argmsg_mode49 = "";
                                        PilotMessage(argSituation47, msg_mode: argmsg_mode49);
                                        string argmain_situation110 = "浄解";
                                        if (IsAnimationDefined(argmain_situation110, wname))
                                        {
                                            string argmain_situation108 = "浄解";
                                            PlayAnimation(argmain_situation108, wname);
                                        }
                                        else
                                        {
                                            string argmain_situation109 = "浄解";
                                            SpecialEffect(argmain_situation109, wname);
                                        }
                                    }
                                    else if (IsMessageDefined(argmain_situation116))
                                    {
                                        string argSituation48 = "浄解";
                                        string argmsg_mode50 = "";
                                        PilotMessage(argSituation48, msg_mode: argmsg_mode50);
                                        string argmain_situation113 = "浄解";
                                        if (IsAnimationDefined(argmain_situation113, wname))
                                        {
                                            string argmain_situation111 = "浄解";
                                            PlayAnimation(argmain_situation111, wname);
                                        }
                                        else
                                        {
                                            string argmain_situation112 = "浄解";
                                            SpecialEffect(argmain_situation112, wname);
                                        }
                                    }

                                    string argmain_situation118 = "浄化";
                                    string argsub_situation72 = "";
                                    if (IsSysMessageDefined(argmain_situation118, sub_situation: argsub_situation72))
                                    {
                                        string argmain_situation117 = "浄化";
                                        string argsub_situation71 = "";
                                        string argadd_msg10 = "";
                                        SysMessage(argmain_situation117, sub_situation: argsub_situation71, add_msg: argadd_msg10);
                                    }
                                    else
                                    {
                                        Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                                        GUI.DisplaySysMessage(localPilot().get_Nickname(false) + "は浄化を行って[" + t.Nickname + "]の復活を防いだ。");
                                    }

                                    goto Cure;
                                }
                            }

                            var loopTo3 = CountSupport();
                            for (i = 1; i <= loopTo3; i++)
                            {
                                Pilot localSupport1() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                                string argsname3 = "浄化";
                                if (localSupport1().IsSkillAvailable(argsname3))
                                {
                                    bool localIsMessageDefined9() { string argmain_situation = "浄解(" + wname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                                    string argmain_situation131 = "浄化(" + wname + ")";
                                    string argmain_situation132 = "浄化";
                                    string argmain_situation133 = "浄解";
                                    if (IsMessageDefined(argmain_situation131))
                                    {
                                        string argSituation49 = "浄化(" + wname + ")";
                                        string argmsg_mode51 = "";
                                        PilotMessage(argSituation49, msg_mode: argmsg_mode51);
                                        string argmain_situation121 = "浄化";
                                        if (IsAnimationDefined(argmain_situation121, wname))
                                        {
                                            string argmain_situation119 = "浄化";
                                            PlayAnimation(argmain_situation119, wname);
                                        }
                                        else
                                        {
                                            string argmain_situation120 = "浄化";
                                            SpecialEffect(argmain_situation120, wname);
                                        }
                                    }
                                    else if (IsMessageDefined(argmain_situation132))
                                    {
                                        string argSituation50 = "浄化";
                                        string argmsg_mode52 = "";
                                        PilotMessage(argSituation50, msg_mode: argmsg_mode52);
                                        string argmain_situation124 = "浄化";
                                        if (IsAnimationDefined(argmain_situation124, wname))
                                        {
                                            string argmain_situation122 = "浄化";
                                            PlayAnimation(argmain_situation122, wname);
                                        }
                                        else
                                        {
                                            string argmain_situation123 = "浄化";
                                            SpecialEffect(argmain_situation123, wname);
                                        }
                                    }
                                    else if (localIsMessageDefined9())
                                    {
                                        string argSituation51 = "浄解(" + wname + ")";
                                        string argmsg_mode53 = "";
                                        PilotMessage(argSituation51, msg_mode: argmsg_mode53);
                                        string argmain_situation127 = "浄解";
                                        if (IsAnimationDefined(argmain_situation127, wname))
                                        {
                                            string argmain_situation125 = "浄解";
                                            PlayAnimation(argmain_situation125, wname);
                                        }
                                        else
                                        {
                                            string argmain_situation126 = "浄解";
                                            SpecialEffect(argmain_situation126, wname);
                                        }
                                    }
                                    else if (IsMessageDefined(argmain_situation133))
                                    {
                                        string argSituation52 = "浄解";
                                        string argmsg_mode54 = "";
                                        PilotMessage(argSituation52, msg_mode: argmsg_mode54);
                                        string argmain_situation130 = "浄解";
                                        if (IsAnimationDefined(argmain_situation130, wname))
                                        {
                                            string argmain_situation128 = "浄解";
                                            PlayAnimation(argmain_situation128, wname);
                                        }
                                        else
                                        {
                                            string argmain_situation129 = "浄解";
                                            SpecialEffect(argmain_situation129, wname);
                                        }
                                    }

                                    string argmain_situation135 = "浄化";
                                    string argsub_situation74 = "";
                                    if (IsSysMessageDefined(argmain_situation135, sub_situation: argsub_situation74))
                                    {
                                        string argmain_situation134 = "浄化";
                                        string argsub_situation73 = "";
                                        string argadd_msg11 = "";
                                        SysMessage(argmain_situation134, sub_situation: argsub_situation73, add_msg: argadd_msg11);
                                    }
                                    else
                                    {
                                        Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                                        GUI.DisplaySysMessage(localSupport().get_Nickname(false) + "は浄化を行って[" + t.Nickname + "]の復活を防いだ。");
                                    }

                                    goto Cure;
                                }
                            }

                            if (IsHero())
                            {
                                bool localIsMessageDefined10() { string argmain_situation = "浄解(" + wname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                                string argmain_situation150 = "浄化(" + wname + ")";
                                string argmain_situation151 = "浄化";
                                string argmain_situation152 = "浄解";
                                if (IsMessageDefined(argmain_situation150))
                                {
                                    string argSituation53 = "浄化(" + wname + ")";
                                    string argmsg_mode55 = "";
                                    PilotMessage(argSituation53, msg_mode: argmsg_mode55);
                                    string argmain_situation138 = "浄化";
                                    if (IsAnimationDefined(argmain_situation138, wname))
                                    {
                                        string argmain_situation136 = "浄化";
                                        PlayAnimation(argmain_situation136, wname);
                                    }
                                    else
                                    {
                                        string argmain_situation137 = "浄化";
                                        SpecialEffect(argmain_situation137, wname);
                                    }

                                    GUI.DisplaySysMessage(MainPilot().get_Nickname(false) + "は浄化を行って[" + t.Nickname + "]の復活を防いだ。");
                                }
                                else if (IsMessageDefined(argmain_situation151))
                                {
                                    string argSituation54 = "浄化";
                                    string argmsg_mode56 = "";
                                    PilotMessage(argSituation54, msg_mode: argmsg_mode56);
                                    string argmain_situation141 = "浄化";
                                    if (IsAnimationDefined(argmain_situation141, wname))
                                    {
                                        string argmain_situation139 = "浄化";
                                        PlayAnimation(argmain_situation139, wname);
                                    }
                                    else
                                    {
                                        string argmain_situation140 = "浄化";
                                        SpecialEffect(argmain_situation140, wname);
                                    }

                                    GUI.DisplaySysMessage(MainPilot().get_Nickname(false) + "は浄化を行って[" + t.Nickname + "]の復活を防いだ。");
                                }
                                else if (localIsMessageDefined10())
                                {
                                    string argSituation55 = "浄解(" + wname + ")";
                                    string argmsg_mode57 = "";
                                    PilotMessage(argSituation55, msg_mode: argmsg_mode57);
                                    string argmain_situation144 = "浄解";
                                    if (IsAnimationDefined(argmain_situation144, wname))
                                    {
                                        string argmain_situation142 = "浄解";
                                        PlayAnimation(argmain_situation142, wname);
                                    }
                                    else
                                    {
                                        string argmain_situation143 = "浄解";
                                        SpecialEffect(argmain_situation143, wname);
                                    }

                                    GUI.DisplaySysMessage(MainPilot().get_Nickname(false) + "は浄化を行って[" + t.Nickname + "]の復活を防いだ。");
                                }
                                else if (IsMessageDefined(argmain_situation152))
                                {
                                    string argSituation56 = "浄解";
                                    string argmsg_mode58 = "";
                                    PilotMessage(argSituation56, msg_mode: argmsg_mode58);
                                    string argmain_situation147 = "浄解";
                                    if (IsAnimationDefined(argmain_situation147, wname))
                                    {
                                        string argmain_situation145 = "浄解";
                                        PlayAnimation(argmain_situation145, wname);
                                    }
                                    else
                                    {
                                        string argmain_situation146 = "浄解";
                                        SpecialEffect(argmain_situation146, wname);
                                    }

                                    string argmain_situation149 = "浄化";
                                    string argsub_situation76 = "";
                                    if (IsSysMessageDefined(argmain_situation149, sub_situation: argsub_situation76))
                                    {
                                        string argmain_situation148 = "浄化";
                                        string argsub_situation75 = "";
                                        string argadd_msg12 = "";
                                        SysMessage(argmain_situation148, sub_situation: argsub_situation75, add_msg: argadd_msg12);
                                    }
                                    else
                                    {
                                        GUI.DisplaySysMessage(MainPilot().get_Nickname(false) + "は浄化を行って[" + t.Nickname + "]の復活を防いだ。");
                                    }
                                }

                                goto Cure;
                            }
                        }

                        object argIndex31 = "再生";
                        string argref_mode1 = "";
                        if (GeneralLib.Dice(16) <= t.MainPilot().SkillLevel(argIndex31, ref_mode: argref_mode1))
                        {
                            t.HP = t.MaxHP / 2;
                            string argmain_situation153 = "復活";
                            if (t.IsMessageDefined(argmain_situation153))
                            {
                                string argSituation57 = "復活";
                                string argmsg_mode59 = "";
                                t.PilotMessage(argSituation57, msg_mode: argmsg_mode59);
                            }

                            string argmain_situation156 = "復活";
                            string argsub_situation79 = "";
                            if (t.IsAnimationDefined(argmain_situation156, sub_situation: argsub_situation79))
                            {
                                string argmain_situation154 = "復活";
                                string argsub_situation77 = "";
                                t.PlayAnimation(argmain_situation154, sub_situation: argsub_situation77);
                            }
                            else
                            {
                                string argmain_situation155 = "復活";
                                string argsub_situation78 = "";
                                t.SpecialEffect(argmain_situation155, sub_situation: argsub_situation78);
                            }

                            object argIndex30 = "再生";
                            buf = t.MainPilot().SkillName0(argIndex30);
                            if (buf == "非表示")
                            {
                                buf = "再生";
                            }

                            string argmain_situation158 = "再生";
                            if (t.IsSysMessageDefined(argmain_situation158, buf))
                            {
                                string argmain_situation157 = "再生";
                                string argadd_msg13 = "";
                                t.SysMessage(argmain_situation157, buf, add_msg: argadd_msg13);
                            }
                            else
                            {
                                GUI.DisplaySysMessage(t.Nickname + "は" + buf + "の力で一瞬にして復活した！");
                            }

                            goto Resurrect;
                        }
                    }
                }

                Cure:
                ;


                // ユニット破壊によるパーツ分離
                if (separate_parts)
                {
                    object argIndex32 = "パーツ分離";
                    string arglist = t.FeatureData(argIndex32);
                    uname = GeneralLib.LIndex(arglist, 2);
                    if (!t.IsHero())
                    {
                        if (SRC.BattleAnimation)
                        {
                            string argtsize = t.Size;
                            Effect.ExplodeAnimation(argtsize, t.x, t.y);
                            t.Size = argtsize;
                        }
                        else
                        {
                            string argwave_name = "Explode.wav";
                            Sound.PlayWave(argwave_name);
                        }
                    }

                    object argIndex33 = "パーツ分離";
                    fname = t.FeatureName(argIndex33);
                    bool localIsAnimationDefined4() { string argmain_situation = "破壊時分離(" + fname + ")"; string argsub_situation = ""; var ret = t.IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsSpecialEffectDefined5() { string argmain_situation = "破壊時分離(" + t.Name + ")"; string argsub_situation = ""; var ret = t.IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsSpecialEffectDefined6() { string argmain_situation = "破壊時分離(" + fname + ")"; string argsub_situation = ""; var ret = t.IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsAnimationDefined5() { string argmain_situation = "分離(" + t.Name + ")"; string argsub_situation = ""; var ret = t.IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsAnimationDefined6() { string argmain_situation = "分離(" + fname + ")"; string argsub_situation = ""; var ret = t.IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsSpecialEffectDefined7() { string argmain_situation = "分離(" + t.Name + ")"; string argsub_situation = ""; var ret = t.IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsSpecialEffectDefined8() { string argmain_situation = "分離(" + fname + ")"; string argsub_situation = ""; var ret = t.IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    string argmain_situation171 = "破壊時分離(" + t.Name + ")";
                    string argsub_situation92 = "";
                    string argmain_situation172 = "破壊時分離";
                    string argsub_situation93 = "";
                    string argmain_situation173 = "破壊時分離";
                    string argsub_situation94 = "";
                    string argmain_situation174 = "分離";
                    string argsub_situation95 = "";
                    if (t.IsAnimationDefined(argmain_situation171, sub_situation: argsub_situation92))
                    {
                        string argmain_situation159 = "破壊時分離(" + t.Name + ")";
                        string argsub_situation80 = "";
                        t.PlayAnimation(argmain_situation159, sub_situation: argsub_situation80);
                    }
                    else if (localIsAnimationDefined4())
                    {
                        string argmain_situation161 = "破壊時分離(" + fname + ")";
                        string argsub_situation82 = "";
                        t.PlayAnimation(argmain_situation161, sub_situation: argsub_situation82);
                    }
                    else if (t.IsAnimationDefined(argmain_situation172, sub_situation: argsub_situation93))
                    {
                        string argmain_situation162 = "破壊時分離";
                        string argsub_situation83 = "";
                        t.PlayAnimation(argmain_situation162, sub_situation: argsub_situation83);
                    }
                    else if (localIsSpecialEffectDefined5())
                    {
                        string argmain_situation163 = "破壊時分離(" + t.Name + ")";
                        string argsub_situation84 = "";
                        t.SpecialEffect(argmain_situation163, sub_situation: argsub_situation84);
                    }
                    else if (localIsSpecialEffectDefined6())
                    {
                        string argmain_situation164 = "破壊時分離(" + fname + ")";
                        string argsub_situation85 = "";
                        t.SpecialEffect(argmain_situation164, sub_situation: argsub_situation85);
                    }
                    else if (t.IsSpecialEffectDefined(argmain_situation173, sub_situation: argsub_situation94))
                    {
                        string argmain_situation165 = "破壊時分離";
                        string argsub_situation86 = "";
                        t.SpecialEffect(argmain_situation165, sub_situation: argsub_situation86);
                    }
                    else if (localIsAnimationDefined5())
                    {
                        string argmain_situation166 = "分離(" + t.Name + ")";
                        string argsub_situation87 = "";
                        t.PlayAnimation(argmain_situation166, sub_situation: argsub_situation87);
                    }
                    else if (localIsAnimationDefined6())
                    {
                        string argmain_situation167 = "分離(" + fname + ")";
                        string argsub_situation88 = "";
                        t.PlayAnimation(argmain_situation167, sub_situation: argsub_situation88);
                    }
                    else if (t.IsAnimationDefined(argmain_situation174, sub_situation: argsub_situation95))
                    {
                        string argmain_situation168 = "分離";
                        string argsub_situation89 = "";
                        t.PlayAnimation(argmain_situation168, sub_situation: argsub_situation89);
                    }
                    else if (localIsSpecialEffectDefined7())
                    {
                        string argmain_situation169 = "分離(" + t.Name + ")";
                        string argsub_situation90 = "";
                        t.SpecialEffect(argmain_situation169, sub_situation: argsub_situation90);
                    }
                    else if (localIsSpecialEffectDefined8())
                    {
                        string argmain_situation170 = "分離(" + fname + ")";
                        string argsub_situation91 = "";
                        t.SpecialEffect(argmain_situation170, sub_situation: argsub_situation91);
                    }
                    else
                    {
                        string argmain_situation160 = "分離";
                        string argsub_situation81 = "";
                        t.SpecialEffect(argmain_situation160, sub_situation: argsub_situation81);
                    }

                    t.Transform(uname);
                    {
                        var withBlock4 = t.CurrentForm();
                        withBlock4.HP = withBlock4.MaxHP;
                        // 自分から攻撃して破壊された時には行動数を0に
                        if ((withBlock4.Party ?? "") == (SRC.Stage ?? ""))
                        {
                            withBlock4.UsedAction = withBlock4.MaxAction();
                        }
                    }

                    bool localIsSysMessageDefined() { string argmain_situation = "破壊時分離(" + fname + ")"; string argsub_situation = ""; var ret = t.IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsSysMessageDefined1() { string argmain_situation = "分離(" + t.Name + ")"; string argsub_situation = ""; var ret = t.IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsSysMessageDefined2() { string argmain_situation = "分離(" + fname + ")"; string argsub_situation = ""; var ret = t.IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    string argmain_situation181 = "破壊時分離(" + t.Name + ")";
                    string argsub_situation102 = "";
                    string argmain_situation182 = "破壊時分離";
                    string argsub_situation103 = "";
                    string argmain_situation183 = "分離";
                    string argsub_situation104 = "";
                    if (t.IsSysMessageDefined(argmain_situation181, sub_situation: argsub_situation102))
                    {
                        string argmain_situation175 = "破壊時分離(" + t.Name + ")";
                        string argsub_situation96 = "";
                        string argadd_msg14 = "";
                        t.SysMessage(argmain_situation175, sub_situation: argsub_situation96, add_msg: argadd_msg14);
                    }
                    else if (localIsSysMessageDefined())
                    {
                        string argmain_situation176 = "破壊時分離(" + fname + ")";
                        string argsub_situation97 = "";
                        string argadd_msg15 = "";
                        t.SysMessage(argmain_situation176, sub_situation: argsub_situation97, add_msg: argadd_msg15);
                    }
                    else if (t.IsSysMessageDefined(argmain_situation182, sub_situation: argsub_situation103))
                    {
                        string argmain_situation177 = "破壊時分離";
                        string argsub_situation98 = "";
                        string argadd_msg16 = "";
                        t.SysMessage(argmain_situation177, sub_situation: argsub_situation98, add_msg: argadd_msg16);
                    }
                    else if (localIsSysMessageDefined1())
                    {
                        string argmain_situation178 = "分離(" + t.Name + ")";
                        string argsub_situation99 = "";
                        string argadd_msg17 = "";
                        t.SysMessage(argmain_situation178, sub_situation: argsub_situation99, add_msg: argadd_msg17);
                    }
                    else if (localIsSysMessageDefined2())
                    {
                        string argmain_situation179 = "分離(" + fname + ")";
                        string argsub_situation100 = "";
                        string argadd_msg18 = "";
                        t.SysMessage(argmain_situation179, sub_situation: argsub_situation100, add_msg: argadd_msg18);
                    }
                    else if (t.IsSysMessageDefined(argmain_situation183, sub_situation: argsub_situation104))
                    {
                        string argmain_situation180 = "分離";
                        string argsub_situation101 = "";
                        string argadd_msg19 = "";
                        t.SysMessage(argmain_situation180, sub_situation: argsub_situation101, add_msg: argadd_msg19);
                    }
                    else if (t.IsHero())
                    {
                        Unit localOtherForm2() { object argIndex1 = uname; var ret = t.OtherForm(argIndex1); return ret; }

                        if ((t.Nickname ?? "") != (localOtherForm2().Nickname ?? ""))
                        {
                            Unit localOtherForm1() { object argIndex1 = uname; var ret = t.OtherForm(argIndex1); return ret; }

                            GUI.DisplaySysMessage(t.Nickname + "は" + localOtherForm1().Nickname + "に変化した。");
                        }
                        else
                        {
                            GUI.DisplaySysMessage(t.Nickname + "は変化し、蘇った。");
                        }
                    }
                    else
                    {
                        GUI.DisplaySysMessage(t.Nickname + "は破壊されたパーツを分離させた。");
                    }

                    t = t.CurrentForm();
                    Commands.SelectedTarget = t;
                    Event_Renamed.SelectedTargetForEvent = t;
                    goto Resurrect;
                }

                // ユニット破壊による気力の変動
                if (attack_mode != "マップ攻撃")
                {
                    // 敵を破壊したユニットのパイロットはトータルで気力+4
                    if (Strings.InStr(attack_mode, "援護攻撃") > 0)
                    {
                        Commands.AttackUnit.CurrentForm().IncreaseMorale(3);
                    }
                    else
                    {
                        IncreaseMorale(3);
                    }

                    // それ以外のパイロット
                    foreach (Pilot p in SRC.PList)
                    {
                        // 出撃中のパイロットのみが対象
                        if (p.Unit_Renamed is null)
                        {
                            goto NextPilot;
                        }

                        if (p.Unit_Renamed.Status_Renamed != "出撃")
                        {
                            goto NextPilot;
                        }

                        if ((p.Party ?? "") == (Party ?? ""))
                        {
                            // 敵を破壊したユニットの陣営のパイロットは気力+1
                            if (p.Personality != "機械")
                            {
                                p.Morale = (p.Morale + 1);
                            }
                        }
                        else if ((p.Party ?? "") == (t.Party ?? ""))
                        {
                            // 破壊されたユニットの陣営のパイロットは性格に応じて気力を変化
                            switch (p.Personality ?? "")
                            {
                                case "超強気":
                                    {
                                        morale_mod = 2;
                                        break;
                                    }

                                case "強気":
                                    {
                                        morale_mod = 1;
                                        break;
                                    }

                                case "弱気":
                                    {
                                        morale_mod = -1;
                                        break;
                                    }

                                default:
                                    {
                                        morale_mod = 0;
                                        break;
                                    }
                            }

                            // 味方の場合の気力変化量はオプションで変化する
                            string argoname8 = "破壊時味方気力変化５倍";
                            if (p.Party == "味方" & Expression.IsOptionDefined(argoname8))
                            {
                                p.Morale = (p.Morale + 5 * morale_mod);
                            }
                            else
                            {
                                p.Morale = (p.Morale + morale_mod);
                            }
                        }

                        NextPilot:
                        ;
                    }
                }

                // 脱出メッセージの表示
                bool localIsEventDefined() { string arglname = "破壊 " + t.MainPilot().ID; var ret = Event_Renamed.IsEventDefined(arglname, true); return ret; }

                string argmain_situation184 = "脱出";
                if (t.IsMessageDefined(argmain_situation184) & !is_event & !localIsEventDefined())
                {
                    string argSituation58 = "脱出";
                    string argmsg_mode60 = "";
                    t.PilotMessage(argSituation58, msg_mode: argmsg_mode60);
                }

                // 戦闘アニメ表示を使わない場合はかばったユニットを元の位置に戻しておく
                if (!SRC.BattleAnimation)
                {
                    if (su is object)
                    {
                        {
                            var withBlock5 = su;
                            withBlock5.x = prev_x;
                            withBlock5.y = prev_y;
                            withBlock5.Area = prev_area;
                        }
                    }
                }

                // ユニットを破壊
                t.Die();
            }

            Resurrect:
            ;
            // 復活した場合は破壊関連の処理を行わない

            EndAttack:
            ;
            string argattr39 = "合";
            if (Status_Renamed == "出撃" & t.Status_Renamed == "出撃" & Strings.InStr(attack_mode, "援護攻撃") == 0 & attack_mode != "マップ攻撃" & attack_mode != "反射" & !IsWeaponClassifiedAs(w, argattr39) & HP > 0 & t.HP > 0)
            {
                // 再攻撃
                string argref_mode4 = "ステータス";
                if (!second_attack & IsWeaponAvailable(w, argref_mode4) & IsTargetWithinRange(w, t))
                {
                    // スペシャルパワー効果「再攻撃」
                    string argsptype12 = "再攻撃";
                    if (IsUnderSpecialPowerEffect(argsptype12))
                    {
                        second_attack = true;
                        string argstype2 = "攻撃";
                        RemoveSpecialPowerInEffect(argstype2);
                        goto begin;
                    }

                    // 再攻撃能力
                    string argsname5 = "再攻撃";
                    if (MainPilot().IsSkillAvailable(argsname5))
                    {
                        if (this.MainPilot().Intuition >= t.MainPilot().Intuition)
                        {
                            object argIndex34 = "再攻撃";
                            string argref_mode2 = "";
                            slevel = (2d * MainPilot().SkillLevel(argIndex34, ref_mode: argref_mode2));
                        }
                        else
                        {
                            object argIndex35 = "再攻撃";
                            string argref_mode3 = "";
                            slevel = MainPilot().SkillLevel(argIndex35, ref_mode: argref_mode3);
                        }

                        if (slevel >= GeneralLib.Dice(32))
                        {
                            second_attack = true;
                            string argstype3 = "攻撃";
                            RemoveSpecialPowerInEffect(argstype3);
                            goto begin;
                        }
                    }

                    // 再属性
                    string argattr38 = "再";
                    if (WeaponLevel(w, argattr38) >= GeneralLib.Dice(16))
                    {
                        second_attack = true;
                        string argstype4 = "攻撃";
                        RemoveSpecialPowerInEffect(argstype4);
                        goto begin;
                    }
                }

                // 追加攻撃
                if (ReferenceEquals(su, t))
                {
                    string argdef_mode = "援護防御";
                    CheckAdditionalAttack(w, t, be_quiet, attack_mode, argdef_mode, dmg);
                }
                else
                {
                    string argdef_mode1 = "";
                    CheckAdditionalAttack(w, t, be_quiet, attack_mode, argdef_mode1, dmg);
                }
            }

            // サポートガードを行ったユニットは破壊処理の前に以前の位置に復帰させる
            int sx, sy;
            if (su is object)
            {
                su = su.CurrentForm();
                {
                    var withBlock6 = su;
                    sx = withBlock6.x;
                    sy = withBlock6.y;

                    // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                    Map.MapDataForUnit[sx, sy] = null;
                    withBlock6.x = prev_x;
                    withBlock6.y = prev_y;
                    withBlock6.Area = prev_area;
                    if (withBlock6.Status_Renamed == "出撃")
                    {
                        Map.MapDataForUnit[withBlock6.x, withBlock6.y] = su;
                        Map.MapDataForUnit[tx, ty] = orig_t;
                        if (SRC.BattleAnimation)
                        {
                            string argmain_situation186 = "サポートガード終了";
                            string argsub_situation106 = "";
                            if (su.IsAnimationDefined(argmain_situation186, sub_situation: argsub_situation106))
                            {
                                if (!GUI.IsRButtonPressed())
                                {
                                    string argmain_situation185 = "サポートガード終了";
                                    string argsub_situation105 = "";
                                    su.PlayAnimation(argmain_situation185, sub_situation: argsub_situation105);
                                }
                            }
                            else if (!GUI.IsRButtonPressed())
                            {
                                GUI.PaintUnitBitmap(orig_t, "リフレッシュ無し");
                                if (use_support_guard)
                                {
                                    GUI.MoveUnitBitmap(su, sx, sy, withBlock6.x, withBlock6.y, 80, 4);
                                }
                                else
                                {
                                    GUI.MoveUnitBitmap(su, sx, sy, withBlock6.x, withBlock6.y, 50);
                                }
                            }
                            else
                            {
                                GUI.PaintUnitBitmap(su, "リフレッシュ無し");
                                GUI.PaintUnitBitmap(orig_t, "リフレッシュ無し");
                            }
                        }
                    }
                    else
                    {
                        // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                        Map.MapDataForUnit[withBlock6.x, withBlock6.y] = null;
                        Map.MapDataForUnit[tx, ty] = orig_t;
                        GUI.PaintUnitBitmap(orig_t, "リフレッシュ無し");
                    }
                }
            }

            if (is_hit)
            {
                // 攻撃を命中させたことによる気力増加
                if (attack_mode != "マップ攻撃" & attack_mode != "反射")
                {
                    {
                        var withBlock7 = CurrentForm();
                        string argsname6 = "命中時気力増加";
                        if (withBlock7.MainPilot().IsSkillAvailable(argsname6))
                        {
                            object argIndex36 = 1;
                            object argIndex37 = 1;
                            object argIndex38 = "命中時気力増加";
                            string argref_mode5 = "";
                            withBlock7.Pilot(argIndex36).Morale = (withBlock7.Pilot(argIndex37).Morale + withBlock7.MainPilot().SkillLevel(argIndex38, ref_mode: argref_mode5));
                        }
                    }
                }

                // 攻撃を受けたことによる気力増加
                t.IncreaseMorale(1);
                string argsname7 = "損傷時気力増加";
                if (t.MainPilot().IsSkillAvailable(argsname7))
                {
                    object argIndex39 = 1;
                    object argIndex40 = 1;
                    object argIndex41 = "損傷時気力増加";
                    string argref_mode6 = "";
                    t.Pilot(argIndex39).Morale = (t.Pilot(argIndex40).Morale + t.MainPilot().SkillLevel(argIndex41, ref_mode: argref_mode6));
                }
            }
            else
            {
                // 攻撃を外したことによる気力増加
                if (attack_mode != "マップ攻撃" & attack_mode != "反射")
                {
                    {
                        var withBlock8 = CurrentForm();
                        string argsname8 = "失敗時気力増加";
                        if (withBlock8.MainPilot().IsSkillAvailable(argsname8))
                        {
                            object argIndex42 = 1;
                            object argIndex43 = 1;
                            object argIndex44 = "失敗時気力増加";
                            string argref_mode7 = "";
                            withBlock8.Pilot(argIndex42).Morale = (withBlock8.Pilot(argIndex43).Morale + withBlock8.MainPilot().SkillLevel(argIndex44, ref_mode: argref_mode7));
                        }
                    }
                }

                // 攻撃を回避したことによる気力増加
                string argsname9 = "回避時気力増加";
                if (t.MainPilot().IsSkillAvailable(argsname9))
                {
                    object argIndex45 = 1;
                    object argIndex46 = 1;
                    object argIndex47 = "回避時気力増加";
                    string argref_mode8 = "";
                    t.Pilot(argIndex45).Morale = (t.Pilot(argIndex46).Morale + t.MainPilot().SkillLevel(argIndex47, ref_mode: argref_mode8));
                }
            }

            // スペシャルパワー効果の解除
            if (Strings.InStr(msg, "かばった") == 0)
            {
                string argstype5 = "防御";
                t.RemoveSpecialPowerInEffect(argstype5);
            }

            if (is_hit)
            {
                string argstype6 = "被弾";
                t.RemoveSpecialPowerInEffect(argstype6);
            }

            // 戦闘アニメで変更されたユニット画像を元に戻す
            object argIndex49 = "ユニット画像";
            if (t.IsConditionSatisfied(argIndex49))
            {
                object argIndex48 = "ユニット画像";
                t.DeleteCondition(argIndex48);
                t.BitmapID = GUI.MakeUnitBitmap(t);
                if (t.Status_Renamed == "出撃")
                {
                    GUI.PaintUnitBitmap(t, "リフレッシュ無し");
                }
            }

            object argIndex51 = "非表示付加";
            if (t.IsConditionSatisfied(argIndex51))
            {
                object argIndex50 = "非表示付加";
                t.DeleteCondition(argIndex50);
                t.BitmapID = GUI.MakeUnitBitmap(t);
                if (t.Status_Renamed == "出撃")
                {
                    GUI.PaintUnitBitmap(t, "リフレッシュ無し");
                }
            }

            // 戦闘に参加したユニットを識別
            {
                var withBlock9 = CurrentForm();
                string argoname9 = "ユニット情報隠蔽";
                if (Expression.IsOptionDefined(argoname9))
                {
                    if (withBlock9.Party0 == "敵" | withBlock9.Party0 == "中立")
                    {
                        string argcname1 = "識別済み";
                        string argcdata1 = "非表示";
                        withBlock9.AddCondition(argcname1, -1, 0d, argcdata1);
                    }

                    if (t.Party0 == "敵" | t.Party0 == "中立")
                    {
                        string argcname2 = "識別済み";
                        string argcdata2 = "非表示";
                        t.AddCondition(argcname2, -1, 0d, argcdata2);
                    }
                }
                else
                {
                    object argIndex53 = "ユニット情報隠蔽";
                    if (withBlock9.IsConditionSatisfied(argIndex53))
                    {
                        object argIndex52 = "ユニット情報隠蔽";
                        withBlock9.DeleteCondition(argIndex52);
                    }

                    object argIndex55 = "ユニット情報隠蔽";
                    if (t.IsConditionSatisfied(argIndex55))
                    {
                        object argIndex54 = "ユニット情報隠蔽";
                        t.DeleteCondition(argIndex54);
                    }
                }
            }

            // 情報を更新
            CurrentForm().Update();
            t.Update();

            // マップ攻撃や反射による攻撃の場合はここまで
            switch (attack_mode ?? "")
            {
                case "マップ攻撃":
                case "反射":
                    {
                        Commands.RestoreSelections();
                        return;
                    }
            }

            // ステルスが解ける？
            string argfname13 = "ステルス";
            if (IsFeatureAvailable(argfname13))
            {
                string argattr40 = "忍";
                if (IsWeaponClassifiedAs(w, argattr40))
                {
                    // 暗殺武器の場合、相手を倒すか行動不能にすればステルス継続
                    if (t.CurrentForm().Status_Renamed == "出撃" & t.CurrentForm().MaxAction() > 0)
                    {
                        string argcname3 = "ステルス無効";
                        string argcdata3 = "";
                        AddCondition(argcname3, 1, cdata: argcdata3);
                    }
                }
                else
                {
                    string argcname4 = "ステルス無効";
                    string argcdata4 = "";
                    AddCondition(argcname4, 1, cdata: argcdata4);
                }
            }

            // 合体技のパートナーの弾数＆ＥＮの消費
            var loopTo4 = Information.UBound(partners);
            for (i = 1; i <= loopTo4; i++)
            {
                {
                    var withBlock10 = partners[i].CurrentForm();
                    var loopTo5 = withBlock10.CountWeapon();
                    for (j = 1; j <= loopTo5; j++)
                    {
                        if ((withBlock10.Weapon(j).Name ?? "") == (wname ?? ""))
                        {
                            withBlock10.UseWeapon(j);
                            string argattr41 = "自";
                            string argattr42 = "失";
                            string argattr43 = "変";
                            if (withBlock10.IsWeaponClassifiedAs(j, argattr41))
                            {
                                string argfname14 = "パーツ分離";
                                if (withBlock10.IsFeatureAvailable(argfname14))
                                {
                                    object argIndex56 = "パーツ分離";
                                    string arglist1 = withBlock10.FeatureData(argIndex56);
                                    uname = GeneralLib.LIndex(arglist1, 2);
                                    Unit localOtherForm3() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                    if (localOtherForm3().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                    {
                                        withBlock10.Transform(uname);
                                        {
                                            var withBlock11 = withBlock10.CurrentForm();
                                            withBlock11.HP = withBlock11.MaxHP;
                                            withBlock11.UsedAction = withBlock11.MaxAction();
                                        }
                                    }
                                    else
                                    {
                                        withBlock10.Die();
                                    }
                                }
                                else
                                {
                                    withBlock10.Die();
                                }
                            }
                            else if (withBlock10.IsWeaponClassifiedAs(j, argattr42) & withBlock10.HP == 0)
                            {
                                withBlock10.Die();
                            }
                            else if (withBlock10.IsWeaponClassifiedAs(j, argattr43))
                            {
                                string argfname16 = "変形技";
                                string argfname17 = "ノーマルモード";
                                if (withBlock10.IsFeatureAvailable(argfname16))
                                {
                                    uname = "";
                                    var loopTo6 = withBlock10.CountFeature();
                                    for (k = 1; k <= loopTo6; k++)
                                    {
                                        string localFeature() { object argIndex1 = k; var ret = withBlock10.Feature(argIndex1); return ret; }

                                        string localFeatureData1() { object argIndex1 = k; var ret = withBlock10.FeatureData(argIndex1); return ret; }

                                        string localLIndex1() { string arglist = hs343c2cd9fcb6419f8281c931401bbbc0(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                        if (localFeature() == "変形技" & (localLIndex1() ?? "") == (wname ?? ""))
                                        {
                                            string localFeatureData() { object argIndex1 = k; var ret = withBlock10.FeatureData(argIndex1); return ret; }

                                            string arglist2 = localFeatureData();
                                            uname = GeneralLib.LIndex(arglist2, 2);
                                            Unit localOtherForm4() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                            if (localOtherForm4().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                            {
                                                withBlock10.Transform(uname);
                                            }

                                            break;
                                        }
                                    }

                                    if ((uname ?? "") != (withBlock10.CurrentForm().Name ?? ""))
                                    {
                                        string argfname15 = "ノーマルモード";
                                        if (withBlock10.IsFeatureAvailable(argfname15))
                                        {
                                            object argIndex57 = "ノーマルモード";
                                            string arglist3 = withBlock10.FeatureData(argIndex57);
                                            uname = GeneralLib.LIndex(arglist3, 1);
                                            Unit localOtherForm5() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                            if (localOtherForm5().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                            {
                                                withBlock10.Transform(uname);
                                            }
                                        }
                                    }
                                }
                                else if (withBlock10.IsFeatureAvailable(argfname17))
                                {
                                    object argIndex58 = "ノーマルモード";
                                    string arglist4 = withBlock10.FeatureData(argIndex58);
                                    uname = GeneralLib.LIndex(arglist4, 1);
                                    Unit localOtherForm6() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                    if (localOtherForm6().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                    {
                                        withBlock10.Transform(uname);
                                    }
                                }
                            }

                            break;
                        }
                    }

                    // 同名の武器がなかった場合は自分のデータを使って処理
                    if (j > withBlock10.CountWeapon())
                    {
                        if (this.Weapon(w).ENConsumption > 0)
                        {
                            withBlock10.EN = withBlock10.EN - WeaponENConsumption(w);
                        }

                        string argattr44 = "消";
                        if (IsWeaponClassifiedAs(w, argattr44))
                        {
                            string argcname5 = "消耗";
                            string argcdata5 = "";
                            withBlock10.AddCondition(argcname5, 1, cdata: argcdata5);
                        }

                        string argattr45 = "Ｃ";
                        object argIndex60 = "チャージ完了";
                        if (IsWeaponClassifiedAs(w, argattr45) & withBlock10.IsConditionSatisfied(argIndex60))
                        {
                            object argIndex59 = "チャージ完了";
                            withBlock10.DeleteCondition(argIndex59);
                        }

                        string argattr47 = "気";
                        if (IsWeaponClassifiedAs(w, argattr47))
                        {
                            string argattr46 = "気";
                            withBlock10.IncreaseMorale((-5 * WeaponLevel(w, argattr46)));
                        }

                        string argattr50 = "霊";
                        string argattr51 = "プ";
                        if (IsWeaponClassifiedAs(w, argattr50))
                        {
                            hp_ratio = 100 * withBlock10.HP / (double)withBlock10.MaxHP;
                            en_ratio = 100 * withBlock10.EN / (double)withBlock10.MaxEN;
                            string argattr48 = "霊";
                            withBlock10.MainPilot().Plana = (withBlock10.MainPilot().Plana - 5d * WeaponLevel(w, argattr48));
                            withBlock10.HP = (withBlock10.MaxHP * hp_ratio / 100d);
                            withBlock10.EN = (withBlock10.MaxEN * en_ratio / 100d);
                        }
                        else if (IsWeaponClassifiedAs(w, argattr51))
                        {
                            hp_ratio = 100 * withBlock10.HP / (double)withBlock10.MaxHP;
                            en_ratio = 100 * withBlock10.EN / (double)withBlock10.MaxEN;
                            string argattr49 = "プ";
                            withBlock10.MainPilot().Plana = (withBlock10.MainPilot().Plana - 5d * WeaponLevel(w, argattr49));
                            withBlock10.HP = (withBlock10.MaxHP * hp_ratio / 100d);
                            withBlock10.EN = (withBlock10.MaxEN * en_ratio / 100d);
                        }

                        string argattr53 = "失";
                        if (IsWeaponClassifiedAs(w, argattr53))
                        {
                            string argattr52 = "失";
                            withBlock10.HP = GeneralLib.MaxLng((withBlock10.HP - (long)(withBlock10.MaxHP * WeaponLevel(w, argattr52)) / 10L), 0);
                        }

                        string argattr54 = "自";
                        string argattr55 = "失";
                        string argattr56 = "変";
                        if (IsWeaponClassifiedAs(w, argattr54))
                        {
                            string argfname18 = "パーツ分離";
                            if (withBlock10.IsFeatureAvailable(argfname18))
                            {
                                object argIndex61 = "パーツ分離";
                                string arglist5 = withBlock10.FeatureData(argIndex61);
                                uname = GeneralLib.LIndex(arglist5, 2);
                                Unit localOtherForm7() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                if (localOtherForm7().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                {
                                    withBlock10.Transform(uname);
                                    {
                                        var withBlock12 = withBlock10.CurrentForm();
                                        withBlock12.HP = withBlock12.MaxHP;
                                        withBlock12.UsedAction = withBlock12.MaxAction();
                                    }
                                }
                                else
                                {
                                    withBlock10.Die();
                                }
                            }
                            else
                            {
                                withBlock10.Die();
                            }
                        }
                        else if (IsWeaponClassifiedAs(w, argattr55) & withBlock10.HP == 0)
                        {
                            withBlock10.Die();
                        }
                        else if (IsWeaponClassifiedAs(w, argattr56))
                        {
                            string argfname19 = "ノーマルモード";
                            if (withBlock10.IsFeatureAvailable(argfname19))
                            {
                                object argIndex62 = "ノーマルモード";
                                string arglist6 = withBlock10.FeatureData(argIndex62);
                                uname = GeneralLib.LIndex(arglist6, 1);
                                Unit localOtherForm8() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                if (localOtherForm8().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                {
                                    withBlock10.Transform(uname);
                                }
                            }
                        }
                    }
                }
            }

            // 以下の特殊効果はは武器データの変化があるため、同時には適応されない

            // 反射等により破壊された場合はなにも出来ない

            // 自爆攻撃
            string argattr57 = "自";

            // ＨＰ消費攻撃による自殺
            string argattr58 = "失";

            // 変形技
            string argattr59 = "変";

            // 能力コピー
            string argattr60 = "写";
            string argattr61 = "化";
            string argattr62 = "殺";
            if (CurrentForm().Status_Renamed == "破壊")
            {
            }
            else if (IsWeaponClassifiedAs(w, argattr57))
            {
                string argfname20 = "パーツ分離";
                if (IsFeatureAvailable(argfname20))
                {
                    object argIndex63 = "パーツ分離";
                    string arglist7 = FeatureData(argIndex63);
                    uname = GeneralLib.LIndex(arglist7, 2);
                    Unit localOtherForm9() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm9().IsAbleToEnter(x, y))
                    {
                        Transform(uname);
                        {
                            var withBlock13 = CurrentForm();
                            withBlock13.HP = withBlock13.MaxHP;
                            withBlock13.UsedAction = withBlock13.MaxAction();
                        }

                        object argIndex64 = "パーツ分離";
                        fname = FeatureName(argIndex64);
                        bool localIsSysMessageDefined3() { string argmain_situation = "破壊時分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        bool localIsSysMessageDefined4() { string argmain_situation = "分離(" + Name + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        bool localIsSysMessageDefined5() { string argmain_situation = "分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        string argmain_situation193 = "破壊時分離(" + Name + ")";
                        string argsub_situation113 = "";
                        string argmain_situation194 = "破壊時分離";
                        string argsub_situation114 = "";
                        string argmain_situation195 = "分離";
                        string argsub_situation115 = "";
                        if (IsSysMessageDefined(argmain_situation193, sub_situation: argsub_situation113))
                        {
                            string argmain_situation187 = "破壊時分離(" + Name + ")";
                            string argsub_situation107 = "";
                            string argadd_msg20 = "";
                            SysMessage(argmain_situation187, sub_situation: argsub_situation107, add_msg: argadd_msg20);
                        }
                        else if (localIsSysMessageDefined3())
                        {
                            string argmain_situation188 = "破壊時分離(" + fname + ")";
                            string argsub_situation108 = "";
                            string argadd_msg21 = "";
                            SysMessage(argmain_situation188, sub_situation: argsub_situation108, add_msg: argadd_msg21);
                        }
                        else if (IsSysMessageDefined(argmain_situation194, sub_situation: argsub_situation114))
                        {
                            string argmain_situation189 = "破壊時分離";
                            string argsub_situation109 = "";
                            string argadd_msg22 = "";
                            SysMessage(argmain_situation189, sub_situation: argsub_situation109, add_msg: argadd_msg22);
                        }
                        else if (localIsSysMessageDefined4())
                        {
                            string argmain_situation190 = "分離(" + Name + ")";
                            string argsub_situation110 = "";
                            string argadd_msg23 = "";
                            SysMessage(argmain_situation190, sub_situation: argsub_situation110, add_msg: argadd_msg23);
                        }
                        else if (localIsSysMessageDefined5())
                        {
                            string argmain_situation191 = "分離(" + fname + ")";
                            string argsub_situation111 = "";
                            string argadd_msg24 = "";
                            SysMessage(argmain_situation191, sub_situation: argsub_situation111, add_msg: argadd_msg24);
                        }
                        else if (IsSysMessageDefined(argmain_situation195, sub_situation: argsub_situation115))
                        {
                            string argmain_situation192 = "分離";
                            string argsub_situation112 = "";
                            string argadd_msg25 = "";
                            SysMessage(argmain_situation192, sub_situation: argsub_situation112, add_msg: argadd_msg25);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(Nickname + "は破壊されたパーツを分離させた。");
                        }
                    }
                    else
                    {
                        Die();
                    }
                }
                else
                {
                    Die();
                }
            }
            else if (IsWeaponClassifiedAs(w, argattr58) & HP == 0)
            {
                Die();
            }
            else if (IsWeaponClassifiedAs(w, argattr59))
            {
                string argfname22 = "変形技";
                string argfname23 = "ノーマルモード";
                if (IsFeatureAvailable(argfname22))
                {
                    var loopTo7 = CountFeature();
                    for (i = 1; i <= loopTo7; i++)
                    {
                        string localFeature1() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                        string localFeatureData3() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localLIndex2() { string arglist = hsd78be329e21a495e9d12e8227830c1b1(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        if (localFeature1() == "変形技" & (localLIndex2() ?? "") == (wname ?? ""))
                        {
                            string localFeatureData2() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string arglist8 = localFeatureData2();
                            uname = GeneralLib.LIndex(arglist8, 2);
                            Unit localOtherForm10() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                            if (localOtherForm10().IsAbleToEnter(x, y))
                            {
                                Transform(uname);
                            }

                            break;
                        }
                    }

                    if ((uname ?? "") != (CurrentForm().Name ?? ""))
                    {
                        string argfname21 = "ノーマルモード";
                        if (IsFeatureAvailable(argfname21))
                        {
                            object argIndex65 = "ノーマルモード";
                            string arglist9 = FeatureData(argIndex65);
                            uname = GeneralLib.LIndex(arglist9, 1);
                            Unit localOtherForm11() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                            if (localOtherForm11().IsAbleToEnter(x, y))
                            {
                                Transform(uname);
                            }
                        }
                    }
                }
                else if (IsFeatureAvailable(argfname23))
                {
                    object argIndex66 = "ノーマルモード";
                    string arglist10 = FeatureData(argIndex66);
                    uname = GeneralLib.LIndex(arglist10, 1);
                    Unit localOtherForm12() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm12().IsAbleToEnter(x, y))
                    {
                        Transform(uname);
                    }
                }
            }

            // アイテムを消費
            else if (Weapon(w).IsItem() & Bullet(w) == 0 & MaxBullet(w) > 0)
            {
                // アイテムを削除
                num = Data.CountWeapon();
                num = (num + MainPilot().Data.CountWeapon());
                var loopTo8 = CountPilot();
                for (i = 2; i <= loopTo8; i++)
                {
                    Pilot localPilot2() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    num = (num + localPilot2().Data.CountWeapon());
                }

                var loopTo9 = CountSupport();
                for (i = 2; i <= loopTo9; i++)
                {
                    Pilot localSupport2() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    num = (num + localSupport2().Data.CountWeapon());
                }

                string argfname24 = "追加サポート";
                if (IsFeatureAvailable(argfname24))
                {
                    num = (num + AdditionalSupport().Data.CountWeapon());
                }

                foreach (Item itm in colItem)
                {
                    num = (num + itm.CountWeapon());
                    if (w <= num)
                    {
                        itm.Exist = false;
                        DeleteItem((object)itm.ID);
                        break;
                    }
                }
            }
            else if (is_hit & (IsWeaponClassifiedAs(w, argattr60) | IsWeaponClassifiedAs(w, argattr61)) & (dmg > 0 | !IsWeaponClassifiedAs(w, argattr62)))
            {
                CheckMetamorphAttack(w, t, def_mode);
            }

            {
                var withBlock14 = CurrentForm();
                // スペシャルパワーの効果を削除
                if (Strings.InStr(attack_mode, "援護攻撃") == 0)
                {
                    string argsptype13 = "攻撃後消耗";
                    if (withBlock14.IsUnderSpecialPowerEffect(argsptype13))
                    {
                        string argcname6 = "消耗";
                        string argcdata6 = "";
                        withBlock14.AddCondition(argcname6, 1, cdata: argcdata6);
                    }

                    string argstype7 = "攻撃";
                    withBlock14.RemoveSpecialPowerInEffect(argstype7);
                    if (is_hit)
                    {
                        string argstype8 = "命中";
                        withBlock14.RemoveSpecialPowerInEffect(argstype8);
                    }
                }

                // 戦闘アニメで変更されたユニット画像を元に戻す
                object argIndex68 = "ユニット画像";
                if (withBlock14.IsConditionSatisfied(argIndex68))
                {
                    object argIndex67 = "ユニット画像";
                    withBlock14.DeleteCondition(argIndex67);
                    withBlock14.BitmapID = GUI.MakeUnitBitmap(CurrentForm());
                    GUI.PaintUnitBitmap(CurrentForm());
                }

                object argIndex70 = "非表示付加";
                if (withBlock14.IsConditionSatisfied(argIndex70))
                {
                    object argIndex69 = "非表示付加";
                    withBlock14.DeleteCondition(argIndex69);
                    withBlock14.BitmapID = GUI.MakeUnitBitmap(CurrentForm());
                    GUI.PaintUnitBitmap(CurrentForm());
                }

                var loopTo10 = Information.UBound(partners);
                for (i = 1; i <= loopTo10; i++)
                {
                    {
                        var withBlock15 = partners[i].CurrentForm();
                        object argIndex72 = "ユニット画像";
                        if (withBlock15.IsConditionSatisfied(argIndex72))
                        {
                            object argIndex71 = "ユニット画像";
                            withBlock15.DeleteCondition(argIndex71);
                            withBlock15.BitmapID = GUI.MakeUnitBitmap(partners[i].CurrentForm());
                            GUI.PaintUnitBitmap(partners[i].CurrentForm());
                        }

                        object argIndex74 = "非表示付加";
                        if (withBlock15.IsConditionSatisfied(argIndex74))
                        {
                            object argIndex73 = "非表示付加";
                            withBlock15.DeleteCondition(argIndex73);
                            withBlock15.BitmapID = GUI.MakeUnitBitmap(partners[i].CurrentForm());
                            GUI.PaintUnitBitmap(partners[i].CurrentForm());
                        }
                    }
                }
            }

            // カットインは消去しておく
            string argoname10 = "戦闘中画面初期化無効";
            if (!Expression.IsOptionDefined(argoname10) | attack_mode == "マップ攻撃")
            {
                if (GUI.IsPictureVisible)
                {
                    GUI.ClearPicture();
                    // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                    GUI.MainForm.picMain(0).Refresh();
                }
            }

            // ADD START MARGE
            // 戦闘アニメ終了処理
            string argmain_situation198 = wname + "(終了)";
            string argsub_situation118 = "";
            string argmain_situation199 = "終了";
            string argsub_situation119 = "";
            if (IsAnimationDefined(argmain_situation198, sub_situation: argsub_situation118))
            {
                string argmain_situation196 = wname + "(終了)";
                string argsub_situation116 = "";
                PlayAnimation(argmain_situation196, sub_situation: argsub_situation116);
            }
            else if (IsAnimationDefined(argmain_situation199, sub_situation: argsub_situation119))
            {
                string argmain_situation197 = "終了";
                string argsub_situation117 = "";
                PlayAnimation(argmain_situation197, sub_situation: argsub_situation117);
            }
            // ADD END MARGE

            // ユニット選択を解除
            Commands.RestoreSelections();
        }

        // 回避用特殊能力の判定
        public bool CheckDodgeFeature(int w, Unit t, int tx, int ty, string attack_mode, string def_mode, int dmg, bool be_quiet)
        {
            bool CheckDodgeFeatureRet = default;
            string wname;
            int ecost, nmorale;
            string fname, fdata;
            double flevel;
            int fid, frange;
            Unit u;
            int j, i, k;
            int prob;
            string buf;
            string team, uteam;

            // スペシャルパワーで回避能力が無効化されている？
            string argsptype = "絶対命中";
            string argsptype1 = "回避能力無効化";
            string argsptype2 = "特殊防御発動";
            if ((IsUnderSpecialPowerEffect(argsptype) | IsUnderSpecialPowerEffect(argsptype1)) & !t.IsUnderSpecialPowerEffect(argsptype2))
            {
                return CheckDodgeFeatureRet;
            }

            // 能動防御は行動できなければ発動しない
            string argsptype3 = "無防備";
            if (t.MaxAction() == 0 | t.IsUnderSpecialPowerEffect(argsptype3))
            {
                return CheckDodgeFeatureRet;
            }

            wname = WeaponNickname(w);
            object argIndex1 = "チーム";
            team = MainPilot().SkillData(argIndex1);

            // 阻止無効化
            string argattr = "無";
            string argsptype4 = "防御能力無効化";
            if (IsWeaponClassifiedAs(w, argattr) | IsUnderSpecialPowerEffect(argsptype4))
            {
                goto SkipBlock;
            }

            // 広域阻止
            // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            u = null;
            flevel = 0d;
            fid = 0;
            // 阻止してくれるユニットを探す
            var loopTo = GeneralLib.MinLng(tx + 3, Map.MapWidth);
            for (i = GeneralLib.MaxLng(tx - 3, 1); i <= loopTo; i++)
            {
                var loopTo1 = GeneralLib.MinLng(ty + 3, Map.MapHeight);
                for (j = GeneralLib.MaxLng(ty - 3, 1); j <= loopTo1; j++)
                {
                    if (Map.MapDataForUnit[i, j] is null | Math.Abs((tx - i)) + Math.Abs((ty - j)) > 3)
                    {
                        goto NextPoint;
                    }

                    {
                        var withBlock = Map.MapDataForUnit[i, j];
                        if (withBlock.IsEnemy(t))
                        {
                            goto NextPoint;
                        }

                        if (withBlock.Area == "地中")
                        {
                            goto NextPoint;
                        }

                        string argfname = "広域阻止";
                        if (!withBlock.IsFeatureAvailable(argfname))
                        {
                            goto NextPoint;
                        }

                        // 同じチームに属している？
                        object argIndex2 = "チーム";
                        uteam = withBlock.MainPilot().SkillData(argIndex2);
                        if ((team ?? "") != (uteam ?? "") & !string.IsNullOrEmpty(uteam))
                        {
                            goto NextPoint;
                        }

                        var loopTo2 = withBlock.CountFeature();
                        for (k = 1; k <= loopTo2; k++)
                        {
                            object argIndex6 = k;
                            if (withBlock.Feature(argIndex6) == "広域阻止")
                            {
                                object argIndex3 = k;
                                fdata = withBlock.FeatureData(argIndex3);

                                // 有効範囲
                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 2)))
                                {
                                    frange = Conversions.Toint(GeneralLib.LIndex(fdata, 2));
                                }
                                else
                                {
                                    frange = 1;
                                }

                                // 使用条件
                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                                {
                                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                                }
                                else
                                {
                                    ecost = 0;
                                }

                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 6)))
                                {
                                    nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 6));
                                }
                                else
                                {
                                    nmorale = 0;
                                }

                                // 発動条件を満たしている？
                                bool localIsAttributeClassified() { string argaclass1 = GeneralLib.LIndex(fdata, 3); string argaclass2 = WeaponClass(w); var ret = withBlock.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                                string argfname1 = "阻止";
                                if (withBlock.EN >= ecost & withBlock.MainPilot().Morale >= nmorale & localIsAttributeClassified() & (Math.Abs((tx - i)) + Math.Abs((ty - j))) <= frange & (Math.Abs((x - i)) + Math.Abs((y - j))) > frange & (!ReferenceEquals(Map.MapDataForUnit[i, j], t) | !t.IsFeatureAvailable(argfname1)))
                                {
                                    object argIndex5 = k;
                                    if (withBlock.FeatureLevel(argIndex5) > flevel)
                                    {
                                        u = Map.MapDataForUnit[i, j];
                                        object argIndex4 = k;
                                        flevel = withBlock.FeatureLevel(argIndex4);
                                        fid = k;
                                    }
                                }
                            }
                        }
                    }

                    NextPoint:
                    ;
                }
            }

            if (u is object)
            {
                // 阻止してくれるユニットがいる場合
                if (fid == 0)
                {
                    object argIndex7 = "広域阻止";
                    fname = u.FeatureName(argIndex7);
                    object argIndex8 = "広域阻止";
                    fdata = u.FeatureData(argIndex8);
                    object argIndex9 = "広域阻止";
                    flevel = u.FeatureLevel(argIndex9);
                }
                else
                {
                    object argIndex10 = fid;
                    fname = u.FeatureName(argIndex10);
                    object argIndex11 = fid;
                    fdata = u.FeatureData(argIndex11);
                    object argIndex12 = fid;
                    flevel = u.FeatureLevel(argIndex12);
                }

                if (flevel == 1d)
                {
                    flevel = 10000d;
                }

                // 阻止確率の設定
                buf = GeneralLib.LIndex(fdata, 4);
                if (Information.IsNumeric(buf))
                {
                    prob = Conversions.Toint(buf);
                }
                else if (Strings.InStr(buf, "+") > 0 | Strings.InStr(buf, "-") > 0)
                {
                    i = GeneralLib.MaxLng(Strings.InStr(buf, "+"), Strings.InStr(buf, "-"));
                    prob = (100d * (u.SkillLevel(Strings.Left(buf, i - 1)) + Conversions.Toint(Strings.Mid(buf, i))) / 16d);
                }
                else
                {
                    prob = (u.SkillLevel(buf) * 100d / 16d);
                }

                // 見切り
                string argsptype5 = "特殊防御発動";
                if (u.IsUnderSpecialPowerEffect(argsptype5))
                {
                    prob = 100;
                }

                // 必中がかかっていれば阻止は無効
                string argsptype6 = "絶対命中";
                string argsptype7 = "特殊防御発動";
                if (IsUnderSpecialPowerEffect(argsptype6) & !u.IsUnderSpecialPowerEffect(argsptype7))
                {
                    prob = 0;
                }

                // ダメージが許容範囲外であれば阻止できない
                if (dmg > 500d * flevel)
                {
                    prob = 0;
                }

                // ＥＮ消費量
                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                {
                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                }
                else
                {
                    ecost = 0;
                }

                // 攻撃を阻止
                if (prob >= GeneralLib.Dice(100))
                {
                    u.EN = u.EN - ecost;
                    if (!be_quiet)
                    {
                        string argmain_situation = "阻止(" + fname + ")";
                        if (u.IsMessageDefined(argmain_situation))
                        {
                            string argSituation = "阻止(" + fname + ")";
                            string argmsg_mode = "";
                            u.PilotMessage(argSituation, msg_mode: argmsg_mode);
                        }
                        else
                        {
                            string argSituation1 = "阻止";
                            string argmsg_mode1 = "";
                            u.PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                        }
                    }

                    string argmain_situation3 = "阻止";
                    if (u.IsAnimationDefined(argmain_situation3, fname))
                    {
                        string argmain_situation1 = "阻止";
                        u.PlayAnimation(argmain_situation1, fname);
                    }
                    else
                    {
                        string argmain_situation2 = "阻止";
                        u.SpecialEffect(argmain_situation2, fname);
                    }

                    string argmain_situation5 = "阻止";
                    if (u.IsSysMessageDefined(argmain_situation5, fname))
                    {
                        string argmain_situation4 = "阻止";
                        string argadd_msg = "";
                        u.SysMessage(argmain_situation4, fname, add_msg: argadd_msg);
                    }
                    else
                    {
                        GUI.DisplaySysMessage(u.Nickname + "は[" + fname + "]で[" + wname + "]を防いだ。");
                    }

                    CheckDodgeFeatureRet = true;
                    return CheckDodgeFeatureRet;
                }
            }

            SkipBlock:
            ;


            // 分身(ユニット用特殊能力)
            string argfname2 = "分身";
            object argIndex14 = "分身";
            string argsptype8 = "特殊防御発動";
            if (t.IsFeatureAvailable(argfname2) & t.MainPilot().Morale >= 130 & !t.IsFeatureLevelSpecified(argIndex14) & (GeneralLib.Dice(2) == 1 | t.IsUnderSpecialPowerEffect(argsptype8)))
            {
                object argIndex13 = "分身";
                fname = t.FeatureName(argIndex13);

                // 特殊効果
                string argmain_situation8 = "分身";
                string argmain_situation9 = "分身";
                if (t.IsAnimationDefined(argmain_situation8, fname))
                {
                    string argmain_situation6 = "分身";
                    t.PlayAnimation(argmain_situation6, fname);
                }
                else if (t.IsSpecialEffectDefined(argmain_situation9, fname))
                {
                    string argmain_situation7 = "分身";
                    t.SpecialEffect(argmain_situation7, fname);
                }
                else if (SRC.BattleAnimation)
                {
                    if (fname == "分身")
                    {
                        string arganame = "分身発動";
                        Effect.ShowAnimation(arganame);
                    }
                    else
                    {
                        string arganame1 = "分身発動 - " + fname;
                        Effect.ShowAnimation(arganame1);
                    }
                }

                // 回避音
                var argu = this;
                Effect.DodgeEffect(argu, w);

                // メッセージ
                if (!be_quiet)
                {
                    string argmain_situation10 = "分身(" + fname + ")";
                    if (t.IsMessageDefined(argmain_situation10))
                    {
                        string argSituation2 = "分身(" + fname + ")";
                        string argmsg_mode2 = "";
                        t.PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                    }
                    else
                    {
                        string argSituation3 = "分身";
                        string argmsg_mode3 = "";
                        t.PilotMessage(argSituation3, msg_mode: argmsg_mode3);
                    }
                }

                string argmain_situation12 = "分身";
                if (t.IsSysMessageDefined(argmain_situation12, fname))
                {
                    string argmain_situation11 = "分身";
                    string argadd_msg1 = "";
                    t.SysMessage(argmain_situation11, fname, add_msg: argadd_msg1);
                }
                else if (fname != "分身")
                {
                    GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]を使って攻撃をかわした");
                }
                else
                {
                    GUI.DisplaySysMessage(t.Nickname + "は分身して攻撃をかわした。");
                }

                CheckDodgeFeatureRet = true;
                return CheckDodgeFeatureRet;
            }

            // 超回避
            string argfname3 = "超回避";
            if (t.IsFeatureAvailable(argfname3))
            {
                object argIndex15 = "超回避";
                fname = t.FeatureName(argIndex15);
                object argIndex16 = "超回避";
                fdata = t.FeatureData(argIndex16);
                object argIndex17 = "超回避";
                flevel = t.FeatureLevel(argIndex17);

                // 発動率
                prob = flevel;
                string argsptype9 = "特殊防御発動";
                if (t.IsUnderSpecialPowerEffect(argsptype9))
                {
                    prob = 10;
                }

                // 必要条件
                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 2)))
                {
                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 2));
                }
                else
                {
                    ecost = 0;
                }

                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                {
                    nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                }
                else
                {
                    nmorale = 0;
                }

                if (GeneralLib.LIndex(fdata, 4) == "手動")
                {
                    if (def_mode != "回避")
                    {
                        prob = 0;
                    }
                }

                // 発動条件を満たしている？
                if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & prob >= GeneralLib.Dice(10))
                {
                    // ＥＮ消費
                    if (ecost != 0)
                    {
                        t.EN = t.EN - ecost;
                        if (attack_mode != "反射")
                        {
                            var argu1 = this;
                            object argu2 = t;
                            GUI.UpdateMessageForm(argu1, argu2);
                        }
                        else
                        {
                            var argu11 = this;
                            object argu21 = null;
                            GUI.UpdateMessageForm(argu11, argu21);
                        }
                    }

                    // 特殊効果
                    string argmain_situation15 = "分身";
                    string argmain_situation16 = "分身";
                    if (t.IsAnimationDefined(argmain_situation15, fname))
                    {
                        string argmain_situation13 = "分身";
                        t.PlayAnimation(argmain_situation13, fname);
                    }
                    else if (t.IsSpecialEffectDefined(argmain_situation16, fname))
                    {
                        string argmain_situation14 = "分身";
                        t.SpecialEffect(argmain_situation14, fname);
                    }
                    else if (SRC.BattleAnimation)
                    {
                        string arganame2 = "回避発動";
                        Effect.ShowAnimation(arganame2);
                    }
                    else
                    {
                        // 回避音
                        var argu3 = this;
                        Effect.DodgeEffect(argu3, w);
                    }

                    // メッセージ
                    if (!be_quiet)
                    {
                        string argmain_situation17 = "分身(" + fname + ")";
                        if (t.IsMessageDefined(argmain_situation17))
                        {
                            string argSituation4 = "分身(" + fname + ")";
                            string argmsg_mode4 = "";
                            t.PilotMessage(argSituation4, msg_mode: argmsg_mode4);
                        }
                        else
                        {
                            string argSituation5 = "分身";
                            string argmsg_mode5 = "";
                            t.PilotMessage(argSituation5, msg_mode: argmsg_mode5);
                        }
                    }

                    string argmain_situation19 = "分身";
                    if (t.IsSysMessageDefined(argmain_situation19, fname))
                    {
                        string argmain_situation18 = "分身";
                        string argadd_msg2 = "";
                        t.SysMessage(argmain_situation18, fname, add_msg: argadd_msg2);
                    }
                    else
                    {
                        GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]を使って攻撃をかわした。");
                    }

                    CheckDodgeFeatureRet = true;
                    return CheckDodgeFeatureRet;
                }
            }

            // 緊急テレポート
            int new_x = default, new_y = default;
            string argfname4 = "緊急テレポート";
            if (t.IsFeatureAvailable(argfname4))
            {
                object argIndex18 = "緊急テレポート";
                fname = t.FeatureName(argIndex18);
                object argIndex19 = "緊急テレポート";
                fdata = t.FeatureData(argIndex19);
                object argIndex20 = "緊急テレポート";
                flevel = t.FeatureLevel(argIndex20);

                // 発動率
                prob = flevel;
                string argsptype10 = "特殊防御発動";
                if (t.IsUnderSpecialPowerEffect(argsptype10))
                {
                    prob = 10;
                }

                // 必要条件
                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                {
                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                }
                else
                {
                    ecost = 0;
                }

                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                {
                    nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                }
                else
                {
                    nmorale = 0;
                }

                if (GeneralLib.LIndex(fdata, 5) == "手動")
                {
                    if (def_mode != "回避")
                    {
                        prob = 0;
                    }
                }

                // 発動条件を満たしている？
                if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & prob >= GeneralLib.Dice(10))
                {

                    // 逃げ場所がある？
                    int localStrToLng() { string argexpr = GeneralLib.LIndex(fdata, 2); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                    Map.AreaInTeleport(t, localStrToLng());
                    Map.SafetyPoint(t, new_x, new_y);
                    if ((t.x != new_x | t.y != new_y) & new_x != 0 & new_y != 0)
                    {
                        // ＥＮ消費
                        if (ecost != 0)
                        {
                            t.EN = t.EN - ecost;
                            if (attack_mode != "反射")
                            {
                                var argu12 = this;
                                object argu22 = t;
                                GUI.UpdateMessageForm(argu12, argu22);
                            }
                            else
                            {
                                var argu13 = this;
                                object argu23 = null;
                                GUI.UpdateMessageForm(argu13, argu23);
                            }
                        }

                        // 特殊効果
                        string argmain_situation22 = "緊急テレポート";
                        string argmain_situation23 = "緊急テレポート";
                        if (t.IsAnimationDefined(argmain_situation22, fname))
                        {
                            string argmain_situation20 = "緊急テレポート";
                            t.PlayAnimation(argmain_situation20, fname);
                        }
                        else if (t.IsSpecialEffectDefined(argmain_situation23, fname))
                        {
                            string argmain_situation21 = "緊急テレポート";
                            t.SpecialEffect(argmain_situation21, fname);
                        }
                        else if (SRC.BattleAnimation)
                        {
                            if (fname == "緊急テレポート")
                            {
                                string arganame3 = "緊急テレポート発動";
                                Effect.ShowAnimation(arganame3);
                            }
                            else
                            {
                                string arganame4 = "緊急テレポート発動 - " + fname;
                                Effect.ShowAnimation(arganame4);
                            }
                        }

                        // 回避音
                        var argu4 = this;
                        Effect.DodgeEffect(argu4, w);

                        // 緊急テレポート発動！
                        t.Jump(new_x, new_y);

                        // メッセージ
                        if (!be_quiet)
                        {
                            string argmain_situation24 = "緊急テレポート(" + fname + ")";
                            if (t.IsMessageDefined(argmain_situation24))
                            {
                                string argSituation6 = "緊急テレポート(" + fname + ")";
                                string argmsg_mode6 = "";
                                t.PilotMessage(argSituation6, msg_mode: argmsg_mode6);
                            }
                            else
                            {
                                string argSituation7 = "緊急テレポート";
                                string argmsg_mode7 = "";
                                t.PilotMessage(argSituation7, msg_mode: argmsg_mode7);
                            }
                        }

                        string argmain_situation26 = "緊急テレポート";
                        if (t.IsSysMessageDefined(argmain_situation26, fname))
                        {
                            string argmain_situation25 = "緊急テレポート";
                            string argadd_msg3 = "";
                            t.SysMessage(argmain_situation25, fname, add_msg: argadd_msg3);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]を使って攻撃をかわした。");
                        }

                        CheckDodgeFeatureRet = true;
                        return CheckDodgeFeatureRet;
                    }
                }
            }

            // 分身(パイロット用特殊能力)
            string argsname = "分身";
            if (t.MainPilot().IsSkillAvailable(argsname))
            {
                object argIndex21 = "分身";
                string argref_mode = "";
                object argIndex22 = "分身";
                string argref_mode1 = "";
                prob = (2d * t.MainPilot().SkillLevel(argIndex21, ref_mode: argref_mode) - MainPilot().SkillLevel(argIndex22, ref_mode: argref_mode1));
                string argsptype11 = "特殊防御発動";
                if (t.IsUnderSpecialPowerEffect(argsptype11))
                {
                    prob = 32;
                }

                if (prob >= GeneralLib.Dice(32))
                {
                    object argIndex23 = "分身";
                    fname = t.MainPilot().SkillName0(argIndex23);

                    // 特殊効果
                    string argmain_situation29 = "分身";
                    string argmain_situation30 = "分身";
                    if (t.IsAnimationDefined(argmain_situation29, fname))
                    {
                        string argmain_situation27 = "分身";
                        t.PlayAnimation(argmain_situation27, fname);
                    }
                    else if (t.IsSpecialEffectDefined(argmain_situation30, fname))
                    {
                        string argmain_situation28 = "分身";
                        t.SpecialEffect(argmain_situation28, fname);
                    }
                    else if (SRC.BattleAnimation)
                    {
                        string arganame5 = "分身発動";
                        Effect.ShowAnimation(arganame5);
                    }
                    else
                    {
                        // 回避音
                        var argu5 = this;
                        Effect.DodgeEffect(argu5, w);
                    }

                    // メッセージ
                    if (!be_quiet)
                    {
                        string argmain_situation31 = "分身(" + fname + ")";
                        if (t.IsMessageDefined(argmain_situation31))
                        {
                            string argSituation8 = "分身(" + fname + ")";
                            string argmsg_mode8 = "";
                            t.PilotMessage(argSituation8, msg_mode: argmsg_mode8);
                        }
                        else
                        {
                            string argSituation9 = "分身";
                            string argmsg_mode9 = "";
                            t.PilotMessage(argSituation9, msg_mode: argmsg_mode9);
                        }
                    }

                    string argmain_situation33 = "分身";
                    if (t.IsSysMessageDefined(argmain_situation33, fname))
                    {
                        string argmain_situation32 = "分身";
                        string argadd_msg4 = "";
                        t.SysMessage(argmain_situation32, fname, add_msg: argadd_msg4);
                    }
                    else
                    {
                        GUI.DisplaySysMessage(t.Nickname + "は分身して攻撃をかわした。");
                    }

                    CheckDodgeFeatureRet = true;
                    return CheckDodgeFeatureRet;
                }
            }

            return CheckDodgeFeatureRet;
        }

        // 切り払い＆反射のチェック
        // (命中時に発動し、発動すれば必ずダメージが0になる能力)
        public bool CheckParryFeature(int w, Unit t, int tx, int ty, string attack_mode, string def_mode, int dmg, string msg, bool be_quiet)
        {
            bool CheckParryFeatureRet = default;
            string wname, wname2;
            int w2;
            int ecost, nmorale;
            string fname = default, fdata;
            double flevel;
            double slevel, lv_mod;
            string opt;
            int j, i, idx;
            int prob;
            string buf;

            // スペシャルパワーで回避能力が無効化されている？
            string argsptype = "絶対命中";
            string argsptype1 = "回避能力無効化";
            string argsptype2 = "特殊防御発動";
            if ((IsUnderSpecialPowerEffect(argsptype) | IsUnderSpecialPowerEffect(argsptype1)) & !t.IsUnderSpecialPowerEffect(argsptype2))
            {
                return CheckParryFeatureRet;
            }

            // 能動防御は行動できなければ発動しない
            string argsptype3 = "無防備";
            if (t.MaxAction() == 0 | t.IsUnderSpecialPowerEffect(argsptype3))
            {
                return CheckParryFeatureRet;
            }

            wname = WeaponNickname(w);

            // ターゲットの迎撃レベルをチェック
            slevel = t.SkillLevel("迎撃");

            // 切り払いに使用する武器を持っている？
            // (持っていれば切り払いの方を優先)
            wname2 = "";
            string argfname = "格闘武器";
            if (t.IsFeatureAvailable(argfname))
            {
                object argIndex1 = "格闘武器";
                wname2 = t.FeatureData(argIndex1);
            }
            else
            {
                var loopTo = t.CountWeapon();
                for (i = 1; i <= loopTo; i++)
                {
                    string argattr = "武";
                    string argref_mode = "移動前";
                    if (t.IsWeaponClassifiedAs(i, argattr) & t.IsWeaponAvailable(i, argref_mode))
                    {
                        wname2 = t.WeaponNickname(i);
                        break;
                    }
                }
            }
            // 発動条件を満たしている？
            string argattr4 = "実";
            object argIndex3 = "切り払い";
            string argref_mode4 = "";
            if (IsWeaponClassifiedAs(w, argattr4) & (slevel > t.MainPilot().SkillLevel(argIndex3, ref_mode: argref_mode4) | slevel > 0d & Strings.Len(wname2) == 0))
            {
                // 迎撃武器を検索
                i = 0;
                string argfname1 = "迎撃武器";
                if (t.IsFeatureAvailable(argfname1))
                {
                    var loopTo1 = t.CountWeapon();
                    for (i = 1; i <= loopTo1; i++)
                    {
                        object argIndex2 = "迎撃武器";
                        if ((t.Weapon(i).Name ?? "") == (t.FeatureData(argIndex2) ?? ""))
                        {
                            string argref_mode1 = "移動前";
                            if (!t.IsWeaponAvailable(i, argref_mode1))
                            {
                                i = 0;
                            }

                            break;
                        }
                    }
                }

                if (i == 0)
                {
                    // 迎撃武器がない場合は迎撃用の武器としての条件を満たす武器を検索
                    var loopTo2 = t.CountWeapon();
                    for (i = 1; i <= loopTo2; i++)
                    {
                        string argref_mode2 = "移動後";
                        string argattr1 = "移動後攻撃可";
                        string argattr2 = "射撃系";
                        if (t.IsWeaponAvailable(i, argref_mode2) & t.IsWeaponClassifiedAs(i, argattr1) & t.IsWeaponClassifiedAs(i, argattr2) & (t.Weapon(i).Bullet >= 10 | t.Weapon(i).Bullet == 0 & t.Weapon(i).ENConsumption <= 5) & t.MainPilot().Morale >= t.Weapon(i).NecessaryMorale)
                        {
                            break;
                        }
                    }
                }

                // 迎撃用武器が弾切れ、ＥＮ不足の場合は迎撃不可
                if (0 < i & i <= t.CountWeapon())
                {
                    string argref_mode3 = "ステータス";
                    if (!t.IsWeaponAvailable(i, argref_mode3))
                    {
                        i = 0;
                    }
                }

                // 迎撃を実行
                string argsptype4 = "特殊防御発動";
                if (0 < i & i <= t.CountWeapon() & (slevel >= GeneralLib.Dice(16) | t.IsUnderSpecialPowerEffect(argsptype4)))
                {
                    // メッセージ
                    if (!be_quiet)
                    {
                        string argmain_situation = "迎撃(" + t.Weapon(i).Name + ")";
                        if (t.IsMessageDefined(argmain_situation))
                        {
                            string argSituation = "迎撃(" + t.Weapon(i).Name + ")";
                            string argmsg_mode = "";
                            t.PilotMessage(argSituation, msg_mode: argmsg_mode);
                        }
                        else
                        {
                            string argSituation1 = "迎撃";
                            string argmsg_mode1 = "";
                            t.PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                        }
                    }
                    else
                    {
                        Sound.IsWavePlayed = false;
                    }

                    // 効果音
                    if (!Sound.IsWavePlayed)
                    {
                        bool localIsSpecialEffectDefined() { string argmain_situation = wname + "(迎撃)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        string argmain_situation5 = wname + "(迎撃)";
                        string argsub_situation3 = "";
                        string argmain_situation6 = "迎撃";
                        string argmain_situation7 = "迎撃";
                        string argsub_situation4 = "";
                        if (IsAnimationDefined(argmain_situation5, sub_situation: argsub_situation3))
                        {
                            string argmain_situation1 = wname + "(迎撃)";
                            string argsub_situation = "";
                            PlayAnimation(argmain_situation1, sub_situation: argsub_situation);
                        }
                        else if (localIsSpecialEffectDefined())
                        {
                            string argmain_situation2 = wname + "(迎撃)";
                            string argsub_situation1 = "";
                            SpecialEffect(argmain_situation2, sub_situation: argsub_situation1);
                        }
                        else if (t.IsAnimationDefined(argmain_situation6, fname))
                        {
                            string argmain_situation3 = "迎撃";
                            t.PlayAnimation(argmain_situation3, fname);
                        }
                        else if (t.IsSpecialEffectDefined(argmain_situation7, fname))
                        {
                            string argmain_situation4 = "迎撃";
                            t.SpecialEffect(argmain_situation4, fname);
                        }
                        else if (t.IsSpecialEffectDefined(t.Weapon(i).Name, sub_situation: argsub_situation4))
                        {
                            string argsub_situation2 = "";
                            t.SpecialEffect(t.Weapon(i).Name, sub_situation: argsub_situation2);
                        }
                        else
                        {
                            Effect.AttackEffect(t, i);
                        }
                    }

                    GUI.DisplaySysMessage(t.Nickname + "は[" + t.WeaponNickname(i) + "]で[" + wname + "]を阻止した。");

                    // 迎撃された永続武器は使用回数を減らす
                    string argattr3 = "永";
                    if (IsWeaponClassifiedAs(w, argattr3) & this.Weapon(w).Bullet > 0)
                    {
                        SetBullet(w, (Bullet(w) - 1));
                        SyncBullet();
                        IsMapAttackCanceled = true;
                    }

                    // 迎撃武器の弾数を消費
                    t.UseWeapon(i);
                    CheckParryFeatureRet = true;
                    return CheckParryFeatureRet;
                }
            }

            // 無属性武器には阻止が効かない
            string argattr5 = "無";
            string argsptype5 = "防御能力無効化";
            if (IsWeaponClassifiedAs(w, argattr5) | IsUnderSpecialPowerEffect(argsptype5))
            {
                goto SkipBlock;
            }

            // 阻止
            var loopTo3 = t.CountFeature();
            for (i = 1; i <= loopTo3; i++)
            {
                object argIndex8 = i;
                if (t.Feature(argIndex8) == "阻止")
                {
                    object argIndex4 = i;
                    fname = t.FeatureName0(argIndex4);
                    object argIndex5 = i;
                    fdata = t.FeatureData(argIndex5);
                    object argIndex6 = i;
                    flevel = t.FeatureLevel(argIndex6);
                    if (flevel == 1d)
                    {
                        flevel = 10000d;
                    }

                    // 阻止確率の設定
                    buf = GeneralLib.LIndex(fdata, 3);
                    if (Information.IsNumeric(buf))
                    {
                        prob = Conversions.Toint(buf);
                    }
                    else if (Strings.InStr(buf, "+") > 0 | Strings.InStr(buf, "-") > 0)
                    {
                        j = GeneralLib.MaxLng(Strings.InStr(buf, "+"), Strings.InStr(buf, "-"));
                        prob = (100d * (t.SkillLevel(Strings.Left(buf, j - 1)) + Conversions.Toint(Strings.Mid(buf, j))) / 16d);
                    }
                    else
                    {
                        prob = (100d * t.SkillLevel(buf) / 16d);
                    }

                    // 見切り
                    string argsptype6 = "特殊防御発動";
                    if (t.IsUnderSpecialPowerEffect(argsptype6))
                    {
                        prob = 100;
                    }

                    // 必中がかかっていれば阻止は無効
                    string argsptype7 = "絶対命中";
                    string argsptype8 = "特殊防御発動";
                    if (IsUnderSpecialPowerEffect(argsptype7) & !t.IsUnderSpecialPowerEffect(argsptype8))
                    {
                        prob = 0;
                    }

                    // 対象属性の判定
                    bool localIsAttributeClassified() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    if (!localIsAttributeClassified())
                    {
                        prob = 0;
                    }

                    // 使用条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        ecost = 0;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    if (t.EN < ecost | t.MainPilot().Morale < nmorale)
                    {
                        prob = 0;
                    }

                    // オプション
                    slevel = 0d;
                    var loopTo4 = GeneralLib.LLength(fdata);
                    for (j = 6; j <= loopTo4; j++)
                    {
                        if (prob == 0)
                        {
                            break;
                        }

                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    string localLIndex() { object argIndex1 = "阻止"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                    if ((GeneralLib.LIndex(fdata, 1) ?? "") == (localLIndex() ?? "") & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    string localLIndex1() { object argIndex1 = "阻止"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                    if ((GeneralLib.LIndex(fdata, 1) ?? "") == (localLIndex1() ?? "") & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex7 = "阻止";
                                        flevel = flevel - FeatureLevel(argIndex7);
                                        if (flevel <= 0d)
                                        {
                                            msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr6 = "武";
                                    string argattr7 = "突";
                                    string argattr8 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr6) | IsWeaponClassifiedAs(w, argattr7) | IsWeaponClassifiedAs(w, argattr8))
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            prob = 0;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // ダメージが許容範囲外であれば阻止できない
                    if (dmg > 500d * flevel + slevel)
                    {
                        prob = 0;
                    }

                    // 攻撃を阻止
                    if (prob >= GeneralLib.Dice(100))
                    {
                        if (ecost != 0)
                        {
                            t.EN = t.EN - ecost;
                            if (attack_mode != "反射")
                            {
                                var argu1 = this;
                                object argu2 = t;
                                GUI.UpdateMessageForm(argu1, argu2);
                            }
                            else
                            {
                                var argu11 = this;
                                object argu21 = null;
                                GUI.UpdateMessageForm(argu11, argu21);
                            }
                        }

                        if (!be_quiet)
                        {
                            string argmain_situation8 = "阻止(" + fname + ")";
                            if (t.IsMessageDefined(argmain_situation8))
                            {
                                string argSituation2 = "阻止(" + fname + ")";
                                string argmsg_mode2 = "";
                                t.PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                            }
                            else
                            {
                                string argSituation3 = "阻止";
                                string argmsg_mode3 = "";
                                t.PilotMessage(argSituation3, msg_mode: argmsg_mode3);
                            }
                        }

                        bool localIsSpecialEffectDefined1() { string argmain_situation = wname + "(阻止)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        string argmain_situation13 = wname + "(阻止)";
                        string argsub_situation7 = "";
                        string argmain_situation14 = "阻止";
                        if (IsAnimationDefined(argmain_situation13, sub_situation: argsub_situation7))
                        {
                            string argmain_situation9 = wname + "(阻止)";
                            string argsub_situation5 = "";
                            PlayAnimation(argmain_situation9, sub_situation: argsub_situation5);
                        }
                        else if (localIsSpecialEffectDefined1())
                        {
                            string argmain_situation11 = wname + "(阻止)";
                            string argsub_situation6 = "";
                            SpecialEffect(argmain_situation11, sub_situation: argsub_situation6);
                        }
                        else if (t.IsAnimationDefined(argmain_situation14, fname))
                        {
                            string argmain_situation12 = "阻止";
                            t.PlayAnimation(argmain_situation12, fname);
                        }
                        else
                        {
                            string argmain_situation10 = "阻止";
                            t.SpecialEffect(argmain_situation10, fname);
                        }

                        string argmain_situation16 = "阻止";
                        if (t.IsSysMessageDefined(argmain_situation16, fname))
                        {
                            string argmain_situation15 = "阻止";
                            string argadd_msg = "";
                            t.SysMessage(argmain_situation15, fname, add_msg: argadd_msg);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]で[" + wname + "]を防いだ。");
                        }

                        CheckParryFeatureRet = true;
                        return CheckParryFeatureRet;
                    }
                }
            }

            SkipBlock:
            ;


            // マップ攻撃や無属性武器には当て身技は効かない
            string argattr9 = "Ｍ";
            string argattr10 = "無";
            string argsptype9 = "防御能力無効化";
            if (IsWeaponClassifiedAs(w, argattr9) | IsWeaponClassifiedAs(w, argattr10) | IsUnderSpecialPowerEffect(argsptype9))
            {
                goto SkipParryAttack;
            }

            // 当て身技
            var loopTo5 = t.CountFeature();
            for (i = 1; i <= loopTo5; i++)
            {
                // 封印されている？
                object argIndex15 = i;
                if (t.Feature(argIndex15) == "当て身技")
                {
                    object argIndex9 = i;
                    fname = t.FeatureName0(argIndex9);
                    if (string.IsNullOrEmpty(fname))
                    {
                        fname = "当て身技";
                    }

                    object argIndex10 = i;
                    fdata = t.FeatureData(argIndex10);
                    object argIndex11 = i;
                    flevel = t.FeatureLevel(argIndex11);
                    if (flevel == 1d)
                    {
                        flevel = 10000d;
                    }

                    // 当て身確率の設定
                    buf = GeneralLib.LIndex(fdata, 4);
                    if (Information.IsNumeric(buf))
                    {
                        prob = Conversions.Toint(buf);
                    }
                    else if (Strings.InStr(buf, "+") > 0 | Strings.InStr(buf, "-") > 0)
                    {
                        j = GeneralLib.MaxLng(Strings.InStr(buf, "+"), Strings.InStr(buf, "-"));
                        prob = (100d * (t.SkillLevel(Strings.Left(buf, j - 1)) + Conversions.Toint(Strings.Mid(buf, j))) / 16d);
                    }
                    else
                    {
                        prob = (100d * t.SkillLevel(buf) / 16d);
                    }

                    // 見切り
                    string argsptype10 = "特殊防御発動";
                    if (t.IsUnderSpecialPowerEffect(argsptype10))
                    {
                        prob = 100;
                    }

                    // 必中がかかっていれば当て身技は無効
                    string argsptype11 = "絶対命中";
                    string argsptype12 = "特殊防御発動";
                    if (IsUnderSpecialPowerEffect(argsptype11) & !t.IsUnderSpecialPowerEffect(argsptype12))
                    {
                        break;
                    }

                    // 自分の反射や当て身技に対して当て身技は出来ない
                    if (attack_mode == "反射" | attack_mode == "当て身技")
                    {
                        break;
                    }

                    // 対象属性の判定
                    bool localIsAttributeClassified1() { string argaclass1 = GeneralLib.LIndex(fdata, 3); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    if (!localIsAttributeClassified1())
                    {
                        prob = 0;
                    }

                    // 使用条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                    }
                    else
                    {
                        ecost = 0;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 6)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 6));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    if (t.EN < ecost | t.MainPilot().Morale < nmorale)
                    {
                        prob = 0;
                    }

                    // オプション
                    slevel = 0d;
                    var loopTo6 = GeneralLib.LLength(fdata);
                    for (j = 7; j <= loopTo6; j++)
                    {
                        if (prob == 0)
                        {
                            break;
                        }

                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr1 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr1);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex12 = "当て身技";
                                    string argfdata2 = FeatureData(argIndex12);
                                    if (IsSameCategory(fdata, argfdata2) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex14 = "当て身技";
                                    string argfdata21 = FeatureData(argIndex14);
                                    if (IsSameCategory(fdata, argfdata21) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex13 = "当て身技";
                                        flevel = flevel - FeatureLevel(argIndex13);
                                        if (flevel <= 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr11 = "武";
                                    string argattr12 = "突";
                                    string argattr13 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr11) | IsWeaponClassifiedAs(w, argattr12) | IsWeaponClassifiedAs(w, argattr13))
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            prob = 0;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // ダメージが許容範囲外であれば当て身技を使えない
                    if (dmg > 500d * flevel + slevel)
                    {
                        prob = 0;
                    }

                    // 使用する当て身技を検索
                    wname2 = GeneralLib.LIndex(fdata, 2);
                    w2 = 0;
                    var loopTo7 = t.CountWeapon();
                    for (j = 1; j <= loopTo7; j++)
                    {
                        if ((t.Weapon(j).Name ?? "") == (wname2 ?? ""))
                        {
                            string argref_mode5 = "必要技能無視";
                            if (t.IsWeaponAvailable(j, argref_mode5))
                            {
                                w2 = j;
                            }

                            break;
                        }
                    }

                    // 当て身技発動
                    if (prob >= GeneralLib.Dice(100) & w2 > 0)
                    {
                        if (ecost != 0)
                        {
                            t.EN = t.EN - ecost;
                            var argu12 = this;
                            object argu22 = t;
                            GUI.UpdateMessageForm(argu12, argu22);
                        }

                        // メッセージ
                        if (!be_quiet)
                        {
                            string argmain_situation17 = "当て身技(" + fname + ")";
                            if (t.IsMessageDefined(argmain_situation17))
                            {
                                string argSituation4 = "当て身技(" + fname + ")";
                                string argmsg_mode4 = "";
                                t.PilotMessage(argSituation4, msg_mode: argmsg_mode4);
                            }
                            else
                            {
                                string argSituation5 = "当て身技";
                                string argmsg_mode5 = "";
                                t.PilotMessage(argSituation5, msg_mode: argmsg_mode5);
                            }
                        }
                        else
                        {
                            Sound.IsWavePlayed = false;
                        }

                        // 効果音
                        if (!Sound.IsWavePlayed)
                        {
                            bool localIsSpecialEffectDefined2() { string argmain_situation = wname + "(当て身技)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                            string argmain_situation22 = wname + "(当て身技)";
                            string argsub_situation10 = "";
                            string argmain_situation23 = "当て身技";
                            string argmain_situation24 = "当て身技";
                            string argattr14 = "武";
                            string argattr15 = "突";
                            string argattr16 = "接";
                            string argattr17 = "実";
                            if (IsAnimationDefined(argmain_situation22, sub_situation: argsub_situation10))
                            {
                                string argmain_situation18 = wname + "(当て身技)";
                                string argsub_situation8 = "";
                                PlayAnimation(argmain_situation18, sub_situation: argsub_situation8);
                            }
                            else if (localIsSpecialEffectDefined2())
                            {
                                string argmain_situation19 = wname + "(当て身技)";
                                string argsub_situation9 = "";
                                SpecialEffect(argmain_situation19, sub_situation: argsub_situation9);
                            }
                            else if (t.IsAnimationDefined(argmain_situation23, fname))
                            {
                                string argmain_situation20 = "当て身技";
                                t.PlayAnimation(argmain_situation20, fname);
                            }
                            else if (t.IsSpecialEffectDefined(argmain_situation24, fname))
                            {
                                string argmain_situation21 = "当て身技";
                                t.SpecialEffect(argmain_situation21, fname);
                            }
                            else if (SRC.BattleAnimation)
                            {
                                string arganame = "打突命中";
                                Effect.ShowAnimation(arganame);
                            }
                            else if (IsWeaponClassifiedAs(w, argattr14) | IsWeaponClassifiedAs(w, argattr15) | IsWeaponClassifiedAs(w, argattr16) | IsWeaponClassifiedAs(w, argattr17))
                            {
                                string argwave_name1 = "Sword.wav";
                                Sound.PlayWave(argwave_name1);
                            }
                            else
                            {
                                string argwave_name = "BeamCoat.wav";
                                Sound.PlayWave(argwave_name);
                            }
                        }

                        string argmain_situation26 = "当て身技";
                        if (t.IsSysMessageDefined(argmain_situation26, fname))
                        {
                            string argmain_situation25 = "当て身技";
                            string argadd_msg1 = "";
                            t.SysMessage(argmain_situation25, fname, add_msg: argadd_msg1);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]で[" + wname + "]を受け止めた。");
                        }

                        // 当て身技で攻撃をかける
                        t.Attack(w2, this, "当て身技", "");
                        t = t.CurrentForm();
                        CheckParryFeatureRet = true;
                        return CheckParryFeatureRet;
                    }
                }
            }

            SkipParryAttack:
            ;


            // 切り払いに使用する武器を調べる
            wname2 = "";
            string argfname2 = "格闘武器";
            if (t.IsFeatureAvailable(argfname2))
            {
                object argIndex16 = "格闘武器";
                wname2 = t.FeatureData(argIndex16);
            }
            else
            {
                var loopTo8 = t.CountWeapon();
                for (i = 1; i <= loopTo8; i++)
                {
                    string argattr18 = "武";
                    string argattr19 = "合";
                    if (t.IsWeaponClassifiedAs(i, argattr18) & !t.IsWeaponClassifiedAs(i, argattr19) & t.IsWeaponMastered(i) & t.MainPilot().Morale >= t.Weapon(i).NecessaryMorale & !t.IsDisabled(t.Weapon(i).Name))
                    {
                        wname2 = t.WeaponNickname(i);
                        break;
                    }
                }
            }

            // 切り払い出来る？
            object argIndex26 = "切り払い";
            string argref_mode15 = "";
            if (t.MainPilot().SkillLevel(argIndex26, ref_mode: argref_mode15) > 0d & Strings.Len(wname2) > 0)
            {
                string argattr24 = "実";
                string argattr25 = "接";
                // 武属性や突属性を持っていても切り払いの対象外になります
                string argattr26 = "突";
                string argattr27 = "武";
                if (IsWeaponClassifiedAs(w, argattr24))
                {
                    prob = 0;

                    // 思念誘導はＮＴレベルに応じて切り払いにくくなる
                    string argattr20 = "サ";
                    if (IsWeaponClassifiedAs(w, argattr20))
                    {
                        object argIndex17 = "超感覚";
                        string argref_mode6 = "";
                        object argIndex18 = "知覚強化";
                        string argref_mode7 = "";
                        prob = (t.MainPilot().SkillLevel(argIndex17, ref_mode: argref_mode6) + t.MainPilot().SkillLevel(argIndex18, ref_mode: argref_mode7));
                        object argIndex19 = "超感覚";
                        string argref_mode8 = "";
                        object argIndex20 = "知覚強化";
                        string argref_mode9 = "";
                        prob = (prob - MainPilot().SkillLevel(argIndex19, ref_mode: argref_mode8) - MainPilot().SkillLevel(argIndex20, ref_mode: argref_mode9));
                        if (prob > 0)
                        {
                            prob = 0;
                        }
                    }
                    else
                    {
                        prob = 0;
                    }

                    object argIndex21 = "切り払い";
                    string argref_mode10 = "";
                    prob = (prob + 2d * t.MainPilot().SkillLevel(argIndex21, ref_mode: argref_mode10));

                    // 見切りがあれば必ず発動
                    string argsptype13 = "特殊防御発動";
                    if (t.IsUnderSpecialPowerEffect(argsptype13))
                    {
                        prob = 32;
                    }

                    if (prob >= GeneralLib.Dice(32))
                    {
                        // メッセージ
                        if (!be_quiet)
                        {
                            string argmain_situation27 = "切り払い(" + wname2 + ")";
                            if (t.IsMessageDefined(argmain_situation27))
                            {
                                string argSituation6 = "切り払い(" + wname2 + ")";
                                string argmsg_mode6 = "";
                                t.PilotMessage(argSituation6, msg_mode: argmsg_mode6);
                            }
                            else
                            {
                                string argSituation7 = "切り払い";
                                string argmsg_mode7 = "";
                                t.PilotMessage(argSituation7, msg_mode: argmsg_mode7);
                            }
                        }
                        else
                        {
                            Sound.IsWavePlayed = false;
                        }

                        // 効果音
                        if (!Sound.IsWavePlayed)
                        {
                            bool localIsSpecialEffectDefined3() { string argmain_situation = wname + "(切り払い)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                            string argmain_situation32 = wname + "(切り払い)";
                            string argsub_situation13 = "";
                            string argmain_situation33 = "切り払い";
                            string argmain_situation34 = "切り払い";
                            if (IsAnimationDefined(argmain_situation32, sub_situation: argsub_situation13))
                            {
                                string argmain_situation28 = wname + "(切り払い)";
                                string argsub_situation11 = "";
                                PlayAnimation(argmain_situation28, sub_situation: argsub_situation11);
                            }
                            else if (localIsSpecialEffectDefined3())
                            {
                                string argmain_situation29 = wname + "(切り払い)";
                                string argsub_situation12 = "";
                                SpecialEffect(argmain_situation29, sub_situation: argsub_situation12);
                            }
                            else if (t.IsAnimationDefined(argmain_situation33, wname2))
                            {
                                string argmain_situation30 = "切り払い";
                                t.PlayAnimation(argmain_situation30, wname2);
                            }
                            else if (t.IsSpecialEffectDefined(argmain_situation34, wname2))
                            {
                                string argmain_situation31 = "切り払い";
                                t.SpecialEffect(argmain_situation31, wname2);
                            }
                            else
                            {
                                var argu = this;
                                Effect.ParryEffect(argu, w, t);
                            }
                        }

                        GUI.DisplaySysMessage(t.Nickname + "は[" + wname2 + "]で[" + wname + "]を叩き落とした。");

                        // 切り払われた永続武器は使用回数を減らす
                        string argattr21 = "永";
                        if (IsWeaponClassifiedAs(w, argattr21) & this.Weapon(w).Bullet > 0)
                        {
                            SetBullet(w, (Bullet(w) - 1));
                            SyncBullet();
                            IsMapAttackCanceled = true;
                        }

                        CheckParryFeatureRet = true;
                        return CheckParryFeatureRet;
                    }
                }
                else if (IsWeaponClassifiedAs(w, argattr25))
                {
                }
                else if (IsWeaponClassifiedAs(w, argattr26))
                {
                    // 相手も切り払い出来れば切り払い確率は下がる
                    object argIndex22 = "切り払い";
                    string argref_mode11 = "";
                    object argIndex23 = "切り払い";
                    string argref_mode12 = "";
                    prob = (2d * t.MainPilot().SkillLevel(argIndex22, ref_mode: argref_mode11) - MainPilot().SkillLevel(argIndex23, ref_mode: argref_mode12));

                    // 見切りがあれば必ず発動
                    string argsptype14 = "特殊防御発動";
                    if (t.IsUnderSpecialPowerEffect(argsptype14))
                    {
                        prob = 32;
                    }

                    if (prob >= GeneralLib.Dice(32))
                    {
                        // メッセージ
                        if (!be_quiet)
                        {
                            string argmain_situation35 = "切り払い(" + wname2 + ")";
                            if (t.IsMessageDefined(argmain_situation35))
                            {
                                string argSituation8 = "切り払い(" + wname2 + ")";
                                string argmsg_mode8 = "";
                                t.PilotMessage(argSituation8, msg_mode: argmsg_mode8);
                            }
                            else
                            {
                                string argSituation9 = "切り払い";
                                string argmsg_mode9 = "";
                                t.PilotMessage(argSituation9, msg_mode: argmsg_mode9);
                            }
                        }
                        else
                        {
                            Sound.IsWavePlayed = false;
                        }

                        // 効果音
                        if (!Sound.IsWavePlayed)
                        {
                            bool localIsSpecialEffectDefined4() { string argmain_situation = wname + "(切り払い)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                            string argmain_situation40 = wname + "(切り払い)";
                            string argsub_situation16 = "";
                            string argmain_situation41 = "切り払い";
                            string argmain_situation42 = "切り払い";
                            if (IsAnimationDefined(argmain_situation40, sub_situation: argsub_situation16))
                            {
                                string argmain_situation36 = wname + "(切り払い)";
                                string argsub_situation14 = "";
                                PlayAnimation(argmain_situation36, sub_situation: argsub_situation14);
                            }
                            else if (localIsSpecialEffectDefined4())
                            {
                                string argmain_situation37 = wname + "(切り払い)";
                                string argsub_situation15 = "";
                                SpecialEffect(argmain_situation37, sub_situation: argsub_situation15);
                            }
                            else if (t.IsAnimationDefined(argmain_situation41, wname2))
                            {
                                string argmain_situation38 = "切り払い";
                                t.PlayAnimation(argmain_situation38, wname2);
                            }
                            else if (t.IsSpecialEffectDefined(argmain_situation42, wname2))
                            {
                                string argmain_situation39 = "切り払い";
                                t.SpecialEffect(argmain_situation39, wname2);
                            }
                            else
                            {
                                var argu3 = this;
                                Effect.DodgeEffect(argu3, w);
                                GUI.Sleep(190);
                                string argwave_name2 = "Sword.wav";
                                Sound.PlayWave(argwave_name2);
                            }
                        }

                        GUI.DisplaySysMessage(t.Nickname + "は[" + wname2 + "]で[" + wname + "]を受け流した。");

                        // 切り払われた永続武器は使用回数を減らす
                        string argattr22 = "永";
                        if (IsWeaponClassifiedAs(w, argattr22) & this.Weapon(w).Bullet > 0)
                        {
                            SetBullet(w, (Bullet(w) - 1));
                            SyncBullet();
                            IsMapAttackCanceled = true;
                        }

                        CheckParryFeatureRet = true;
                        return CheckParryFeatureRet;
                    }
                }
                else if (IsWeaponClassifiedAs(w, argattr27))
                {
                    // 相手も切り払い出来れば切り払い確率は下がる
                    object argIndex24 = "切り払い";
                    string argref_mode13 = "";
                    object argIndex25 = "切り払い";
                    string argref_mode14 = "";
                    prob = (2d * t.MainPilot().SkillLevel(argIndex24, ref_mode: argref_mode13) - MainPilot().SkillLevel(argIndex25, ref_mode: argref_mode14));

                    // 見切りがあれば必ず発動
                    string argsptype15 = "特殊防御発動";
                    if (t.IsUnderSpecialPowerEffect(argsptype15))
                    {
                        prob = 32;
                    }

                    if (prob >= GeneralLib.Dice(32))
                    {
                        // メッセージ
                        if (!be_quiet)
                        {
                            string argmain_situation43 = "切り払い(" + wname2 + ")";
                            if (t.IsMessageDefined(argmain_situation43))
                            {
                                string argSituation10 = "切り払い(" + wname2 + ")";
                                string argmsg_mode10 = "";
                                t.PilotMessage(argSituation10, msg_mode: argmsg_mode10);
                            }
                            else
                            {
                                string argSituation11 = "切り払い";
                                string argmsg_mode11 = "";
                                t.PilotMessage(argSituation11, msg_mode: argmsg_mode11);
                            }
                        }
                        else
                        {
                            Sound.IsWavePlayed = false;
                        }

                        // 効果音
                        if (!Sound.IsWavePlayed)
                        {
                            bool localIsSpecialEffectDefined5() { string argmain_situation = wname + "(切り払い)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                            string argmain_situation48 = wname + "(切り払い)";
                            string argsub_situation19 = "";
                            string argmain_situation49 = "切り払い";
                            string argmain_situation50 = "切り払い";
                            if (IsAnimationDefined(argmain_situation48, sub_situation: argsub_situation19))
                            {
                                string argmain_situation44 = wname + "(切り払い)";
                                string argsub_situation17 = "";
                                PlayAnimation(argmain_situation44, sub_situation: argsub_situation17);
                            }
                            else if (localIsSpecialEffectDefined5())
                            {
                                string argmain_situation45 = wname + "(切り払い)";
                                string argsub_situation18 = "";
                                SpecialEffect(argmain_situation45, sub_situation: argsub_situation18);
                            }
                            else if (t.IsAnimationDefined(argmain_situation49, wname2))
                            {
                                string argmain_situation46 = "切り払い";
                                t.PlayAnimation(argmain_situation46, wname2);
                            }
                            else if (t.IsSpecialEffectDefined(argmain_situation50, wname2))
                            {
                                string argmain_situation47 = "切り払い";
                                t.SpecialEffect(argmain_situation47, wname2);
                            }
                            else
                            {
                                var argu4 = this;
                                Effect.DodgeEffect(argu4, w);
                                GUI.Sleep(190);
                                string argwave_name3 = "Sword.wav";
                                Sound.PlayWave(argwave_name3);
                            }
                        }

                        GUI.DisplaySysMessage(t.Nickname + "は[" + wname2 + "]で[" + wname + "]を受けとめた。");

                        // 切り払われた永続武器は使用回数を減らす
                        string argattr23 = "永";
                        if (IsWeaponClassifiedAs(w, argattr23) & this.Weapon(w).Bullet > 0)
                        {
                            SetBullet(w, (Bullet(w) - 1));
                            SyncBullet();
                            IsMapAttackCanceled = true;
                        }

                        CheckParryFeatureRet = true;
                        return CheckParryFeatureRet;
                    }
                }
            }

            // 反射無効化
            string argattr28 = "無";
            string argsptype16 = "防御能力無効化";
            if (IsWeaponClassifiedAs(w, argattr28) | IsUnderSpecialPowerEffect(argsptype16))
            {
                return CheckParryFeatureRet;
            }

            // 攻撃反射の処理
            var loopTo9 = t.CountFeature();
            for (i = 1; i <= loopTo9; i++)
            {
                object argIndex32 = i;
                if (t.Feature(argIndex32) == "反射")
                {
                    object argIndex27 = i;
                    fname = t.FeatureName0(argIndex27);
                    if (string.IsNullOrEmpty(fname))
                    {
                        string argfname3 = "バリアシールド";
                        if (t.IsFeatureAvailable(argfname3))
                        {
                            object argIndex28 = "バリアシールド";
                            fname = t.FeatureName0(argIndex28);
                        }
                        else
                        {
                            fname = "反射";
                        }
                    }

                    object argIndex29 = i;
                    fdata = t.FeatureData(argIndex29);
                    object argIndex30 = i;
                    flevel = t.FeatureLevel(argIndex30);
                    if (flevel == 1d)
                    {
                        flevel = 10000d;
                    }

                    // 反射確率の設定
                    buf = GeneralLib.LIndex(fdata, 3);
                    if (Information.IsNumeric(buf))
                    {
                        prob = Conversions.Toint(buf);
                    }
                    else if (Strings.InStr(buf, "+") > 0 | Strings.InStr(buf, "-") > 0)
                    {
                        j = GeneralLib.MaxLng(Strings.InStr(buf, "+"), Strings.InStr(buf, "-"));
                        prob = (100d * (t.SkillLevel(Strings.Left(buf, j - 1)) + Conversions.Toint(Strings.Mid(buf, j))) / 16d);
                    }
                    else
                    {
                        prob = (100d * t.SkillLevel(buf) / 16d);
                    }

                    // 反射された攻撃を反射する場合は確率を下げる
                    if (attack_mode == "反射")
                    {
                        prob = prob / 2;
                    }

                    // 見切り
                    string argsptype17 = "特殊防御発動";
                    if (t.IsUnderSpecialPowerEffect(argsptype17))
                    {
                        prob = 100;
                    }

                    // 当て身技は反射出来ない
                    if (attack_mode == "当て身技")
                    {
                        break;
                    }

                    // 必中がかかっていれば反射は無効
                    string argsptype18 = "絶対命中";
                    string argsptype19 = "特殊防御発動";
                    if (IsUnderSpecialPowerEffect(argsptype18) & !t.IsUnderSpecialPowerEffect(argsptype19))
                    {
                        break;
                    }

                    // 対象属性の判定
                    bool localIsAttributeClassified2() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    if (!localIsAttributeClassified2())
                    {
                        prob = 0;
                    }

                    // 使用条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        ecost = 0;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    if (t.EN < ecost | t.MainPilot().Morale < nmorale)
                    {
                        prob = 0;
                    }

                    // オプション
                    slevel = 0d;
                    var loopTo10 = GeneralLib.LLength(fdata);
                    for (j = 6; j <= loopTo10; j++)
                    {
                        if (prob == 0)
                        {
                            break;
                        }

                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr2 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr2);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    string localLIndex2() { object argIndex1 = "阻止"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                    if ((GeneralLib.LIndex(fdata, 1) ?? "") == (localLIndex2() ?? "") & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    string localLIndex3() { object argIndex1 = "阻止"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                    if ((GeneralLib.LIndex(fdata, 1) ?? "") == (localLIndex3() ?? "") & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex31 = "阻止";
                                        flevel = flevel - FeatureLevel(argIndex31);
                                        if (flevel <= 0d)
                                        {
                                            msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr29 = "武";
                                    string argattr30 = "突";
                                    string argattr31 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr29) | IsWeaponClassifiedAs(w, argattr30) | IsWeaponClassifiedAs(w, argattr31))
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            prob = 0;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // ダメージが許容範囲外であれば反射できない
                    if (dmg > 500d * flevel + slevel)
                    {
                        prob = 0;
                    }

                    // 攻撃を反射
                    if (prob >= GeneralLib.Dice(100))
                    {
                        if (ecost != 0)
                        {
                            t.EN = t.EN - ecost;
                            var argu13 = this;
                            object argu23 = t;
                            GUI.UpdateMessageForm(argu13, argu23);
                        }

                        // メッセージ
                        if (!be_quiet)
                        {
                            string argmain_situation51 = "反射(" + fname + ")";
                            if (t.IsMessageDefined(argmain_situation51))
                            {
                                string argSituation12 = "反射(" + fname + ")";
                                string argmsg_mode12 = "";
                                t.PilotMessage(argSituation12, msg_mode: argmsg_mode12);
                            }
                            else
                            {
                                string argSituation13 = "反射";
                                string argmsg_mode13 = "";
                                t.PilotMessage(argSituation13, msg_mode: argmsg_mode13);
                            }
                        }
                        else
                        {
                            Sound.IsWavePlayed = false;
                        }

                        // 効果音
                        if (!Sound.IsWavePlayed)
                        {
                            bool localIsSpecialEffectDefined6() { string argmain_situation = wname + "(反射)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                            string argmain_situation56 = wname + "(反射)";
                            string argsub_situation22 = "";
                            string argmain_situation57 = "反射";
                            string argmain_situation58 = "反射";
                            string argattr32 = "武";
                            string argattr33 = "突";
                            string argattr34 = "接";
                            string argattr35 = "実";
                            if (IsAnimationDefined(argmain_situation56, sub_situation: argsub_situation22))
                            {
                                string argmain_situation52 = wname + "(反射)";
                                string argsub_situation20 = "";
                                PlayAnimation(argmain_situation52, sub_situation: argsub_situation20);
                            }
                            else if (localIsSpecialEffectDefined6())
                            {
                                string argmain_situation53 = wname + "(反射)";
                                string argsub_situation21 = "";
                                SpecialEffect(argmain_situation53, sub_situation: argsub_situation21);
                            }
                            else if (t.IsAnimationDefined(argmain_situation57, fname))
                            {
                                string argmain_situation54 = "反射";
                                t.PlayAnimation(argmain_situation54, fname);
                            }
                            else if (t.IsSpecialEffectDefined(argmain_situation58, fname))
                            {
                                string argmain_situation55 = "反射";
                                t.SpecialEffect(argmain_situation55, fname);
                            }
                            else if (SRC.BattleAnimation)
                            {
                                if (fname == "反射")
                                {
                                    string arganame1 = "反射発動";
                                    Effect.ShowAnimation(arganame1);
                                }
                                else
                                {
                                    string arganame2 = "反射発動 - " + fname;
                                    Effect.ShowAnimation(arganame2);
                                }
                            }
                            else if (IsWeaponClassifiedAs(w, argattr32) | IsWeaponClassifiedAs(w, argattr33) | IsWeaponClassifiedAs(w, argattr34) | IsWeaponClassifiedAs(w, argattr35))
                            {
                                string argwave_name5 = "Sword.wav";
                                Sound.PlayWave(argwave_name5);
                            }
                            else
                            {
                                string argwave_name4 = "BeamCoat.wav";
                                Sound.PlayWave(argwave_name4);
                            }
                        }

                        string argmain_situation60 = "反射";
                        if (t.IsSysMessageDefined(argmain_situation60, fname))
                        {
                            string argmain_situation59 = "反射";
                            string argadd_msg2 = "";
                            t.SysMessage(argmain_situation59, fname, add_msg: argadd_msg2);
                        }
                        else if (fname != "反射")
                        {
                            GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]で[" + wname + "]を弾き返した。");
                        }
                        else
                        {
                            GUI.DisplaySysMessage(t.Nickname + "は[" + wname + "]を弾き返した。");
                        }

                        // 攻撃を反射
                        string argattr36 = "Ｍ";
                        if (!IsWeaponClassifiedAs(w, argattr36) & attack_mode != "反射")
                        {
                            Attack(w, this, "反射", "");
                        }

                        CheckParryFeatureRet = true;
                        return CheckParryFeatureRet;
                    }
                }
            }

            return CheckParryFeatureRet;
        }

        // ダミー能力のチェック
        private bool CheckDummyFeature(int w, Unit t, bool be_quiet)
        {
            bool CheckDummyFeatureRet = default;
            string wname;
            string fname;
            wname = WeaponNickname(w);
            object argIndex12 = "ダミー付加";
            string argfname = "ダミー";
            if (t.IsConditionSatisfied(argIndex12))
            {
                // 命中時の特殊効果
                Sound.IsWavePlayed = false;
                if (!be_quiet)
                {
                    string argSituation = wname + "(命中)";
                    string argmsg_mode = "";
                    PilotMessage(argSituation, msg_mode: argmsg_mode);
                }

                bool localIsSpecialEffectDefined() { string argmain_situation = wname + "(命中)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                string argmain_situation2 = wname + "(命中)";
                string argsub_situation2 = "";
                string argsub_situation3 = "";
                if (IsAnimationDefined(argmain_situation2, sub_situation: argsub_situation2) | IsAnimationDefined(wname, sub_situation: argsub_situation3))
                {
                    string argmain_situation = wname + "(命中)";
                    string argsub_situation = "";
                    PlayAnimation(argmain_situation, sub_situation: argsub_situation);
                }
                else if (localIsSpecialEffectDefined())
                {
                    string argmain_situation1 = wname + "(命中)";
                    string argsub_situation1 = "";
                    SpecialEffect(argmain_situation1, sub_situation: argsub_situation1);
                }
                else if (!Sound.IsWavePlayed)
                {
                    var argu = this;
                    Effect.HitEffect(argu, w, t);
                }

                object argIndex1 = "ダミー";
                fname = t.FeatureName(argIndex1);
                if (Strings.Len(fname) > 0)
                {
                    if (Strings.InStr(fname, "Lv") > 0)
                    {
                        fname = Strings.Left(fname, Strings.InStr(fname, "Lv") - 1);
                    }
                }
                else
                {
                    fname = "ダミー";
                }

                if (!be_quiet)
                {
                    string argmain_situation3 = "ダミー(" + fname + ")";
                    if (t.IsMessageDefined(argmain_situation3))
                    {
                        string argSituation1 = "ダミー(" + fname + ")";
                        string argmsg_mode1 = "";
                        t.PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                    }
                    else
                    {
                        string argSituation2 = "ダミー";
                        string argmsg_mode2 = "";
                        t.PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                    }
                }

                string argmain_situation6 = "ダミー";
                if (t.IsAnimationDefined(argmain_situation6, fname))
                {
                    string argmain_situation4 = "ダミー";
                    t.PlayAnimation(argmain_situation4, fname);
                }
                else
                {
                    string argmain_situation5 = "ダミー";
                    t.SpecialEffect(argmain_situation5, fname);
                }

                string argmain_situation8 = "ダミー";
                if (t.IsSysMessageDefined(argmain_situation8, fname))
                {
                    string argmain_situation7 = "ダミー";
                    string argadd_msg = "";
                    t.SysMessage(argmain_situation7, fname, add_msg: argadd_msg);
                }
                else
                {
                    GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]を身代わりにして攻撃をかわした。");
                }

                object argIndex2 = "ダミー付加";
                object argIndex3 = "ダミー付加";
                t.SetConditionLevel(argIndex2, t.ConditionLevel(argIndex3) - 1d);
                object argIndex5 = "ダミー付加";
                if (t.ConditionLevel(argIndex5) == 0d)
                {
                    object argIndex4 = "ダミー付加";
                    t.DeleteCondition(argIndex4);
                }

                CheckDummyFeatureRet = true;
            }
            else if (t.IsFeatureAvailable(argfname))
            {
                object argIndex10 = "ダミー破壊";
                object argIndex11 = "ダミー";
                if (t.ConditionLevel(argIndex10) < t.FeatureLevel(argIndex11))
                {
                    // 命中時の特殊効果
                    Sound.IsWavePlayed = false;
                    if (!be_quiet)
                    {
                        string argSituation3 = wname + "(命中)";
                        string argmsg_mode3 = "";
                        PilotMessage(argSituation3, msg_mode: argmsg_mode3);
                    }

                    bool localIsSpecialEffectDefined1() { string argmain_situation = wname + "(命中)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    string argmain_situation11 = wname + "(命中)";
                    string argsub_situation6 = "";
                    string argsub_situation7 = "";
                    if (IsAnimationDefined(argmain_situation11, sub_situation: argsub_situation6) | IsAnimationDefined(wname, sub_situation: argsub_situation7))
                    {
                        string argmain_situation9 = wname + "(命中)";
                        string argsub_situation4 = "";
                        PlayAnimation(argmain_situation9, sub_situation: argsub_situation4);
                    }
                    else if (localIsSpecialEffectDefined1())
                    {
                        string argmain_situation10 = wname + "(命中)";
                        string argsub_situation5 = "";
                        SpecialEffect(argmain_situation10, sub_situation: argsub_situation5);
                    }
                    else if (!Sound.IsWavePlayed)
                    {
                        var argu1 = this;
                        Effect.HitEffect(argu1, w, t);
                    }

                    object argIndex6 = "ダミー";
                    fname = t.FeatureName(argIndex6);
                    if (Strings.Len(fname) > 0)
                    {
                        if (Strings.InStr(fname, "Lv") > 0)
                        {
                            fname = Strings.Left(fname, Strings.InStr(fname, "Lv") - 1);
                        }
                    }
                    else
                    {
                        fname = "ダミー";
                    }

                    if (!be_quiet)
                    {
                        string argmain_situation12 = "ダミー(" + fname + ")";
                        if (t.IsMessageDefined(argmain_situation12))
                        {
                            string argSituation4 = "ダミー(" + fname + ")";
                            string argmsg_mode4 = "";
                            t.PilotMessage(argSituation4, msg_mode: argmsg_mode4);
                        }
                        else
                        {
                            string argSituation5 = "ダミー";
                            string argmsg_mode5 = "";
                            t.PilotMessage(argSituation5, msg_mode: argmsg_mode5);
                        }
                    }

                    string argmain_situation15 = "ダミー";
                    if (t.IsAnimationDefined(argmain_situation15, fname))
                    {
                        string argmain_situation13 = "ダミー";
                        t.PlayAnimation(argmain_situation13, fname);
                    }
                    else
                    {
                        string argmain_situation14 = "ダミー";
                        t.SpecialEffect(argmain_situation14, fname);
                    }

                    string argmain_situation17 = "ダミー";
                    if (IsSysMessageDefined(argmain_situation17, fname))
                    {
                        string argmain_situation16 = "ダミー";
                        string argadd_msg1 = "";
                        SysMessage(argmain_situation16, fname, add_msg: argadd_msg1);
                    }
                    else
                    {
                        GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]を身代わりにして攻撃をかわした。");
                    }

                    object argIndex9 = "ダミー破壊";
                    if (t.IsConditionSatisfied(argIndex9))
                    {
                        object argIndex7 = "ダミー破壊";
                        object argIndex8 = "ダミー破壊";
                        t.SetConditionLevel(argIndex7, t.ConditionLevel(argIndex8) + 1d);
                    }
                    else
                    {
                        string argcname = "ダミー破壊";
                        string argcdata = "";
                        t.AddCondition(argcname, -1, 1d, cdata: argcdata);
                    }

                    CheckDummyFeatureRet = true;
                }
            }

            return CheckDummyFeatureRet;
        }

        // シールド防御能力のチェック
        private bool CheckShieldFeature(int w, Unit t, int dmg, bool be_quiet, bool use_shield, bool use_shield_msg)
        {
            int prob;
            string fname;

            // ダメージが0以下ならシールド防御しても意味がない
            if (dmg <= 0)
            {
                return default;
            }

            // Ｓ防御技能を持っている？
            object argIndex1 = "Ｓ防御";
            string argref_mode = "";
            if (t.MainPilot().SkillLevel(argIndex1, ref_mode: argref_mode) <= 0d)
            {
                return default;
            }

            // 行動可能？
            object argIndex2 = "行動不能";
            object argIndex3 = "麻痺";
            object argIndex4 = "石化";
            object argIndex5 = "凍結";
            object argIndex6 = "睡眠";
            string argsptype = "行動不能";
            string argsptype1 = "無防備";
            if (t.IsConditionSatisfied(argIndex2) | t.IsConditionSatisfied(argIndex3) | t.IsConditionSatisfied(argIndex4) | t.IsConditionSatisfied(argIndex5) | t.IsConditionSatisfied(argIndex6) | t.IsUnderSpecialPowerEffect(argsptype) | t.IsUnderSpecialPowerEffect(argsptype1))
            {
                return default;
            }

            // シールド防御出来ない武器？
            string argattr = "精";
            string argattr1 = "殺";
            string argattr2 = "浸";
            if (IsWeaponClassifiedAs(w, argattr) | IsWeaponClassifiedAs(w, argattr1) | IsWeaponClassifiedAs(w, argattr2))
            {
                return default;
            }

            // スペシャルパワーで無効化される？
            string argsptype2 = "シールド防御無効化";
            if (IsUnderSpecialPowerEffect(argsptype2))
            {
                return default;
            }

            // シールド系防御能力を検索
            string argfname = "シールド";
            string argfname1 = "小型シールド";
            string argfname2 = "エネルギーシールド";
            string argattr3 = "無";
            string argsptype3 = "防御能力無効化";
            string argfname3 = "大型シールド";
            string argfname4 = "アクティブシールド";
            if (t.IsFeatureAvailable(argfname))
            {
                object argIndex7 = "Ｓ防御";
                string argref_mode1 = "";
                prob = t.MainPilot().SkillLevel(argIndex7, ref_mode: argref_mode1);
                object argIndex8 = "シールド";
                fname = t.FeatureName(argIndex8);
            }
            else if (t.IsFeatureAvailable(argfname1))
            {
                object argIndex9 = "Ｓ防御";
                string argref_mode2 = "";
                prob = t.MainPilot().SkillLevel(argIndex9, ref_mode: argref_mode2);
                object argIndex10 = "小型シールド";
                fname = t.FeatureName(argIndex10);
            }
            else if (t.IsFeatureAvailable(argfname2) & t.EN > 5 & !IsWeaponClassifiedAs(w, argattr3) & !IsUnderSpecialPowerEffect(argsptype3))
            {
                object argIndex11 = "Ｓ防御";
                string argref_mode3 = "";
                prob = t.MainPilot().SkillLevel(argIndex11, ref_mode: argref_mode3);
                object argIndex12 = "エネルギーシールド";
                fname = t.FeatureName(argIndex12);
            }
            else if (t.IsFeatureAvailable(argfname3))
            {
                object argIndex13 = "Ｓ防御";
                string argref_mode4 = "";
                prob = (t.MainPilot().SkillLevel(argIndex13, ref_mode: argref_mode4) + 1d);
                object argIndex14 = "大型シールド";
                fname = t.FeatureName(argIndex14);
            }
            else if (t.IsFeatureAvailable(argfname4))
            {
                object argIndex15 = "Ｓ防御";
                string argref_mode5 = "";
                prob = (t.MainPilot().SkillLevel(argIndex15, ref_mode: argref_mode5) + 2d);
                object argIndex16 = "アクティブシールド";
                fname = t.FeatureName(argIndex16);
            }
            else
            {
                // 使用可能なシールド系防御能力が無かった
                return default;
            }

            // シールド発動確率を満たしている？
            string argsptype4 = "特殊防御発動";
            if (prob >= GeneralLib.Dice(16) | t.IsUnderSpecialPowerEffect(argsptype4))
            {
                use_shield = true;
                string argattr4 = "破";
                if (IsWeaponClassifiedAs(w, argattr4))
                {
                    string argfname5 = "小型シールド";
                    if (t.IsFeatureAvailable(argfname5))
                    {
                        dmg = 5 * dmg / 6;
                    }
                    else
                    {
                        dmg = 3 * dmg / 4;
                    }
                }
                else
                {
                    string argfname6 = "小型シールド";
                    if (t.IsFeatureAvailable(argfname6))
                    {
                        dmg = 2 * dmg / 3;
                    }
                    else
                    {
                        dmg = dmg / 2;
                    }
                }

                if (dmg > 0 & dmg < 10)
                {
                    dmg = 10;
                }

                if (dmg < t.HP & !be_quiet)
                {
                    string argmain_situation = "シールド防御(" + fname + ")";
                    string argmain_situation1 = "シールド防御";
                    if (t.IsMessageDefined(argmain_situation))
                    {
                        string argSituation = "シールド防御(" + fname + ")";
                        string argmsg_mode = "";
                        t.PilotMessage(argSituation, msg_mode: argmsg_mode);
                        use_shield_msg = true;
                    }
                    else if (t.IsMessageDefined(argmain_situation1))
                    {
                        string argSituation1 = "シールド防御";
                        string argmsg_mode1 = "";
                        t.PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                        use_shield_msg = true;
                    }
                }

                string argmain_situation4 = "シールド防御";
                string argmain_situation5 = "シールド防御";
                if (t.IsAnimationDefined(argmain_situation4, fname))
                {
                    string argmain_situation2 = "シールド防御";
                    t.PlayAnimation(argmain_situation2, fname);
                }
                else if (t.IsSpecialEffectDefined(argmain_situation5, fname))
                {
                    string argmain_situation3 = "シールド防御";
                    t.SpecialEffect(argmain_situation3, fname);
                }
                else
                {
                    Effect.ShieldEffect(t);
                }
            }

            return default;
        }

        // バリアなどの防御能力のチェック
        private bool CheckDefenseFeature(int w, Unit t, int tx, int ty, string attack_mode, string def_mode, int dmg, string msg, bool be_quiet, bool is_penetrated)
        {
            bool CheckDefenseFeatureRet = default;
            string wname;
            int ecost, nmorale;
            string fname, fdata;
            double flevel;
            int fid, frange;
            string opt;
            double lv_mod;
            Unit u;
            double slevel;
            int k, i, j, idx;
            bool neautralize;
            string team, uteam;
            double dmg_mod;
            bool defined;
            wname = WeaponNickname(w);
            object argIndex1 = "チーム";
            team = MainPilot().SkillData(argIndex1);

            // 攻撃吸収
            if (dmg < 0)
            {
                t.HP = t.HP - dmg;
                if (attack_mode != "反射")
                {
                    var argu1 = this;
                    object argu2 = t;
                    GUI.UpdateMessageForm(argu1, argu2);
                }
                else
                {
                    var argu11 = this;
                    object argu21 = null;
                    GUI.UpdateMessageForm(argu11, argu21);
                }

                var argu = this;
                string argfname = "吸収";
                string argfdata = "";
                Effect.NegateEffect(argu, t, w, wname, dmg, argfname, argfdata, 0, msg, be_quiet);
                CheckDefenseFeatureRet = true;
                return CheckDefenseFeatureRet;
            }

            // 攻撃無効化
            if (dmg == 0 & this.Weapon(w).Power > 0)
            {
                string argattr = "封";
                string argattr1 = "限";
                if (IsWeaponClassifiedAs(w, argattr) | IsWeaponClassifiedAs(w, argattr1))
                {
                    GUI.DisplaySysMessage(msg + t.Nickname + "には[" + wname + "]は通用しない。");
                }
                else
                {
                    var argu3 = this;
                    string argfname1 = "";
                    string argfdata1 = "";
                    Effect.NegateEffect(argu3, t, w, wname, dmg, argfname1, argfdata1, 0, msg, be_quiet);
                }

                CheckDefenseFeatureRet = true;
                return CheckDefenseFeatureRet;
            }

            // 特殊効果がない場合にはクリティカル発生の可能性がある
            if (!IsNormalWeapon(w))
            {
                // 特殊効果を伴う武器
                if (CriticalProbability(w, t, def_mode) == 0 & this.Weapon(w).Power == 0)
                {
                    // 攻撃力が0の攻撃は、クリティカル発生率が0の場合も無効化されていると見なす
                    var argu4 = this;
                    string argfname2 = "";
                    string argfdata2 = "";
                    Effect.NegateEffect(argu4, t, w, wname, dmg, argfname2, argfdata2, 0, msg, be_quiet);
                    CheckDefenseFeatureRet = true;
                    return CheckDefenseFeatureRet;
                }
            }

            // バリア無効化
            string argattr2 = "無";
            string argsptype = "防御能力無効化";
            if (IsWeaponClassifiedAs(w, argattr2) | IsUnderSpecialPowerEffect(argsptype))
            {
                goto SkipBarrier;
            }

            // 広域バリア
            // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            u = null;
            flevel = 0d;
            fid = 0;
            // バリアをはってくれるユニットを探す
            var loopTo = GeneralLib.MinLng(tx + 3, Map.MapWidth);
            for (i = GeneralLib.MaxLng(tx - 3, 1); i <= loopTo; i++)
            {
                var loopTo1 = GeneralLib.MinLng(ty + 3, Map.MapHeight);
                for (j = GeneralLib.MaxLng(ty - 3, 1); j <= loopTo1; j++)
                {
                    if (Map.MapDataForUnit[i, j] is null | Math.Abs((tx - i)) + Math.Abs((ty - j)) > 3)
                    {
                        goto NextPoint;
                    }

                    {
                        var withBlock = Map.MapDataForUnit[i, j];
                        // 敵？
                        if (withBlock.IsEnemy(t))
                        {
                            goto NextPoint;
                        }

                        // 行動不能？
                        if (withBlock.MaxAction() == 0)
                        {
                            goto NextPoint;
                        }

                        // 地中にいる？
                        if (withBlock.Area == "地中")
                        {
                            goto NextPoint;
                        }

                        // 広域バリアを持っている？
                        string argfname3 = "広域バリア";
                        if (!withBlock.IsFeatureAvailable(argfname3))
                        {
                            goto NextPoint;
                        }

                        // 同じチームに属している？
                        object argIndex2 = "チーム";
                        uteam = withBlock.MainPilot().SkillData(argIndex2);
                        if ((team ?? "") != (uteam ?? "") & !string.IsNullOrEmpty(uteam))
                        {
                            goto NextPoint;
                        }

                        var loopTo2 = withBlock.CountFeature();
                        for (k = 1; k <= loopTo2; k++)
                        {
                            object argIndex8 = k;
                            if (withBlock.Feature(argIndex8) == "広域バリア")
                            {
                                object argIndex3 = k;
                                fdata = withBlock.FeatureData(argIndex3);

                                // 効果範囲
                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 2)))
                                {
                                    frange = Conversions.Toint(GeneralLib.LIndex(fdata, 2));
                                }
                                else
                                {
                                    frange = 1;
                                }

                                // 使用条件
                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                                {
                                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                                }
                                else
                                {
                                    ecost = (20 * frange);
                                }

                                object argIndex4 = "バリア発動";
                                if (withBlock.IsConditionSatisfied(argIndex4))
                                {
                                    // すでに発動済み
                                    ecost = 0;
                                }

                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                                {
                                    nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                                }
                                else
                                {
                                    nmorale = 0;
                                }

                                // 発動可能かチェック
                                bool localIsAttributeClassified() { string argaclass1 = GeneralLib.LIndex(fdata, 3); string argaclass2 = WeaponClass(w); var ret = withBlock.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                                string argfname4 = "バリア";
                                object argIndex7 = "バリア無効化";
                                if (withBlock.EN >= ecost & withBlock.MainPilot().Morale >= nmorale & localIsAttributeClassified() & (Math.Abs((tx - i)) + Math.Abs((ty - j))) <= frange & (Math.Abs((x - i)) + Math.Abs((y - j))) > frange & (!ReferenceEquals(Map.MapDataForUnit[i, j], t) | !t.IsFeatureAvailable(argfname4)) & !withBlock.IsConditionSatisfied(argIndex7))
                                {
                                    object argIndex6 = k;
                                    if (withBlock.FeatureLevel(argIndex6) > flevel)
                                    {
                                        u = Map.MapDataForUnit[i, j];
                                        object argIndex5 = k;
                                        flevel = withBlock.FeatureLevel(argIndex5);
                                        fid = k;
                                    }
                                }
                            }
                        }
                    }

                    NextPoint:
                    ;
                }
            }

            if (u is object)
            {
                // バリアをはってくれるユニットがいる場合
                if (fid == 0)
                {
                    object argIndex9 = "広域バリア";
                    fname = u.FeatureName0(argIndex9);
                    object argIndex10 = "広域バリア";
                    fdata = u.FeatureData(argIndex10);
                }
                else
                {
                    object argIndex11 = fid;
                    fname = u.FeatureName0(argIndex11);
                    object argIndex12 = fid;
                    fdata = u.FeatureData(argIndex12);
                }

                if (string.IsNullOrEmpty(fname))
                {
                    string argfname5 = "バリア";
                    if (u.IsFeatureAvailable(argfname5))
                    {
                        object argIndex13 = "バリア";
                        fname = u.FeatureName0(argIndex13);
                    }
                    else
                    {
                        fname = "広域バリア";
                    }
                }

                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                {
                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                }
                else
                {
                    ecost = 20;
                }

                object argIndex14 = "バリア発動";
                if (!u.IsConditionSatisfied(argIndex14))
                {
                    // バリア発動はターン中に一度のみ
                    u.EN = u.EN - ecost;
                    string argmain_situation = "バリア発動(" + fname + ")";
                    if (u.IsMessageDefined(argmain_situation))
                    {
                        string argSituation = "バリア発動(" + fname + ")";
                        string argmsg_mode = "";
                        u.PilotMessage(argSituation, msg_mode: argmsg_mode);
                    }
                    else
                    {
                        string argSituation1 = "バリア発動";
                        string argmsg_mode1 = "";
                        u.PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                    }

                    string argmain_situation3 = "バリア発動";
                    if (u.IsAnimationDefined(argmain_situation3, fname))
                    {
                        string argmain_situation1 = "バリア発動";
                        u.PlayAnimation(argmain_situation1, fname);
                    }
                    else
                    {
                        string argmain_situation2 = "バリア発動";
                        u.SpecialEffect(argmain_situation2, fname);
                    }

                    string argmain_situation5 = "バリア発動";
                    if (u.IsSysMessageDefined(argmain_situation5, fname))
                    {
                        string argmain_situation4 = "バリア発動";
                        string argadd_msg = "";
                        u.SysMessage(argmain_situation4, fname, add_msg: argadd_msg);
                    }
                    else
                    {
                        GUI.DisplaySysMessage(u.Nickname + "は[" + fname + "]を発動させた。");
                    }

                    if (fname == "広域バリア" | fname == "バリア")
                    {
                        string argcname = "バリア発動";
                        string argcdata = "";
                        u.AddCondition(argcname, 1, cdata: argcdata);
                    }
                    else
                    {
                        string argcname1 = "バリア発動";
                        string argcdata1 = fname + "発動";
                        u.AddCondition(argcname1, 1, 0d, argcdata1);
                    }
                }

                if (1000d * flevel >= dmg)
                {
                    var argu5 = this;
                    Effect.NegateEffect(argu5, t, w, wname, dmg, fname, fdata, 10, msg, be_quiet);
                    CheckDefenseFeatureRet = true;
                    return CheckDefenseFeatureRet;
                }
                else if (flevel > 0d)
                {
                    msg = msg + wname + "が[" + fname + "]を貫いた。;";
                }
            }

            // 広域フィールド
            // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            u = null;
            flevel = 0d;
            fid = 0;
            // フィールドをはってくれるユニットを探す
            var loopTo3 = GeneralLib.MinLng(tx + 3, Map.MapWidth);
            for (i = GeneralLib.MaxLng(tx - 3, 1); i <= loopTo3; i++)
            {
                var loopTo4 = GeneralLib.MinLng(ty + 3, Map.MapHeight);
                for (j = GeneralLib.MaxLng(ty - 3, 1); j <= loopTo4; j++)
                {
                    if (Map.MapDataForUnit[i, j] is null | Math.Abs((tx - i)) + Math.Abs((ty - j)) > 3)
                    {
                        goto NextPoint2;
                    }

                    {
                        var withBlock1 = Map.MapDataForUnit[i, j];
                        // 敵？
                        if (withBlock1.IsEnemy(t))
                        {
                            goto NextPoint2;
                        }

                        // 行動不能？
                        if (withBlock1.MaxAction() == 0)
                        {
                            goto NextPoint2;
                        }

                        // 地中にいる？
                        if (withBlock1.Area == "地中")
                        {
                            goto NextPoint2;
                        }

                        // 広域フィールドを持っている？
                        string argfname6 = "広域フィールド";
                        if (!withBlock1.IsFeatureAvailable(argfname6))
                        {
                            goto NextPoint2;
                        }

                        // 同じチームに属している？
                        object argIndex15 = "チーム";
                        uteam = withBlock1.MainPilot().SkillData(argIndex15);
                        if ((team ?? "") != (uteam ?? "") & !string.IsNullOrEmpty(uteam))
                        {
                            goto NextPoint2;
                        }

                        var loopTo5 = withBlock1.CountFeature();
                        for (k = 1; k <= loopTo5; k++)
                        {
                            object argIndex21 = k;
                            if (withBlock1.Feature(argIndex21) == "広域フィールド")
                            {
                                object argIndex16 = k;
                                fdata = withBlock1.FeatureData(argIndex16);

                                // 効果範囲
                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 2)))
                                {
                                    frange = Conversions.Toint(GeneralLib.LIndex(fdata, 2));
                                }
                                else
                                {
                                    frange = 1;
                                }

                                // 使用条件
                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                                {
                                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                                }
                                else
                                {
                                    ecost = (20 * frange);
                                }

                                object argIndex17 = "フィールド発動";
                                if (withBlock1.IsConditionSatisfied(argIndex17))
                                {
                                    // すでに発動済み
                                    ecost = 0;
                                }

                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                                {
                                    nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                                }
                                else
                                {
                                    nmorale = 0;
                                }

                                // 発動可能かチェック
                                bool localIsAttributeClassified1() { string argaclass1 = GeneralLib.LIndex(fdata, 3); string argaclass2 = WeaponClass(w); var ret = withBlock1.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                                string argfname7 = "フィールド";
                                object argIndex20 = "バリア無効化";
                                if (withBlock1.EN >= ecost & withBlock1.MainPilot().Morale >= nmorale & localIsAttributeClassified1() & (Math.Abs((tx - i)) + Math.Abs((ty - j))) <= frange & (Math.Abs((x - i)) + Math.Abs((y - j))) > frange & (!ReferenceEquals(Map.MapDataForUnit[i, j], t) | !t.IsFeatureAvailable(argfname7)) & !withBlock1.IsConditionSatisfied(argIndex20))
                                {
                                    object argIndex19 = k;
                                    if (withBlock1.FeatureLevel(argIndex19) > flevel)
                                    {
                                        u = Map.MapDataForUnit[i, j];
                                        object argIndex18 = k;
                                        flevel = withBlock1.FeatureLevel(argIndex18);
                                        fid = k;
                                    }
                                }
                            }
                        }
                    }

                    NextPoint2:
                    ;
                }
            }

            if (u is object)
            {
                // フィールドをはってくれるユニットがいる場合
                if (fid == 0)
                {
                    object argIndex22 = "広域フィールド";
                    fname = u.FeatureName0(argIndex22);
                    object argIndex23 = "広域フィールド";
                    fdata = u.FeatureData(argIndex23);
                }
                else
                {
                    object argIndex24 = fid;
                    fname = u.FeatureName0(argIndex24);
                    object argIndex25 = fid;
                    fdata = u.FeatureData(argIndex25);
                }

                if (string.IsNullOrEmpty(fname))
                {
                    string argfname8 = "フィールド";
                    if (u.IsFeatureAvailable(argfname8))
                    {
                        object argIndex26 = "フィールド";
                        fname = u.FeatureName0(argIndex26);
                    }
                    else
                    {
                        fname = "広域フィールド";
                    }
                }

                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                {
                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                }
                else
                {
                    ecost = 20;
                }

                object argIndex27 = "フィールド発動";
                if (!u.IsConditionSatisfied(argIndex27))
                {
                    // フィールド発動はターン中に一度のみ
                    u.EN = u.EN - ecost;
                    string argmain_situation6 = "フィールド発動(" + fname + ")";
                    if (u.IsMessageDefined(argmain_situation6))
                    {
                        string argSituation2 = "フィールド発動(" + fname + ")";
                        string argmsg_mode2 = "";
                        u.PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                    }
                    else
                    {
                        string argSituation3 = "フィールド発動";
                        string argmsg_mode3 = "";
                        u.PilotMessage(argSituation3, msg_mode: argmsg_mode3);
                    }

                    string argmain_situation9 = "フィールド発動";
                    if (u.IsAnimationDefined(argmain_situation9, fname))
                    {
                        string argmain_situation7 = "フィールド発動";
                        u.PlayAnimation(argmain_situation7, fname);
                    }
                    else
                    {
                        string argmain_situation8 = "フィールド発動";
                        u.SpecialEffect(argmain_situation8, fname);
                    }

                    string argmain_situation11 = "フィールド発動";
                    if (u.IsSysMessageDefined(argmain_situation11, fname))
                    {
                        string argmain_situation10 = "フィールド発動";
                        string argadd_msg1 = "";
                        u.SysMessage(argmain_situation10, fname, add_msg: argadd_msg1);
                    }
                    else
                    {
                        GUI.DisplaySysMessage(u.Nickname + "は[" + fname + "]を発動させた。");
                    }

                    if (fname == "広域フィールド" | fname == "フィールド")
                    {
                        string argcname2 = "フィールド発動";
                        string argcdata2 = "";
                        u.AddCondition(argcname2, 1, cdata: argcdata2);
                    }
                    else
                    {
                        string argcname3 = "フィールド発動";
                        string argcdata3 = fname + "発動";
                        u.AddCondition(argcname3, 1, 0d, argcdata3);
                    }
                }

                if (500d * flevel >= dmg)
                {
                    var argu6 = this;
                    Effect.NegateEffect(argu6, t, w, wname, dmg, fname, fdata, 10, msg, be_quiet);
                    CheckDefenseFeatureRet = true;
                    return CheckDefenseFeatureRet;
                }
                else if (flevel > 0d)
                {
                    dmg = (dmg - 500d * flevel);
                    msg = msg + wname + "が[" + fname + "]を貫いた。;";
                }
            }

            // 広域プロテクション
            // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            u = null;
            flevel = 0d;
            fid = 0;
            // プロテクションをはってくれるユニットを探す
            var loopTo6 = GeneralLib.MinLng(tx + 3, Map.MapWidth);
            for (i = GeneralLib.MaxLng(tx - 3, 1); i <= loopTo6; i++)
            {
                var loopTo7 = GeneralLib.MinLng(ty + 3, Map.MapHeight);
                for (j = GeneralLib.MaxLng(ty - 3, 1); j <= loopTo7; j++)
                {
                    if (Map.MapDataForUnit[i, j] is null | Math.Abs((tx - i)) + Math.Abs((ty - j)) > 3)
                    {
                        goto NextPoint3;
                    }

                    {
                        var withBlock2 = Map.MapDataForUnit[i, j];
                        // 敵？
                        if (withBlock2.IsEnemy(t))
                        {
                            goto NextPoint3;
                        }

                        // 行動不能？
                        if (withBlock2.MaxAction() == 0)
                        {
                            goto NextPoint3;
                        }

                        // 地中にいる？
                        if (withBlock2.Area == "地中")
                        {
                            goto NextPoint3;
                        }

                        // 広域プロテクションを持っている？
                        string argfname9 = "広域プロテクション";
                        if (!withBlock2.IsFeatureAvailable(argfname9))
                        {
                            goto NextPoint3;
                        }

                        // 同じチームに属している？
                        object argIndex28 = "チーム";
                        uteam = withBlock2.MainPilot().SkillData(argIndex28);
                        if ((team ?? "") != (uteam ?? "") & !string.IsNullOrEmpty(uteam))
                        {
                            goto NextPoint3;
                        }

                        var loopTo8 = withBlock2.CountFeature();
                        for (k = 1; k <= loopTo8; k++)
                        {
                            object argIndex34 = k;
                            if (withBlock2.Feature(argIndex34) == "広域プロテクション")
                            {
                                object argIndex29 = k;
                                fdata = withBlock2.FeatureData(argIndex29);

                                // 効果範囲
                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 2)))
                                {
                                    frange = Conversions.Toint(GeneralLib.LIndex(fdata, 2));
                                }
                                else
                                {
                                    frange = 1;
                                }

                                // 使用条件
                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                                {
                                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                                }
                                else
                                {
                                    ecost = (20 * frange);
                                }

                                object argIndex30 = "プロテクション発動";
                                if (withBlock2.IsConditionSatisfied(argIndex30))
                                {
                                    // すでに発動済み
                                    ecost = 0;
                                }

                                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                                {
                                    nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                                }
                                else
                                {
                                    nmorale = 0;
                                }

                                // 発動可能かチェック
                                bool localIsAttributeClassified2() { string argaclass1 = GeneralLib.LIndex(fdata, 3); string argaclass2 = WeaponClass(w); var ret = withBlock2.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                                string argfname10 = "プロテクション";
                                object argIndex33 = "バリア無効化";
                                if (withBlock2.EN >= ecost & withBlock2.MainPilot().Morale >= nmorale & localIsAttributeClassified2() & (Math.Abs((tx - i)) + Math.Abs((ty - j))) <= frange & (Math.Abs((x - i)) + Math.Abs((y - j))) > frange & (!ReferenceEquals(Map.MapDataForUnit[i, j], t) | !t.IsFeatureAvailable(argfname10)) & !withBlock2.IsConditionSatisfied(argIndex33))
                                {
                                    object argIndex32 = k;
                                    if (withBlock2.FeatureLevel(argIndex32) > flevel)
                                    {
                                        u = Map.MapDataForUnit[i, j];
                                        object argIndex31 = k;
                                        flevel = withBlock2.FeatureLevel(argIndex31);
                                        fid = k;
                                    }
                                }
                            }
                        }
                    }

                    NextPoint3:
                    ;
                }
            }

            if (u is object)
            {
                // プロテクションをはってくれるユニットがいる場合
                if (fid == 0)
                {
                    object argIndex35 = "広域プロテクション";
                    fname = u.FeatureName0(argIndex35);
                    object argIndex36 = "広域プロテクション";
                    fdata = u.FeatureData(argIndex36);
                }
                else
                {
                    object argIndex37 = fid;
                    fname = u.FeatureName0(argIndex37);
                    object argIndex38 = fid;
                    fdata = u.FeatureData(argIndex38);
                }

                if (string.IsNullOrEmpty(fname))
                {
                    string argfname11 = "プロテクション";
                    if (u.IsFeatureAvailable(argfname11))
                    {
                        object argIndex39 = "プロテクション";
                        fname = u.FeatureName0(argIndex39);
                    }
                    else
                    {
                        fname = "広域プロテクション";
                    }
                }

                if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                {
                    ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                }
                else
                {
                    ecost = 20;
                }

                object argIndex40 = "プロテクション発動";
                if (!u.IsConditionSatisfied(argIndex40))
                {
                    // プロテクション発動はターン中に一度のみ
                    u.EN = u.EN - ecost;
                    string argmain_situation12 = "プロテクション発動(" + fname + ")";
                    if (u.IsMessageDefined(argmain_situation12))
                    {
                        string argSituation4 = "プロテクション発動(" + fname + ")";
                        string argmsg_mode4 = "";
                        u.PilotMessage(argSituation4, msg_mode: argmsg_mode4);
                    }
                    else
                    {
                        string argSituation5 = "プロテクション発動";
                        string argmsg_mode5 = "";
                        u.PilotMessage(argSituation5, msg_mode: argmsg_mode5);
                    }

                    string argmain_situation15 = "プロテクション発動";
                    if (u.IsAnimationDefined(argmain_situation15, fname))
                    {
                        string argmain_situation13 = "プロテクション発動";
                        u.PlayAnimation(argmain_situation13, fname);
                    }
                    else
                    {
                        string argmain_situation14 = "プロテクション発動";
                        u.SpecialEffect(argmain_situation14, fname);
                    }

                    string argmain_situation17 = "プロテクション発動";
                    if (u.IsSysMessageDefined(argmain_situation17, fname))
                    {
                        string argmain_situation16 = "プロテクション発動";
                        string argadd_msg2 = "";
                        u.SysMessage(argmain_situation16, fname, add_msg: argadd_msg2);
                    }
                    else
                    {
                        GUI.DisplaySysMessage(u.Nickname + "は[" + fname + "]を発動させた。");
                    }

                    if (fname == "広域プロテクション" | fname == "プロテクション")
                    {
                        string argcname4 = "プロテクション発動";
                        string argcdata4 = "";
                        u.AddCondition(argcname4, 1, cdata: argcdata4);
                    }
                    else
                    {
                        string argcname5 = "プロテクション発動";
                        string argcdata5 = fname + "発動";
                        u.AddCondition(argcname5, 1, 0d, argcdata5);
                    }
                }

                dmg = ((long)(dmg * (10d - flevel)) / 10L);
                if (dmg < 0)
                {
                    msg = msg + u.Nickname + "がダメージを吸収した。;";
                    u.HP = u.HP - dmg;
                    CheckDefenseFeatureRet = true;
                    return CheckDefenseFeatureRet;
                }
                else if (flevel > 0d)
                {
                    msg = msg + u.Nickname + "の[" + fname + "]がダメージを減少させた。;";
                }
            }

            // バリア能力
            var loopTo9 = t.CountFeature();
            for (i = 1; i <= loopTo9; i++)
            {
                object argIndex49 = i;
                if (t.Feature(argIndex49) == "バリア")
                {
                    object argIndex41 = i;
                    fname = t.FeatureName0(argIndex41);
                    if (string.IsNullOrEmpty(fname))
                    {
                        string argfname12 = "広域バリア";
                        if (t.IsFeatureAvailable(argfname12))
                        {
                            object argIndex42 = "広域バリア";
                            fname = t.FeatureName0(argIndex42);
                        }
                        else
                        {
                            fname = "バリア";
                        }
                    }

                    object argIndex43 = i;
                    fdata = t.FeatureData(argIndex43);
                    object argIndex44 = i;
                    flevel = t.FeatureLevel(argIndex44);

                    // 必要条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 10;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo10 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo10; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex45 = "バリア";
                                    string argfdata21 = FeatureData(argIndex45);
                                    if (IsSameCategory(fdata, argfdata21) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        string localFeatureName() { object argIndex1 = i; var ret = t.FeatureName(argIndex1); return ret; }

                                        msg = msg + Nickname + "は[" + localFeatureName() + "]を中和した。;";
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex47 = "バリア";
                                    string argfdata22 = FeatureData(argIndex47);
                                    if (IsSameCategory(fdata, argfdata22) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex46 = "バリア";
                                        flevel = flevel - FeatureLevel(argIndex46);
                                        if (flevel <= 0d)
                                        {
                                            msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr3 = "武";
                                    string argattr4 = "突";
                                    string argattr5 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr3) | IsWeaponClassifiedAs(w, argattr4) | IsWeaponClassifiedAs(w, argattr5))
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "能力必要":
                            case "バリア無効化無効":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex48 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex48))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified3() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified3() & !neautralize)
                    {
                        // バリア発動
                        t.EN = t.EN - ecost;
                        if (dmg <= 1000d * flevel + slevel)
                        {
                            if (ecost != 0)
                            {
                                if (attack_mode != "反射")
                                {
                                    var argu12 = this;
                                    object argu22 = t;
                                    GUI.UpdateMessageForm(argu12, argu22);
                                }
                                else
                                {
                                    var argu13 = this;
                                    object argu23 = null;
                                    GUI.UpdateMessageForm(argu13, argu23);
                                }
                            }

                            var argu7 = this;
                            Effect.NegateEffect(argu7, t, w, wname, dmg, fname, fdata, ecost, msg, be_quiet);
                            CheckDefenseFeatureRet = true;
                            return CheckDefenseFeatureRet;
                        }
                        else if (flevel > 0d | slevel > 0d)
                        {
                            if (Strings.InStr(msg, "[" + fname + "]を貫いた") == 0)
                            {
                                is_penetrated = true;
                                msg = msg + wname + "が[" + fname + "]を貫いた。;";
                                string argmain_situation20 = "バリア貫通";
                                if (t.IsAnimationDefined(argmain_situation20, fname))
                                {
                                    string argmain_situation18 = "バリア貫通";
                                    t.PlayAnimation(argmain_situation18, fname);
                                }
                                else
                                {
                                    string argmain_situation19 = "バリア貫通";
                                    t.SpecialEffect(argmain_situation19, fname);
                                }
                            }
                        }
                    }
                }
            }

            // フィールド能力
            var loopTo11 = t.CountFeature();
            for (i = 1; i <= loopTo11; i++)
            {
                object argIndex58 = i;
                if (t.Feature(argIndex58) == "フィールド")
                {
                    object argIndex50 = i;
                    fname = t.FeatureName0(argIndex50);
                    if (string.IsNullOrEmpty(fname))
                    {
                        string argfname13 = "バリア";
                        if (t.IsFeatureAvailable(argfname13))
                        {
                            object argIndex51 = "バリア";
                            fname = t.FeatureName(argIndex51);
                        }
                        else
                        {
                            fname = "フィールド";
                        }
                    }

                    object argIndex52 = i;
                    fdata = t.FeatureData(argIndex52);
                    object argIndex53 = i;
                    flevel = t.FeatureLevel(argIndex53);

                    // 必要条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 0;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo12 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo12; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr1 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr1);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex54 = "フィールド";
                                    string argfdata23 = FeatureData(argIndex54);
                                    if (IsSameCategory(fdata, argfdata23) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex56 = "フィールド";
                                    string argfdata24 = FeatureData(argIndex56);
                                    if (IsSameCategory(fdata, argfdata24) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex55 = "フィールド";
                                        flevel = flevel - FeatureLevel(argIndex55);
                                        if (flevel <= 0d)
                                        {
                                            msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr6 = "武";
                                    string argattr7 = "突";
                                    string argattr8 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr6) | IsWeaponClassifiedAs(w, argattr7) | IsWeaponClassifiedAs(w, argattr8))
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "能力必要":
                            case "バリア無効化無効":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex57 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex57))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified4() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified4() & !neautralize)
                    {
                        // フィールド発動
                        t.EN = t.EN - ecost;
                        if (dmg <= 500d * flevel + slevel)
                        {
                            if (ecost != 0)
                            {
                                if (attack_mode != "反射")
                                {
                                    var argu14 = this;
                                    object argu24 = t;
                                    GUI.UpdateMessageForm(argu14, argu24);
                                }
                                else
                                {
                                    var argu15 = this;
                                    object argu25 = null;
                                    GUI.UpdateMessageForm(argu15, argu25);
                                }
                            }

                            var argu8 = this;
                            Effect.NegateEffect(argu8, t, w, wname, dmg, fname, fdata, ecost, msg, be_quiet);
                            CheckDefenseFeatureRet = true;
                            return CheckDefenseFeatureRet;
                        }
                        else if (flevel > 0d | slevel > 0d)
                        {
                            dmg = (dmg - 500d * flevel - slevel);
                            if (Strings.InStr(msg, "[" + fname + "]を貫いた") == 0)
                            {
                                msg = msg + wname + "が[" + fname + "]を貫いた。;";
                            }
                        }
                    }
                }
            }

            // プロテクション能力
            var loopTo13 = t.CountFeature();
            for (i = 1; i <= loopTo13; i++)
            {
                object argIndex67 = i;
                if (t.Feature(argIndex67) == "プロテクション")
                {
                    object argIndex59 = i;
                    fname = t.FeatureName0(argIndex59);
                    if (string.IsNullOrEmpty(fname))
                    {
                        string argfname14 = "バリア";
                        if (t.IsFeatureAvailable(argfname14))
                        {
                            object argIndex60 = "バリア";
                            fname = t.FeatureName(argIndex60);
                        }
                        else
                        {
                            fname = "プロテクション";
                        }
                    }

                    object argIndex61 = i;
                    fdata = t.FeatureData(argIndex61);
                    object argIndex62 = i;
                    flevel = t.FeatureLevel(argIndex62);

                    // 必要条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 10;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo14 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo14; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr2 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr2);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex63 = "プロテクション";
                                    string argfdata25 = FeatureData(argIndex63);
                                    if (IsSameCategory(fdata, argfdata25) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex65 = "プロテクション";
                                    string argfdata26 = FeatureData(argIndex65);
                                    if (IsSameCategory(fdata, argfdata26) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex64 = "プロテクション";
                                        flevel = flevel - FeatureLevel(argIndex64);
                                        if (flevel <= 0d)
                                        {
                                            msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr9 = "武";
                                    string argattr10 = "突";
                                    string argattr11 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr9) | IsWeaponClassifiedAs(w, argattr10) | IsWeaponClassifiedAs(w, argattr11))
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "能力必要":
                            case "バリア無効化無効":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 0.5d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 0.2d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex66 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex66))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified5() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified5() & !neautralize & dmg > 0)
                    {
                        // プロテクション発動
                        dmg = ((long)(dmg * (100d - 10d * flevel - slevel)) / 100L);
                        if (ecost != 0)
                        {
                            t.EN = t.EN - ecost;
                            if (attack_mode != "反射")
                            {
                                var argu16 = this;
                                object argu26 = t;
                                GUI.UpdateMessageForm(argu16, argu26);
                            }
                            else
                            {
                                var argu17 = this;
                                object argu27 = null;
                                GUI.UpdateMessageForm(argu17, argu27);
                            }
                        }

                        if (dmg <= 0)
                        {
                            var argu9 = this;
                            Effect.NegateEffect(argu9, t, w, wname, dmg, fname, fdata, ecost, msg, be_quiet);
                            t.HP = t.HP - dmg;
                            var argu18 = this;
                            object argu28 = t;
                            GUI.UpdateMessageForm(argu18, argu28);
                            CheckDefenseFeatureRet = true;
                            return CheckDefenseFeatureRet;
                        }
                        else if (flevel > 0d | slevel > 0d)
                        {
                            if (Strings.InStr(msg, "[" + fname + "]") == 0)
                            {
                                msg = msg + "[" + fname + "]がダメージを減少させた。;";
                            }
                        }
                    }
                }
            }

            // バリアシールド、アクティブフィールド、アクティブプロテクションは能動防御
            string argsptype1 = "無防備";
            if (t.MaxAction() == 0 | t.IsUnderSpecialPowerEffect(argsptype1))
            {
                goto SkipActiveBarrier;
            }

            // バリアシールド能力
            var loopTo15 = t.CountFeature();
            for (i = 1; i <= loopTo15; i++)
            {
                object argIndex78 = i;
                if (t.Feature(argIndex78) == "バリアシールド")
                {
                    object argIndex68 = i;
                    fname = t.FeatureName0(argIndex68);
                    if (string.IsNullOrEmpty(fname))
                    {
                        string argfname15 = "反射";
                        if (t.IsFeatureAvailable(argfname15))
                        {
                            object argIndex69 = "反射";
                            fname = t.FeatureName0(argIndex69);
                        }
                        else
                        {
                            fname = "バリアシールド";
                        }
                    }

                    object argIndex70 = i;
                    fdata = t.FeatureData(argIndex70);
                    object argIndex71 = i;
                    flevel = t.FeatureLevel(argIndex71);

                    // 使用条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 10;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo16 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo16; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr3 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr3);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex72 = "バリアシールド";
                                    string argfdata27 = FeatureData(argIndex72);
                                    if (IsSameCategory(fdata, argfdata27) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        string localFeatureName1() { object argIndex1 = i; var ret = t.FeatureName(argIndex1); return ret; }

                                        msg = msg + Nickname + "は[" + localFeatureName1() + "]を中和した。;";
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex74 = "バリアシールド";
                                    string argfdata28 = FeatureData(argIndex74);
                                    if (IsSameCategory(fdata, argfdata28) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex73 = "バリアシールド";
                                        flevel = flevel - FeatureLevel(argIndex73);
                                        if (flevel <= 0d)
                                        {
                                            msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr12 = "武";
                                    string argattr13 = "突";
                                    string argattr14 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr12) | IsWeaponClassifiedAs(w, argattr13) | IsWeaponClassifiedAs(w, argattr14))
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "能力必要":
                            case "バリア無効化無効":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex75 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex75))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified6() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    object argIndex77 = "Ｓ防御";
                    string argref_mode1 = "";
                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified6() & t.MainPilot().SkillLevel(argIndex77, ref_mode: argref_mode1) > 0d & !neautralize)
                    {
                        // バリアシールド発動
                        object argIndex76 = "Ｓ防御";
                        string argref_mode = "";
                        string argsptype2 = "特殊防御発動";
                        if (t.MainPilot().SkillLevel(argIndex76, ref_mode: argref_mode) >= GeneralLib.Dice(16) | t.IsUnderSpecialPowerEffect(argsptype2))
                        {
                            t.EN = t.EN - ecost;
                            if (dmg <= 1000d * flevel + slevel)
                            {
                                if (ecost != 0)
                                {
                                    if (attack_mode != "反射")
                                    {
                                        var argu19 = this;
                                        object argu29 = t;
                                        GUI.UpdateMessageForm(argu19, argu29);
                                    }
                                    else
                                    {
                                        var argu110 = this;
                                        object argu210 = null;
                                        GUI.UpdateMessageForm(argu110, argu210);
                                    }
                                }

                                var argu10 = this;
                                Effect.NegateEffect(argu10, t, w, wname, dmg, fname, fdata, ecost, msg, be_quiet);
                                CheckDefenseFeatureRet = true;
                                return CheckDefenseFeatureRet;
                            }
                            else if (flevel > 0d | slevel > 0d)
                            {
                                if (Strings.InStr(msg, "[" + fname + "]を貫いた") == 0)
                                {
                                    is_penetrated = true;
                                    msg = msg + wname + "が[" + fname + "]を貫いた。;";
                                    string argmain_situation23 = "バリア貫通";
                                    if (t.IsAnimationDefined(argmain_situation23, fname))
                                    {
                                        string argmain_situation21 = "バリア貫通";
                                        t.PlayAnimation(argmain_situation21, fname);
                                    }
                                    else
                                    {
                                        string argmain_situation22 = "バリア貫通";
                                        t.SpecialEffect(argmain_situation22, fname);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // アクティブフィールド能力
            var loopTo17 = t.CountFeature();
            for (i = 1; i <= loopTo17; i++)
            {
                object argIndex89 = i;
                if (t.Feature(argIndex89) == "アクティブフィールド")
                {
                    object argIndex79 = i;
                    fname = t.FeatureName0(argIndex79);
                    if (string.IsNullOrEmpty(fname))
                    {
                        string argfname16 = "反射";
                        if (t.IsFeatureAvailable(argfname16))
                        {
                            object argIndex80 = "反射";
                            fname = t.FeatureName0(argIndex80);
                        }
                        else
                        {
                            fname = "アクティブフィールド";
                        }
                    }

                    object argIndex81 = i;
                    fdata = t.FeatureData(argIndex81);
                    object argIndex82 = i;
                    flevel = t.FeatureLevel(argIndex82);

                    // 使用条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 0;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo18 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo18; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr4 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr4);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex83 = "アクティブフィールド";
                                    string argfdata29 = FeatureData(argIndex83);
                                    if (IsSameCategory(fdata, argfdata29) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        string localFeatureName2() { object argIndex1 = i; var ret = t.FeatureName(argIndex1); return ret; }

                                        msg = msg + Nickname + "は[" + localFeatureName2() + "]を中和した。;";
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex85 = "アクティブフィールド";
                                    string argfdata210 = FeatureData(argIndex85);
                                    if (IsSameCategory(fdata, argfdata210) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex84 = "アクティブフィールド";
                                        flevel = flevel - FeatureLevel(argIndex84);
                                        if (flevel <= 0d)
                                        {
                                            msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr15 = "武";
                                    string argattr16 = "突";
                                    string argattr17 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr15) | IsWeaponClassifiedAs(w, argattr16) | IsWeaponClassifiedAs(w, argattr17))
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "能力必要":
                            case "バリア無効化無効":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex86 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex86))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified7() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    object argIndex88 = "Ｓ防御";
                    string argref_mode3 = "";
                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified7() & t.MainPilot().SkillLevel(argIndex88, ref_mode: argref_mode3) > 0d & !neautralize)
                    {
                        // アクティブフィールド発動
                        object argIndex87 = "Ｓ防御";
                        string argref_mode2 = "";
                        string argsptype3 = "特殊防御発動";
                        if (t.MainPilot().SkillLevel(argIndex87, ref_mode: argref_mode2) >= GeneralLib.Dice(16) | t.IsUnderSpecialPowerEffect(argsptype3))
                        {
                            t.EN = t.EN - ecost;
                            if (dmg <= 500d * flevel + slevel)
                            {
                                if (ecost != 0)
                                {
                                    if (attack_mode != "反射")
                                    {
                                        var argu111 = this;
                                        object argu211 = t;
                                        GUI.UpdateMessageForm(argu111, argu211);
                                    }
                                    else
                                    {
                                        var argu112 = this;
                                        object argu212 = null;
                                        GUI.UpdateMessageForm(argu112, argu212);
                                    }
                                }

                                var argu20 = this;
                                Effect.NegateEffect(argu20, t, w, wname, dmg, fname, fdata, ecost, msg, be_quiet);
                                CheckDefenseFeatureRet = true;
                                return CheckDefenseFeatureRet;
                            }
                            else if (flevel > 0d | slevel > 0d)
                            {
                                dmg = (dmg - 500d * flevel - slevel);
                                if (Strings.InStr(msg, "[" + fname + "]を貫いた") == 0)
                                {
                                    msg = msg + wname + "が[" + fname + "]を貫いた。;";
                                }
                            }
                        }
                    }
                }
            }

            // アクティブプロテクション能力
            var loopTo19 = t.CountFeature();
            for (i = 1; i <= loopTo19; i++)
            {
                object argIndex100 = i;
                if (t.Feature(argIndex100) == "アクティブプロテクション")
                {
                    object argIndex90 = i;
                    fname = t.FeatureName0(argIndex90);
                    if (string.IsNullOrEmpty(fname))
                    {
                        string argfname17 = "反射";
                        if (t.IsFeatureAvailable(argfname17))
                        {
                            object argIndex91 = "反射";
                            fname = t.FeatureName0(argIndex91);
                        }
                        else
                        {
                            fname = "アクティブプロテクション";
                        }
                    }

                    object argIndex92 = i;
                    fdata = t.FeatureData(argIndex92);
                    object argIndex93 = i;
                    flevel = t.FeatureLevel(argIndex93);

                    // 使用条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        ecost = 10;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 4)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 4));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // オプション
                    neautralize = false;
                    slevel = 0d;
                    var loopTo20 = GeneralLib.LLength(fdata);
                    for (j = 5; j <= loopTo20; j++)
                    {
                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr5 = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr5);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex94 = "アクティブプロテクション";
                                    string argfdata211 = FeatureData(argIndex94);
                                    if (IsSameCategory(fdata, argfdata211) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        string localFeatureName3() { object argIndex1 = i; var ret = t.FeatureName(argIndex1); return ret; }

                                        msg = msg + Nickname + "は[" + localFeatureName3() + "]を中和した。;";
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex96 = "アクティブプロテクション";
                                    string argfdata212 = FeatureData(argIndex96);
                                    if (IsSameCategory(fdata, argfdata212) & Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
                                    {
                                        object argIndex95 = "アクティブプロテクション";
                                        flevel = flevel - FeatureLevel(argIndex95);
                                        if (flevel <= 0d)
                                        {
                                            msg = msg + Nickname + "は[" + fname + "]を中和した。;";
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr18 = "武";
                                    string argattr19 = "突";
                                    string argattr20 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr18) | IsWeaponClassifiedAs(w, argattr19) | IsWeaponClassifiedAs(w, argattr20))
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        neautralize = true;
                                    }

                                    break;
                                }

                            case "能力必要":
                            case "バリア無効化無効":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 0.5d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            neautralize = true;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 0.2d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 5d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            neautralize = true;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // バリア無効化で無効化されている？
                    object argIndex97 = "バリア無効化";
                    if (t.IsConditionSatisfied(argIndex97))
                    {
                        if (Strings.InStr(fdata, "バリア無効化無効") == 0)
                        {
                            neautralize = true;
                        }
                    }

                    // 発動可能？
                    bool localIsAttributeClassified8() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    object argIndex99 = "Ｓ防御";
                    string argref_mode5 = "";
                    if (t.EN >= ecost & t.MainPilot().Morale >= nmorale & localIsAttributeClassified8() & t.MainPilot().SkillLevel(argIndex99, ref_mode: argref_mode5) > 0d & !neautralize & dmg > 0)
                    {
                        // アクティブプロテクション発動
                        object argIndex98 = "Ｓ防御";
                        string argref_mode4 = "";
                        string argsptype4 = "特殊防御発動";
                        if (t.MainPilot().SkillLevel(argIndex98, ref_mode: argref_mode4) >= GeneralLib.Dice(16) | t.IsUnderSpecialPowerEffect(argsptype4))
                        {
                            dmg = ((long)(dmg * (100d - 10d * flevel - slevel)) / 100L);
                            if (ecost != 0)
                            {
                                t.EN = t.EN - ecost;
                                if (attack_mode != "反射")
                                {
                                    var argu113 = this;
                                    object argu213 = t;
                                    GUI.UpdateMessageForm(argu113, argu213);
                                }
                                else
                                {
                                    var argu114 = this;
                                    object argu214 = null;
                                    GUI.UpdateMessageForm(argu114, argu214);
                                }
                            }

                            if (dmg <= 0)
                            {
                                var argu30 = this;
                                Effect.NegateEffect(argu30, t, w, wname, dmg, fname, fdata, ecost, msg, be_quiet);
                                t.HP = t.HP - dmg;
                                var argu115 = this;
                                object argu215 = t;
                                GUI.UpdateMessageForm(argu115, argu215);
                                CheckDefenseFeatureRet = true;
                                return CheckDefenseFeatureRet;
                            }
                            else if (flevel > 0d | slevel > 0d)
                            {
                                if (Strings.InStr(msg, "[" + fname + "]") == 0)
                                {
                                    msg = msg + "[" + fname + "]がダメージを減少させた。;";
                                }
                            }
                        }
                    }
                }
            }

            SkipActiveBarrier:
            ;


            // 相手の攻撃をＥＮに変換
            var loopTo21 = t.CountFeature();
            for (i = 1; i <= loopTo21; i++)
            {
                object argIndex103 = i;
                if (t.Feature(argIndex103) == "変換")
                {
                    object argIndex101 = i;
                    fdata = t.FeatureData(argIndex101);
                    object argIndex102 = i;
                    flevel = t.FeatureLevel(argIndex102);

                    // 必要気力
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 3)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 3));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    // 発動可能？
                    bool localIsAttributeClassified9() { string argaclass1 = GeneralLib.LIndex(fdata, 2); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    if (t.MainPilot().Morale >= nmorale & localIsAttributeClassified9())
                    {
                        t.EN = (t.EN + 0.01d * flevel * dmg);
                    }
                }
            }

            // 対ビーム用防御能力
            string argattr21 = "Ｂ";
            if (IsWeaponClassifiedAs(w, argattr21))
            {
                // ビーム吸収
                string argfname18 = "ビーム吸収";
                if (t.IsFeatureAvailable(argfname18))
                {
                    object argIndex104 = "ビーム吸収";
                    fname = t.FeatureName(argIndex104);
                    t.HP = t.HP + dmg;
                    var argu31 = this;
                    string argfdata3 = "Ｂ";
                    Effect.NegateEffect(argu31, t, w, wname, dmg, fname, argfdata3, 0, msg, be_quiet);
                    CheckDefenseFeatureRet = true;
                    return CheckDefenseFeatureRet;
                }
            }

            SkipBarrier:
            ;


            // 攻撃力が0の場合は盾や融合を無視
            if (this.Weapon(w).Power == 0)
            {
                return CheckDefenseFeatureRet;
            }

            // 盾防御
            string argfname19 = "盾";
            string argsname = "Ｓ防御";
            string argattr25 = "精";
            string argattr26 = "浸";
            string argattr27 = "殺";
            string argsptype5 = "シールド防御無効化";
            string argsptype6 = "無防備";
            object argIndex121 = "盾付加";
            object argIndex122 = "盾";
            object argIndex123 = "盾ダメージ";
            if (t.IsFeatureAvailable(argfname19) & t.MainPilot().IsSkillAvailable(argsname) & t.MaxAction() > 0 & !IsWeaponClassifiedAs(w, argattr25) & !IsWeaponClassifiedAs(w, argattr26) & !IsWeaponClassifiedAs(w, argattr27) & !IsUnderSpecialPowerEffect(argsptype5) & !t.IsUnderSpecialPowerEffect(argsptype6) & (t.IsConditionSatisfied(argIndex121) | t.FeatureLevel(argIndex122) > t.ConditionLevel(argIndex123)))
            {
                object argIndex105 = "盾";
                fname = t.FeatureName0(argIndex105);
                if (!be_quiet)
                {
                    string argSituation6 = "シールド防御";
                    t.PilotMessage(argSituation6, fname);
                }

                string argmain_situation26 = "シールド防御";
                string argmain_situation27 = "シールド防御";
                if (t.IsAnimationDefined(argmain_situation26, fname))
                {
                    string argmain_situation24 = "シールド防御";
                    t.PlayAnimation(argmain_situation24, fname);
                }
                else if (t.IsSpecialEffectDefined(argmain_situation27, fname))
                {
                    string argmain_situation25 = "シールド防御";
                    t.SpecialEffect(argmain_situation25, fname);
                }
                else
                {
                    string arganame = "ミドルシールド発動";
                    Effect.ShowAnimation(arganame);
                }

                string argattr22 = "破";
                if (IsWeaponClassifiedAs(w, argattr22))
                {
                    object argIndex106 = "Ｓ防御";
                    string argref_mode6 = "";
                    dmg = GeneralLib.MaxLng((dmg - 50d * (t.MainPilot().SkillLevel(argIndex106, ref_mode: argref_mode6) + 4d)), 0);
                }
                else
                {
                    object argIndex107 = "Ｓ防御";
                    string argref_mode7 = "";
                    dmg = GeneralLib.MaxLng((dmg - 100d * (t.MainPilot().SkillLevel(argIndex107, ref_mode: argref_mode7) + 4d)), 0);
                }

                string argmain_situation29 = "シールド防御";
                if (t.IsSysMessageDefined(argmain_situation29, fname))
                {
                    string argmain_situation28 = "シールド防御";
                    string argadd_msg3 = "";
                    t.SysMessage(argmain_situation28, fname, add_msg: argadd_msg3);
                }
                else if (dmg == 0)
                {
                    GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]を使って攻撃を防いだ。");
                }
                else
                {
                    GUI.DisplaySysMessage(t.Nickname + "は[" + fname + "]を使ってダメージを軽減させた。");
                }

                if (dmg == 0)
                {
                    // 攻撃を盾で完全に防いだ場合

                    // 命中時の特殊効果
                    Sound.IsWavePlayed = false;
                    if (!be_quiet)
                    {
                        string argSituation7 = wname + "(命中)";
                        string argmsg_mode6 = "";
                        PilotMessage(argSituation7, msg_mode: argmsg_mode6);
                    }

                    bool localIsSpecialEffectDefined() { string argmain_situation = wname + "(命中)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    string argmain_situation32 = wname + "(命中)";
                    string argsub_situation2 = "";
                    string argsub_situation3 = "";
                    if (IsAnimationDefined(argmain_situation32, sub_situation: argsub_situation2) | IsAnimationDefined(wname, sub_situation: argsub_situation3))
                    {
                        string argmain_situation30 = wname + "(命中)";
                        string argsub_situation = "";
                        PlayAnimation(argmain_situation30, sub_situation: argsub_situation);
                    }
                    else if (localIsSpecialEffectDefined())
                    {
                        string argmain_situation31 = wname + "(命中)";
                        string argsub_situation1 = "";
                        SpecialEffect(argmain_situation31, sub_situation: argsub_situation1);
                    }
                    else if (!Sound.IsWavePlayed)
                    {
                        var argu32 = this;
                        Effect.HitEffect(argu32, w, t);
                    }

                    CheckDefenseFeatureRet = true;
                    return CheckDefenseFeatureRet;
                }
                else
                {
                    // 攻撃が盾を貫通した場合
                    object argIndex120 = "盾付加";
                    if (t.IsConditionSatisfied(argIndex120))
                    {
                        string argattr23 = "破";
                        if (IsWeaponClassifiedAs(w, argattr23))
                        {
                            object argIndex108 = "盾付加";
                            object argIndex109 = "盾付加";
                            t.SetConditionLevel(argIndex108, t.ConditionLevel(argIndex109) - 2d);
                        }
                        else
                        {
                            object argIndex110 = "盾付加";
                            object argIndex111 = "盾付加";
                            t.SetConditionLevel(argIndex110, t.ConditionLevel(argIndex111) - 1d);
                        }

                        object argIndex113 = "盾付加";
                        if (t.ConditionLevel(argIndex113) <= 0d)
                        {
                            object argIndex112 = "盾付加";
                            t.DeleteCondition(argIndex112);
                        }
                    }
                    else
                    {
                        string argattr24 = "破";
                        if (IsWeaponClassifiedAs(w, argattr24))
                        {
                            object argIndex116 = "盾ダメージ";
                            if (t.IsConditionSatisfied(argIndex116))
                            {
                                object argIndex114 = "盾ダメージ";
                                object argIndex115 = "盾ダメージ";
                                t.SetConditionLevel(argIndex114, t.ConditionLevel(argIndex115) + 2d);
                            }
                            else
                            {
                                string argcname6 = "盾ダメージ";
                                string argcdata6 = "";
                                t.AddCondition(argcname6, -1, 2d, cdata: argcdata6);
                            }
                        }
                        else
                        {
                            object argIndex119 = "盾ダメージ";
                            if (t.IsConditionSatisfied(argIndex119))
                            {
                                object argIndex117 = "盾ダメージ";
                                object argIndex118 = "盾ダメージ";
                                t.SetConditionLevel(argIndex117, t.ConditionLevel(argIndex118) + 1d);
                            }
                            else
                            {
                                string argcname7 = "盾ダメージ";
                                string argcdata7 = "";
                                t.AddCondition(argcname7, -1, 1d, cdata: argcdata7);
                            }
                        }
                    }
                }
            }

            // 融合能力
            string argfname20 = "融合";
            if (t.IsFeatureAvailable(argfname20))
            {
                // 融合可能？
                string argattr29 = "武";
                string argattr30 = "突";
                string argattr31 = "接";
                object argIndex125 = "融合";
                string argsptype7 = "特殊防御発動";
                if (!IsWeaponClassifiedAs(w, argattr29) & !IsWeaponClassifiedAs(w, argattr30) & !IsWeaponClassifiedAs(w, argattr31) & (t.FeatureLevel(argIndex125) >= GeneralLib.Dice(16) | t.IsUnderSpecialPowerEffect(argsptype7)))
                {
                    // 融合発動
                    t.HP = t.HP + dmg;
                    if (attack_mode != "反射")
                    {
                        var argu116 = this;
                        object argu216 = t;
                        GUI.UpdateMessageForm(argu116, argu216);
                    }
                    else
                    {
                        var argu117 = this;
                        object argu217 = null;
                        GUI.UpdateMessageForm(argu117, argu217);
                    }

                    object argIndex124 = "融合";
                    fname = t.FeatureName(argIndex124);
                    if (!be_quiet)
                    {
                        string argmain_situation33 = "攻撃無効化(" + fname + ")";
                        if (t.IsMessageDefined(argmain_situation33))
                        {
                            string argSituation8 = "攻撃無効化(" + fname + ")";
                            string argmsg_mode7 = "";
                            t.PilotMessage(argSituation8, msg_mode: argmsg_mode7);
                        }
                        else
                        {
                            string argSituation9 = "攻撃無効化";
                            string argmsg_mode8 = "";
                            t.PilotMessage(argSituation9, msg_mode: argmsg_mode8);
                        }
                    }

                    string argmain_situation36 = "攻撃無効化";
                    string argmain_situation37 = "攻撃無効化";
                    if (t.IsAnimationDefined(argmain_situation36, fname))
                    {
                        string argmain_situation34 = "攻撃無効化";
                        t.PlayAnimation(argmain_situation34, fname);
                    }
                    else if (t.IsSpecialEffectDefined(argmain_situation37, fname))
                    {
                        string argmain_situation35 = "攻撃無効化";
                        t.SpecialEffect(argmain_situation35, fname);
                    }
                    else
                    {
                        var argu33 = this;
                        Effect.AbsorbEffect(argu33, w, t);
                    }

                    bool localIsSpecialEffectDefined1() { string argmain_situation = wname + "(攻撃無効化)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    string argmain_situation40 = wname + "(攻撃無効化)";
                    string argsub_situation6 = "";
                    if (IsAnimationDefined(argmain_situation40, sub_situation: argsub_situation6))
                    {
                        string argmain_situation38 = wname + "(攻撃無効化)";
                        string argsub_situation4 = "";
                        PlayAnimation(argmain_situation38, sub_situation: argsub_situation4);
                    }
                    else if (localIsSpecialEffectDefined1())
                    {
                        string argmain_situation39 = wname + "(攻撃無効化)";
                        string argsub_situation5 = "";
                        SpecialEffect(argmain_situation39, sub_situation: argsub_situation5);
                    }

                    string argmain_situation42 = "攻撃無効化";
                    if (t.IsSysMessageDefined(argmain_situation42, fname))
                    {
                        string argmain_situation41 = "攻撃無効化";
                        string argadd_msg4 = "";
                        t.SysMessage(argmain_situation41, fname, add_msg: argadd_msg4);
                    }
                    else
                    {
                        string argattr28 = "実";
                        if (IsWeaponClassifiedAs(w, argattr28))
                        {
                            GUI.DisplaySysMessage(msg + t.Nickname + "は[" + wname + "]を取り込んだ。");
                        }
                        else
                        {
                            GUI.DisplaySysMessage(msg + t.Nickname + "は[" + wname + "]の攻撃を吸収した。");
                        }
                    }

                    CheckDefenseFeatureRet = true;
                    return CheckDefenseFeatureRet;
                }
            }

            return CheckDefenseFeatureRet;
        }

        // 自動反撃のチェック
        public void CheckAutoAttack(int w, Unit t, string attack_mode, string def_mode, int dmg, bool be_quiet)
        {
            string wname2;
            int w2;
            int ecost, nmorale;
            string fname, fdata;
            double flevel;
            double slevel, lv_mod;
            string opt;
            int j, i, idx;
            int prob;
            string buf;

            // 反撃系の攻撃に対しては自動反撃を行わない
            if (attack_mode == "自動反撃" | attack_mode == "反射" | attack_mode == "当て身技")
            {
                return;
            }

            // マップ攻撃、間接攻撃、無属性武器には自動反撃出来ない
            string argattr = "Ｍ";
            string argattr1 = "間";
            string argattr2 = "無";
            string argsptype = "防御能力無効化";
            if (IsWeaponClassifiedAs(w, argattr) | IsWeaponClassifiedAs(w, argattr1) | IsWeaponClassifiedAs(w, argattr2) | IsUnderSpecialPowerEffect(argsptype))
            {
                return;
            }

            // 自動反撃の結果形態が変化して特殊能力数が変わることがあるのでFor文は使わない
            i = 1;
            while (i <= t.CountFeature())
            {
                object argIndex7 = i;
                if (t.Feature(argIndex7) == "自動反撃")
                {
                    object argIndex1 = i;
                    fname = t.FeatureName0(argIndex1);
                    if (string.IsNullOrEmpty(fname))
                    {
                        fname = "自動反撃";
                    }

                    object argIndex2 = i;
                    fdata = t.FeatureData(argIndex2);
                    object argIndex3 = i;
                    flevel = t.FeatureLevel(argIndex3);
                    if (flevel == 1d)
                    {
                        flevel = 10000d;
                    }

                    // 自動反撃確率の設定
                    buf = GeneralLib.LIndex(fdata, 4);
                    if (Information.IsNumeric(buf))
                    {
                        prob = Conversions.Toint(buf);
                    }
                    else if (Strings.InStr(buf, "+") > 0 | Strings.InStr(buf, "-") > 0)
                    {
                        j = GeneralLib.MaxLng(Strings.InStr(buf, "+"), Strings.InStr(buf, "-"));
                        prob = (100d * (t.SkillLevel(Strings.Left(buf, j - 1)) + Conversions.Toint(Strings.Mid(buf, j))) / 16d);
                    }
                    else
                    {
                        prob = (100d * t.SkillLevel(buf) / 16d);
                    }

                    // 見切り
                    string argsptype1 = "特殊防御発動";
                    if (t.IsUnderSpecialPowerEffect(argsptype1))
                    {
                        prob = 100;
                    }

                    // 対象属性の判定
                    bool localIsAttributeClassified() { string argaclass1 = GeneralLib.LIndex(fdata, 3); string argaclass2 = WeaponClass(w); var ret = t.IsAttributeClassified(argaclass1, argaclass2); return ret; }

                    if (!localIsAttributeClassified())
                    {
                        prob = 0;
                    }

                    // 使用条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                    }
                    else
                    {
                        ecost = 0;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 6)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 6));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    if (t.EN < ecost | t.MainPilot().Morale < nmorale)
                    {
                        prob = 0;
                    }

                    // 能動防御は行動できなければ発動しない
                    if (t.MaxAction() == 0)
                    {
                        if (Strings.InStr(fdata, "完全自動") == 0)
                        {
                            prob = 0;
                        }
                    }

                    // オプション
                    slevel = 0d;
                    var loopTo = GeneralLib.LLength(fdata);
                    for (j = 7; j <= loopTo; j++)
                    {
                        if (prob == 0)
                        {
                            break;
                        }

                        opt = GeneralLib.LIndex(fdata, j);
                        idx = Strings.InStr(opt, "*");
                        if (idx > 0)
                        {
                            string argexpr = Strings.Mid(opt, idx + 1);
                            lv_mod = GeneralLib.StrToDbl(argexpr);
                            opt = Strings.Left(opt, idx - 1);
                        }
                        else
                        {
                            lv_mod = -1;
                        }

                        switch (t.MainPilot().SkillType(opt) ?? "")
                        {
                            case "相殺":
                                {
                                    object argIndex4 = "自動反撃";
                                    string argfdata2 = FeatureData(argIndex4);
                                    if (IsSameCategory(fdata, argfdata2) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "中和":
                                {
                                    object argIndex6 = "自動反撃";
                                    string argfdata21 = FeatureData(argIndex6);
                                    if (IsSameCategory(fdata, argfdata21) & Math.Abs((x - t.x)) + Math.Abs((y - t.y)) == 1)
                                    {
                                        object argIndex5 = "自動反撃";
                                        flevel = flevel - FeatureLevel(argIndex5);
                                        if (flevel <= 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "近接無効":
                                {
                                    string argattr3 = "武";
                                    string argattr4 = "突";
                                    string argattr5 = "接";
                                    if (IsWeaponClassifiedAs(w, argattr3) | IsWeaponClassifiedAs(w, argattr4) | IsWeaponClassifiedAs(w, argattr5))
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "手動":
                                {
                                    if (def_mode != "防御")
                                    {
                                        prob = 0;
                                    }

                                    break;
                                }

                            case "能力必要":
                                {
                                    break;
                                }
                            // スキップ
                            case "同調率":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 20d;
                                    }

                                    slevel = lv_mod * (t.SyncLevel() - 30d);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == -30 * lv_mod)
                                        {
                                            prob = 0;
                                        }
                                    }
                                    else if (slevel == -30 * lv_mod)
                                    {
                                        slevel = 0d;
                                    }

                                    break;
                                }

                            case "霊力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 10d;
                                    }

                                    slevel = lv_mod * t.PlanaLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "オーラ":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.AuraLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            case "超能力":
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.PsychicLevel();
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (lv_mod == -1)
                                    {
                                        lv_mod = 200d;
                                    }

                                    slevel = lv_mod * t.SkillLevel(opt);
                                    if (Strings.InStr(fdata, "能力必要") > 0)
                                    {
                                        if (slevel == 0d)
                                        {
                                            prob = 0;
                                        }
                                    }

                                    break;
                                }
                        }
                    }

                    // ダメージが許容範囲外であれば自動反撃を使えない
                    if (dmg > 500d * flevel + slevel)
                    {
                        prob = 0;
                    }

                    // 使用する武器を検索
                    wname2 = GeneralLib.LIndex(fdata, 2);
                    w2 = 0;
                    var loopTo1 = t.CountWeapon();
                    for (j = 1; j <= loopTo1; j++)
                    {
                        if ((t.Weapon(j).Name ?? "") == (wname2 ?? ""))
                        {
                            string argref_mode = "必要技能無視";
                            if (t.IsWeaponAvailable(j, argref_mode))
                            {
                                string argattr6 = "武";
                                string argattr7 = "突";
                                string argattr8 = "接";
                                if (IsWeaponClassifiedAs(w, argattr6) | IsWeaponClassifiedAs(w, argattr7) | IsWeaponClassifiedAs(w, argattr8))
                                {
                                    w2 = j;
                                }
                                else
                                {
                                    var argt = this;
                                    if (t.IsTargetWithinRange(j, argt))
                                    {
                                        w2 = j;
                                    }
                                }
                            }

                            break;
                        }
                    }

                    // 自動反撃発動
                    if (prob >= GeneralLib.Dice(100) & w2 > 0)
                    {
                        if (ecost != 0)
                        {
                            t.EN = t.EN - ecost;
                            var argu1 = this;
                            object argu2 = t;
                            GUI.UpdateMessageForm(argu1, argu2);
                        }

                        // メッセージ
                        if (!be_quiet)
                        {
                            string argmain_situation = "自動反撃(" + fname + ")";
                            if (t.IsMessageDefined(argmain_situation))
                            {
                                string argSituation = "自動反撃(" + fname + ")";
                                string argmsg_mode = "";
                                t.PilotMessage(argSituation, msg_mode: argmsg_mode);
                            }
                            else
                            {
                                string argSituation1 = "自動反撃";
                                string argmsg_mode1 = "";
                                t.PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                            }
                        }
                        else
                        {
                            Sound.IsWavePlayed = false;
                        }

                        // 効果音
                        if (!Sound.IsWavePlayed)
                        {
                            string argmain_situation3 = "自動反撃";
                            string argmain_situation4 = "自動反撃";
                            if (t.IsAnimationDefined(argmain_situation3, fname))
                            {
                                string argmain_situation1 = "自動反撃";
                                t.PlayAnimation(argmain_situation1, fname);
                            }
                            else if (t.IsSpecialEffectDefined(argmain_situation4, fname))
                            {
                                string argmain_situation2 = "自動反撃";
                                t.SpecialEffect(argmain_situation2, fname);
                            }
                        }

                        string argmain_situation6 = "自動反撃";
                        if (t.IsSysMessageDefined(argmain_situation6, fname))
                        {
                            string argmain_situation5 = "自動反撃";
                            string argadd_msg = "";
                            t.SysMessage(argmain_situation5, fname, add_msg: argadd_msg);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(t.Nickname + "は" + t.WeaponNickname(w2) + "で反撃した。");
                        }

                        // 自動反撃で攻撃をかける
                        t.Attack(w2, this, "自動反撃", "");
                        t = t.CurrentForm();
                        if (Status_Renamed != "出撃" | t.Status_Renamed != "出撃")
                        {
                            return;
                        }
                    }
                }

                i = (i + 1);
            }
        }


        // 追加攻撃のチェック
        public void CheckAdditionalAttack(int w, Unit t, bool be_quiet, string attack_mode, string def_mode, int dmg)
        {
            string wnskill, wname, wnickname, wclass;
            string wtype, sname;
            string wname2;
            int w2;
            int ecost, nmorale;
            string fname, fdata;
            double flevel;
            int i, j;
            int prob;
            string buf;
            bool found;
            var attack_count = default;
            wname = Weapon(w).Name;
            wnickname = WeaponNickname(w);
            wclass = WeaponClass(w);
            wnskill = Weapon(w).NecessarySkill;

            // 追加攻撃の結果形態が変化して特殊能力数が変わることがあるのでFor文は使わない
            i = 1;
            while (i <= CountFeature())
            {
                object argIndex4 = i;
                if (Feature(argIndex4) == "追加攻撃")
                {
                    object argIndex1 = i;
                    fname = FeatureName0(argIndex1);
                    if (string.IsNullOrEmpty(fname))
                    {
                        fname = "追加攻撃";
                    }

                    object argIndex2 = i;
                    fdata = FeatureData(argIndex2);
                    object argIndex3 = i;
                    flevel = FeatureLevel(argIndex3);
                    if (flevel == 1d)
                    {
                        flevel = 10000d;
                    }

                    // 追加攻撃確率の設定
                    buf = GeneralLib.LIndex(fdata, 4);
                    if (Information.IsNumeric(buf))
                    {
                        prob = Conversions.Toint(buf);
                    }
                    else if (Strings.InStr(buf, "+") > 0 | Strings.InStr(buf, "-") > 0)
                    {
                        j = GeneralLib.MaxLng(Strings.InStr(buf, "+"), Strings.InStr(buf, "-"));
                        prob = (100d * (SkillLevel(Strings.Left(buf, j - 1)) + Conversions.Toint(Strings.Mid(buf, j))) / 16d);
                    }
                    else
                    {
                        prob = (SkillLevel(buf) * 100d / 16d);
                    }

                    // 対象武器の判定
                    wtype = GeneralLib.LIndex(fdata, 3);
                    found = false;
                    if (Strings.Left(wtype, 1) == "@")
                    {
                        // 武器名または必要技能による指定
                        wtype = Strings.Mid(wtype, 2);
                        if ((wname ?? "") == (wtype ?? "") | (wnickname ?? "") == (wtype ?? ""))
                        {
                            found = true;
                        }
                        else
                        {
                            var loopTo = GeneralLib.LLength(wnskill);
                            for (j = 1; j <= loopTo; j++)
                            {
                                sname = GeneralLib.LIndex(wnskill, j);
                                if (Strings.InStr(sname, "Lv") > 0)
                                {
                                    sname = Strings.Left(sname, Strings.InStr(sname, "Lv") - 1);
                                }

                                if ((sname ?? "") == (wtype ?? ""))
                                {
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        // 属性による指定
                        switch (wtype ?? "")
                        {
                            case "全":
                                {
                                    found = true;
                                    break;
                                }

                            case "物":
                                {
                                    string argstring2 = "魔";
                                    string argstring21 = "魔武";
                                    string argstring22 = "魔突";
                                    string argstring23 = "魔接";
                                    string argstring24 = "魔銃";
                                    string argstring25 = "魔実";
                                    if (GeneralLib.InStrNotNest(wclass, argstring2) == 0 | GeneralLib.InStrNotNest(wclass, argstring21) > 0 | GeneralLib.InStrNotNest(wclass, argstring22) > 0 | GeneralLib.InStrNotNest(wclass, argstring23) > 0 | GeneralLib.InStrNotNest(wclass, argstring24) > 0 | GeneralLib.InStrNotNest(wclass, argstring25) > 0)
                                    {
                                        found = true;
                                    }

                                    break;
                                }

                            default:
                                {
                                    if (IsAttributeClassified(wtype, wclass))
                                    {
                                        found = true;
                                    }

                                    break;
                                }
                        }
                    }

                    if (!found)
                    {
                        prob = 0;
                    }

                    // 使用条件
                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 5)))
                    {
                        ecost = Conversions.Toint(GeneralLib.LIndex(fdata, 5));
                    }
                    else
                    {
                        ecost = 0;
                    }

                    if (Information.IsNumeric(GeneralLib.LIndex(fdata, 6)))
                    {
                        nmorale = Conversions.Toint(GeneralLib.LIndex(fdata, 6));
                    }
                    else
                    {
                        nmorale = 0;
                    }

                    if (EN < ecost | this.MainPilot().Morale < nmorale)
                    {
                        prob = 0;
                    }

                    // 連鎖不可
                    if (Strings.InStr(fdata, "連鎖不可") > 0)
                    {
                        if (attack_count > 0 | attack_mode == "追加攻撃")
                        {
                            prob = 0;
                        }
                    }

                    // 命中時限定
                    if (Strings.InStr(fdata, "命中時限定") > 0)
                    {
                        if (dmg <= 0)
                        {
                            prob = 0;
                        }
                    }

                    // 使用する武器を検索
                    wname2 = GeneralLib.LIndex(fdata, 2);
                    w2 = 0;
                    var loopTo1 = CountWeapon();
                    for (j = 1; j <= loopTo1; j++)
                    {
                        if ((Weapon(j).Name ?? "") == (wname2 ?? ""))
                        {
                            string argref_mode = "必要技能無視";
                            if (IsWeaponAvailable(j, argref_mode))
                            {
                                if (IsTargetWithinRange(j, t))
                                {
                                    w2 = j;
                                    break;
                                }
                            }
                        }
                    }

                    // 追加攻撃反撃発動
                    if (prob >= GeneralLib.Dice(100) & w2 > 0)
                    {
                        if (ecost != 0)
                        {
                            EN = EN - ecost;
                            var argu1 = this;
                            object argu2 = t;
                            GUI.UpdateMessageForm(argu1, argu2);
                        }

                        // メッセージ
                        if (!be_quiet)
                        {
                            string argmain_situation = "追加攻撃(" + fname + ")";
                            if (IsMessageDefined(argmain_situation))
                            {
                                string argSituation = "追加攻撃(" + fname + ")";
                                string argmsg_mode = "";
                                PilotMessage(argSituation, msg_mode: argmsg_mode);
                            }
                            else
                            {
                                string argSituation1 = "追加攻撃";
                                string argmsg_mode1 = "";
                                PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                            }
                        }

                        // 効果音
                        string argmain_situation3 = "追加攻撃";
                        string argmain_situation4 = "追加攻撃";
                        if (IsAnimationDefined(argmain_situation3, fname))
                        {
                            string argmain_situation1 = "追加攻撃";
                            PlayAnimation(argmain_situation1, fname);
                        }
                        else if (IsSpecialEffectDefined(argmain_situation4, fname))
                        {
                            string argmain_situation2 = "追加攻撃";
                            SpecialEffect(argmain_situation2, fname);
                        }

                        string argmain_situation6 = "追加攻撃";
                        if (IsSysMessageDefined(argmain_situation6, fname))
                        {
                            string argmain_situation5 = "追加攻撃";
                            string argadd_msg = "";
                            SysMessage(argmain_situation5, fname, add_msg: argadd_msg);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(Nickname + "はさらに[" + WeaponNickname(w2) + "]で攻撃を加えた。");
                        }

                        // 追加攻撃をかける
                        Attack(w2, t, "追加攻撃", def_mode);
                        t = t.CurrentForm();
                        if (Status_Renamed != "出撃" | t.Status_Renamed != "出撃")
                        {
                            return;
                        }

                        // 追加攻撃を実施したことを記録
                        attack_count = (attack_count + 1);
                    }
                }

                i = (i + 1);
            }
        }

        // 特殊能力 fdata1 と fdata2 が同じ名称か判定
        // 「中和」「相殺」用
        private bool IsSameCategory(string fdata1, string fdata2)
        {
            bool IsSameCategoryRet = default;
            string fc1, fc2;
            fc1 = GeneralLib.LIndex(fdata1, 1);
            // レベル指定を除く
            if (Strings.InStr(fc1, "Lv") > 0)
            {
                fc1 = Strings.Left(fc1, Strings.InStr(fc1, "Lv") - 1);
            }

            fc2 = GeneralLib.LIndex(fdata2, 1);
            // レベル指定を除く
            if (Strings.InStr(fc2, "Lv") > 0)
            {
                fc2 = Strings.Left(fc2, Strings.InStr(fc2, "Lv") - 1);
            }

            if ((fc1 ?? "") == (fc2 ?? ""))
            {
                IsSameCategoryRet = true;
            }

            return IsSameCategoryRet;
        }

        // クリティカルによる特殊効果
        public bool CauseEffect(int w, Unit t, string msg, string critical_type, string def_mode, bool will_die)
        {
            bool CauseEffectRet = default;
            int i, prob, j;
            string fname, wname, ch;
            string[] Skill;
            wname = WeaponNickname(w);

            // 特殊効果発生確率
            string argsptype = "特殊効果発動";
            if (IsUnderSpecialPowerEffect(argsptype))
            {
                prob = 100;
            }
            else
            {
                prob = CriticalProbability(w, t, def_mode);
            }

            if (will_die)
            {
                // メッセージ等がうっとうしいので破壊が確定している場合は
                // 通常の特殊効果をスキップ
                goto SkipNormalEffect;
            }

            // 各種効果の発動チェック

            // 捕縛攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr2 = "縛";
                string arganame = "縛";
                if (IsWeaponClassifiedAs(w, argattr2) & !t.SpecialEffectImmune(arganame))
                {
                    msg = msg + "[" + t.Nickname + "]の自由を奪った。;";
                    string argattr1 = "縛";
                    if (IsWeaponLevelSpecified(w, argattr1))
                    {
                        string argcname = "行動不能";
                        string argattr = "縛";
                        string argcdata = "";
                        t.AddCondition(argcname, WeaponLevel(w, argattr), cdata: argcdata);
                    }
                    else
                    {
                        string argcname1 = "行動不能";
                        string argcdata1 = "";
                        t.AddCondition(argcname1, 2, cdata: argcdata1);
                    }

                    critical_type = critical_type + " 捕縛";
                    CauseEffectRet = true;
                }
            }

            // ショック攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr5 = "Ｓ";
                string arganame1 = "Ｓ";
                if (IsWeaponClassifiedAs(w, argattr5) & !t.SpecialEffectImmune(arganame1))
                {
                    msg = msg + "[" + t.Nickname + "]を一時的に行動不能にした。;";
                    string argattr4 = "Ｓ";
                    if (IsWeaponLevelSpecified(w, argattr4))
                    {
                        string argcname2 = "行動不能";
                        string argattr3 = "Ｓ";
                        string argcdata2 = "";
                        t.AddCondition(argcname2, WeaponLevel(w, argattr3), cdata: argcdata2);
                    }
                    else
                    {
                        string argcname3 = "行動不能";
                        string argcdata3 = "";
                        t.AddCondition(argcname3, 1, cdata: argcdata3);
                    }

                    critical_type = critical_type + " ショック";
                    CauseEffectRet = true;
                }
            }

            // 装甲劣化攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr8 = "劣";
                string arganame2 = "劣";
                if (IsWeaponClassifiedAs(w, argattr8) & !t.SpecialEffectImmune(arganame2))
                {
                    string argtname = "装甲";
                    msg = msg + "[" + t.Nickname + "]の" + Expression.Term(argtname, t) + "を劣化させた。;";
                    string argattr7 = "劣";
                    if (IsWeaponLevelSpecified(w, argattr7))
                    {
                        string argcname4 = "装甲劣化";
                        string argattr6 = "劣";
                        string argtname1 = "装甲";
                        string argcdata4 = Expression.Term(argtname1, t) + "劣化";
                        t.AddCondition(argcname4, WeaponLevel(w, argattr6), SRC.DEFAULT_LEVEL, argcdata4);
                    }
                    else
                    {
                        string argcname5 = "装甲劣化";
                        string argtname2 = "装甲";
                        string argcdata5 = Expression.Term(argtname2, t) + "劣化";
                        t.AddCondition(argcname5, 10000, SRC.DEFAULT_LEVEL, argcdata5);
                    }

                    critical_type = critical_type + " 劣化";
                    CauseEffectRet = true;
                }
            }

            // バリア中和攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr11 = "中";
                string arganame3 = "中";
                string argfname9 = "バリア";
                string argfname10 = "バリアシールド";
                string argfname11 = "広域バリア";
                string argfname12 = "フィールド";
                string argfname13 = "アクティブフィールド";
                string argfname14 = "広域フィールド";
                string argfname15 = "プロテクション";
                string argfname16 = "アクティプロテクション";
                string argfname17 = "広域プロテクション";
                if (IsWeaponClassifiedAs(w, argattr11) & !t.SpecialEffectImmune(arganame3) & (t.IsFeatureAvailable(argfname9) | t.IsFeatureAvailable(argfname10) | t.IsFeatureAvailable(argfname11) | t.IsFeatureAvailable(argfname12) | t.IsFeatureAvailable(argfname13) | t.IsFeatureAvailable(argfname14) | t.IsFeatureAvailable(argfname15) | t.IsFeatureAvailable(argfname16) | t.IsFeatureAvailable(argfname17)))
                {
                    fname = "バリア";
                    string argfname = "バリア";
                    object argIndex10 = "バリア";
                    string argfname1 = "バリアシールド";
                    object argIndex11 = "バリアシールド";
                    string argfname2 = "広域バリア";
                    string argfname3 = "フィールド";
                    object argIndex12 = "フィールド";
                    string argfname4 = "アクティブフィールド";
                    object argIndex13 = "アクティブフィールド";
                    string argfname5 = "広域フィールド";
                    string argfname6 = "プロテクション";
                    object argIndex14 = "プロテクション";
                    string argfname7 = "アクティブプロテクション";
                    object argIndex15 = "アクティブプロテクション";
                    string argfname8 = "広域プロテクション";
                    if (t.IsFeatureAvailable(argfname) & Strings.InStr(t.FeatureData(argIndex10), "バリア無効化無効") == 0)
                    {
                        object argIndex1 = "バリア";
                        fname = t.FeatureName0(argIndex1);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "バリア";
                        }
                    }
                    else if (t.IsFeatureAvailable(argfname1) & Strings.InStr(t.FeatureData(argIndex11), "バリア無効化無効") == 0)
                    {
                        object argIndex2 = "バリアシールド";
                        fname = t.FeatureName0(argIndex2);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "バリアシールド";
                        }
                    }
                    else if (t.IsFeatureAvailable(argfname2))
                    {
                        object argIndex3 = "広域バリア";
                        fname = t.FeatureName0(argIndex3);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "広域バリア";
                        }
                    }
                    else if (t.IsFeatureAvailable(argfname3) & Strings.InStr(t.FeatureData(argIndex12), "バリア無効化無効") == 0)
                    {
                        object argIndex4 = "フィールド";
                        fname = t.FeatureName0(argIndex4);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "フィールド";
                        }
                    }
                    else if (t.IsFeatureAvailable(argfname4) & Strings.InStr(t.FeatureData(argIndex13), "バリア無効化無効") == 0)
                    {
                        object argIndex5 = "アクティブフィールド";
                        fname = t.FeatureName0(argIndex5);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "アクティブフィールド";
                        }
                    }
                    else if (t.IsFeatureAvailable(argfname5))
                    {
                        object argIndex6 = "広域フィールド";
                        fname = t.FeatureName0(argIndex6);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "広域フィールド";
                        }
                    }
                    else if (t.IsFeatureAvailable(argfname6) & Strings.InStr(t.FeatureData(argIndex14), "バリア無効化無効") == 0)
                    {
                        object argIndex7 = "プロテクション";
                        fname = t.FeatureName0(argIndex7);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "プロテクション";
                        }
                    }
                    else if (t.IsFeatureAvailable(argfname7) & Strings.InStr(t.FeatureData(argIndex15), "バリア無効化無効") == 0)
                    {
                        object argIndex8 = "アクティブプロテクション";
                        fname = t.FeatureName0(argIndex8);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "アクティブプロテクション";
                        }
                    }
                    else if (t.IsFeatureAvailable(argfname8))
                    {
                        object argIndex9 = "広域プロテクション";
                        fname = t.FeatureName0(argIndex9);
                        if (Strings.Len(fname) == 0)
                        {
                            fname = "広域プロテクション";
                        }
                    }

                    msg = msg + "[" + t.Nickname + "]の" + fname + "を無効化した。;";
                    string argattr10 = "中";
                    if (IsWeaponLevelSpecified(w, argattr10))
                    {
                        string argcname6 = "バリア無効化";
                        string argattr9 = "中";
                        string argcdata6 = "";
                        t.AddCondition(argcname6, WeaponLevel(w, argattr9), cdata: argcdata6);
                    }
                    else
                    {
                        string argcname7 = "バリア無効化";
                        string argcdata7 = "";
                        t.AddCondition(argcname7, 1, cdata: argcdata7);
                    }

                    critical_type = critical_type + " バリア中和";
                    CauseEffectRet = true;
                }
            }

            // 石化攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr14 = "石";
                string arganame4 = "石";
                if (IsWeaponClassifiedAs(w, argattr14) & !t.SpecialEffectImmune(arganame4) & t.BossRank < 0)
                {
                    msg = msg + "[" + t.Nickname + "]を石化させた。;";
                    string argattr13 = "石";
                    if (IsWeaponLevelSpecified(w, argattr13))
                    {
                        string argcname8 = "石化";
                        string argattr12 = "石";
                        string argcdata8 = "";
                        t.AddCondition(argcname8, WeaponLevel(w, argattr12), cdata: argcdata8);
                    }
                    else
                    {
                        string argcname9 = "石化";
                        string argcdata9 = "";
                        t.AddCondition(argcname9, 10000, cdata: argcdata9);
                    }

                    critical_type = critical_type + " 石化";
                    CauseEffectRet = true;
                }
            }

            // 凍結攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr17 = "凍";
                string arganame5 = "凍";
                if (IsWeaponClassifiedAs(w, argattr17) & !t.SpecialEffectImmune(arganame5))
                {
                    msg = msg + "[" + t.Nickname + "]を凍らせた。;";
                    string argattr16 = "凍";
                    if (IsWeaponLevelSpecified(w, argattr16))
                    {
                        string argcname10 = "凍結";
                        string argattr15 = "凍";
                        string argcdata10 = "";
                        t.AddCondition(argcname10, WeaponLevel(w, argattr15), cdata: argcdata10);
                    }
                    else
                    {
                        string argcname11 = "凍結";
                        string argcdata11 = "";
                        t.AddCondition(argcname11, 3, cdata: argcdata11);
                    }

                    critical_type = critical_type + " 凍結";
                    CauseEffectRet = true;
                }
            }

            // 麻痺攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr20 = "痺";
                string arganame6 = "痺";
                if (IsWeaponClassifiedAs(w, argattr20) & !t.SpecialEffectImmune(arganame6))
                {
                    msg = msg + "[" + t.Nickname + "]を麻痺させた。;";
                    string argattr19 = "痺";
                    if (IsWeaponLevelSpecified(w, argattr19))
                    {
                        string argcname12 = "麻痺";
                        string argattr18 = "痺";
                        string argcdata12 = "";
                        t.AddCondition(argcname12, WeaponLevel(w, argattr18), cdata: argcdata12);
                    }
                    else
                    {
                        string argcname13 = "麻痺";
                        string argcdata13 = "";
                        t.AddCondition(argcname13, 3, cdata: argcdata13);
                    }

                    critical_type = critical_type + " 麻痺";
                    CauseEffectRet = true;
                }
            }

            // 催眠攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr23 = "眠";
                string arganame7 = "眠";
                if (IsWeaponClassifiedAs(w, argattr23) & !t.SpecialEffectImmune(arganame7) & !(t.MainPilot().Personality == "機械"))
                {
                    msg = msg + "[" + t.MainPilot().get_Nickname(false) + "]を眠らせた。;";
                    string argattr22 = "眠";
                    if (IsWeaponLevelSpecified(w, argattr22))
                    {
                        string argcname14 = "睡眠";
                        string argattr21 = "眠";
                        string argcdata14 = "";
                        t.AddCondition(argcname14, WeaponLevel(w, argattr21), cdata: argcdata14);
                    }
                    else
                    {
                        string argcname15 = "睡眠";
                        string argcdata15 = "";
                        t.AddCondition(argcname15, 3, cdata: argcdata15);
                    }

                    critical_type = critical_type + " 睡眠";
                    CauseEffectRet = true;
                }
            }

            // 混乱攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr26 = "乱";
                string arganame8 = "乱";
                if (IsWeaponClassifiedAs(w, argattr26) & !t.SpecialEffectImmune(arganame8))
                {
                    msg = msg + "[" + t.MainPilot().get_Nickname(false) + "]を混乱させた。;";
                    string argattr25 = "乱";
                    if (IsWeaponLevelSpecified(w, argattr25))
                    {
                        string argcname16 = "混乱";
                        string argattr24 = "乱";
                        string argcdata16 = "";
                        t.AddCondition(argcname16, WeaponLevel(w, argattr24), cdata: argcdata16);
                    }
                    else
                    {
                        string argcname17 = "混乱";
                        string argcdata17 = "";
                        t.AddCondition(argcname17, 3, cdata: argcdata17);
                    }

                    critical_type = critical_type + " 混乱";
                    CauseEffectRet = true;
                }
            }

            if (!ReferenceEquals(t, this))
            {
                // 魅了攻撃
                if (prob >= GeneralLib.Dice(100))
                {
                    string argattr29 = "魅";
                    string arganame9 = "魅";
                    object argIndex16 = "魅了";
                    object argIndex17 = "憑依";
                    if (IsWeaponClassifiedAs(w, argattr29) & !t.SpecialEffectImmune(arganame9) & !t.IsConditionSatisfied(argIndex16) & !t.IsConditionSatisfied(argIndex17))
                    {
                        msg = msg + MainPilot().get_Nickname(false) + "が[" + t.MainPilot().get_Nickname(false) + "]を魅了した。;";
                        string argattr28 = "魅";
                        if (IsWeaponLevelSpecified(w, argattr28))
                        {
                            string argcname18 = "魅了";
                            string argattr27 = "魅";
                            string argcdata18 = "";
                            t.AddCondition(argcname18, WeaponLevel(w, argattr27), cdata: argcdata18);
                        }
                        else
                        {
                            string argcname19 = "魅了";
                            string argcdata19 = "";
                            t.AddCondition(argcname19, 3, cdata: argcdata19);
                        }

                        if (t.Master is object)
                        {
                            t.Master.DeleteSlave((object)t.ID);
                        }

                        AddSlave(t);
                        t.Master = this;
                        t.Mode = MainPilot().ID;
                        SRC.PList.UpdateSupportMod(t);
                        critical_type = critical_type + " 魅了";
                        CauseEffectRet = true;
                    }
                }

                // 憑依攻撃
                if (prob >= GeneralLib.Dice(100))
                {
                    string argattr32 = "憑";
                    string arganame10 = "憑";
                    object argIndex20 = "憑依";
                    if (IsWeaponClassifiedAs(w, argattr32) & !t.SpecialEffectImmune(arganame10) & !t.IsConditionSatisfied(argIndex20) & t.BossRank < 0)
                    {
                        msg = msg + MainPilot().get_Nickname(false) + "が[" + t.Nickname + "]を乗っ取った。;";
                        object argIndex19 = "魅了";
                        if (t.IsConditionSatisfied(argIndex19))
                        {
                            // 憑依の方の効果を優先する
                            object argIndex18 = "魅了";
                            t.DeleteCondition(argIndex18);
                        }

                        string argattr31 = "憑";
                        if (IsWeaponLevelSpecified(w, argattr31))
                        {
                            string argcname20 = "憑依";
                            string argattr30 = "憑";
                            string argcdata20 = "";
                            t.AddCondition(argcname20, WeaponLevel(w, argattr30), cdata: argcdata20);
                        }
                        else
                        {
                            string argcname21 = "憑依";
                            string argcdata21 = "";
                            t.AddCondition(argcname21, 10000, cdata: argcdata21);
                        }

                        if (t.Master is object)
                        {
                            t.Master.DeleteSlave((object)t.ID);
                        }

                        AddSlave(t);
                        t.Master = this;
                        SRC.PList.UpdateSupportMod(t);
                        critical_type = critical_type + " 憑依";
                        CauseEffectRet = true;
                    }
                }
            }

            // 撹乱攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr35 = "撹";
                string arganame11 = "撹";
                if (IsWeaponClassifiedAs(w, argattr35) & !t.SpecialEffectImmune(arganame11))
                {
                    msg = msg + "[" + t.Nickname + "]を撹乱した。;";
                    string argattr34 = "撹";
                    if (IsWeaponLevelSpecified(w, argattr34))
                    {
                        string argcname22 = "撹乱";
                        string argattr33 = "撹";
                        string argcdata22 = "";
                        t.AddCondition(argcname22, WeaponLevel(w, argattr33), cdata: argcdata22);
                    }
                    else
                    {
                        string argcname23 = "撹乱";
                        string argcdata23 = "";
                        t.AddCondition(argcname23, 2, cdata: argcdata23);
                    }

                    critical_type = critical_type + " 撹乱";
                    CauseEffectRet = true;
                }
            }

            // 恐怖攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr38 = "恐";
                string arganame12 = "恐";
                if (IsWeaponClassifiedAs(w, argattr38) & !t.SpecialEffectImmune(arganame12))
                {
                    msg = msg + t.MainPilot().get_Nickname(false) + "は恐怖に陥った。;";
                    string argattr37 = "恐";
                    if (IsWeaponLevelSpecified(w, argattr37))
                    {
                        string argcname24 = "恐怖";
                        string argattr36 = "恐";
                        string argcdata24 = "";
                        t.AddCondition(argcname24, WeaponLevel(w, argattr36), cdata: argcdata24);
                    }
                    else
                    {
                        string argcname25 = "恐怖";
                        string argcdata25 = "";
                        t.AddCondition(argcname25, 3, cdata: argcdata25);
                    }

                    critical_type = critical_type + " 恐怖";
                    CauseEffectRet = true;
                }
            }

            // 目潰し攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr41 = "盲";
                string arganame13 = "盲";
                if (IsWeaponClassifiedAs(w, argattr41) & !t.SpecialEffectImmune(arganame13))
                {
                    msg = msg + "[" + t.MainPilot().get_Nickname(false) + "]の視力を奪った。;";
                    string argattr40 = "盲";
                    if (IsWeaponLevelSpecified(w, argattr40))
                    {
                        string argcname26 = "盲目";
                        string argattr39 = "盲";
                        string argcdata26 = "";
                        t.AddCondition(argcname26, WeaponLevel(w, argattr39), cdata: argcdata26);
                    }
                    else
                    {
                        string argcname27 = "盲目";
                        string argcdata27 = "";
                        t.AddCondition(argcname27, 3, cdata: argcdata27);
                    }

                    critical_type = critical_type + " 盲目";
                    CauseEffectRet = true;
                }
            }

            // 毒攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr44 = "毒";
                string arganame14 = "毒";
                if (IsWeaponClassifiedAs(w, argattr44) & !t.SpecialEffectImmune(arganame14))
                {
                    msg = msg + t.Nickname + "は毒を受けた。;";
                    string argattr43 = "毒";
                    if (IsWeaponLevelSpecified(w, argattr43))
                    {
                        string argcname28 = "毒";
                        string argattr42 = "毒";
                        string argcdata28 = "";
                        t.AddCondition(argcname28, WeaponLevel(w, argattr42), cdata: argcdata28);
                    }
                    else
                    {
                        string argcname29 = "毒";
                        string argcdata29 = "";
                        t.AddCondition(argcname29, 3, cdata: argcdata29);
                    }

                    critical_type = critical_type + " 毒";
                    CauseEffectRet = true;
                }
            }

            // 攻撃封印攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr47 = "不";
                string arganame15 = "不";
                if (IsWeaponClassifiedAs(w, argattr47) & !t.SpecialEffectImmune(arganame15))
                {
                    msg = msg + "[" + t.Nickname + "]の攻撃能力を奪った。;";
                    string argattr46 = "不";
                    if (IsWeaponLevelSpecified(w, argattr46))
                    {
                        string argcname30 = "攻撃不能";
                        string argattr45 = "不";
                        string argcdata30 = "";
                        t.AddCondition(argcname30, WeaponLevel(w, argattr45), cdata: argcdata30);
                    }
                    else
                    {
                        string argcname31 = "攻撃不能";
                        string argcdata31 = "";
                        t.AddCondition(argcname31, 1, cdata: argcdata31);
                    }

                    critical_type = critical_type + " 攻撃不能";
                    CauseEffectRet = true;
                }
            }

            // 足止め攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr52 = "止";
                string arganame16 = "止";
                if (IsWeaponClassifiedAs(w, argattr52) & !t.SpecialEffectImmune(arganame16))
                {
                    msg = msg + "[" + t.Nickname + "]の動きを止めた。;";
                    if ((t.Party ?? "") != (SRC.Stage ?? ""))
                    {
                        string argattr49 = "止";
                        if (IsWeaponLevelSpecified(w, argattr49))
                        {
                            string argcname32 = "移動不能";
                            string argattr48 = "止";
                            string argcdata32 = "";
                            t.AddCondition(argcname32, (WeaponLevel(w, argattr48) + 1d), cdata: argcdata32);
                        }
                        else
                        {
                            string argcname33 = "移動不能";
                            string argcdata33 = "";
                            t.AddCondition(argcname33, 2, cdata: argcdata33);
                        }
                    }
                    else
                    {
                        string argattr51 = "止";
                        if (IsWeaponLevelSpecified(w, argattr51))
                        {
                            string argcname34 = "移動不能";
                            string argattr50 = "止";
                            string argcdata34 = "";
                            t.AddCondition(argcname34, WeaponLevel(w, argattr50), cdata: argcdata34);
                        }
                        else
                        {
                            string argcname35 = "移動不能";
                            string argcdata35 = "";
                            t.AddCondition(argcname35, 1, cdata: argcdata35);
                        }
                    }

                    critical_type = critical_type + " 移動不能";
                    CauseEffectRet = true;
                }
            }

            // 沈黙攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr55 = "黙";
                string arganame17 = "黙";
                if (IsWeaponClassifiedAs(w, argattr55) & !t.SpecialEffectImmune(arganame17))
                {
                    msg = msg + "[" + t.MainPilot().get_Nickname(false) + "]を沈黙させた。;";
                    string argattr54 = "黙";
                    if (IsWeaponLevelSpecified(w, argattr54))
                    {
                        string argcname36 = "沈黙";
                        string argattr53 = "黙";
                        string argcdata36 = "";
                        t.AddCondition(argcname36, WeaponLevel(w, argattr53), cdata: argcdata36);
                    }
                    else
                    {
                        string argcname37 = "沈黙";
                        string argcdata37 = "";
                        t.AddCondition(argcname37, 3, cdata: argcdata37);
                    }

                    critical_type = critical_type + " 沈黙";
                    CauseEffectRet = true;
                }
            }

            // 踊らせ攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr58 = "踊";
                string arganame18 = "踊";
                if (IsWeaponClassifiedAs(w, argattr58) & !t.SpecialEffectImmune(arganame18))
                {
                    msg = msg + "[" + t.Nickname + "]は突然踊りだした。;";
                    string argattr57 = "踊";
                    if (IsWeaponLevelSpecified(w, argattr57))
                    {
                        string argcname38 = "踊り";
                        string argattr56 = "踊";
                        string argcdata38 = "";
                        t.AddCondition(argcname38, WeaponLevel(w, argattr56), cdata: argcdata38);
                    }
                    else
                    {
                        string argcname39 = "踊り";
                        string argcdata39 = "";
                        t.AddCondition(argcname39, 3, cdata: argcdata39);
                    }

                    critical_type = critical_type + " 踊り";
                    CauseEffectRet = true;
                }
            }

            // 狂戦士化攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr61 = "狂";
                string arganame19 = "狂";
                if (IsWeaponClassifiedAs(w, argattr61) & !t.SpecialEffectImmune(arganame19))
                {
                    msg = msg + "[" + t.MainPilot().get_Nickname(false) + "]は狂戦士と化した。;";
                    string argattr60 = "狂";
                    if (IsWeaponLevelSpecified(w, argattr60))
                    {
                        string argcname40 = "狂戦士";
                        string argattr59 = "狂";
                        string argcdata40 = "";
                        t.AddCondition(argcname40, WeaponLevel(w, argattr59), cdata: argcdata40);
                    }
                    else
                    {
                        string argcname41 = "狂戦士";
                        string argcdata41 = "";
                        t.AddCondition(argcname41, 3, cdata: argcdata41);
                    }

                    critical_type = critical_type + " 狂戦士";
                    CauseEffectRet = true;
                }
            }

            // ゾンビ化攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr64 = "ゾ";
                string arganame20 = "ゾ";
                if (IsWeaponClassifiedAs(w, argattr64) & !t.SpecialEffectImmune(arganame20))
                {
                    msg = msg + "[" + t.Nickname + "]はゾンビと化した。;";
                    string argattr63 = "ゾ";
                    if (IsWeaponLevelSpecified(w, argattr63))
                    {
                        string argcname42 = "ゾンビ";
                        string argattr62 = "ゾ";
                        string argcdata42 = "";
                        t.AddCondition(argcname42, WeaponLevel(w, argattr62), cdata: argcdata42);
                    }
                    else
                    {
                        string argcname43 = "ゾンビ";
                        string argcdata43 = "";
                        t.AddCondition(argcname43, 10000, cdata: argcdata43);
                    }

                    critical_type = critical_type + " ゾンビ";
                    CauseEffectRet = true;
                }
            }

            // 回復能力阻害攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr67 = "害";
                string arganame21 = "害";
                if (IsWeaponClassifiedAs(w, argattr67) & !t.SpecialEffectImmune(arganame21))
                {
                    msg = msg + "[" + t.Nickname + "]の自己回復能力は封じられた。;";
                    string argattr66 = "害";
                    if (IsWeaponLevelSpecified(w, argattr66))
                    {
                        string argcname44 = "回復不能";
                        string argattr65 = "害";
                        string argcdata44 = "";
                        t.AddCondition(argcname44, WeaponLevel(w, argattr65), cdata: argcdata44);
                    }
                    else
                    {
                        string argcname45 = "回復不能";
                        string argcdata45 = "";
                        t.AddCondition(argcname45, 10000, cdata: argcdata45);
                    }

                    critical_type = critical_type + " 回復不能";
                    CauseEffectRet = true;
                }
            }

            // 特殊効果除去攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr68 = "除";
                string arganame22 = "除";
                if (IsWeaponClassifiedAs(w, argattr68) & !t.SpecialEffectImmune(arganame22))
                {
                    var loopTo = t.CountCondition();
                    for (i = 1; i <= loopTo; i++)
                    {
                        string localCondition() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                        string localCondition1() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                        string localCondition2() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                        string localCondition3() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                        int localConditionLifetime() { object argIndex1 = i; var ret = t.ConditionLifetime(argIndex1); return ret; }

                        if ((Strings.InStr(localCondition(), "付加") > 0 | Strings.InStr(localCondition1(), "強化") > 0 | Strings.InStr(localCondition2(), "ＵＰ") > 0) & localCondition3() != "ノーマルモード付加" & localConditionLifetime() > 0)
                        {
                            break;
                        }
                    }

                    if (i <= t.CountCondition())
                    {
                        msg = msg + "[" + t.Nickname + "]にかけられた特殊効果を打ち消した。;";
                        do
                        {
                            string localCondition4() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                            string localCondition5() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                            string localCondition6() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                            string localCondition7() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                            int localConditionLifetime1() { object argIndex1 = i; var ret = t.ConditionLifetime(argIndex1); return ret; }

                            if ((Strings.InStr(localCondition4(), "付加") > 0 | Strings.InStr(localCondition5(), "強化") > 0 | Strings.InStr(localCondition6(), "ＵＰ") > 0) & localCondition7() != "ノーマルモード付加" & localConditionLifetime1() > 0)
                            {
                                object argIndex21 = i;
                                t.DeleteCondition(argIndex21);
                            }
                            else
                            {
                                i = (i + 1);
                            }
                        }
                        while (i <= t.CountCondition());
                        critical_type = critical_type + " 解除";
                        CauseEffectRet = true;
                    }
                }
            }

            // 即死攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                bool localWeakness() { string arganame = WeaponClass(w); var ret = t.Weakness(arganame); return ret; }

                bool localEffective() { string arganame = WeaponClass(w); var ret = t.Effective(arganame); return ret; }

                string argattr69 = "即";
                string arganame23 = "即";
                string argsptype1 = "てかげん";
                object argIndex22 = "不死身";
                if (IsWeaponClassifiedAs(w, argattr69) & (!t.SpecialEffectImmune(arganame23) | localWeakness() | localEffective()) & t.BossRank < 0 & (!IsUnderSpecialPowerEffect(argsptype1) | this.MainPilot().Technique <= t.MainPilot().Technique) & !t.IsConditionSatisfied(argIndex22))
                {
                    critical_type = critical_type + " 即死";
                    CauseEffectRet = true;
                    return CauseEffectRet;
                }
            }

            // 死の宣告
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr72 = "告";
                string arganame24 = "告";
                if (IsWeaponClassifiedAs(w, argattr72) & !t.SpecialEffectImmune(arganame24) & t.BossRank < 0)
                {
                    msg = msg + "[" + t.MainPilot().get_Nickname(false) + "]に死の宣告が下された。;";
                    if (Strings.InStr(WeaponClass(w), "告L") > 0)
                    {
                        string argattr71 = "告";
                        if (WeaponLevel(w, argattr71) > 0d)
                        {
                            string argcname46 = "死の宣告";
                            string argattr70 = "告";
                            string argcdata46 = "";
                            t.AddCondition(argcname46, WeaponLevel(w, argattr70), cdata: argcdata46);
                        }
                        else
                        {
                            t.HP = 1;
                        }
                    }
                    else
                    {
                        string argcname47 = "死の宣告";
                        string argcdata47 = "";
                        t.AddCondition(argcname47, 1, cdata: argcdata47);
                    }

                    critical_type = critical_type + " 死の宣告";
                    CauseEffectRet = true;
                }
            }

            if (t.MainPilot().Personality != "機械")
            {
                // 気力減少攻撃
                if (prob >= GeneralLib.Dice(100))
                {
                    string argattr75 = "脱";
                    string arganame25 = "脱";
                    if (IsWeaponClassifiedAs(w, argattr75) & !t.SpecialEffectImmune(arganame25))
                    {
                        string argtname3 = "気力";
                        msg = msg + "[" + t.MainPilot().get_Nickname(false) + "]の" + Expression.Term(argtname3, t) + "を低下させた。;";
                        string argattr74 = "脱";
                        if (IsWeaponLevelSpecified(w, argattr74))
                        {
                            string argattr73 = "脱";
                            t.IncreaseMorale((-5 * WeaponLevel(w, argattr73)));
                        }
                        else
                        {
                            t.IncreaseMorale(-10);
                        }

                        critical_type = critical_type + " 脱力";
                        CauseEffectRet = true;
                    }
                }

                // 気力吸収攻撃
                if (prob >= GeneralLib.Dice(100))
                {
                    string argattr79 = "Ｄ";
                    string arganame26 = "Ｄ";
                    if (IsWeaponClassifiedAs(w, argattr79) & !t.SpecialEffectImmune(arganame26))
                    {
                        string argtname4 = "気力";
                        msg = msg + MainPilot().get_Nickname(false) + "は[" + t.MainPilot().get_Nickname(false) + "]の" + Expression.Term(argtname4, t) + "を吸い取った。;";
                        string argattr78 = "Ｄ";
                        if (IsWeaponLevelSpecified(w, argattr78))
                        {
                            string argattr76 = "Ｄ";
                            t.IncreaseMorale((-5 * WeaponLevel(w, argattr76)));
                            string argattr77 = "Ｄ";
                            IncreaseMorale((2.5d * WeaponLevel(w, argattr77)));
                        }
                        else
                        {
                            t.IncreaseMorale(-10);
                            IncreaseMorale(5);
                        }

                        critical_type = critical_type + " 気力吸収";
                        CauseEffectRet = true;
                    }
                }
            }

            // 攻撃力低下攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr82 = "低攻";
                string arganame27 = "低攻";
                if (IsWeaponClassifiedAs(w, argattr82) & !t.SpecialEffectImmune(arganame27))
                {
                    msg = msg + "[" + t.Nickname + "]の攻撃力を低下させた。;";
                    object argIndex24 = "攻撃力ＵＰ";
                    if (t.IsConditionSatisfied(argIndex24))
                    {
                        object argIndex23 = "攻撃力ＵＰ";
                        t.DeleteCondition(argIndex23);
                    }
                    else
                    {
                        string argattr81 = "低攻";
                        if (IsWeaponLevelSpecified(w, argattr81))
                        {
                            string argcname48 = "攻撃力ＤＯＷＮ";
                            string argattr80 = "低攻";
                            string argcdata48 = "";
                            t.AddCondition(argcname48, WeaponLevel(w, argattr80), cdata: argcdata48);
                        }
                        else
                        {
                            string argcname49 = "攻撃力ＤＯＷＮ";
                            string argcdata49 = "";
                            t.AddCondition(argcname49, 3, cdata: argcdata49);
                        }
                    }

                    critical_type = critical_type + " 攻撃力ＤＯＷＮ";
                    CauseEffectRet = true;
                }
            }

            // 防御力低下攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr85 = "低防";
                string arganame28 = "低防";
                if (IsWeaponClassifiedAs(w, argattr85) & !t.SpecialEffectImmune(arganame28))
                {
                    msg = msg + "[" + t.Nickname + "]の防御力を低下させた。;";
                    object argIndex26 = "防御力ＵＰ";
                    if (t.IsConditionSatisfied(argIndex26))
                    {
                        object argIndex25 = "防御力ＵＰ";
                        t.DeleteCondition(argIndex25);
                    }
                    else
                    {
                        string argattr84 = "低防";
                        if (IsWeaponLevelSpecified(w, argattr84))
                        {
                            string argcname50 = "防御力ＤＯＷＮ";
                            string argattr83 = "低防";
                            string argcdata50 = "";
                            t.AddCondition(argcname50, WeaponLevel(w, argattr83), cdata: argcdata50);
                        }
                        else
                        {
                            string argcname51 = "防御力ＤＯＷＮ";
                            string argcdata51 = "";
                            t.AddCondition(argcname51, 3, cdata: argcdata51);
                        }
                    }

                    critical_type = critical_type + " 防御力ＤＯＷＮ";
                    CauseEffectRet = true;
                }
            }

            // 運動性低下攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr88 = "低運";
                string arganame29 = "低運";
                if (IsWeaponClassifiedAs(w, argattr88) & !t.SpecialEffectImmune(arganame29))
                {
                    string argtname5 = "運動性";
                    msg = msg + "[" + t.Nickname + "]の" + Expression.Term(argtname5, t) + "を低下させた。;";
                    object argIndex28 = "運動性ＵＰ";
                    if (t.IsConditionSatisfied(argIndex28))
                    {
                        object argIndex27 = "運動性ＵＰ";
                        t.DeleteCondition(argIndex27);
                    }
                    else
                    {
                        string argattr87 = "低運";
                        if (IsWeaponLevelSpecified(w, argattr87))
                        {
                            string argcname52 = "運動性ＤＯＷＮ";
                            string argattr86 = "低運";
                            string argtname6 = "運動性";
                            string argcdata52 = Expression.Term(argtname6, t) + "ＤＯＷＮ";
                            t.AddCondition(argcname52, WeaponLevel(w, argattr86), SRC.DEFAULT_LEVEL, argcdata52);
                        }
                        else
                        {
                            string argcname53 = "運動性ＤＯＷＮ";
                            string argtname7 = "運動性";
                            string argcdata53 = Expression.Term(argtname7, t) + "ＤＯＷＮ";
                            t.AddCondition(argcname53, 3, SRC.DEFAULT_LEVEL, argcdata53);
                        }
                    }

                    critical_type = critical_type + " 運動性ＤＯＷＮ";
                    CauseEffectRet = true;
                }
            }

            // 移動力低下攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr91 = "低移";
                string arganame30 = "低移";
                if (IsWeaponClassifiedAs(w, argattr91) & !t.SpecialEffectImmune(arganame30))
                {
                    string argtname8 = "移動力";
                    msg = msg + "[" + t.Nickname + "]の" + Expression.Term(argtname8, t) + "を低下させた。;";
                    object argIndex30 = "移動力ＵＰ";
                    if (t.IsConditionSatisfied(argIndex30))
                    {
                        object argIndex29 = "移動力ＵＰ";
                        t.DeleteCondition(argIndex29);
                    }
                    else
                    {
                        string argattr90 = "低移";
                        if (IsWeaponLevelSpecified(w, argattr90))
                        {
                            string argcname54 = "移動力ＤＯＷＮ";
                            string argattr89 = "低移";
                            string argtname9 = "移動力";
                            string argcdata54 = Expression.Term(argtname9, t) + "ＤＯＷＮ";
                            t.AddCondition(argcname54, WeaponLevel(w, argattr89), SRC.DEFAULT_LEVEL, argcdata54);
                        }
                        else
                        {
                            string argcname55 = "移動力ＤＯＷＮ";
                            string argtname10 = "移動力";
                            string argcdata55 = Expression.Term(argtname10, t) + "ＤＯＷＮ";
                            t.AddCondition(argcname55, 3, SRC.DEFAULT_LEVEL, argcdata55);
                        }
                    }

                    critical_type = critical_type + " 移動力ＤＯＷＮ";
                    CauseEffectRet = true;
                }
            }

            // ＨＰ減衰攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr96 = "衰";
                string arganame31 = "衰";
                if (IsWeaponClassifiedAs(w, argattr96) & !t.SpecialEffectImmune(arganame31))
                {
                    string argtname11 = "ＨＰ";
                    msg = msg + "[" + t.Nickname + "]の" + Expression.Term(argtname11, t) + "を";
                    if (t.BossRank >= 0)
                    {
                        string argattr92 = "衰";
                        string argattr93 = "衰";
                        switch (WeaponLevel(w, argattr93))
                        {
                            case 1:
                                {
                                    t.HP = t.HP * 7 / 8;
                                    msg = msg + "12.5%";
                                    break;
                                }

                            case 2:
                                {
                                    t.HP = t.HP * 3 / 4;
                                    msg = msg + "25%";
                                    break;
                                }

                            case 3:
                                {
                                    t.HP = t.HP / 2;
                                    msg = msg + "50%";
                                    break;
                                }
                        }
                    }
                    else
                    {
                        string argattr94 = "衰";
                        string argattr95 = "衰";
                        switch (WeaponLevel(w, argattr95))
                        {
                            case 1:
                                {
                                    t.HP = t.HP * 3 / 4;
                                    msg = msg + "25%";
                                    break;
                                }

                            case 2:
                                {
                                    t.HP = t.HP / 2;
                                    msg = msg + "50%";
                                    break;
                                }

                            case 3:
                                {
                                    t.HP = t.HP / 4;
                                    msg = msg + "75%";
                                    break;
                                }
                        }
                    }

                    msg = msg + "減少させた。;";
                    critical_type = critical_type + " 減衰";
                    CauseEffectRet = true;
                }
            }

            // ＥＮ減衰攻撃
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr101 = "滅";
                string arganame32 = "滅";
                if (IsWeaponClassifiedAs(w, argattr101) & !t.SpecialEffectImmune(arganame32))
                {
                    string argtname12 = "ＥＮ";
                    msg = msg + "[" + t.Nickname + "]の" + Expression.Term(argtname12, t) + "を";
                    if (t.BossRank >= 0)
                    {
                        string argattr97 = "滅";
                        string argattr98 = "滅";
                        switch (WeaponLevel(w, argattr98))
                        {
                            case 1:
                                {
                                    t.EN = t.EN * 7 / 8;
                                    msg = msg + "12.5%";
                                    break;
                                }

                            case 2:
                                {
                                    t.EN = t.EN * 3 / 4;
                                    msg = msg + "25%";
                                    break;
                                }

                            case 3:
                                {
                                    t.EN = t.EN / 2;
                                    msg = msg + "50%";
                                    break;
                                }
                        }
                    }
                    else
                    {
                        string argattr99 = "滅";
                        string argattr100 = "滅";
                        switch (WeaponLevel(w, argattr100))
                        {
                            case 1:
                                {
                                    t.EN = t.EN * 3 / 4;
                                    msg = msg + "25%";
                                    break;
                                }

                            case 2:
                                {
                                    t.EN = t.EN / 2;
                                    msg = msg + "50%";
                                    break;
                                }

                            case 3:
                                {
                                    t.EN = t.EN / 4;
                                    msg = msg + "75%";
                                    break;
                                }
                        }
                    }

                    msg = msg + "減少させた。;";
                    critical_type = critical_type + " 減衰";
                    CauseEffectRet = true;
                }
            }

            // 弱点付加属性（弱が存在するだけループ）
            string argstring2 = "弱";
            i = GeneralLib.InStrNotNest(strWeaponClass[w], argstring2);
            while (i > 0)
            {
                ch = Strings.Mid(GeneralLib.GetClassBundle(strWeaponClass[w], i), 2);
                if (prob >= GeneralLib.Dice(100))
                {
                    if (!t.SpecialEffectImmune(ch))
                    {
                        msg = msg + "[" + t.Nickname + "]は[" + ch + "]属性に弱くなった。;";
                        string argattr102 = "弱" + ch;
                        if (IsWeaponLevelSpecified(w, argattr102))
                        {
                            double localWeaponLevel() { string argattr = "弱" + ch; var ret = WeaponLevel(w, argattr); return ret; }

                            string argcname56 = ch + "属性弱点付加";
                            string argcdata56 = "";
                            t.AddCondition(argcname56, localWeaponLevel(), cdata: argcdata56);
                        }
                        else
                        {
                            string argcname57 = ch + "属性弱点付加";
                            string argcdata57 = "";
                            t.AddCondition(argcname57, 3, cdata: argcdata57);
                        }

                        critical_type = critical_type + " " + ch + "属性弱点付加";
                        CauseEffectRet = true;
                    }
                }

                string argstring21 = "弱";
                i = GeneralLib.InStrNotNest(strWeaponClass[w], argstring21, (i + 1));
            }

            // 有効付加属性
            string argstring22 = "効";
            i = GeneralLib.InStrNotNest(strWeaponClass[w], argstring22);
            while (i > 0)
            {
                ch = Strings.Mid(GeneralLib.GetClassBundle(strWeaponClass[w], i), 2);
                if (prob >= GeneralLib.Dice(100))
                {
                    // 既に相手が指定属性を弱点として持っている場合無効
                    if (!t.Weakness(ch) & !t.SpecialEffectImmune(ch))
                    {
                        msg = msg + "[" + t.Nickname + "]に[" + ch + "]属性が有効になった。;";
                        string argattr103 = "効" + ch;
                        if (IsWeaponLevelSpecified(w, argattr103))
                        {
                            double localWeaponLevel1() { string argattr = "効" + ch; var ret = WeaponLevel(w, argattr); return ret; }

                            string argcname58 = ch + "属性有効付加";
                            string argcdata58 = "";
                            t.AddCondition(argcname58, localWeaponLevel1(), cdata: argcdata58);
                        }
                        else
                        {
                            string argcname59 = ch + "属性有効付加";
                            string argcdata59 = "";
                            t.AddCondition(argcname59, 3, cdata: argcdata59);
                        }

                        critical_type = critical_type + " " + ch + "属性有効付加";
                        CauseEffectRet = true;
                    }
                }

                string argstring23 = "効";
                i = GeneralLib.InStrNotNest(strWeaponClass[w], argstring23, (i + 1));
            }

            // 属性使用禁止攻撃
            string argstring24 = "剋";
            i = GeneralLib.InStrNotNest(strWeaponClass[w], argstring24);
            while (i > 0)
            {
                ch = Strings.Mid(GeneralLib.GetClassBundle(strWeaponClass[w], i), 2);
                if (prob >= GeneralLib.Dice(100))
                {
                    if (!t.SpecialEffectImmune(ch))
                    {
                        Skill = new string[1];
                        switch (ch ?? "")
                        {
                            case "オ":
                                {
                                    Skill[0] = "オーラ";
                                    break;
                                }

                            case "超":
                                {
                                    Skill[0] = "超能力";
                                    break;
                                }

                            case "シ":
                                {
                                    Skill[0] = "同調率";
                                    break;
                                }

                            case "サ":
                                {
                                    string argsname = "超感覚";
                                    string argsname1 = "知覚強化";
                                    string argsname2 = "超感覚";
                                    string argsname3 = "知覚強化";
                                    if (t.MainPilot().IsSkillAvailable(argsname) & t.MainPilot(Conversions.ToBoolean(0)).IsSkillAvailable(argsname1))
                                    {
                                        Skill = new string[2];
                                        Skill[0] = "超感覚";
                                        Skill[1] = "知覚強化";
                                    }
                                    else if (t.MainPilot().IsSkillAvailable(argsname2))
                                    {
                                        Skill[0] = "超感覚";
                                    }
                                    else if (t.MainPilot().IsSkillAvailable(argsname3))
                                    {
                                        Skill[0] = "知覚強化";
                                    }
                                    else
                                    {
                                        Skill = new string[2];
                                        Skill[0] = "超感覚";
                                        Skill[1] = "知覚強化";
                                    }

                                    break;
                                }

                            case "霊":
                                {
                                    Skill[0] = "霊力";
                                    break;
                                }

                            case "術":
                                {
                                    Skill[0] = "術";
                                    break;
                                }

                            case "技":
                                {
                                    Skill[0] = "技";
                                    break;
                                }

                            default:
                                {
                                    Skill[0] = "";
                                    break;
                                }
                        }

                        var loopTo1 = Information.UBound(Skill);
                        for (j = 0; j <= loopTo1; j++)
                        {
                            if (Strings.Len(Skill[j]) > 0)
                            {
                                var tmp = Skill;
                                object argIndex31 = tmp[j];
                                fname = t.MainPilot().SkillName0(argIndex31);
                                if (fname == "非表示")
                                {
                                    fname = Skill[j];
                                }
                            }
                            else
                            {
                                Skill[0] = ch + "属性";
                                fname = ch + "属性";
                            }

                            msg = msg + "[" + t.Nickname + "]は" + fname + "が使用出来なくなった。;";
                            string argattr104 = "剋" + ch;
                            if (IsWeaponLevelSpecified(w, argattr104))
                            {
                                double localWeaponLevel2() { string argattr = "剋" + ch; var ret = WeaponLevel(w, argattr); return ret; }

                                string argcname60 = Skill[j] + "使用不能";
                                string argcdata60 = "";
                                t.AddCondition(argcname60, localWeaponLevel2(), cdata: argcdata60);
                            }
                            else
                            {
                                string argcname61 = Skill[j] + "使用不能";
                                string argcdata61 = "";
                                t.AddCondition(argcname61, 3, cdata: argcdata61);
                            }

                            critical_type = critical_type + " " + Skill[j] + "使用不能";
                        }

                        CauseEffectRet = true;
                    }
                }

                string argstring25 = "剋";
                i = GeneralLib.InStrNotNest(strWeaponClass[w], argstring25, (i + 1));
            }

            SkipNormalEffect:
            ;


            // これ以降の効果は敵が破壊される場合も発動する

            // 盗み
            int prev_money;
            string iname;
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr105 = "盗";
                string arganame33 = "盗";
                object argIndex36 = "すかんぴん";
                if (IsWeaponClassifiedAs(w, argattr105) & !t.SpecialEffectImmune(arganame33) & !t.IsConditionSatisfied(argIndex36) & (Party == "味方" & t.Party0 != "味方" | Party != "味方" & t.Party0 == "味方"))
                {
                    string argfname18 = "レアアイテム所有";
                    string argfname19 = "アイテム所有";
                    if (t.Party0 == "味方")
                    {
                        // 味方の場合は必ず資金が減少する
                        prev_money = SRC.Money;
                        SRC.IncrMoney(-t.Value / 2);
                        if (this.Weapon(w).Power > 0)
                        {
                            string argtname13 = "資金";
                            msg = msg + "[" + t.Nickname + "]は" + Expression.Term(argtname13, t) + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_money - SRC.Money) + "を奪い取られた。;";
                        }
                        else
                        {
                            string argtname14 = "資金";
                            msg = msg + "[" + t.Nickname + "]は" + Expression.Term(argtname14, t) + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_money - SRC.Money) + "を盗まれた。;";
                        }

                        critical_type = critical_type + " 盗み";
                        CauseEffectRet = true;
                    }
                    else if (GeneralLib.Dice(8) == 1 & t.IsFeatureAvailable(argfname18))
                    {
                        // レアアイテムを盗んだ場合
                        object argIndex32 = "レアアイテム所有";
                        iname = t.FeatureData(argIndex32);
                        object argIndex33 = iname;
                        if (SRC.IDList.IsDefined(argIndex33))
                        {
                            SRC.IList.Add(iname);
                            if (this.Weapon(w).Power > 0)
                            {
                                ItemData localItem() { object argIndex1 = iname; var ret = SRC.IDList.Item(argIndex1); return ret; }

                                msg = msg + "[" + t.Nickname + "]から" + localItem().Nickname + "を奪い取った。;";
                            }
                            else
                            {
                                ItemData localItem1() { object argIndex1 = iname; var ret = SRC.IDList.Item(argIndex1); return ret; }

                                msg = msg + "[" + t.Nickname + "]から" + localItem1().Nickname + "を盗んだ。;";
                            }
                        }
                        else
                        {
                            string argmsg = t.Name + "の所有アイテム「" + iname + "」のデータが見つかりません";
                            GUI.ErrorMessage(argmsg);
                        }

                        critical_type = critical_type + " 盗み";
                        CauseEffectRet = true;
                    }
                    else if (t.IsFeatureAvailable(argfname19))
                    {
                        // アイテムを盗んだ場合
                        object argIndex34 = "アイテム所有";
                        iname = t.FeatureData(argIndex34);
                        object argIndex35 = iname;
                        if (SRC.IDList.IsDefined(argIndex35))
                        {
                            SRC.IList.Add(iname);
                            if (this.Weapon(w).Power > 0)
                            {
                                ItemData localItem2() { object argIndex1 = iname; var ret = SRC.IDList.Item(argIndex1); return ret; }

                                msg = msg + "[" + t.Nickname + "]から" + localItem2().Nickname + "を奪い取った。;";
                            }
                            else
                            {
                                ItemData localItem3() { object argIndex1 = iname; var ret = SRC.IDList.Item(argIndex1); return ret; }

                                msg = msg + "[" + t.Nickname + "]から" + localItem3().Nickname + "を盗んだ。;";
                            }
                        }
                        else
                        {
                            string argmsg1 = t.Name + "の所有アイテム「" + iname + "」のデータが見つかりません";
                            GUI.ErrorMessage(argmsg1);
                        }

                        critical_type = critical_type + " 盗み";
                        CauseEffectRet = true;
                    }
                    else if (t.Value > 0)
                    {
                        // 資金を盗んだ場合
                        SRC.IncrMoney(t.Value / 4);
                        if (this.Weapon(w).Power > 0)
                        {
                            string argtname15 = "資金";
                            msg = msg + "[" + t.Nickname + "]から" + Expression.Term(argtname15, t) + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(t.Value / 4) + "を奪い取った。;";
                        }
                        else
                        {
                            string argtname16 = "資金";
                            msg = msg + "[" + t.Nickname + "]から" + Expression.Term(argtname16, t) + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(t.Value / 4) + "を盗んだ。;";
                        }

                        critical_type = critical_type + " 盗み";
                        CauseEffectRet = true;
                    }

                    // 一度盗んだユニットからは再度盗むことは出来ない
                    if (t.Party0 != "味方")
                    {
                        string argcname62 = "すかんぴん";
                        string argcdata62 = "非表示";
                        t.AddCondition(argcname62, -1, 0d, argcdata62);
                    }
                }
            }

            // ラーニング
            string sname, stype, vname;
            if (prob >= GeneralLib.Dice(100))
            {
                string argattr106 = "習";
                string argfname20 = "ラーニング可能技";
                if (IsWeaponClassifiedAs(w, argattr106) & t.IsFeatureAvailable(argfname20) & Party0 == "味方")
                {
                    object argIndex37 = "ラーニング可能技";
                    string arglist = t.FeatureData(argIndex37);
                    stype = GeneralLib.LIndex(arglist, 1);
                    object argIndex39 = "ラーニング可能技";
                    string arglist2 = t.FeatureData(argIndex39);
                    switch (GeneralLib.LIndex(arglist2, 2) ?? "")
                    {
                        case "表示":
                        case var @case when @case == "":
                            {
                                sname = stype;
                                break;
                            }

                        default:
                            {
                                object argIndex38 = "ラーニング可能技";
                                string arglist1 = t.FeatureData(argIndex38);
                                sname = GeneralLib.LIndex(arglist1, 2);
                                break;
                            }
                    }

                    if (!MainPilot().IsSkillAvailable(stype))
                    {
                        msg = msg + "[" + MainPilot().get_Nickname(false) + "]は「" + sname + "」を習得した。;";
                        vname = "Ability(" + MainPilot().ID + ")";
                        if (!Expression.IsGlobalVariableDefined(vname))
                        {
                            Expression.DefineGlobalVariable(vname);
                            // UPGRADE_WARNING: オブジェクト GlobalVariableList.Item().StringValue の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                            Event_Renamed.GlobalVariableList[vname].StringValue = stype;
                        }
                        else
                        {
                            {
                                var withBlock = Event_Renamed.GlobalVariableList[vname];
                                // UPGRADE_WARNING: オブジェクト GlobalVariableList.Item(vname).StringValue の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                                // UPGRADE_WARNING: オブジェクト GlobalVariableList.Item().StringValue の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                                withBlock.StringValue = Operators.ConcatenateObject(Operators.ConcatenateObject(withBlock.StringValue, " "), stype);
                            }
                        }

                        vname = "Ability(" + MainPilot().ID + "," + stype + ")";
                        if (!Expression.IsGlobalVariableDefined(vname))
                        {
                            Expression.DefineGlobalVariable(vname);
                        }

                        object argIndex40 = "ラーニング可能技";
                        string arglist3 = t.FeatureData(argIndex40);
                        if (GeneralLib.LLength(arglist3) == 1)
                        {
                            string argnew_value = "-1 非表示";
                            Expression.SetVariableAsString(vname, argnew_value);
                        }
                        else if ((stype ?? "") != (sname ?? ""))
                        {
                            string argnew_value2 = "-1 " + sname;
                            Expression.SetVariableAsString(vname, argnew_value2);
                        }
                        else
                        {
                            string argnew_value1 = "-1";
                            Expression.SetVariableAsString(vname, argnew_value1);
                        }

                        critical_type = critical_type + " ラーニング";
                        CauseEffectRet = true;
                    }
                }
            }

            return CauseEffectRet;
        }

        // 吹き飛ばしチェック
        public bool CheckBlowAttack(int w, Unit t, int dmg, string msg, string attack_mode, string def_mode, string critical_type)
        {
            bool CheckBlowAttackRet = default;
            int tx, ty;
            int sx, sy;
            int nx, ny;
            int dx = default, dy = default;
            var is_crashed = default(bool);
            var t2 = default(Unit);
            int dmg2, orig_dmg;
            int wlevel;
            int i, prob;
            var is_critical = default(bool);
            TerrainData td;

            // 特殊効果無効？
            string argattr = "吹";
            string arganame = "吹";
            if (IsWeaponClassifiedAs(w, argattr) & t.SpecialEffectImmune(arganame))
            {
                return CheckBlowAttackRet;
            }

            string argattr1 = "Ｋ";
            string arganame1 = "Ｋ";
            if (IsWeaponClassifiedAs(w, argattr1) & t.SpecialEffectImmune(arganame1))
            {
                return CheckBlowAttackRet;
            }

            string argattr2 = "吹";
            string argattr3 = "Ｋ";
            wlevel = GeneralLib.MaxLng(WeaponLevel(w, argattr2), WeaponLevel(w, argattr3));

            // 特殊効果発生確率
            string argsptype = "特殊効果発動";
            if (IsUnderSpecialPowerEffect(argsptype))
            {
                prob = 100;
            }
            else
            {
                prob = CriticalProbability(w, t, def_mode);
            }

            // 吹き飛ばし距離の算出
            if (prob >= GeneralLib.Dice(100))
            {
                wlevel = (wlevel + 1);
                is_critical = true;
            }

            // 吹き飛ばし距離が０であればここで終わり
            if (wlevel == 0)
            {
                return CheckBlowAttackRet;
            }

            // サイズによる制限
            if (t.Size == "XL")
            {
                return CheckBlowAttackRet;
            }

            string argattr4 = "Ｋ";
            if (IsWeaponClassifiedAs(w, argattr4))
            {
                switch (Size ?? "")
                {
                    case "SS":
                        {
                            if (t.Size != "SS" & t.Size != "S")
                            {
                                return CheckBlowAttackRet;
                            }

                            break;
                        }

                    case "S":
                        {
                            if (t.Size == "L" | t.Size == "LL")
                            {
                                return CheckBlowAttackRet;
                            }

                            break;
                        }

                    case "M":
                        {
                            if (t.Size == "LL")
                            {
                                return CheckBlowAttackRet;
                            }

                            break;
                        }
                }
            }

            // 固定物は動かせない
            string argfname = "地形ユニット";
            if (t.IsFeatureAvailable(argfname))
            {
                return CheckBlowAttackRet;
            }

            if (t.Data.Speed == 0 & t.Speed == 0)
            {
                return CheckBlowAttackRet;
            }

            // 自分自身は吹き飛ばせない
            if (ReferenceEquals(t, this))
            {
                return CheckBlowAttackRet;
            }

            // 吹き飛ばしの中心座標を設定
            string argattr5 = "Ｍ投";
            if (WeaponLevel(w, argattr5) > 0d)
            {
                sx = Commands.SelectedX;
                sy = Commands.SelectedY;
            }
            else
            {
                sx = x;
                sy = y;
            }

            // 吹き飛ばされる場所を設定
            tx = t.x;
            ty = t.y;
            string argattr6 = "Ｍ移";
            if (!IsWeaponClassifiedAs(w, argattr6))
            {
                if (Math.Abs((sx - tx)) > Math.Abs((sy - ty)))
                {
                    if (sx > tx)
                    {
                        dx = -1;
                    }
                    else
                    {
                        dx = 1;
                    }
                }
                else if (Math.Abs((sx - tx)) < Math.Abs((sy - ty)))
                {
                    if (sy > ty)
                    {
                        dy = -1;
                    }
                    else
                    {
                        dy = 1;
                    }
                }
                else if (GeneralLib.Dice(2) == 1)
                {
                    if (sx > tx)
                    {
                        dx = -1;
                    }
                    else
                    {
                        dx = 1;
                    }
                }
                else if (sy > ty)
                {
                    dy = -1;
                }
                else
                {
                    dy = 1;
                }
            }
            // Ｍ移の場合は横に弾き飛ばす形になる
            else if (Math.Abs((sx - tx)) > Math.Abs((sy - ty)))
            {
                if (GeneralLib.Dice(2) == 1)
                {
                    dy = 1;
                }
                else
                {
                    dy = -1;
                }
            }
            else if (Math.Abs((sx - tx)) < Math.Abs((sy - ty)))
            {
                if (GeneralLib.Dice(2) == 1)
                {
                    dx = 1;
                }
                else
                {
                    dx = -1;
                }
            }
            else if (sx == tx & sx == ty)
            {
                switch (GeneralLib.Dice(4))
                {
                    case 1:
                        {
                            dx = -1;
                            break;
                        }

                    case 2:
                        {
                            dx = 1;
                            break;
                        }

                    case 3:
                        {
                            dy = -1;
                            break;
                        }

                    case 4:
                        {
                            dy = 1;
                            break;
                        }
                }
            }
            else if (GeneralLib.Dice(2) == 1)
            {
                if (sx > tx)
                {
                    dx = 1;
                }
                else
                {
                    dx = -1;
                }
            }
            else if (sy > ty)
            {
                dy = 1;
            }
            else
            {
                dy = -1;
            }

            // 吹き飛ばし後の位置の計算と、衝突の判定
            nx = tx;
            ny = ty;
            i = 1;
            while (i <= wlevel)
            {
                nx = (nx + dx);
                ny = (ny + dy);

                // 吹き飛ばしコストに地形効果【摩擦】の補正を加える
                // MOD START 240a
                // Set td = TDList.Item(MapData(X, Y, 0))
                switch (Map.MapData[x, y, Map.MapDataIndex.BoxType])
                {
                    case Map.BoxTypes.Under:
                    case Map.BoxTypes.UpperBmpOnly:
                        {
                            td = SRC.TDList.Item(Map.MapData[x, y, Map.MapDataIndex.TerrainType]);
                            break;
                        }

                    default:
                        {
                            td = SRC.TDList.Item(Map.MapData[x, y, Map.MapDataIndex.LayerType]);
                            break;
                        }
                }
                // MOD START 240a
                if (t.Area == "地上" & (td.Class_Renamed == "陸" | td.Class_Renamed == "屋内" | td.Class_Renamed == "月面") | t.Area == "水中" & (td.Class_Renamed == "水" | td.Class_Renamed == "深水") | (t.Area ?? "") == (Class_Renamed ?? ""))
                {
                    string argfname1 = "摩擦";
                    if (td.IsFeatureAvailable(argfname1))
                    {
                        object argIndex1 = "摩擦";
                        i = (i + td.FeatureLevel(argIndex1));
                    }
                }

                // マップ端
                if (nx < 1 | Map.MapWidth < nx | ny < 1 | Map.MapHeight < ny)
                {
                    nx = (nx - dx);
                    ny = (ny - dy);
                    break;
                }

                // 進入不能？
                if (!t.IsAbleToEnter(nx, ny) | Map.MapDataForUnit[nx, ny] is object)
                {
                    is_crashed = true;
                    if (Map.MapDataForUnit[nx, ny] is object)
                    {
                        t2 = Map.MapDataForUnit[nx, ny];
                    }

                    nx = (nx - dx);
                    ny = (ny - dy);
                    break;
                }

                // 障害物あり？
                if (t.Area != "空中")
                {
                    if (Map.TerrainHasObstacle(nx, ny))
                    {
                        is_crashed = true;
                    }
                }

                i = (i + 1);
            }

            // ユニットを強制移動
            if (tx != nx | ty != ny)
            {
                GUI.EraseUnitBitmap(tx, ty);
                string argmain_situation1 = "吹き飛ばし";
                string argsub_situation1 = "";
                if (IsAnimationDefined(argmain_situation1, sub_situation: argsub_situation1))
                {
                    string argmain_situation = "吹き飛ばし";
                    string argsub_situation = "";
                    PlayAnimation(argmain_situation, sub_situation: argsub_situation);
                }
                else
                {
                    GUI.MoveUnitBitmap(t, tx, ty, nx, ny, 20);
                }

                t.Jump(nx, ny, false);
            }

            // 激突
            orig_dmg = dmg;
            if (is_crashed)
            {
                dmg = orig_dmg + GeneralLib.MaxLng((orig_dmg - t.get_Armor("") * t.MainPilot().Morale / 100) / 2, 0);

                // 最低ダメージ
                if (def_mode == "防御")
                {
                    dmg = GeneralLib.MaxLng(dmg, 5);
                }
                else
                {
                    dmg = GeneralLib.MaxLng(dmg, 10);
                }

                string argwave_name = "Crash.wav";
                Sound.PlayWave(argwave_name);
            }

            // 巻き添え
            if (t2 is object & !ReferenceEquals(t2, t))
            {
                dmg2 = (orig_dmg - t2.get_Armor("") * t2.MainPilot().Morale / 100) / 2;

                // 最低ダメージ
                if (dmg2 < 10)
                {
                    dmg2 = 10;
                }

                // 無敵の場合はダメージを受けない
                object argIndex2 = "無敵";
                if (t2.IsConditionSatisfied(argIndex2))
                {
                    dmg2 = 0;
                }

                // 各種処理がややこしくなるので巻き添えではユニットを破壊しない
                if (t2.HP - dmg2 < 10)
                {
                    dmg2 = t2.HP - 10;
                }

                // ダメージ適用
                if (dmg2 > 0)
                {
                    t2.HP = t2.HP - dmg2;
                }
                else
                {
                    dmg2 = 0;
                }

                // ダメージ量表示
                string argoname = "ダメージ表示無効";
                if (!Expression.IsOptionDefined(argoname) | attack_mode == "マップ攻撃")
                {
                    string argmsg = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(dmg2);
                    GUI.DrawSysString(t2.x, t2.y, argmsg, true);
                }

                // 特殊能力「不安定」による暴走チェック
                string argfname2 = "不安定";
                if (t2.IsFeatureAvailable(argfname2))
                {
                    object argIndex3 = "暴走";
                    if (t2.HP <= t2.MaxHP / 4 & !t2.IsConditionSatisfied(argIndex3))
                    {
                        string argcname = "暴走";
                        string argcdata = "";
                        t2.AddCondition(argcname, -1, cdata: argcdata);
                        t2.Update();
                    }
                }

                // ダメージを受ければ眠りからさめる
                object argIndex5 = "睡眠";
                string argattr7 = "眠";
                if (t2.IsConditionSatisfied(argIndex5) & !IsWeaponClassifiedAs(w, argattr7))
                {
                    object argIndex4 = "睡眠";
                    t2.DeleteCondition(argIndex4);
                }
            }

            msg = t.Nickname + "を吹き飛ばした。;" + msg;
            if (is_critical)
            {
                msg = "クリティカル！ " + msg;
            }

            // 吹き飛ばしが発生したことを伝える
            critical_type = critical_type + " 吹き飛ばし";
            CheckBlowAttackRet = true;
            return CheckBlowAttackRet;
        }

        // 引き寄せチェック
        public bool CheckDrawAttack(int w, Unit t, string msg, string def_mode, string critical_type)
        {
            bool CheckDrawAttackRet = default;
            int tx = default, ty = default;
            int sx, sy;
            int nx, ny;
            int prob;

            // 特殊効果無効？
            string arganame = "引";
            if (t.SpecialEffectImmune(arganame))
            {
                return CheckDrawAttackRet;
            }

            // 既に隣接している？
            if (Math.Abs((x - tx)) + Math.Abs((y - ty)) == 1)
            {
                return CheckDrawAttackRet;
            }

            // サイズによる制限
            if (t.Size == "XL")
            {
                return CheckDrawAttackRet;
            }

            // 固定物は動かせない
            string argfname = "地形ユニット";
            if (t.IsFeatureAvailable(argfname))
            {
                return CheckDrawAttackRet;
            }

            if (t.Data.Speed == 0 & t.Speed == 0)
            {
                return CheckDrawAttackRet;
            }

            // 自分自身は引き寄せない
            if (ReferenceEquals(t, this))
            {
                return CheckDrawAttackRet;
            }

            // 特殊効果発生確率
            string argsptype = "特殊効果発動";
            if (IsUnderSpecialPowerEffect(argsptype))
            {
                prob = 100;
            }
            else
            {
                prob = CriticalProbability(w, t, def_mode);
            }

            // 引き寄せ発生？
            if (GeneralLib.Dice(100) > prob)
            {
                return CheckDrawAttackRet;
            }

            // 引き寄せの中心座標を設定
            string argattr = "Ｍ投";
            if (WeaponLevel(w, argattr) > 0d)
            {
                sx = Commands.SelectedX;
                sy = Commands.SelectedY;
            }
            else
            {
                sx = x;
                sy = y;
            }

            // ターゲットの座標
            tx = t.x;
            ty = t.y;

            // 既に引き寄せの中心位置にいる？
            if (sx == tx & sy == ty)
            {
                return CheckDrawAttackRet;
            }

            // 引き寄せられる場所を設定
            if (Map.MapDataForUnit[sx, sy] is null)
            {
                nx = sx;
                ny = sy;
            }
            else if (Math.Abs((sx - tx)) > Math.Abs((sy - ty)))
            {
                if (sx > tx)
                {
                    nx = (sx - 1);
                }
                else
                {
                    nx = (sx + 1);
                }

                ny = y;
                if (Map.MapDataForUnit[nx, ny] is object)
                {
                    if (sy != ty)
                    {
                        if (sy > ty)
                        {
                            if (Map.MapDataForUnit[sx, sy - 1] is null)
                            {
                                nx = sx;
                                ny = (sy - 1);
                            }
                            else if (Map.MapDataForUnit[nx, sy - 1] is null)
                            {
                                ny = (sy - 1);
                            }
                        }
                        else if (Map.MapDataForUnit[sx, sy + 1] is null)
                        {
                            nx = sx;
                            ny = (sy + 1);
                        }
                        else if (Map.MapDataForUnit[nx, sy + 1] is null)
                        {
                            ny = (sy + 1);
                        }
                    }
                }
            }
            else if (Math.Abs((sx - tx)) < Math.Abs((sy - ty)))
            {
                nx = sx;
                if (sy > ty)
                {
                    ny = (sy - 1);
                }
                else
                {
                    ny = (sy + 1);
                }

                if (Map.MapDataForUnit[nx, ny] is object)
                {
                    if (sx != tx)
                    {
                        if (sx > tx)
                        {
                            if (Map.MapDataForUnit[sx - 1, sy] is null)
                            {
                                nx = (sx - 1);
                                ny = sy;
                            }
                            else if (Map.MapDataForUnit[sx - 1, ny] is null)
                            {
                                nx = (sx - 1);
                            }
                        }
                        else if (Map.MapDataForUnit[sx + 1, sy] is null)
                        {
                            nx = (sx + 1);
                            ny = sy;
                        }
                        else if (Map.MapDataForUnit[sx + 1, ny] is null)
                        {
                            nx = (sx + 1);
                        }
                    }
                }
            }
            else
            {
                if (GeneralLib.Dice(2) == 1)
                {
                    if (sx > tx)
                    {
                        nx = (sx - 1);
                    }
                    else
                    {
                        nx = (sx + 1);
                    }

                    ny = sy;
                    if (Map.MapDataForUnit[nx, ny] is object)
                    {
                        nx = sx;
                        if (sy > ty)
                        {
                            ny = (sy - 1);
                        }
                        else
                        {
                            ny = (sy + 1);
                        }
                    }
                }
                else
                {
                    nx = sx;
                    if (sy > ty)
                    {
                        ny = (sy - 1);
                    }
                    else
                    {
                        ny = (sy + 1);
                    }

                    if (Map.MapDataForUnit[nx, ny] is object)
                    {
                        if (sx > tx)
                        {
                            nx = (sx - 1);
                        }
                        else
                        {
                            nx = (sx + 1);
                        }

                        ny = sy;
                    }
                }

                if (Map.MapDataForUnit[nx, ny] is object)
                {
                    if (sx > tx)
                    {
                        nx = (sx - 1);
                    }
                    else
                    {
                        nx = (sx + 1);
                    }

                    if (sy > ty)
                    {
                        ny = (sy - 1);
                    }
                    else
                    {
                        ny = (sy + 1);
                    }
                }
            }

            // 結局動いてない？
            if (nx == tx & ny == ty)
            {
                return CheckDrawAttackRet;
            }

            // ユニットを強制移動
            t.Jump(nx, ny);

            // 本当に動いた？
            if (t.x == tx & t.y == ty)
            {
                return CheckDrawAttackRet;
            }

            msg = t.Nickname + "を引き寄せた。;" + msg;

            // 引き寄せが発生したことを伝える
            critical_type = critical_type + " 引き寄せ";
            CheckDrawAttackRet = true;
            return CheckDrawAttackRet;
        }

        // 強制転移チェック
        public bool CheckTeleportAwayAttack(int w, Unit t, string msg, string def_mode, string critical_type)
        {
            bool CheckTeleportAwayAttackRet = default;
            int tx, ty;
            int nx = default, ny = default;
            int d, prob, i;

            // 特殊効果無効？
            string arganame = "転";
            if (t.SpecialEffectImmune(arganame))
            {
                return CheckTeleportAwayAttackRet;
            }

            // サイズによる制限
            if (t.Size == "XL")
            {
                return CheckTeleportAwayAttackRet;
            }

            // 固定物は動かせない
            string argfname = "地形ユニット";
            if (t.IsFeatureAvailable(argfname))
            {
                return CheckTeleportAwayAttackRet;
            }

            if (t.Data.Speed == 0 & t.Speed == 0)
            {
                return CheckTeleportAwayAttackRet;
            }

            // 自分自身は強制転移出来ない
            if (ReferenceEquals(t, this))
            {
                return CheckTeleportAwayAttackRet;
            }

            // 特殊効果発生確率
            string argsptype = "特殊効果発動";
            if (IsUnderSpecialPowerEffect(argsptype))
            {
                prob = 100;
            }
            else
            {
                prob = CriticalProbability(w, t, def_mode);
            }

            // 強制転移発生？
            if (GeneralLib.Dice(100) > prob)
            {
                return CheckTeleportAwayAttackRet;
            }

            // 強制転移先を設定
            tx = t.x;
            ty = t.y;
            for (i = 1; i <= 10; i++)
            {
                string argattr = "転";
                d = GeneralLib.Dice(WeaponLevel(w, argattr));
                if (GeneralLib.Dice(2) == 1)
                {
                    nx = (tx + d);
                }
                else
                {
                    nx = (tx - d);
                }

                string argattr1 = "転";
                d = (WeaponLevel(w, argattr1) - d);
                if (GeneralLib.Dice(2) == 1)
                {
                    ny = (ty + d);
                }
                else
                {
                    ny = (ty - d);
                }

                if (1 <= nx & nx <= Map.MapWidth & 1 <= ny & ny <= Map.MapHeight)
                {
                    break;
                }
            }

            // 転院先がない？
            if (i > 10)
            {
                return CheckTeleportAwayAttackRet;
            }

            // ユニットを強制移動
            t.Jump(nx, ny);

            // 本当に動いた？
            if (t.x == tx & t.y == ty)
            {
                return CheckTeleportAwayAttackRet;
            }

            msg = t.Nickname + "をテレポートさせた。;" + msg;

            // 強制転移が発生したことを伝える
            critical_type = critical_type + " 強制転移";
            CheckTeleportAwayAttackRet = true;
            return CheckTeleportAwayAttackRet;
        }

        // 能力コピーチェック
        public bool CheckMetamorphAttack(int w, Unit t, string def_mode)
        {
            bool CheckMetamorphAttackRet = default;
            int prob, wlv;
            string uname;

            // 既にコピー済み？
            string argfname = "ノーマルモード";
            if (IsFeatureAvailable(argfname))
            {
                return CheckMetamorphAttackRet;
            }

            // 特殊効果無効？
            string arganame = "写";
            if (t.SpecialEffectImmune(arganame))
            {
                return CheckMetamorphAttackRet;
            }

            // ボスユニットはコピー出来ない
            if (t.BossRank >= 0)
            {
                return CheckMetamorphAttackRet;
            }

            // 自分自身はコピー出来ない
            if (ReferenceEquals(t, this))
            {
                return CheckMetamorphAttackRet;
            }

            // サイズ制限
            string argattr = "写";
            if (IsWeaponClassifiedAs(w, argattr))
            {
                switch (Size ?? "")
                {
                    case "SS":
                        {
                            switch (t.Size ?? "")
                            {
                                case "M":
                                case "L":
                                case "LL":
                                case "XL":
                                    {
                                        return CheckMetamorphAttackRet;
                                    }
                            }

                            break;
                        }

                    case "S":
                        {
                            switch (t.Size ?? "")
                            {
                                case "L":
                                case "LL":
                                case "XL":
                                    {
                                        return CheckMetamorphAttackRet;
                                    }
                            }

                            break;
                        }

                    case "M":
                        {
                            switch (t.Size ?? "")
                            {
                                case "SS":
                                case "LL":
                                case "XL":
                                    {
                                        return CheckMetamorphAttackRet;
                                    }
                            }

                            break;
                        }

                    case "L":
                        {
                            switch (t.Size ?? "")
                            {
                                case "SS":
                                case "S":
                                case "XL":
                                    {
                                        return CheckMetamorphAttackRet;
                                    }
                            }

                            break;
                        }

                    case "LL":
                        {
                            switch (t.Size ?? "")
                            {
                                case "SS":
                                case "S":
                                case "M":
                                    {
                                        return CheckMetamorphAttackRet;
                                    }
                            }

                            break;
                        }

                    case "XL":
                        {
                            switch (t.Size ?? "")
                            {
                                case "SS":
                                case "S":
                                case "M":
                                case "L":
                                    {
                                        return CheckMetamorphAttackRet;
                                    }
                            }

                            break;
                        }
                }
            }

            // 特殊効果発生確率
            string argsptype = "特殊効果発動";
            if (IsUnderSpecialPowerEffect(argsptype))
            {
                prob = 100;
            }
            else
            {
                prob = CriticalProbability(w, t, def_mode);
            }

            // コピー成功？
            if (GeneralLib.Dice(100) > prob)
            {
                return CheckMetamorphAttackRet;
            }

            // コピーしてしまうとその場にいれなくなってしまう？
            Unit localOtherForm() { object argIndex1 = t.Name; var ret = OtherForm(argIndex1); t.Name = Conversions.ToString(argIndex1); return ret; }

            if (!localOtherForm().IsAbleToEnter(x, y))
            {
                return CheckMetamorphAttackRet;
            }

            // 変身前に情報を記録しておく
            uname = Nickname;
            string argattr1 = "写";
            string argattr2 = "化";
            wlv = GeneralLib.MaxLng(WeaponLevel(w, argattr1), WeaponLevel(w, argattr2));

            // 変身
            string argnew_form = t.Name;
            Transform(argnew_form);
            t.Name = argnew_form;
            {
                var withBlock = CurrentForm();
                // 元に戻れるように設定
                if (wlv > 0)
                {
                    string argcname = "残り時間";
                    string argcdata = "";
                    withBlock.AddCondition(argcname, wlv, cdata: argcdata);
                }

                string argcname1 = "ノーマルモード付加";
                string argcdata1 = Name + " 手動解除可";
                withBlock.AddCondition(argcname1, -1, 1d, argcdata1);
                string argcname2 = "能力コピー";
                string argcdata2 = "";
                withBlock.AddCondition(argcname2, -1, cdata: argcdata2);

                // コピー元のパイロット画像とメッセージを使うように設定
                string argcname3 = "パイロット画像";
                string argcdata3 = "非表示 " + t.MainPilot().get_Bitmap(false);
                withBlock.AddCondition(argcname3, -1, 0d, argcdata3);
                string argcname4 = "メッセージ";
                string argcdata4 = "非表示 " + t.MainPilot().MessageType;
                withBlock.AddCondition(argcname4, -1, 0d, argcdata4);
            }

            GUI.DisplaySysMessage(uname + "は" + t.Nickname + "に変身した。");

            // 能力コピーが発生したことを伝える
            CheckMetamorphAttackRet = true;
            return CheckMetamorphAttackRet;
        }


        // マップ攻撃 w で (tx,ty) を攻撃
        public void MapAttack(int w, int tx, int ty, bool is_event = false)
        {
            int k, i, j, num;
            Unit t = default, u;
            int prev_level;
            var earned_exp = default;
            int prev_money, earnings = default;
            string[] prev_stype;
            string[] prev_sname;
            double[] prev_slevel;
            string sname;
            string[] prev_special_power;
            string msg;
            var partners = default(Unit[]);
            string wname, wnickname;
            Unit[] targets;
            double[] targets_hp_ratio;
            int[] targets_x;
            int[] targets_y;
            int rx, ry;
            int min_range, max_range;
            string uname = default, fname;
            double hp_ratio, en_ratio;
            wname = Weapon(w).Name;
            Commands.SelectedWeaponName = wname;
            wnickname = WeaponNickname(w);

            // 効果範囲を設定
            min_range = Weapon(w).MinRange;
            max_range = WeaponMaxRange(w);
            string argattr5 = "Ｍ直";
            string argattr6 = "Ｍ拡";
            string argattr7 = "Ｍ扇";
            string argattr8 = "Ｍ投";
            string argattr9 = "Ｍ全";
            string argattr10 = "Ｍ移";
            string argattr11 = "Ｍ線";
            if (IsWeaponClassifiedAs(w, argattr5))
            {
                if (ty < y)
                {
                    string argdirection = "N";
                    Map.AreaInLine(x, y, min_range, max_range, argdirection);
                }
                else if (ty > y)
                {
                    string argdirection2 = "S";
                    Map.AreaInLine(x, y, min_range, max_range, argdirection2);
                }
                else if (tx < x)
                {
                    string argdirection3 = "W";
                    Map.AreaInLine(x, y, min_range, max_range, argdirection3);
                }
                else
                {
                    string argdirection1 = "E";
                    Map.AreaInLine(x, y, min_range, max_range, argdirection1);
                }
            }
            else if (IsWeaponClassifiedAs(w, argattr6))
            {
                if (ty < y & Math.Abs((y - ty)) > Math.Abs((x - tx)))
                {
                    string argdirection4 = "N";
                    Map.AreaInCone(x, y, min_range, max_range, argdirection4);
                }
                else if (ty > y & Math.Abs((y - ty)) > Math.Abs((x - tx)))
                {
                    string argdirection6 = "S";
                    Map.AreaInCone(x, y, min_range, max_range, argdirection6);
                }
                else if (tx < x & Math.Abs((x - tx)) > Math.Abs((y - ty)))
                {
                    string argdirection7 = "W";
                    Map.AreaInCone(x, y, min_range, max_range, argdirection7);
                }
                else
                {
                    string argdirection5 = "E";
                    Map.AreaInCone(x, y, min_range, max_range, argdirection5);
                }
            }
            else if (IsWeaponClassifiedAs(w, argattr7))
            {
                if (ty < y & Math.Abs((y - ty)) >= Math.Abs((x - tx)))
                {
                    string argdirection8 = "N";
                    string argattr = "Ｍ扇";
                    Map.AreaInSector(x, y, min_range, max_range, argdirection8, WeaponLevel(w, argattr));
                }
                else if (ty > y & Math.Abs((y - ty)) >= Math.Abs((x - tx)))
                {
                    string argdirection10 = "S";
                    string argattr2 = "Ｍ扇";
                    Map.AreaInSector(x, y, min_range, max_range, argdirection10, WeaponLevel(w, argattr2));
                }
                else if (tx < x & Math.Abs((x - tx)) >= Math.Abs((y - ty)))
                {
                    string argdirection11 = "W";
                    string argattr3 = "Ｍ扇";
                    Map.AreaInSector(x, y, min_range, max_range, argdirection11, WeaponLevel(w, argattr3));
                }
                else
                {
                    string argdirection9 = "E";
                    string argattr1 = "Ｍ扇";
                    Map.AreaInSector(x, y, min_range, max_range, argdirection9, WeaponLevel(w, argattr1));
                }
            }
            else if (IsWeaponClassifiedAs(w, argattr8))
            {
                string argattr4 = "Ｍ投";
                string arguparty = "すべて";
                Map.AreaInRange(tx, ty, WeaponLevel(w, argattr4), 1, arguparty);
            }
            else if (IsWeaponClassifiedAs(w, argattr9))
            {
                string arguparty1 = "すべて";
                Map.AreaInRange(x, y, max_range, min_range, arguparty1);
            }
            else if (IsWeaponClassifiedAs(w, argattr10) | IsWeaponClassifiedAs(w, argattr11))
            {
                Map.AreaInPointToPoint(x, y, tx, ty);
            }

            Map.MaskData[x, y] = false;

            // 識別型マップ攻撃
            string argattr12 = "識";
            string argsptype = "識別攻撃";
            if (IsWeaponClassifiedAs(w, argattr12) | IsUnderSpecialPowerEffect(argsptype))
            {
                foreach (Unit currentU in SRC.UList)
                {
                    u = currentU;
                    {
                        var withBlock = u;
                        if (withBlock.Status_Renamed == "出撃")
                        {
                            if (IsAlly(u) | WeaponAdaption(w, withBlock.Area) == 0d)
                            {
                                Map.MaskData[withBlock.x, withBlock.y] = true;
                            }
                        }
                    }
                }

                Map.MaskData[x, y] = false;
            }

            // 合体技の処理
            bool[] TmpMaskData;
            string argattr13 = "合";
            if (IsWeaponClassifiedAs(w, argattr13))
            {

                // 合体技のパートナーのハイライト表示
                // MaskDataを保存して使用している
                TmpMaskData = new bool[(Map.MapWidth + 1), (Map.MapHeight + 1)];
                var loopTo = Map.MapWidth;
                for (i = 1; i <= loopTo; i++)
                {
                    var loopTo1 = Map.MapHeight;
                    for (j = 1; j <= loopTo1; j++)
                        TmpMaskData[i, j] = Map.MaskData[i, j];
                }

                string argctype_Renamed = "武装";
                CombinationPartner(argctype_Renamed, w, partners);
                var loopTo2 = Information.UBound(partners);
                for (i = 1; i <= loopTo2; i++)
                {
                    {
                        var withBlock1 = partners[i];
                        Map.MaskData[withBlock1.x, withBlock1.y] = false;
                        TmpMaskData[withBlock1.x, withBlock1.y] = true;
                    }
                }

                GUI.MaskScreen();
                var loopTo3 = Map.MapWidth;
                for (i = 1; i <= loopTo3; i++)
                {
                    var loopTo4 = Map.MapHeight;
                    for (j = 1; j <= loopTo4; j++)
                        Map.MaskData[i, j] = TmpMaskData[i, j];
                }
            }
            else
            {
                partners = new Unit[1];
                Commands.SelectedPartners = new Unit[1];
                GUI.MaskScreen();
            }

            // 自分自身には攻撃しない
            Map.MaskData[x, y] = true;

            // マップ攻撃の影響を受けるユニットのリストを作成
            targets = new Unit[1];
            var loopTo5 = Map.MapWidth;
            for (i = 1; i <= loopTo5; i++)
            {
                var loopTo6 = Map.MapHeight;
                for (j = 1; j <= loopTo6; j++)
                {
                    // マップ攻撃の影響をうけるかチェック
                    if (Map.MaskData[i, j])
                    {
                        goto NextLoop;
                    }

                    if (Map.MapDataForUnit[i, j] is null)
                    {
                        goto NextLoop;
                    }

                    t = Map.MapDataForUnit[i, j];
                    {
                        var withBlock2 = t;
                        if (WeaponAdaption(w, withBlock2.Area) == 0d)
                        {
                            goto NextLoop;
                        }

                        string argattr14 = "識";
                        string argsptype1 = "識別攻撃";
                        if (IsWeaponClassifiedAs(w, argattr14) | IsUnderSpecialPowerEffect(argsptype1))
                        {
                            if (IsAlly(t))
                            {
                                goto NextLoop;
                            }
                        }

                        string argsptype2 = "隠れ身";
                        if (withBlock2.IsUnderSpecialPowerEffect(argsptype2))
                        {
                            goto NextLoop;
                        }

                        Array.Resize(targets, Information.UBound(targets) + 1 + 1);
                        targets[Information.UBound(targets)] = t;
                    }

                    NextLoop:
                    ;
                }
            }

            // 攻撃の起点を設定
            string argattr15 = "Ｍ投";
            if (IsWeaponClassifiedAs(w, argattr15))
            {
                rx = tx;
                ry = ty;
            }
            else
            {
                rx = x;
                ry = y;
            }

            // 起点からの距離に応じて並べ替え
            int min_item, min_value;
            var loopTo7 = (Information.UBound(targets) - 1);
            for (i = 1; i <= loopTo7; i++)
            {
                min_item = i;
                {
                    var withBlock3 = targets[i];
                    min_value = (Math.Abs((withBlock3.x - rx)) + Math.Abs((withBlock3.y - ry)));
                }

                var loopTo8 = Information.UBound(targets);
                for (j = (i + 1); j <= loopTo8; j++)
                {
                    {
                        var withBlock4 = targets[j];
                        if ((Math.Abs((withBlock4.x - rx)) + Math.Abs((withBlock4.y - ry))) < min_value)
                        {
                            min_item = j;
                            min_value = (Math.Abs((withBlock4.x - rx)) + Math.Abs((withBlock4.y - ry)));
                        }
                    }
                }

                if (min_item != i)
                {
                    u = targets[i];
                    targets[i] = targets[min_item];
                    targets[min_item] = u;
                }
            }

            // 戦闘前に一旦クリア
            // UPGRADE_NOTE: オブジェクト SupportAttackUnit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Commands.SupportAttackUnit = null;
            // UPGRADE_NOTE: オブジェクト SupportGuardUnit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Commands.SupportGuardUnit = null;
            // UPGRADE_NOTE: オブジェクト SupportGuardUnit2 をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Commands.SupportGuardUnit2 = null;

            // イベントの処理
            if (!is_event)
            {
                // 使用イベント
                Event_Renamed.HandleEvent("使用", MainPilot().ID, wname);
                if (SRC.IsScenarioFinished)
                {
                    SRC.IsScenarioFinished = false;
                    return;
                }

                if (SRC.IsCanceled)
                {
                    SRC.IsCanceled = false;
                    return;
                }

                // マップ攻撃開始前にあらかじめ攻撃イベントを発生させる
                var loopTo9 = Information.UBound(targets);
                for (i = 1; i <= loopTo9; i++)
                {
                    t = targets[i];
                    Commands.SaveSelections();
                    Commands.SelectedTarget = t;
                    Event_Renamed.HandleEvent("攻撃", MainPilot().ID, t.MainPilot().ID);
                    Commands.RestoreSelections();
                    if (SRC.IsScenarioFinished | SRC.IsCanceled)
                    {
                        return;
                    }
                }
            }

            // まだ攻撃可能？
            if (!is_event)
            {
                object argIndex1 = "攻撃不能";
                if (Status_Renamed != "出撃" | MaxAction(true) == 0 | IsConditionSatisfied(argIndex1))
                {
                    return;
                }
            }

            // ターゲットに関する情報を記録
            targets_hp_ratio = new double[Information.UBound(targets) + 1];
            targets_x = new int[Information.UBound(targets) + 1];
            targets_y = new int[Information.UBound(targets) + 1];
            var loopTo10 = Information.UBound(targets);
            for (i = 1; i <= loopTo10; i++)
            {
                t = targets[i].CurrentForm();
                targets[i] = t;
                {
                    var withBlock5 = t;
                    targets_hp_ratio[i] = withBlock5.HP / (double)withBlock5.MaxHP;
                    targets_x[i] = withBlock5.x;
                    targets_y[i] = withBlock5.y;
                }
            }

            var argu1 = this;
            Unit argu2 = null;
            GUI.OpenMessageForm(argu1, u2: argu2);

            // 現在の選択状況をセーブ
            Commands.SaveSelections();

            // 選択内容を切り替え
            Commands.SelectedUnit = this;
            Event_Renamed.SelectedUnitForEvent = this;
            Commands.SelectedWeapon = w;
            Commands.SelectedX = tx;
            Commands.SelectedY = ty;

            // 変な「対～」メッセージが表示されないようにターゲットをオフ
            // UPGRADE_NOTE: オブジェクト SelectedTarget をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Commands.SelectedTarget = null;
            // UPGRADE_NOTE: オブジェクト SelectedTargetForEvent をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Event_Renamed.SelectedTargetForEvent = null;

            // 攻撃準備の効果音
            bool localIsSpecialEffectDefined() { string argmain_situation = wname + "(準備)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            string argmain_situation3 = wname + "(準備)";
            string argsub_situation3 = "";
            string argsub_situation4 = "";
            string argoname = "武器準備アニメ非表示";
            if (IsAnimationDefined(argmain_situation3, sub_situation: argsub_situation3))
            {
                string argmain_situation = wname + "(準備)";
                string argsub_situation = "";
                PlayAnimation(argmain_situation, sub_situation: argsub_situation);
            }
            else if (IsAnimationDefined(wname, sub_situation: argsub_situation4) & !Expression.IsOptionDefined(argoname) & SRC.WeaponAnimation)
            {
                string argmain_situation1 = wname + "(準備)";
                string argsub_situation1 = "";
                PlayAnimation(argmain_situation1, sub_situation: argsub_situation1);
            }
            else if (localIsSpecialEffectDefined())
            {
                string argmain_situation2 = wname + "(準備)";
                string argsub_situation2 = "";
                SpecialEffect(argmain_situation2, sub_situation: argsub_situation2);
            }

            // マップ攻撃攻撃開始のメッセージ
            if (IsMessageDefined(wname))
            {
                string argmain_situation4 = "かけ声(" + wname + ")";
                if (IsMessageDefined(argmain_situation4))
                {
                    string argSituation = "かけ声(" + wname + ")";
                    string argmsg_mode = "";
                    PilotMessage(argSituation, msg_mode: argmsg_mode);
                }
                else
                {
                    string argSituation1 = "かけ声";
                    string argmsg_mode1 = "";
                    PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                }
            }

            // 攻撃メッセージ
            string argmsg_mode2 = "攻撃";
            PilotMessage(wname, argmsg_mode2);

            // 戦闘アニメ or 効果音
            string argmain_situation6 = wname + "(攻撃)";
            string argsub_situation7 = "";
            string argsub_situation8 = "";
            string argsub_situation9 = "";
            if (IsAnimationDefined(argmain_situation6, sub_situation: argsub_situation7) | IsAnimationDefined(wname, sub_situation: argsub_situation8))
            {
                string argmain_situation5 = wname + "(攻撃)";
                string argsub_situation5 = "";
                PlayAnimation(argmain_situation5, sub_situation: argsub_situation5);
            }
            else if (IsSpecialEffectDefined(wname, sub_situation: argsub_situation9))
            {
                string argsub_situation6 = "";
                SpecialEffect(wname, sub_situation: argsub_situation6);
            }
            else
            {
                var argu = this;
                Effect.AttackEffect(argu, w);
            }

            // 攻撃中の攻撃力変動を避けるため、あらかじめ攻撃力を保存しておく
            SelectedMapAttackPower = 0;
            string argtarea = "初期値";
            SelectedMapAttackPower = WeaponPower(w, argtarea);

            // 「永」属性武器が破壊されることによるマップ攻撃キャンセル処理の初期化
            IsMapAttackCanceled = false;

            // 武器使用による弾数＆ＥＮ消費
            UseWeapon(w);
            var argu11 = this;
            object argu21 = null;
            GUI.UpdateMessageForm(argu11, u2: argu21);

            // 攻撃時のシステムメッセージ
            string argsub_situation12 = "";
            string argmain_situation7 = "攻撃";
            string argsub_situation13 = "";
            if (IsSysMessageDefined(wname, sub_situation: argsub_situation12))
            {
                string argsub_situation10 = "";
                string argadd_msg = "";
                // 「武器名(解説)」のメッセージを使用
                SysMessage(wname, sub_situation: argsub_situation10, add_msg: argadd_msg);
            }
            else if (IsSysMessageDefined(argmain_situation7, sub_situation: argsub_situation13))
            {
                string argsub_situation11 = "";
                string argadd_msg1 = "";
                // 「攻撃(解説)」のメッセージを使用
                SysMessage(wname, sub_situation: argsub_situation11, add_msg: argadd_msg1);
            }
            else
            {
                switch (Information.UBound(partners))
                {
                    case 0:
                        {
                            // 通常攻撃
                            msg = Nickname + "は";
                            break;
                        }

                    case 1:
                        {
                            // ２体合体攻撃
                            if ((Nickname ?? "") != (partners[1].Nickname ?? ""))
                            {
                                msg = Nickname + "は[" + partners[1].Nickname + "]と共に";
                            }
                            else if ((MainPilot().get_Nickname(false) ?? "") != (partners[1].MainPilot().get_Nickname(false) ?? ""))
                            {
                                msg = MainPilot().get_Nickname(false) + "と[" + partners[1].MainPilot().get_Nickname(false) + "]の[" + Nickname + "]は";
                            }
                            else
                            {
                                msg = Nickname + "達は";
                            }

                            break;
                        }

                    case 2:
                        {
                            // ３体合体攻撃
                            if ((Nickname ?? "") != (partners[1].Nickname ?? ""))
                            {
                                msg = Nickname + "は[" + partners[1].Nickname + "]、[" + partners[2].Nickname + "]と共に";
                            }
                            else if ((MainPilot().get_Nickname(false) ?? "") != (partners[1].MainPilot().get_Nickname(false) ?? ""))
                            {
                                msg = MainPilot().get_Nickname(false) + "、[" + partners[1].MainPilot().get_Nickname(false) + "]、[" + partners[2].MainPilot().get_Nickname(false) + "]の[" + Nickname + "]は";
                            }
                            else
                            {
                                msg = Nickname + "達は";
                            }

                            break;
                        }

                    default:
                        {
                            // ３体以上による合体攻撃
                            msg = Nickname + "達は";
                            break;
                        }
                }

                // 攻撃の種類によってメッセージを切り替え
                string argattr16 = "実";
                if (Strings.Right(wnickname, 2) == "攻撃" | Strings.Right(wnickname, 4) == "アタック" | wnickname == "突撃")
                {
                    msg = msg + "[" + wnickname + "]をかけた。";
                }
                else if (IsSpellWeapon(w))
                {
                    if (Strings.Right(wnickname, 2) == "呪文")
                    {
                        msg = msg + "[" + wnickname + "]を唱えた。";
                    }
                    else if (Strings.Right(wnickname, 2) == "の杖")
                    {
                        msg = msg + "[" + Strings.Left(wnickname, Strings.Len(wnickname) - 2) + "]の呪文を唱えた。";
                    }
                    else
                    {
                        msg = msg + "[" + wnickname + "]の呪文を唱えた。";
                    }
                }
                else if (IsWeaponClassifiedAs(w, argattr16) & (Strings.InStr(wnickname, "ミサイル") > 0 | Strings.InStr(wnickname, "ロケット") > 0))
                {
                    msg = msg + "[" + wnickname + "]を発射した。";
                }
                else if (Strings.Right(wnickname, 1) == "息" | Strings.Right(wnickname, 3) == "ブレス" | Strings.Right(wnickname, 2) == "光線" | Strings.Right(wnickname, 1) == "光" | Strings.Right(wnickname, 3) == "ビーム" | Strings.Right(wnickname, 4) == "レーザー")
                {
                    msg = msg + "[" + wnickname + "]を放った。";
                }
                else if (Strings.Right(wnickname, 1) == "歌")
                {
                    msg = msg + "[" + wnickname + "]を歌った。";
                }
                else if (Strings.Right(wnickname, 2) == "踊り")
                {
                    msg = msg + "[" + wnickname + "]を踊った。";
                }
                else
                {
                    msg = msg + "[" + wnickname + "]で攻撃をかけた。";
                }

                // メッセージを表示
                GUI.DisplaySysMessage(msg);
            }

            // 命中後メッセージ
            string argSituation2 = wname + "(命中)";
            string argmsg_mode3 = "";
            PilotMessage(argSituation2, msg_mode: argmsg_mode3);

            // 選択状況を復元
            Commands.RestoreSelections();

            // 経験値＆資金獲得のメッセージ表示用に各種データを保存
            {
                var withBlock6 = MainPilot();
                prev_level = withBlock6.Level;
                prev_special_power = new string[(withBlock6.CountSpecialPower + 1)];
                var loopTo11 = withBlock6.CountSpecialPower;
                for (i = 1; i <= loopTo11; i++)
                    prev_special_power[i] = withBlock6.get_SpecialPower(i);
                prev_stype = new string[(withBlock6.CountSkill() + 1)];
                prev_slevel = new double[(withBlock6.CountSkill() + 1)];
                prev_sname = new string[(withBlock6.CountSkill() + 1)];
                var loopTo12 = withBlock6.CountSkill();
                for (i = 1; i <= loopTo12; i++)
                {
                    object argIndex2 = i;
                    prev_stype[i] = withBlock6.Skill(argIndex2);
                    object argIndex3 = i;
                    string argref_mode = "基本値";
                    prev_slevel[i] = withBlock6.SkillLevel(argIndex3, argref_mode);
                    object argIndex4 = i;
                    prev_sname[i] = withBlock6.SkillName(argIndex4);
                }
            }

            prev_money = SRC.Money;

            // 攻撃元ユニットは SelectedTarget に設定していないといけない
            Commands.SelectedTarget = this;

            // 移動型マップ攻撃による移動を行う
            string argattr17 = "Ｍ移";
            if (IsWeaponClassifiedAs(w, argattr17))
            {
                Jump(tx, ty);
            }

            // 個々のユニットに対して攻撃
            var loopTo13 = Information.UBound(targets);
            for (i = 1; i <= loopTo13; i++)
            {
                t = targets[i].CurrentForm();
                if (t.Status_Renamed == "出撃")
                {
                    if (Party == "味方" | Party == "ＮＰＣ")
                    {
                        object argu22 = this;
                        GUI.UpdateMessageForm(t, argu22);
                    }
                    else
                    {
                        var argu12 = this;
                        object argu23 = t;
                        GUI.UpdateMessageForm(argu12, argu23);
                    }

                    // 攻撃を行う
                    Attack(w, t, "マップ攻撃", "", is_event);

                    // かばうによりターゲットが変化している？
                    if (Commands.SupportGuardUnit is object)
                    {
                        targets[i] = Commands.SupportGuardUnit.CurrentForm();
                        targets_hp_ratio[i] = Commands.SupportGuardUnitHPRatio;
                        targets_x[i] = targets[i].x;
                        targets_y[i] = targets[i].y;
                    }

                    // これ以上攻撃を続けられない場合
                    if (Status_Renamed != "出撃" | CountPilot() == 0 | IsMapAttackCanceled)
                    {
                        GUI.CloseMessageForm();
                        SelectedMapAttackPower = 0;
                        goto DoEvent;
                    }

                    GUI.ClearMessageForm();
                }
            }

            // とどめメッセージ
            string argmain_situation8 = wname + "(とどめ)";
            if (IsMessageDefined(argmain_situation8))
            {
                string argSituation3 = wname + "(とどめ)";
                string argmsg_mode4 = "";
                PilotMessage(argSituation3, msg_mode: argmsg_mode4);
            }

            bool localIsSpecialEffectDefined1() { string argmain_situation = wname + "(とどめ)"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            string argmain_situation11 = wname + "(とどめ)";
            string argsub_situation16 = "";
            if (IsAnimationDefined(argmain_situation11, sub_situation: argsub_situation16))
            {
                string argmain_situation9 = wname + "(とどめ)";
                string argsub_situation14 = "";
                PlayAnimation(argmain_situation9, sub_situation: argsub_situation14);
            }
            else if (localIsSpecialEffectDefined1())
            {
                string argmain_situation10 = wname + "(とどめ)";
                string argsub_situation15 = "";
                SpecialEffect(argmain_situation10, sub_situation: argsub_situation15);
            }

            // カットインは消去しておく
            if (GUI.IsPictureVisible)
            {
                GUI.ClearPicture();
                // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                GUI.MainForm.picMain(0).Refresh();
            }

            // 保存した攻撃力の使用を止める
            SelectedMapAttackPower = 0;

            // ADD START MARGE
            // 戦闘アニメ終了処理
            string argmain_situation14 = wname + "(終了)";
            string argsub_situation19 = "";
            string argmain_situation15 = "終了";
            string argsub_situation20 = "";
            if (IsAnimationDefined(argmain_situation14, sub_situation: argsub_situation19))
            {
                string argmain_situation12 = wname + "(終了)";
                string argsub_situation17 = "";
                PlayAnimation(argmain_situation12, sub_situation: argsub_situation17);
            }
            else if (IsAnimationDefined(argmain_situation15, sub_situation: argsub_situation20))
            {
                string argmain_situation13 = "終了";
                string argsub_situation18 = "";
                PlayAnimation(argmain_situation13, sub_situation: argsub_situation18);
            }
            // ADD END MARGE

            // 戦闘アニメで変更されたユニット画像を元に戻す
            object argIndex6 = "ユニット画像";
            if (IsConditionSatisfied(argIndex6))
            {
                object argIndex5 = "ユニット画像";
                DeleteCondition(argIndex5);
                var argu3 = this;
                BitmapID = GUI.MakeUnitBitmap(argu3);
                if (GUI.IsPictureVisible)
                {
                    var argu4 = this;
                    GUI.PaintUnitBitmap(argu4, "リフレッシュ無し");
                }
                else
                {
                    var argu5 = this;
                    GUI.PaintUnitBitmap(argu5);
                }
            }

            object argIndex8 = "非表示付加";
            if (IsConditionSatisfied(argIndex8))
            {
                object argIndex7 = "非表示付加";
                DeleteCondition(argIndex7);
                var argu6 = this;
                BitmapID = GUI.MakeUnitBitmap(argu6);
                if (GUI.IsPictureVisible)
                {
                    var argu7 = this;
                    GUI.PaintUnitBitmap(argu7, "リフレッシュ無し");
                }
                else
                {
                    var argu8 = this;
                    GUI.PaintUnitBitmap(argu8);
                }
            }

            var loopTo14 = Information.UBound(partners);
            for (i = 1; i <= loopTo14; i++)
            {
                {
                    var withBlock7 = partners[i].CurrentForm();
                    object argIndex10 = "ユニット画像";
                    if (withBlock7.IsConditionSatisfied(argIndex10))
                    {
                        object argIndex9 = "ユニット画像";
                        withBlock7.DeleteCondition(argIndex9);
                        withBlock7.BitmapID = GUI.MakeUnitBitmap(partners[i].CurrentForm());
                        GUI.PaintUnitBitmap(partners[i].CurrentForm());
                    }

                    object argIndex12 = "非表示付加";
                    if (withBlock7.IsConditionSatisfied(argIndex12))
                    {
                        object argIndex11 = "非表示付加";
                        withBlock7.DeleteCondition(argIndex11);
                        withBlock7.BitmapID = GUI.MakeUnitBitmap(partners[i].CurrentForm());
                        GUI.PaintUnitBitmap(partners[i].CurrentForm());
                    }
                }
            }

            if (Party == "味方" & !is_event)
            {
                // 経験値＆資金の獲得
                var loopTo15 = Information.UBound(targets);
                for (i = 1; i <= loopTo15; i++)
                {
                    t = targets[i].CurrentForm();
                    if (!IsEnemy(t))
                    {
                    }
                    // 味方からは経験値＆資金は得られない
                    else if (t.Status_Renamed == "破壊")
                    {
                        // 経験値の獲得
                        string argexp_situation2 = "破壊";
                        string argexp_mode2 = "マップ";
                        earned_exp = earned_exp + GetExp(t, argexp_situation2, argexp_mode2);

                        // 合体技のパートナーへの経験値
                        string argoname2 = "合体技パートナー経験値無効";
                        if (!Expression.IsOptionDefined(argoname2))
                        {
                            var loopTo17 = Information.UBound(partners);
                            for (j = 1; j <= loopTo17; j++)
                            {
                                string argexp_situation3 = "破壊";
                                string argexp_mode3 = "パートナー";
                                partners[j].CurrentForm().GetExp(t, argexp_situation3, argexp_mode3);
                            }
                        }

                        // 獲得する資金を算出
                        earnings = t.Value / 2;

                        // スペシャルパワーによる獲得資金増加
                        string argsptype3 = "獲得資金増加";
                        if (IsUnderSpecialPowerEffect(argsptype3))
                        {
                            string argsname = "獲得資金増加";
                            earnings = GeneralLib.MinDbl(earnings * (1d + 0.1d * SpecialPowerEffectLevel(argsname)), 999999999d);
                        }

                        // パイロット能力による獲得資金増加
                        string argsname1 = "資金獲得";
                        if (IsSkillAvailable(argsname1))
                        {
                            string argsptype4 = "獲得資金増加";
                            string argoname3 = "収得効果重複";
                            if (!IsUnderSpecialPowerEffect(argsptype4) | Expression.IsOptionDefined(argoname3))
                            {
                                earnings = GeneralLib.MinDbl(earnings * ((10d + SkillLevel("資金獲得", 5d)) / 10d), 999999999d);
                            }
                        }

                        // 資金を獲得
                        SRC.IncrMoney(earnings);
                    }
                    else
                    {
                        // 経験値の獲得
                        string argexp_situation = "攻撃";
                        string argexp_mode = "マップ";
                        earned_exp = earned_exp + GetExp(t, argexp_situation, argexp_mode);

                        // 合体技のパートナーへの経験値
                        string argoname1 = "合体技パートナー経験値無効";
                        if (!Expression.IsOptionDefined(argoname1))
                        {
                            var loopTo16 = Information.UBound(partners);
                            for (j = 1; j <= loopTo16; j++)
                            {
                                string argexp_situation1 = "攻撃";
                                string argexp_mode1 = "パートナー";
                                partners[j].CurrentForm().GetExp(t, argexp_situation1, argexp_mode1);
                            }
                        }
                    }
                }

                // 獲得した経験値＆資金の表示
                if (SRC.Money > prev_money)
                {
                    string argtname = "資金";
                    GUI.DisplaySysMessage(Microsoft.VisualBasic.Compatibility.VB6.Support.Format(SRC.Money - prev_money) + "の" + Expression.Term(argtname, t) + "を得た。");
                }

                {
                    var withBlock8 = MainPilot();
                    // レベルアップの処理
                    if (withBlock8.Level > prev_level)
                    {
                        string argmain_situation18 = "レベルアップ";
                        string argsub_situation23 = "";
                        string argmain_situation19 = "レベルアップ";
                        string argsub_situation24 = "";
                        if (IsAnimationDefined(argmain_situation18, sub_situation: argsub_situation23))
                        {
                            string argmain_situation16 = "レベルアップ";
                            string argsub_situation21 = "";
                            PlayAnimation(argmain_situation16, sub_situation: argsub_situation21);
                        }
                        else if (IsSpecialEffectDefined(argmain_situation19, sub_situation: argsub_situation24))
                        {
                            string argmain_situation17 = "レベルアップ";
                            string argsub_situation22 = "";
                            SpecialEffect(argmain_situation17, sub_situation: argsub_situation22);
                        }

                        string argmain_situation20 = "レベルアップ";
                        if (IsMessageDefined(argmain_situation20))
                        {
                            string argSituation4 = "レベルアップ";
                            string argmsg_mode5 = "";
                            PilotMessage(argSituation4, msg_mode: argmsg_mode5);
                        }

                        msg = withBlock8.get_Nickname(false) + "は" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(earned_exp) + "の経験値を獲得し、" + "レベル[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock8.Level) + "]にレベルアップ。";

                        // 特殊能力の習得
                        var loopTo18 = withBlock8.CountSkill();
                        for (i = 1; i <= loopTo18; i++)
                        {
                            object argIndex13 = i;
                            sname = withBlock8.Skill(argIndex13);
                            string localSkillName2() { object argIndex1 = i; var ret = withBlock8.SkillName(argIndex1); return ret; }

                            if (Strings.InStr(localSkillName2(), "非表示") == 0)
                            {
                                switch (sname ?? "")
                                {
                                    case "同調率":
                                    case "霊力":
                                    case "追加レベル":
                                    case "魔力所有":
                                        {
                                            break;
                                        }

                                    default:
                                        {
                                            var loopTo19 = Information.UBound(prev_stype);
                                            for (j = 1; j <= loopTo19; j++)
                                            {
                                                if ((sname ?? "") == (prev_stype[j] ?? ""))
                                                {
                                                    break;
                                                }
                                            }

                                            double localSkillLevel() { object argIndex1 = sname; string argref_mode = "基本値"; var ret = withBlock8.SkillLevel(argIndex1, argref_mode); return ret; }

                                            if (j > Information.UBound(prev_stype))
                                            {
                                                string localSkillName() { object argIndex1 = i; var ret = withBlock8.SkillName(argIndex1); return ret; }

                                                msg = msg + ";" + localSkillName() + "を習得。";
                                            }
                                            else if (localSkillLevel() > prev_slevel[j])
                                            {
                                                string localSkillName1() { object argIndex1 = i; var ret = withBlock8.SkillName(argIndex1); return ret; }

                                                msg = msg + ";" + prev_sname[j] + " => " + localSkillName1() + "。";
                                            }

                                            break;
                                        }
                                }
                            }
                        }

                        // スペシャルパワーの習得
                        if (withBlock8.CountSpecialPower > Information.UBound(prev_special_power))
                        {
                            msg = msg + ";スペシャルパワー";
                            var loopTo20 = withBlock8.CountSpecialPower;
                            for (i = 1; i <= loopTo20; i++)
                            {
                                sname = withBlock8.get_SpecialPower(i);
                                var loopTo21 = Information.UBound(prev_special_power);
                                for (j = 1; j <= loopTo21; j++)
                                {
                                    if ((sname ?? "") == (prev_special_power[j] ?? ""))
                                    {
                                        break;
                                    }
                                }

                                if (j > Information.UBound(prev_special_power))
                                {
                                    msg = msg + "「" + sname + "」";
                                }
                            }

                            msg = msg + "を習得。";
                        }

                        GUI.DisplaySysMessage(msg);
                        Event_Renamed.HandleEvent("レベルアップ", withBlock8.ID);
                        SRC.PList.UpdateSupportMod(this);
                    }
                    else if (earned_exp > 0)
                    {
                        GUI.DisplaySysMessage(withBlock8.get_Nickname(false) + "は" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(earned_exp) + "の経験値を得た。");
                    }
                }
            }

            // スペシャルパワー効果の解除
            string argsptype5 = "攻撃後消耗";
            if (IsUnderSpecialPowerEffect(argsptype5))
            {
                string argcname = "消耗";
                string argcdata = "";
                AddCondition(argcname, 1, cdata: argcdata);
            }

            string argstype = "攻撃";
            RemoveSpecialPowerInEffect(argstype);
            string argstype1 = "戦闘終了";
            RemoveSpecialPowerInEffect(argstype1);
            if (earnings > 0)
            {
                string argstype2 = "敵破壊";
                RemoveSpecialPowerInEffect(argstype2);
            }

            var loopTo22 = Information.UBound(targets);
            for (i = 1; i <= loopTo22; i++)
            {
                string argstype3 = "戦闘終了";
                targets[i].CurrentForm().RemoveSpecialPowerInEffect(argstype3);
            }

            // 状態の解除
            var loopTo23 = Information.UBound(targets);
            for (i = 1; i <= loopTo23; i++)
                targets[i].CurrentForm().UpdateCondition();

            // ステルスが解ける？
            string argfname = "ステルス";
            if (IsFeatureAvailable(argfname))
            {
                string argattr18 = "忍";
                if (IsWeaponClassifiedAs(w, argattr18))
                {
                    var loopTo24 = Information.UBound(targets);
                    for (i = 1; i <= loopTo24; i++)
                    {
                        {
                            var withBlock9 = targets[i].CurrentForm();
                            if (withBlock9.Status_Renamed == "出撃" & withBlock9.MaxAction() > 0)
                            {
                                string argcname1 = "ステルス無効";
                                string argcdata1 = "";
                                AddCondition(argcname1, 1, cdata: argcdata1);
                                break;
                            }
                        }
                    }
                }
                else
                {
                    string argcname2 = "ステルス無効";
                    string argcdata2 = "";
                    AddCondition(argcname2, 1, cdata: argcdata2);
                }
            }

            // 合体技のパートナーの弾数＆ＥＮを消費
            var loopTo25 = Information.UBound(partners);
            for (i = 1; i <= loopTo25; i++)
            {
                {
                    var withBlock10 = partners[i].CurrentForm();
                    var loopTo26 = withBlock10.CountWeapon();
                    for (j = 1; j <= loopTo26; j++)
                    {
                        if ((withBlock10.Weapon(j).Name ?? "") == (wname ?? ""))
                        {
                            withBlock10.UseWeapon(j);
                            string argattr19 = "自";
                            string argattr20 = "失";
                            string argattr21 = "変";
                            if (withBlock10.IsWeaponClassifiedAs(j, argattr19))
                            {
                                string argfname1 = "パーツ分離";
                                if (withBlock10.IsFeatureAvailable(argfname1))
                                {
                                    object argIndex14 = "パーツ分離";
                                    string arglist = withBlock10.FeatureData(argIndex14);
                                    uname = GeneralLib.LIndex(arglist, 2);
                                    Unit localOtherForm() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                    if (localOtherForm().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                    {
                                        withBlock10.Transform(uname);
                                        {
                                            var withBlock11 = withBlock10.CurrentForm();
                                            withBlock11.HP = withBlock11.MaxHP;
                                            withBlock11.UsedAction = withBlock11.MaxAction();
                                        }
                                    }
                                    else
                                    {
                                        withBlock10.Die();
                                    }
                                }
                                else
                                {
                                    withBlock10.Die();
                                }
                            }
                            else if (withBlock10.IsWeaponClassifiedAs(j, argattr20) & withBlock10.HP == 0)
                            {
                                withBlock10.Die();
                            }
                            else if (withBlock10.IsWeaponClassifiedAs(j, argattr21))
                            {
                                string argfname3 = "変形技";
                                string argfname4 = "ノーマルモード";
                                if (withBlock10.IsFeatureAvailable(argfname3))
                                {
                                    var loopTo27 = withBlock10.CountFeature();
                                    for (k = 1; k <= loopTo27; k++)
                                    {
                                        string localFeature() { object argIndex1 = k; var ret = withBlock10.Feature(argIndex1); return ret; }

                                        string localFeatureData1() { object argIndex1 = k; var ret = withBlock10.FeatureData(argIndex1); return ret; }

                                        string localLIndex() { string arglist = hs681d62aaff664a9daf19517e6120dc9d(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                        if (localFeature() == "変形技" & (localLIndex() ?? "") == (wname ?? ""))
                                        {
                                            string localFeatureData() { object argIndex1 = k; var ret = withBlock10.FeatureData(argIndex1); return ret; }

                                            string arglist1 = localFeatureData();
                                            uname = GeneralLib.LIndex(arglist1, 2);
                                            Unit localOtherForm1() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                            if (localOtherForm1().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                            {
                                                withBlock10.Transform(uname);
                                            }

                                            break;
                                        }
                                    }

                                    if ((uname ?? "") != (withBlock10.CurrentForm().Name ?? ""))
                                    {
                                        string argfname2 = "ノーマルモード";
                                        if (withBlock10.IsFeatureAvailable(argfname2))
                                        {
                                            object argIndex15 = "ノーマルモード";
                                            string arglist2 = withBlock10.FeatureData(argIndex15);
                                            uname = GeneralLib.LIndex(arglist2, 1);
                                            Unit localOtherForm2() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                            if (localOtherForm2().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                            {
                                                withBlock10.Transform(uname);
                                            }
                                        }
                                    }
                                }
                                else if (withBlock10.IsFeatureAvailable(argfname4))
                                {
                                    object argIndex16 = "ノーマルモード";
                                    string arglist3 = withBlock10.FeatureData(argIndex16);
                                    uname = GeneralLib.LIndex(arglist3, 1);
                                    Unit localOtherForm3() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                    if (localOtherForm3().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                    {
                                        withBlock10.Transform(uname);
                                    }
                                }
                            }

                            break;
                        }
                    }

                    // 同名の武器がなかった場合は自分のデータを使って処理
                    if (j > withBlock10.CountWeapon())
                    {
                        if (this.Weapon(w).ENConsumption > 0)
                        {
                            withBlock10.EN = withBlock10.EN - WeaponENConsumption(w);
                        }

                        string argattr22 = "消";
                        if (IsWeaponClassifiedAs(w, argattr22))
                        {
                            string argcname3 = "消耗";
                            string argcdata3 = "";
                            withBlock10.AddCondition(argcname3, 1, cdata: argcdata3);
                        }

                        string argattr23 = "Ｃ";
                        object argIndex18 = "チャージ完了";
                        if (IsWeaponClassifiedAs(w, argattr23) & withBlock10.IsConditionSatisfied(argIndex18))
                        {
                            object argIndex17 = "チャージ完了";
                            withBlock10.DeleteCondition(argIndex17);
                        }

                        string argattr25 = "気";
                        if (IsWeaponClassifiedAs(w, argattr25))
                        {
                            string argattr24 = "気";
                            withBlock10.IncreaseMorale((-5 * WeaponLevel(w, argattr24)));
                        }

                        string argattr28 = "霊";
                        string argattr29 = "プ";
                        if (IsWeaponClassifiedAs(w, argattr28))
                        {
                            hp_ratio = 100 * withBlock10.HP / (double)withBlock10.MaxHP;
                            en_ratio = 100 * withBlock10.EN / (double)withBlock10.MaxEN;
                            string argattr26 = "霊";
                            withBlock10.MainPilot().Plana = (withBlock10.MainPilot().Plana - 5d * WeaponLevel(w, argattr26));
                            withBlock10.HP = (withBlock10.MaxHP * hp_ratio / 100d);
                            withBlock10.EN = (withBlock10.MaxEN * en_ratio / 100d);
                        }
                        else if (IsWeaponClassifiedAs(w, argattr29))
                        {
                            hp_ratio = 100 * withBlock10.HP / (double)withBlock10.MaxHP;
                            en_ratio = 100 * withBlock10.EN / (double)withBlock10.MaxEN;
                            string argattr27 = "プ";
                            withBlock10.MainPilot().Plana = (withBlock10.MainPilot().Plana - 5d * WeaponLevel(w, argattr27));
                            withBlock10.HP = (withBlock10.MaxHP * hp_ratio / 100d);
                            withBlock10.EN = (withBlock10.MaxEN * en_ratio / 100d);
                        }

                        string argattr31 = "失";
                        if (IsWeaponClassifiedAs(w, argattr31))
                        {
                            string argattr30 = "失";
                            withBlock10.HP = GeneralLib.MaxLng((withBlock10.HP - (long)(withBlock10.MaxHP * WeaponLevel(w, argattr30)) / 10L), 0);
                        }

                        string argattr32 = "自";
                        string argattr33 = "失";
                        string argattr34 = "変";
                        if (IsWeaponClassifiedAs(w, argattr32))
                        {
                            string argfname5 = "パーツ分離";
                            if (withBlock10.IsFeatureAvailable(argfname5))
                            {
                                object argIndex19 = "パーツ分離";
                                string arglist4 = withBlock10.FeatureData(argIndex19);
                                uname = GeneralLib.LIndex(arglist4, 2);
                                Unit localOtherForm4() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                if (localOtherForm4().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                {
                                    withBlock10.Transform(uname);
                                    {
                                        var withBlock12 = withBlock10.CurrentForm();
                                        withBlock12.HP = withBlock12.MaxHP;
                                        withBlock12.UsedAction = withBlock12.MaxAction();
                                    }
                                }
                                else
                                {
                                    withBlock10.Die();
                                }
                            }
                            else
                            {
                                withBlock10.Die();
                            }
                        }
                        else if (IsWeaponClassifiedAs(w, argattr33) & withBlock10.HP == 0)
                        {
                            withBlock10.Die();
                        }
                        else if (IsWeaponClassifiedAs(w, argattr34))
                        {
                            string argfname6 = "ノーマルモード";
                            if (withBlock10.IsFeatureAvailable(argfname6))
                            {
                                object argIndex20 = "ノーマルモード";
                                string arglist5 = withBlock10.FeatureData(argIndex20);
                                uname = GeneralLib.LIndex(arglist5, 1);
                                Unit localOtherForm5() { object argIndex1 = uname; var ret = withBlock10.OtherForm(argIndex1); return ret; }

                                if (localOtherForm5().IsAbleToEnter(withBlock10.x, withBlock10.y))
                                {
                                    withBlock10.Transform(uname);
                                }
                            }
                        }
                    }
                }
            }

            // 以下の特殊効果は武器データが変化する可能性があるため、同時には適用されない

            // 自爆の処理
            string argattr35 = "自";

            // ＨＰ消費攻撃による自殺
            string argattr36 = "失";

            // 変形技
            string argattr37 = "変";
            if (IsWeaponClassifiedAs(w, argattr35))
            {
                string argfname7 = "パーツ分離";
                if (IsFeatureAvailable(argfname7))
                {
                    object argIndex21 = "パーツ分離";
                    string arglist6 = FeatureData(argIndex21);
                    uname = GeneralLib.LIndex(arglist6, 2);
                    Unit localOtherForm6() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm6().IsAbleToEnter(x, y))
                    {
                        Transform(uname);
                        {
                            var withBlock13 = CurrentForm();
                            withBlock13.HP = withBlock13.MaxHP;
                            withBlock13.UsedAction = withBlock13.MaxAction();
                        }

                        object argIndex22 = "パーツ分離";
                        fname = FeatureName(argIndex22);
                        bool localIsSysMessageDefined() { string argmain_situation = "破壊時分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        bool localIsSysMessageDefined1() { string argmain_situation = "分離(" + Name + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        bool localIsSysMessageDefined2() { string argmain_situation = "分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        string argmain_situation27 = "破壊時分離(" + Name + ")";
                        string argsub_situation31 = "";
                        string argmain_situation28 = "破壊時分離";
                        string argsub_situation32 = "";
                        string argmain_situation29 = "分離";
                        string argsub_situation33 = "";
                        if (IsSysMessageDefined(argmain_situation27, sub_situation: argsub_situation31))
                        {
                            string argmain_situation21 = "破壊時分離(" + Name + ")";
                            string argsub_situation25 = "";
                            string argadd_msg2 = "";
                            SysMessage(argmain_situation21, sub_situation: argsub_situation25, add_msg: argadd_msg2);
                        }
                        else if (localIsSysMessageDefined())
                        {
                            string argmain_situation22 = "破壊時分離(" + fname + ")";
                            string argsub_situation26 = "";
                            string argadd_msg3 = "";
                            SysMessage(argmain_situation22, sub_situation: argsub_situation26, add_msg: argadd_msg3);
                        }
                        else if (IsSysMessageDefined(argmain_situation28, sub_situation: argsub_situation32))
                        {
                            string argmain_situation23 = "破壊時分離";
                            string argsub_situation27 = "";
                            string argadd_msg4 = "";
                            SysMessage(argmain_situation23, sub_situation: argsub_situation27, add_msg: argadd_msg4);
                        }
                        else if (localIsSysMessageDefined1())
                        {
                            string argmain_situation24 = "分離(" + Name + ")";
                            string argsub_situation28 = "";
                            string argadd_msg5 = "";
                            SysMessage(argmain_situation24, sub_situation: argsub_situation28, add_msg: argadd_msg5);
                        }
                        else if (localIsSysMessageDefined2())
                        {
                            string argmain_situation25 = "分離(" + fname + ")";
                            string argsub_situation29 = "";
                            string argadd_msg6 = "";
                            SysMessage(argmain_situation25, sub_situation: argsub_situation29, add_msg: argadd_msg6);
                        }
                        else if (IsSysMessageDefined(argmain_situation29, sub_situation: argsub_situation33))
                        {
                            string argmain_situation26 = "分離";
                            string argsub_situation30 = "";
                            string argadd_msg7 = "";
                            SysMessage(argmain_situation26, sub_situation: argsub_situation30, add_msg: argadd_msg7);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(Nickname + "は破壊されたパーツを分離させた。");
                        }
                    }
                    else
                    {
                        Die();
                        GUI.CloseMessageForm();
                        if (!is_event)
                        {
                            Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                            if (SRC.IsScenarioFinished)
                            {
                                return;
                            }
                        }
                    }
                }
                else
                {
                    Die();
                    GUI.CloseMessageForm();
                    if (!is_event)
                    {
                        Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                        if (SRC.IsScenarioFinished)
                        {
                            return;
                        }
                    }
                }
            }
            else if (IsWeaponClassifiedAs(w, argattr36) & HP == 0)
            {
                Die();
                GUI.CloseMessageForm();
                if (!is_event)
                {
                    Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                    if (SRC.IsScenarioFinished)
                    {
                        return;
                    }
                }
            }
            else if (IsWeaponClassifiedAs(w, argattr37))
            {
                string argfname9 = "変形技";
                string argfname10 = "ノーマルモード";
                if (IsFeatureAvailable(argfname9))
                {
                    var loopTo28 = CountFeature();
                    for (i = 1; i <= loopTo28; i++)
                    {
                        string localFeature1() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                        string localFeatureData3() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localLIndex1() { string arglist = hs367294acea73430b9129abf82f13a58e(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        if (localFeature1() == "変形技" & (localLIndex1() ?? "") == (wname ?? ""))
                        {
                            string localFeatureData2() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string arglist7 = localFeatureData2();
                            uname = GeneralLib.LIndex(arglist7, 2);
                            Unit localOtherForm7() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                            if (localOtherForm7().IsAbleToEnter(x, y))
                            {
                                Transform(uname);
                            }

                            break;
                        }
                    }

                    if ((uname ?? "") != (CurrentForm().Name ?? ""))
                    {
                        string argfname8 = "ノーマルモード";
                        if (IsFeatureAvailable(argfname8))
                        {
                            object argIndex23 = "ノーマルモード";
                            string arglist8 = FeatureData(argIndex23);
                            uname = GeneralLib.LIndex(arglist8, 1);
                            Unit localOtherForm8() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                            if (localOtherForm8().IsAbleToEnter(x, y))
                            {
                                Transform(uname);
                            }
                        }
                    }
                }
                else if (IsFeatureAvailable(argfname10))
                {
                    object argIndex24 = "ノーマルモード";
                    string arglist9 = FeatureData(argIndex24);
                    uname = GeneralLib.LIndex(arglist9, 1);
                    Unit localOtherForm9() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm9().IsAbleToEnter(x, y))
                    {
                        Transform(uname);
                    }
                }
            }

            // アイテムを消費
            else if (Weapon(w).IsItem() & Bullet(w) == 0 & MaxBullet(w) > 0)
            {
                // アイテムを削除
                num = Data.CountWeapon();
                num = (num + MainPilot().Data.CountWeapon());
                var loopTo29 = CountPilot();
                for (i = 2; i <= loopTo29; i++)
                {
                    Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    num = (num + localPilot().Data.CountWeapon());
                }

                var loopTo30 = CountSupport();
                for (i = 2; i <= loopTo30; i++)
                {
                    Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    num = (num + localSupport().Data.CountWeapon());
                }

                string argfname11 = "追加サポート";
                if (IsFeatureAvailable(argfname11))
                {
                    num = (num + AdditionalSupport().Data.CountWeapon());
                }

                foreach (Item itm in colItem)
                {
                    num = (num + itm.CountWeapon());
                    if (w <= num)
                    {
                        itm.Exist = false;
                        DeleteItem((object)itm.ID);
                        break;
                    }
                }
            }

            GUI.CloseMessageForm();
            DoEvent:
            ;


            // イベント処理
            var uparty = default(string);
            bool found;
            if (!is_event)
            {
                var loopTo31 = Information.UBound(targets);
                for (i = 1; i <= loopTo31; i++)
                {
                    t = targets[i].CurrentForm();
                    if (t.Status_Renamed == "破壊")
                    {
                        // 破壊イベントを発生
                        Commands.SaveSelections();
                        Commands.SwapSelections();
                        Event_Renamed.HandleEvent("マップ攻撃破壊", t.MainPilot().ID);
                        Commands.RestoreSelections();
                        if (SRC.IsScenarioFinished | SRC.IsCanceled)
                        {
                            return;
                        }
                    }
                    else if (t.Status_Renamed == "出撃")
                    {
                        if (t.HP / (double)t.MaxHP < targets_hp_ratio[i])
                        {
                            // 損傷率イベント
                            Commands.SaveSelections();
                            Commands.SwapSelections();
                            Event_Renamed.HandleEvent("損傷率", t.MainPilot().ID, 100 * (t.MaxHP - t.HP) / t.MaxHP);
                            Commands.RestoreSelections();
                            if (SRC.IsScenarioFinished | SRC.IsCanceled)
                            {
                                return;
                            }
                        }

                        // ターゲットが動いていたら進入イベントを発生
                        {
                            var withBlock14 = t.CurrentForm();
                            if (withBlock14.Status_Renamed == "出撃" & (withBlock14.x != targets_x[i] | withBlock14.y != targets_y[i]))
                            {
                                Event_Renamed.HandleEvent("進入", withBlock14.MainPilot().ID, withBlock14.x, withBlock14.y);
                                if (SRC.IsScenarioFinished | SRC.IsCanceled)
                                {
                                    return;
                                }
                            }
                        }
                    }
                }

                // 全滅イベント
                for (i = 1; i <= 4; i++)
                {
                    switch (i)
                    {
                        case 1:
                            {
                                uparty = "味方";
                                break;
                            }

                        case 2:
                            {
                                uparty = "ＮＰＣ";
                                break;
                            }

                        case 3:
                            {
                                uparty = "敵";
                                break;
                            }

                        case 4:
                            {
                                uparty = "中立";
                                break;
                            }
                    }

                    found = false;
                    var loopTo32 = Information.UBound(targets);
                    for (j = 1; j <= loopTo32; j++)
                    {
                        {
                            var withBlock15 = targets[j].CurrentForm();
                            if ((withBlock15.Party0 ?? "") == (uparty ?? "") & withBlock15.Status_Renamed != "出撃")
                            {
                                found = true;
                                break;
                            }
                        }
                    }

                    if (found)
                    {
                        found = false;
                        foreach (Unit currentU1 in SRC.UList)
                        {
                            u = currentU1;
                            object argIndex25 = "憑依";
                            if ((u.Party0 ?? "") == (uparty ?? "") & u.Status_Renamed == "出撃" & !u.IsConditionSatisfied(argIndex25))
                            {
                                found = true;
                                break;
                            }
                        }

                        if (!found)
                        {
                            Event_Renamed.HandleEvent("全滅", uparty);
                            if (SRC.IsScenarioFinished | SRC.IsCanceled)
                            {
                                return;
                            }
                        }
                    }
                }

                // 使用後イベント
                if (CurrentForm().Status_Renamed == "出撃")
                {
                    Event_Renamed.HandleEvent("使用後", CurrentForm().MainPilot().ID, wname);
                    if (SRC.IsScenarioFinished | SRC.IsCanceled)
                    {
                        return;
                    }
                }

                // 攻撃後イベント
                if (CurrentForm().Status_Renamed == "出撃")
                {
                    Commands.SaveSelections();
                    var loopTo33 = Information.UBound(targets);
                    for (i = 1; i <= loopTo33; i++)
                    {
                        Commands.SelectedTarget = targets[i].CurrentForm();
                        {
                            var withBlock16 = Commands.SelectedTarget;
                            if (withBlock16.Status_Renamed == "出撃")
                            {
                                Event_Renamed.HandleEvent("攻撃後", CurrentForm().MainPilot().ID, withBlock16.MainPilot().ID);
                                if (SRC.IsScenarioFinished)
                                {
                                    Commands.RestoreSelections();
                                    return;
                                }
                            }
                        }
                    }

                    Commands.RestoreSelections();
                }
            }

            // ハイパーモード＆ノーマルモードの自動発動をチェック
            SRC.UList.CheckAutoHyperMode();
            SRC.UList.CheckAutoNormalMode();
        }

        // 武器の使用によるＥＮ、弾薬の消費等を行う
        public void UseWeapon(int w)
        {
            int i, lv;
            double hp_ratio, en_ratio;

            // ＥＮ消費
            if (this.Weapon(w).ENConsumption > 0)
            {
                EN = EN - WeaponENConsumption(w);
            }

            // 弾数消費
            string argattr2 = "永";
            if (this.Weapon(w).Bullet > 0 & !IsWeaponClassifiedAs(w, argattr2))
            {
                SetBullet(w, (Bullet(w) - 1));

                // 全弾一斉発射
                string argattr1 = "斉";
                if (IsWeaponClassifiedAs(w, argattr1))
                {
                    var loopTo = Information.UBound(dblBullet);
                    for (i = 1; i <= loopTo; i++)
                        SetBullet(i, GeneralLib.MinLng((MaxBullet(i) * dblBullet[w]), Bullet(i)));
                }
                else
                {
                    var loopTo1 = Information.UBound(dblBullet);
                    for (i = 1; i <= loopTo1; i++)
                    {
                        string argattr = "斉";
                        if (IsWeaponClassifiedAs(i, argattr))
                        {
                            SetBullet(i, GeneralLib.MinLng((MaxBullet(i) * dblBullet[w] + 0.49999d), Bullet(i)));
                        }
                    }
                }

                // 弾数・使用回数共有の処理
                SyncBullet();
            }

            string argattr3 = "消";
            if (IsWeaponClassifiedAs(w, argattr3))
            {
                string argcname = "消耗";
                string argcdata = "";
                AddCondition(argcname, 1, cdata: argcdata);
            }

            string argattr4 = "尽";
            if (IsWeaponClassifiedAs(w, argattr4))
            {
                EN = 0;
            }

            string argattr5 = "Ｃ";
            object argIndex2 = "チャージ完了";
            if (IsWeaponClassifiedAs(w, argattr5) & IsConditionSatisfied(argIndex2))
            {
                object argIndex1 = "チャージ完了";
                DeleteCondition(argIndex1);
            }

            string argattr7 = "Ａ";
            if (WeaponLevel(w, argattr7) > 0d)
            {
                string argcname1 = WeaponNickname(w) + "充填中";
                string argattr6 = "Ａ";
                string argcdata1 = "";
                AddCondition(argcname1, WeaponLevel(w, argattr6), cdata: argcdata1);
            }

            string argattr9 = "気";
            if (IsWeaponClassifiedAs(w, argattr9))
            {
                string argattr8 = "気";
                IncreaseMorale((-5 * WeaponLevel(w, argattr8)));
            }

            string argattr12 = "霊";
            string argattr13 = "プ";
            if (IsWeaponClassifiedAs(w, argattr12))
            {
                hp_ratio = 100 * HP / (double)MaxHP;
                en_ratio = 100 * EN / (double)MaxEN;
                string argattr10 = "霊";
                MainPilot().Plana = (this.MainPilot().Plana - 5d * WeaponLevel(w, argattr10));
                HP = (MaxHP * hp_ratio / 100d);
                EN = (MaxEN * en_ratio / 100d);
            }
            else if (IsWeaponClassifiedAs(w, argattr13))
            {
                hp_ratio = 100 * HP / (double)MaxHP;
                en_ratio = 100 * EN / (double)MaxEN;
                string argattr11 = "プ";
                MainPilot().Plana = (this.MainPilot().Plana - 5d * WeaponLevel(w, argattr11));
                HP = (MaxHP * hp_ratio / 100d);
                EN = (MaxEN * en_ratio / 100d);
            }

            if (Party == "味方")
            {
                string argattr15 = "銭";
                if (IsWeaponClassifiedAs(w, argattr15))
                {
                    string argattr14 = "銭";
                    SRC.IncrMoney(-GeneralLib.MaxLng(WeaponLevel(w, argattr14), 1) * Value / 10);
                }
            }

            string argattr17 = "失";
            if (IsWeaponClassifiedAs(w, argattr17))
            {
                string argattr16 = "失";
                HP = GeneralLib.MaxLng((HP - (long)(MaxHP * WeaponLevel(w, argattr16)) / 10L), 0);
            }

            // '合体技は１ターンに１回だけ使用可能
            // If IsWeaponClassifiedAs(w, "合") Then
            // AddCondition "合体技使用不可", 1, 0, "非表示"
            // End If
        }

        // 弾数
        public int Bullet(int w)
        {
            int BulletRet = default;
            BulletRet = (dblBullet[w] * intMaxBullet[w]);
            return BulletRet;
        }

        // 最大弾数
        public int MaxBullet(int w)
        {
            int MaxBulletRet = default;
            MaxBulletRet = intMaxBullet[w];
            return MaxBulletRet;
        }

        // 弾数を設定
        public void SetBullet(int w, int new_bullet)
        {
            if (new_bullet < 0)
            {
                dblBullet[w] = 0d;
            }
            else if (intMaxBullet[w] > 0)
            {
                dblBullet[w] = new_bullet / (double)intMaxBullet[w];
            }
            else
            {
                dblBullet[w] = 1d;
            }
        }

        // 弾数・使用回数共有の処理
        public void SyncBullet()
        {
            int j, a, w, i, k;
            int lv, idx;

            // 共属性武器の処理
            var loopTo = CountWeapon();
            for (w = 1; w <= loopTo; w++)
            {
                string argattr5 = "共";
                if (IsWeaponClassifiedAs(w, argattr5))
                {
                    string argattr = "共";
                    lv = WeaponLevel(w, argattr);
                    // 弾数を合わせる
                    var loopTo1 = CountWeapon();
                    for (i = 1; i <= loopTo1; i++)
                    {
                        string argattr1 = "共";
                        string argattr2 = "共";
                        if (w != i & IsWeaponClassifiedAs(i, argattr1) & lv == WeaponLevel(i, argattr2) & MaxBullet(w) > 0)
                        {
                            if (MaxBullet(i) > MaxBullet(w))
                            {
                                SetBullet(i, GeneralLib.MinLng(Bullet(i), (MaxBullet(i) * Bullet(w)) / MaxBullet(w)));
                            }
                            else
                            {
                                SetBullet(i, GeneralLib.MinLng(Bullet(i), (MaxBullet(i) * Bullet(w) / (double)MaxBullet(w) + 0.49999d)));
                            }
                        }
                    }
                    // アビリティの使用回数を合わせる
                    var loopTo2 = CountAbility();
                    for (i = 1; i <= loopTo2; i++)
                    {
                        string argattr3 = "共";
                        string argattr4 = "共";
                        if (IsAbilityClassifiedAs(i, argattr3) & lv == AbilityLevel(i, argattr4) & MaxBullet(w) > 0)
                        {
                            if (MaxStock(i) > MaxBullet(w))
                            {
                                SetStock(i, GeneralLib.MinLng(Stock(i), (MaxStock(i) * Bullet(w)) / MaxBullet(w)));
                            }
                            else
                            {
                                SetStock(i, GeneralLib.MinLng(Stock(i), (MaxStock(i) * Bullet(w) / (double)MaxBullet(w) + 0.49999d)));
                            }
                        }
                    }
                }
            }

            // 共属性アビリティの処理
            var loopTo3 = CountAbility();
            for (a = 1; a <= loopTo3; a++)
            {
                string argattr11 = "共";
                if (IsAbilityClassifiedAs(a, argattr11))
                {
                    string argattr6 = "共";
                    lv = AbilityLevel(a, argattr6);
                    // 使用回数を合わせる
                    var loopTo4 = CountAbility();
                    for (i = 1; i <= loopTo4; i++)
                    {
                        string argattr7 = "共";
                        string argattr8 = "共";
                        if (a != i & IsAbilityClassifiedAs(i, argattr7) & lv == AbilityLevel(i, argattr8) & MaxStock(a) > 0)
                        {
                            if (MaxStock(i) > MaxStock(a))
                            {
                                SetStock(i, GeneralLib.MinLng(Stock(i), (MaxStock(i) * Stock(a)) / MaxStock(a)));
                            }
                            else
                            {
                                SetStock(i, GeneralLib.MinLng(Stock(i), (MaxStock(i) * Stock(a) / (double)MaxStock(a) + 0.49999d)));
                            }
                        }
                    }
                    // 弾数を合わせる
                    var loopTo5 = CountWeapon();
                    for (i = 1; i <= loopTo5; i++)
                    {
                        string argattr9 = "共";
                        string argattr10 = "共";
                        if (IsWeaponClassifiedAs(i, argattr9) & lv == WeaponLevel(i, argattr10) & MaxStock(a) > 0)
                        {
                            if (MaxBullet(i) > MaxStock(a))
                            {
                                SetBullet(i, GeneralLib.MinLng(Bullet(i), (MaxBullet(i) * Stock(a)) / MaxStock(a)));
                            }
                            else
                            {
                                SetBullet(i, GeneralLib.MinLng(Bullet(i), (MaxBullet(i) * Stock(a) / (double)MaxStock(a) + 0.49999d)));
                            }
                        }
                    }
                }
            }

            // 斉属性武器の処理
            var loopTo6 = CountWeapon();
            for (w = 1; w <= loopTo6; w++)
            {
                string argattr12 = "斉";
                if (IsWeaponClassifiedAs(w, argattr12))
                {
                    // 弾数を合わせる
                    var loopTo7 = CountWeapon();
                    for (i = 1; i <= loopTo7; i++)
                    {
                        if (w != i & MaxBullet(i) > 0)
                        {
                            SetBullet(w, GeneralLib.MinLng(Bullet(w), (MaxBullet(w) * Bullet(i) / (double)MaxBullet(i) + 0.49999d)));
                        }
                    }
                }
            }

            // 他の形態の弾数も変更
            int counter;
            var loopTo8 = CountOtherForm();
            for (i = 1; i <= loopTo8; i++)
            {
                object argIndex1 = i;
                {
                    var withBlock = OtherForm(argIndex1);
                    idx = 1;
                    var loopTo9 = CountWeapon();
                    for (j = 1; j <= loopTo9; j++)
                    {
                        counter = idx;
                        var loopTo10 = withBlock.CountWeapon();
                        for (k = counter; k <= loopTo10; k++)
                        {
                            if ((Weapon(j).Name ?? "") == (withBlock.Weapon(k).Name ?? "") & MaxBullet(j) > 0 & withBlock.MaxBullet(k) > 0)
                            {
                                withBlock.SetBullet(k, ((withBlock.MaxBullet(k) * Bullet(j)) / MaxBullet(j)));
                                idx = (k + 1);
                                break;
                            }
                        }
                    }

                    idx = 1;
                    var loopTo11 = CountAbility();
                    for (j = 1; j <= loopTo11; j++)
                    {
                        counter = idx;
                        var loopTo12 = withBlock.CountAbility();
                        for (k = counter; k <= loopTo12; k++)
                        {
                            if ((Ability(j).Name ?? "") == (withBlock.Ability(k).Name ?? "") & MaxStock(j) > 0 & withBlock.MaxStock(k) > 0)
                            {
                                withBlock.SetStock(k, ((withBlock.MaxStock(k) * Stock(j)) / MaxStock(j)));
                                idx = (k + 1);
                                break;
                            }
                        }
                    }
                }
            }
        }



        // === アビリティ関連処理 ===

        // アビリティ
        public AbilityData Ability(int a)
        {
            AbilityData AbilityRet = default;
            AbilityRet = adata[a];
            return AbilityRet;
        }

        // アビリティ総数
        public int CountAbility()
        {
            int CountAbilityRet = default;
            CountAbilityRet = Information.UBound(adata);
            return CountAbilityRet;
        }

        // アビリティの愛称
        public string AbilityNickname(int a)
        {
            string AbilityNicknameRet = default;
            Unit u;

            // 愛称内の式置換のため、デフォルトユニットを一時的に変更する
            u = Event_Renamed.SelectedUnitForEvent;
            Event_Renamed.SelectedUnitForEvent = this;
            AbilityNicknameRet = adata[a].Nickname();
            Event_Renamed.SelectedUnitForEvent = u;
            return AbilityNicknameRet;
        }

        // アビリティ a の最小射程
        public int AbilityMinRange(int a)
        {
            int AbilityMinRangeRet = default;
            AbilityMinRangeRet = Ability(a).MinRange;
            string argattr1 = "小";
            if (IsAbilityClassifiedAs(a, argattr1))
            {
                string argattr = "小";
                AbilityMinRangeRet = GeneralLib.MinLng((AbilityMinRangeRet + AbilityLevel(a, argattr)), Ability(a).MaxRange);
            }

            return AbilityMinRangeRet;
        }

        // アビリティ a の最大射程
        public int AbilityMaxRange(int a)
        {
            int AbilityMaxRangeRet = default;
            AbilityMaxRangeRet = Ability(a).MaxRange;
            return AbilityMaxRangeRet;
        }

        // アビリティ a の消費ＥＮ
        public int AbilityENConsumption(int a)
        {
            int AbilityENConsumptionRet = default;
            // UPGRADE_NOTE: rate は rate_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
            double rate_Renamed;
            Pilot p;
            int i;
            {
                var withBlock = Ability(a);
                AbilityENConsumptionRet = withBlock.ENConsumption;

                // パイロットの能力によって術及び技の消費ＥＮは減少する
                if (CountPilot() > 0)
                {
                    p = MainPilot();

                    // 術に該当するか？
                    if (IsSpellAbility(a))
                    {
                        // 術に該当する場合は術技能によってＥＮ消費量を変える
                        object argIndex1 = "術";
                        string argref_mode = "";
                        switch (p.SkillLevel(argIndex1, ref_mode: argref_mode))
                        {
                            case 1d:
                                {
                                    break;
                                }

                            case 2d:
                                {
                                    AbilityENConsumptionRet = (0.9d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 3d:
                                {
                                    AbilityENConsumptionRet = (0.8d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 4d:
                                {
                                    AbilityENConsumptionRet = (0.7d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 5d:
                                {
                                    AbilityENConsumptionRet = (0.6d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 6d:
                                {
                                    AbilityENConsumptionRet = (0.5d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 7d:
                                {
                                    AbilityENConsumptionRet = (0.45d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 8d:
                                {
                                    AbilityENConsumptionRet = (0.4d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 9d:
                                {
                                    AbilityENConsumptionRet = (0.35d * AbilityENConsumptionRet);
                                    break;
                                }

                            case var @case when @case >= 10d:
                                {
                                    AbilityENConsumptionRet = (0.3d * AbilityENConsumptionRet);
                                    break;
                                }
                        }

                        AbilityENConsumptionRet = GeneralLib.MinLng(GeneralLib.MaxLng(AbilityENConsumptionRet, 5), withBlock.ENConsumption);
                    }

                    // 技に該当するか？
                    if (IsFeatAbility(a))
                    {
                        // 技に該当する場合は技技能によってＥＮ消費量を変える
                        object argIndex2 = "技";
                        string argref_mode1 = "";
                        switch (p.SkillLevel(argIndex2, ref_mode: argref_mode1))
                        {
                            case 1d:
                                {
                                    break;
                                }

                            case 2d:
                                {
                                    AbilityENConsumptionRet = (0.9d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 3d:
                                {
                                    AbilityENConsumptionRet = (0.8d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 4d:
                                {
                                    AbilityENConsumptionRet = (0.7d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 5d:
                                {
                                    AbilityENConsumptionRet = (0.6d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 6d:
                                {
                                    AbilityENConsumptionRet = (0.5d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 7d:
                                {
                                    AbilityENConsumptionRet = (0.45d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 8d:
                                {
                                    AbilityENConsumptionRet = (0.4d * AbilityENConsumptionRet);
                                    break;
                                }

                            case 9d:
                                {
                                    AbilityENConsumptionRet = (0.35d * AbilityENConsumptionRet);
                                    break;
                                }

                            case var case1 when case1 >= 10d:
                                {
                                    AbilityENConsumptionRet = (0.3d * AbilityENConsumptionRet);
                                    break;
                                }
                        }

                        AbilityENConsumptionRet = GeneralLib.MinLng(GeneralLib.MaxLng(AbilityENConsumptionRet, 5), withBlock.ENConsumption);
                    }
                }

                // ＥＮ消費減少能力による修正
                rate_Renamed = 1d;
                string argfname = "ＥＮ消費減少";
                if (IsFeatureAvailable(argfname))
                {
                    var loopTo = CountFeature();
                    for (i = 1; i <= loopTo; i++)
                    {
                        object argIndex3 = i;
                        if (Feature(argIndex3) == "ＥＮ消費減少")
                        {
                            double localFeatureLevel() { object argIndex1 = i; var ret = FeatureLevel(argIndex1); return ret; }

                            rate_Renamed = rate_Renamed - 0.1d * localFeatureLevel();
                        }
                    }
                }

                if (rate_Renamed < 0.1d)
                {
                    rate_Renamed = 0.1d;
                }

                AbilityENConsumptionRet = (rate_Renamed * AbilityENConsumptionRet);
            }

            return AbilityENConsumptionRet;
        }

        // アビリティ a が属性 attr を持つかどうか
        public bool IsAbilityClassifiedAs(int a, string attr)
        {
            bool IsAbilityClassifiedAsRet = default;
            if (GeneralLib.InStrNotNest(Ability(a).Class_Renamed, attr) > 0)
            {
                IsAbilityClassifiedAsRet = true;
            }
            else
            {
                IsAbilityClassifiedAsRet = false;
            }

            return IsAbilityClassifiedAsRet;
        }

        // アビリティ a の属性 atrr のレベル
        public double AbilityLevel(int a, string attr)
        {
            double AbilityLevelRet = default;
            string attrlv, aclass;
            int start_idx, i;
            string c;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 535884


            Input:

                    On Error GoTo ErrorHandler

             */
            attrlv = attr + "L";

            // アビリティ属性を調べてみる
            aclass = Ability(a).Class_Renamed;

            // レベル指定があるか？
            start_idx = Strings.InStr(aclass, attrlv);
            if (start_idx == 0)
            {
                return AbilityLevelRet;
            }

            // レベル指定部分の切り出し
            start_idx = (start_idx + Strings.Len(attrlv));
            i = start_idx;
            while (true)
            {
                c = Strings.Mid(aclass, i, 1);
                if (string.IsNullOrEmpty(c))
                {
                    break;
                }

                switch (Strings.Asc(c))
                {
                    case var @case when 45 <= @case && @case <= 46:
                    case var case1 when 48 <= case1 && case1 <= 57: // "-", ".", 0-9
                        {
                            break;
                        }

                    default:
                        {
                            break;
                        }
                }

                i = (i + 1);
            }

            AbilityLevelRet = Conversions.ToDouble(Strings.Mid(aclass, start_idx, i - start_idx));
            return AbilityLevelRet;
            ErrorHandler:
            ;
            string argmsg = Name + "の" + "アビリティ「" + Ability(a).Name + "」の" + "属性「" + attr + "」のレベル指定が不正です";
            GUI.ErrorMessage(argmsg);
        }

        // アビリティ a が術かどうか
        public bool IsSpellAbility(int a)
        {
            bool IsSpellAbilityRet = default;
            int i;
            string nskill;
            string argattr = "術";
            if (IsAbilityClassifiedAs(a, argattr))
            {
                IsSpellAbilityRet = true;
                return IsSpellAbilityRet;
            }

            {
                var withBlock = MainPilot();
                var loopTo = GeneralLib.LLength(Ability(a).NecessarySkill);
                for (i = 1; i <= loopTo; i++)
                {
                    nskill = GeneralLib.LIndex(Ability(a).NecessarySkill, i);
                    if (Strings.InStr(nskill, "Lv") > 0)
                    {
                        nskill = Strings.Left(nskill, Strings.InStr(nskill, "Lv") - 1);
                    }

                    if (withBlock.SkillType(nskill) == "術")
                    {
                        IsSpellAbilityRet = true;
                        return IsSpellAbilityRet;
                    }
                }
            }

            return IsSpellAbilityRet;
        }

        // アビリティ a が技かどうか
        public bool IsFeatAbility(int a)
        {
            bool IsFeatAbilityRet = default;
            int i;
            string nskill;
            string argattr = "技";
            if (IsAbilityClassifiedAs(a, argattr))
            {
                IsFeatAbilityRet = true;
                return IsFeatAbilityRet;
            }

            {
                var withBlock = MainPilot();
                var loopTo = GeneralLib.LLength(Ability(a).NecessarySkill);
                for (i = 1; i <= loopTo; i++)
                {
                    nskill = GeneralLib.LIndex(Ability(a).NecessarySkill, i);
                    if (Strings.InStr(nskill, "Lv") > 0)
                    {
                        nskill = Strings.Left(nskill, Strings.InStr(nskill, "Lv") - 1);
                    }

                    if (withBlock.SkillType(nskill) == "技")
                    {
                        IsFeatAbilityRet = true;
                        return IsFeatAbilityRet;
                    }
                }
            }

            return IsFeatAbilityRet;
        }

        // アビリティ a が使用可能かどうか
        // ref_mode はユニットの状態（移動前、移動後）を示す
        public bool IsAbilityAvailable(int a, string ref_mode)
        {
            bool IsAbilityAvailableRet = default;
            int j, i, k;
            AbilityData ad;
            string uname, pname;
            Unit u;
            IsAbilityAvailableRet = false;
            ad = Ability(a);

            // イベントコマンド「Disable」
            if (IsDisabled(ad.Name))
            {
                return IsAbilityAvailableRet;
            }

            // パイロットが乗っていなければ常に使用可能と判定
            if (CountPilot() == 0)
            {
                IsAbilityAvailableRet = true;
                return IsAbilityAvailableRet;
            }

            // 必要技能
            if (!IsAbilityMastered(a))
            {
                return IsAbilityAvailableRet;
            }

            // 必要条件
            if (!IsAbilityEnabled(a))
            {
                return IsAbilityAvailableRet;
            }

            // ステータス表示では必要技能だけ満たしていればＯＫ
            if (ref_mode == "インターミッション" | string.IsNullOrEmpty(ref_mode))
            {
                IsAbilityAvailableRet = true;
                return IsAbilityAvailableRet;
            }

            {
                var withBlock = MainPilot();
                // 必要気力
                if (ad.NecessaryMorale > 0)
                {
                    if (withBlock.Morale < ad.NecessaryMorale)
                    {
                        return IsAbilityAvailableRet;
                    }
                }

                // 霊力消費アビリティ
                string argattr2 = "霊";
                string argattr3 = "プ";
                if (IsAbilityClassifiedAs(a, argattr2))
                {
                    string argattr = "霊";
                    if (withBlock.Plana < AbilityLevel(a, argattr) * 5d)
                    {
                        return IsAbilityAvailableRet;
                    }
                }
                else if (IsAbilityClassifiedAs(a, argattr3))
                {
                    string argattr1 = "プ";
                    if (withBlock.Plana < AbilityLevel(a, argattr1) * 5d)
                    {
                        return IsAbilityAvailableRet;
                    }
                }
            }

            // 属性使用不能状態
            object argIndex1 = "オーラ使用不能";
            if (ConditionLifetime(argIndex1) > 0)
            {
                string argattr4 = "オ";
                if (IsAbilityClassifiedAs(a, argattr4))
                {
                    return IsAbilityAvailableRet;
                }
            }

            object argIndex2 = "超能力使用不能";
            if (ConditionLifetime(argIndex2) > 0)
            {
                string argattr5 = "超";
                if (IsAbilityClassifiedAs(a, argattr5))
                {
                    return IsAbilityAvailableRet;
                }
            }

            object argIndex3 = "同調率使用不能";
            if (ConditionLifetime(argIndex3) > 0)
            {
                string argattr6 = "シ";
                if (IsAbilityClassifiedAs(a, argattr6))
                {
                    return IsAbilityAvailableRet;
                }
            }

            object argIndex4 = "超感覚使用不能";
            if (ConditionLifetime(argIndex4) > 0)
            {
                string argattr7 = "サ";
                if (IsAbilityClassifiedAs(a, argattr7))
                {
                    return IsAbilityAvailableRet;
                }
            }

            object argIndex5 = "知覚強化使用不能";
            if (ConditionLifetime(argIndex5) > 0)
            {
                string argattr8 = "サ";
                if (IsAbilityClassifiedAs(a, argattr8))
                {
                    return IsAbilityAvailableRet;
                }
            }

            object argIndex6 = "霊力使用不能";
            if (ConditionLifetime(argIndex6) > 0)
            {
                string argattr9 = "霊";
                if (IsAbilityClassifiedAs(a, argattr9))
                {
                    return IsAbilityAvailableRet;
                }
            }

            object argIndex7 = "術使用不能";
            if (ConditionLifetime(argIndex7) > 0)
            {
                string argattr10 = "術";
                if (IsAbilityClassifiedAs(a, argattr10))
                {
                    return IsAbilityAvailableRet;
                }
            }

            object argIndex8 = "技使用不能";
            if (ConditionLifetime(argIndex8) > 0)
            {
                string argattr11 = "技";
                if (IsAbilityClassifiedAs(a, argattr11))
                {
                    return IsAbilityAvailableRet;
                }
            }

            var loopTo = CountCondition();
            for (i = 1; i <= loopTo; i++)
            {
                string localCondition3() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                if (Strings.Len(localCondition3()) > 6)
                {
                    string localCondition2() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                    if (Strings.Right(localCondition2(), 6) == "属性使用不能")
                    {
                        string localCondition() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                        string localCondition1() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                        string argstring2 = Strings.Left(localCondition(), Strings.Len(localCondition1()) - 6);
                        if (GeneralLib.InStrNotNest(Ability(a).Class_Renamed, argstring2) > 0)
                        {
                            return IsAbilityAvailableRet;
                        }
                    }
                }
            }

            // 弾数が足りるか
            if (MaxStock(a) > 0)
            {
                if (Stock(a) < 1)
                {
                    return IsAbilityAvailableRet;
                }
            }

            // ＥＮが足りるか
            if (ad.ENConsumption > 0)
            {
                if (EN < AbilityENConsumption(a))
                {
                    return IsAbilityAvailableRet;
                }
            }

            // お金が足りるか……
            if (Party == "味方")
            {
                string argattr13 = "銭";
                if (IsAbilityClassifiedAs(a, argattr13))
                {
                    string argattr12 = "銭";
                    if (SRC.Money < GeneralLib.MaxLng(AbilityLevel(a, argattr12), 1) * Value / 10)
                    {
                        return IsAbilityAvailableRet;
                    }
                }
            }

            // 移動不能時には移動型マップアビリティは使用不能
            object argIndex9 = "移動不能";
            if (IsConditionSatisfied(argIndex9))
            {
                string argattr14 = "Ｍ移";
                if (IsAbilityClassifiedAs(a, argattr14))
                {
                    return IsAbilityAvailableRet;
                }
            }

            // 術及び音声技は沈黙状態では使用不能
            object argIndex10 = "沈黙";
            if (IsConditionSatisfied(argIndex10))
            {
                {
                    var withBlock1 = MainPilot();
                    string argattr15 = "音";
                    if (IsSpellAbility(a) | IsAbilityClassifiedAs(a, argattr15))
                    {
                        return IsAbilityAvailableRet;
                    }
                }
            }

            // 術は狂戦士状態では使用不能
            object argIndex11 = "狂戦士";
            if (IsConditionSatisfied(argIndex11))
            {
                {
                    var withBlock2 = MainPilot();
                    if (IsSpellAbility(a))
                    {
                        return IsAbilityAvailableRet;
                    }
                }
            }

            // 合体技の処理
            string argattr16 = "合";
            if (IsAbilityClassifiedAs(a, argattr16))
            {
                if (!IsCombinationAbilityAvailable(a))
                {
                    return IsAbilityAvailableRet;
                }
            }

            // この地形で変形できるか？
            string argattr17 = "変";
            if (IsAbilityClassifiedAs(a, argattr17))
            {
                string argfname = "変形技";
                string argfname1 = "ノーマルモード";
                if (IsFeatureAvailable(argfname))
                {
                    var loopTo1 = CountFeature();
                    for (i = 1; i <= loopTo1; i++)
                    {
                        string localFeature() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                        string localFeatureData1() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localLIndex1() { string arglist = hsc19c10c9cae54732ac7c9c2e90257bd2(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        if (localFeature() == "変形技" & (localLIndex1() ?? "") == (ad.Name ?? ""))
                        {
                            string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string localLIndex() { string arglist = hs999a427db36f427e9868be6a72c4f4c0(); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                            Unit localOtherForm() { object argIndex1 = (object)hsb208b29f50af4a41be714b7083a85c98(); var ret = OtherForm(argIndex1); return ret; }

                            if (!localOtherForm().IsAbleToEnter(x, y))
                            {
                                return IsAbilityAvailableRet;
                            }
                        }
                    }
                }
                else if (IsFeatureAvailable(argfname1))
                {
                    string localLIndex2() { object argIndex1 = "ノーマルモード"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                    Unit localOtherForm1() { object argIndex1 = (object)hs89e8cc23250142a2b15ab7b087ddcbd2(); var ret = OtherForm(argIndex1); return ret; }

                    if (!localOtherForm1().IsAbleToEnter(x, y))
                    {
                        return IsAbilityAvailableRet;
                    }
                }

                object argIndex12 = "形態固定";
                if (IsConditionSatisfied(argIndex12))
                {
                    return IsAbilityAvailableRet;
                }

                object argIndex13 = "機体固定";
                if (IsConditionSatisfied(argIndex13))
                {
                    return IsAbilityAvailableRet;
                }
            }

            // 瀕死時限定
            string argattr18 = "瀕";
            if (IsAbilityClassifiedAs(a, argattr18))
            {
                if (HP > MaxHP / 4)
                {
                    return IsAbilityAvailableRet;
                }
            }

            // 自動チャージアビリティを充填中
            object argIndex14 = AbilityNickname(a) + "充填中";
            if (IsConditionSatisfied(argIndex14))
            {
                return IsAbilityAvailableRet;
            }
            // 共有武器＆アビリティが充填中の場合も使用不可
            int lv;
            string argattr24 = "共";
            if (IsAbilityClassifiedAs(a, argattr24))
            {
                string argattr19 = "共";
                lv = AbilityLevel(a, argattr19);
                var loopTo2 = CountAbility();
                for (i = 1; i <= loopTo2; i++)
                {
                    string argattr21 = "共";
                    if (IsAbilityClassifiedAs(i, argattr21))
                    {
                        string argattr20 = "共";
                        if (lv == AbilityLevel(i, argattr20))
                        {
                            object argIndex15 = AbilityNickname(i) + "充填中";
                            if (IsConditionSatisfied(argIndex15))
                            {
                                return IsAbilityAvailableRet;
                            }
                        }
                    }
                }

                var loopTo3 = CountAbility();
                for (i = 1; i <= loopTo3; i++)
                {
                    string argattr23 = "共";
                    if (IsAbilityClassifiedAs(i, argattr23))
                    {
                        string argattr22 = "共";
                        if (lv == AbilityLevel(i, argattr22))
                        {
                            object argIndex16 = AbilityNickname(i) + "充填中";
                            if (IsConditionSatisfied(argIndex16))
                            {
                                return IsAbilityAvailableRet;
                            }
                        }
                    }
                }
            }

            // 使用禁止
            string argattr25 = "禁";
            if (Conversions.ToInteger(IsAbilityClassifiedAs(a, argattr25)) > 0)
            {
                return IsAbilityAvailableRet;
            }

            // チャージ判定であればここまででＯＫ
            if (ref_mode == "チャージ")
            {
                IsAbilityAvailableRet = true;
                return IsAbilityAvailableRet;
            }

            // チャージ式アビリティ
            string argattr26 = "Ｃ";
            if (IsAbilityClassifiedAs(a, argattr26))
            {
                object argIndex17 = "チャージ完了";
                if (!IsConditionSatisfied(argIndex17))
                {
                    return IsAbilityAvailableRet;
                }
            }

            var loopTo4 = ad.CountEffect();
            for (i = 1; i <= loopTo4; i++)
            {
                object argIndex22 = i;
                if (ad.EffectType(argIndex22) == "召喚")
                {
                    // 召喚は既に召喚を行っている場合には不可能
                    var loopTo5 = CountServant();
                    for (j = 1; j <= loopTo5; j++)
                    {
                        Unit localServant() { object argIndex1 = j; var ret = Servant(argIndex1); return ret; }

                        {
                            var withBlock3 = localServant().CurrentForm();
                            switch (withBlock3.Status_Renamed ?? "")
                            {
                                case "出撃":
                                case "格納":
                                    {
                                        // 使用不可
                                        return IsAbilityAvailableRet;
                                    }

                                case "旧主形態":
                                case "旧形態":
                                    {
                                        // 合体後の形態が出撃中なら使用不可
                                        var loopTo6 = withBlock3.CountFeature();
                                        for (k = 1; k <= loopTo6; k++)
                                        {
                                            object argIndex19 = k;
                                            if (withBlock3.Feature(argIndex19) == "合体")
                                            {
                                                string localFeatureData2() { object argIndex1 = k; var ret = withBlock3.FeatureData(argIndex1); return ret; }

                                                string arglist = localFeatureData2();
                                                uname = GeneralLib.LIndex(arglist, 2);
                                                object argIndex18 = uname;
                                                if (SRC.UList.IsDefined(argIndex18))
                                                {
                                                    Unit localItem() { object argIndex1 = uname; var ret = SRC.UList.Item(argIndex1); return ret; }

                                                    {
                                                        var withBlock4 = localItem().CurrentForm();
                                                        if (withBlock4.Status_Renamed == "出撃" | withBlock4.Status_Renamed == "格納")
                                                        {
                                                            return IsAbilityAvailableRet;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        break;
                                    }
                            }
                        }
                    }

                    // 召喚ユニットのデータがちゃんと定義されているかチェック
                    string localEffectData() { object argIndex1 = i; var ret = ad.EffectData(argIndex1); return ret; }

                    bool localIsDefined() { object argIndex1 = (object)hsdeb28db1320b43f3b566123058fdd2af(); var ret = SRC.UDList.IsDefined(argIndex1); return ret; }

                    if (!localIsDefined())
                    {
                        return IsAbilityAvailableRet;
                    }

                    string localEffectData1() { object argIndex1 = i; var ret = ad.EffectData(argIndex1); return ret; }

                    UnitData localItem1() { object argIndex1 = (object)hsdcada415e8eb41c68f44c81ef2bb94c6(); var ret = SRC.UDList.Item(argIndex1); return ret; }

                    object argIndex20 = "追加パイロット";
                    pname = localItem1().FeatureData(argIndex20);
                    bool localIsDefined1() { object argIndex1 = pname; var ret = SRC.PDList.IsDefined(argIndex1); return ret; }

                    if (!localIsDefined1())
                    {
                        return IsAbilityAvailableRet;
                    }

                    // 召喚するユニットに乗るパイロットが汎用パイロットでもザコパイロットでも
                    // ない場合、そのユニットが既に出撃中であれば使用不可
                    if (Strings.InStr(pname, "(汎用)") == 0 & Strings.InStr(pname, "(ザコ)") == 0)
                    {
                        object argIndex21 = pname;
                        if (SRC.PList.IsDefined(argIndex21))
                        {
                            Pilot localItem2() { object argIndex1 = pname; var ret = SRC.PList.Item(argIndex1); return ret; }

                            u = localItem2().Unit_Renamed;
                            if (u is object)
                            {
                                if (u.Status_Renamed == "出撃" | u.Status_Renamed == "格納")
                                {
                                    return IsAbilityAvailableRet;
                                }
                            }
                        }
                    }
                }
            }

            if (ref_mode == "ステータス")
            {
                IsAbilityAvailableRet = true;
                return IsAbilityAvailableRet;
            }

            var loopTo7 = ad.CountEffect();
            for (i = 1; i <= loopTo7; i++)
            {
                object argIndex24 = i;
                if (ad.EffectType(argIndex24) == "変身")
                {
                    // 自分を変身させる場合
                    if (this.Ability(a).MaxRange == 0)
                    {
                        // ノーマルモードを持つユニットは変身できない
                        // (変身からの復帰が出来ないため)
                        string argfname2 = "ノーマルモード";
                        if (IsFeatureAvailable(argfname2))
                        {
                            return IsAbilityAvailableRet;
                        }

                        // その場所で変身可能か？
                        string localEffectData2() { object argIndex1 = i; var ret = Ability(a).EffectData(argIndex1); return ret; }

                        string localLIndex3() { string arglist = hsc2f37474313640f6843767ac6d51a5dd(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        object argIndex23 = localLIndex3();
                        {
                            var withBlock5 = OtherForm(argIndex23);
                            if (!withBlock5.IsAbleToEnter(x, y))
                            {
                                return IsAbilityAvailableRet;
                            }
                        }
                    }
                }
            }

            if (ref_mode == "移動前")
            {
                IsAbilityAvailableRet = true;
                return IsAbilityAvailableRet;
            }

            if (AbilityMaxRange(a) > 1 | AbilityMaxRange(a) == 0)
            {
                string argattr27 = "Ｐ";
                if (IsAbilityClassifiedAs(a, argattr27))
                {
                    IsAbilityAvailableRet = true;
                }
                else
                {
                    IsAbilityAvailableRet = false;
                }
            }
            else
            {
                string argattr28 = "Ｑ";
                if (IsAbilityClassifiedAs(a, argattr28))
                {
                    IsAbilityAvailableRet = false;
                }
                else
                {
                    IsAbilityAvailableRet = true;
                }
            }

            return IsAbilityAvailableRet;
        }

        // アビリティ a の必要技能を満たしているか。
        public bool IsAbilityMastered(int a)
        {
            bool IsAbilityMasteredRet = default;
            Pilot argp = null;
            IsAbilityMasteredRet = IsNecessarySkillSatisfied(Ability(a).NecessarySkill, p: argp);
            return IsAbilityMasteredRet;
        }

        // アビリティ a の必要条件を満たしているか。
        public bool IsAbilityEnabled(int a)
        {
            bool IsAbilityEnabledRet = default;
            Pilot argp = null;
            IsAbilityEnabledRet = IsNecessarySkillSatisfied(Ability(a).NecessaryCondition, p: argp);
            return IsAbilityEnabledRet;
        }

        // アビリティが使用可能であり、かつ射程内に有効なターゲットがいるかどうか
        public bool IsAbilityUseful(int a, string ref_mode)
        {
            bool IsAbilityUsefulRet = default;
            int i, j;
            int max_range, min_range;

            // アビリティが使用可能か？
            if (!IsAbilityAvailable(a, ref_mode))
            {
                IsAbilityUsefulRet = false;
                return IsAbilityUsefulRet;
            }

            // 投下型マップアビリティと扇型マップアビリティは特殊なので判定ができない
            // 移動型マップアビリティは移動手段として使うことを考慮
            string argattr = "Ｍ投";
            string argattr1 = "Ｍ扇";
            string argattr2 = "Ｍ移";
            if (IsAbilityClassifiedAs(a, argattr) | IsAbilityClassifiedAs(a, argattr1) | IsAbilityClassifiedAs(a, argattr2))
            {
                IsAbilityUsefulRet = true;
                return IsAbilityUsefulRet;
            }

            // 召喚は常に有用
            var loopTo = Ability(a).CountEffect();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex1 = i;
                if (Ability(a).EffectType(argIndex1) == "召喚")
                {
                    IsAbilityUsefulRet = true;
                    return IsAbilityUsefulRet;
                }
            }

            min_range = AbilityMinRange(a);
            max_range = AbilityMaxRange(a);

            // 使用する相手がいるか検索
            var loopTo1 = GeneralLib.MinLng(x + max_range, Map.MapWidth);
            for (i = GeneralLib.MaxLng(x - max_range, 1); i <= loopTo1; i++)
            {
                var loopTo2 = GeneralLib.MinLng(y + max_range, Map.MapHeight);
                for (j = GeneralLib.MaxLng(y - max_range, 1); j <= loopTo2; j++)
                {
                    if ((Math.Abs((x - i)) + Math.Abs((y - j))) > max_range)
                    {
                        goto NextLoop;
                    }

                    if (Map.MapDataForUnit[i, j] is null)
                    {
                        goto NextLoop;
                    }

                    if (IsAbilityEffective(a, Map.MapDataForUnit[i, j]))
                    {
                        IsAbilityUsefulRet = true;
                        return IsAbilityUsefulRet;
                    }

                    NextLoop:
                    ;
                }
            }

            IsAbilityUsefulRet = false;
            return IsAbilityUsefulRet;
        }

        // アビリティがターゲットtに対して有効(役に立つ)かどうか
        public bool IsAbilityEffective(int a, Unit t)
        {
            bool IsAbilityEffectiveRet = default;
            int i, j;
            string edata;
            double elevel;
            bool flag;
            {
                var withBlock = t;
                // 敵には使用できない。
                // IsEnemyでは魅了等がかかった味方ユニットを敵と認識してしまうので
                // ここでは独自の判定基準を使う
                switch (Party ?? "")
                {
                    case "味方":
                    case "ＮＰＣ":
                        {
                            if (withBlock.Party != "味方" & withBlock.Party0 != "味方" & withBlock.Party != "ＮＰＣ" & withBlock.Party0 != "ＮＰＣ")
                            {
                                return IsAbilityEffectiveRet;
                            }

                            break;
                        }

                    default:
                        {
                            if ((withBlock.Party ?? "") != (Party ?? "") & (withBlock.Party0 ?? "") != (Party ?? ""))
                            {
                                return IsAbilityEffectiveRet;
                            }

                            break;
                        }
                }

                // アビリティがそのユニットに対して適用可能か？
                if (!IsAbilityApplicable(a, t))
                {
                    return IsAbilityEffectiveRet;
                }

                IsAbilityEffectiveRet = true;
                var loopTo = Ability(a).CountEffect();
                for (i = 1; i <= loopTo; i++)
                {
                    object argIndex1 = i;
                    edata = Ability(a).EffectData(argIndex1);
                    object argIndex2 = i;
                    elevel = Ability(a).EffectLevel(argIndex2);
                    object argIndex36 = i;
                    switch (Ability(a).EffectType(argIndex36) ?? "")
                    {
                        case "回復":
                            {
                                if (elevel > 0d)
                                {
                                    if (withBlock.HP < withBlock.MaxHP)
                                    {
                                        object argIndex3 = "ゾンビ";
                                        if (!withBlock.IsConditionSatisfied(argIndex3))
                                        {
                                            IsAbilityEffectiveRet = true;
                                            return IsAbilityEffectiveRet;
                                        }
                                    }

                                    IsAbilityEffectiveRet = false;
                                }
                                else
                                {
                                    // ＨＰを減少させるためのアビリティというのは有り得るので
                                    IsAbilityEffectiveRet = true;
                                    return IsAbilityEffectiveRet;
                                }

                                break;
                            }

                        case "治癒":
                            {
                                if (string.IsNullOrEmpty(edata))
                                {
                                    object argIndex4 = "攻撃不能";
                                    object argIndex5 = "移動不能";
                                    object argIndex6 = "装甲劣化";
                                    object argIndex7 = "混乱";
                                    object argIndex8 = "恐怖";
                                    object argIndex9 = "踊り";
                                    object argIndex10 = "狂戦士";
                                    object argIndex11 = "ゾンビ";
                                    object argIndex12 = "回復不能";
                                    object argIndex13 = "石化";
                                    object argIndex14 = "凍結";
                                    object argIndex15 = "麻痺";
                                    object argIndex16 = "睡眠";
                                    object argIndex17 = "毒";
                                    object argIndex18 = "盲目";
                                    object argIndex19 = "沈黙";
                                    object argIndex20 = "魅了";
                                    object argIndex21 = "憑依";
                                    object argIndex22 = "オーラ使用不能";
                                    object argIndex23 = "超能力使用不能";
                                    object argIndex24 = "同調率使用不能";
                                    object argIndex25 = "超感覚使用不能";
                                    object argIndex26 = "知覚強化使用不能";
                                    object argIndex27 = "霊力使用不能";
                                    object argIndex28 = "術使用不能";
                                    object argIndex29 = "技使用不能";
                                    if (withBlock.ConditionLifetime(argIndex4) > 0 | withBlock.ConditionLifetime(argIndex5) > 0 | withBlock.ConditionLifetime(argIndex6) > 0 | withBlock.ConditionLifetime(argIndex7) > 0 | withBlock.ConditionLifetime(argIndex8) > 0 | withBlock.ConditionLifetime(argIndex9) > 0 | withBlock.ConditionLifetime(argIndex10) > 0 | withBlock.ConditionLifetime(argIndex11) > 0 | withBlock.ConditionLifetime(argIndex12) > 0 | withBlock.ConditionLifetime(argIndex13) > 0 | withBlock.ConditionLifetime(argIndex14) > 0 | withBlock.ConditionLifetime(argIndex15) > 0 | withBlock.ConditionLifetime(argIndex16) > 0 | withBlock.ConditionLifetime(argIndex17) > 0 | withBlock.ConditionLifetime(argIndex18) > 0 | withBlock.ConditionLifetime(argIndex19) > 0 | withBlock.ConditionLifetime(argIndex20) > 0 | withBlock.ConditionLifetime(argIndex21) > 0 | withBlock.ConditionLifetime(argIndex22) > 0 | withBlock.ConditionLifetime(argIndex23) > 0 | withBlock.ConditionLifetime(argIndex24) > 0 | withBlock.ConditionLifetime(argIndex25) > 0 | withBlock.ConditionLifetime(argIndex26) > 0 | withBlock.ConditionLifetime(argIndex27) > 0 | withBlock.ConditionLifetime(argIndex28) > 0 | withBlock.ConditionLifetime(argIndex29) > 0)
                                    {
                                        IsAbilityEffectiveRet = true;
                                        return IsAbilityEffectiveRet;
                                    }

                                    var loopTo1 = withBlock.CountCondition();
                                    for (j = 1; j <= loopTo1; j++)
                                    {
                                        string localCondition2() { object argIndex1 = j; var ret = withBlock.Condition(argIndex1); return ret; }

                                        if (Strings.Len(localCondition2()) > 6)
                                        {
                                            // 前回書き忘れたのですが、
                                            // 弱点はともかく有効は一概にデメリットのみでもないので
                                            // 状態回復から除外してみました。
                                            string localCondition1() { object argIndex1 = j; var ret = withBlock.Condition(argIndex1); return ret; }

                                            if (Strings.Right(localCondition1(), 6) == "属性使用不能")
                                            {
                                                string localCondition() { object argIndex1 = j; var ret = withBlock.Condition(argIndex1); return ret; }

                                                object argIndex30 = localCondition();
                                                if (withBlock.ConditionLifetime(argIndex30) > 0)
                                                {
                                                    IsAbilityEffectiveRet = true;
                                                    return IsAbilityEffectiveRet;
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    var loopTo2 = GeneralLib.LLength(edata);
                                    for (j = 1; j <= loopTo2; j++)
                                    {
                                        object argIndex31 = GeneralLib.LIndex(edata, j);
                                        if (withBlock.ConditionLifetime(argIndex31) > 0)
                                        {
                                            IsAbilityEffectiveRet = true;
                                            return IsAbilityEffectiveRet;
                                        }
                                    }
                                }

                                IsAbilityEffectiveRet = false;
                                break;
                            }

                        case "補給":
                            {
                                if (elevel > 0d)
                                {
                                    if (withBlock.EN < withBlock.MaxEN)
                                    {
                                        object argIndex32 = "ゾンビ";
                                        if (!withBlock.IsConditionSatisfied(argIndex32))
                                        {
                                            IsAbilityEffectiveRet = true;
                                            return IsAbilityEffectiveRet;
                                        }
                                    }

                                    IsAbilityEffectiveRet = false;
                                }

                                break;
                            }

                        case "霊力回復":
                        case "プラーナ回復":
                            {
                                if (elevel > 0d)
                                {
                                    if (withBlock.MainPilot().Plana < withBlock.MainPilot().MaxPlana())
                                    {
                                        IsAbilityEffectiveRet = true;
                                        return IsAbilityEffectiveRet;
                                    }

                                    IsAbilityEffectiveRet = false;
                                }

                                break;
                            }

                        case "ＳＰ回復":
                            {
                                if (elevel > 0d)
                                {
                                    if (withBlock.MainPilot().SP < withBlock.MainPilot().MaxSP)
                                    {
                                        IsAbilityEffectiveRet = true;
                                        return IsAbilityEffectiveRet;
                                    }

                                    var loopTo3 = withBlock.CountPilot();
                                    for (j = 2; j <= loopTo3; j++)
                                    {
                                        Pilot localPilot() { object argIndex1 = j; var ret = withBlock.Pilot(argIndex1); return ret; }

                                        Pilot localPilot1() { object argIndex1 = j; var ret = withBlock.Pilot(argIndex1); return ret; }

                                        if (localPilot().SP < localPilot1().MaxSP)
                                        {
                                            IsAbilityEffectiveRet = true;
                                            return IsAbilityEffectiveRet;
                                        }
                                    }

                                    var loopTo4 = withBlock.CountSupport();
                                    for (j = 1; j <= loopTo4; j++)
                                    {
                                        Pilot localSupport() { object argIndex1 = j; var ret = withBlock.Support(argIndex1); return ret; }

                                        Pilot localSupport1() { object argIndex1 = j; var ret = withBlock.Support(argIndex1); return ret; }

                                        if (localSupport().SP < localSupport1().MaxSP)
                                        {
                                            IsAbilityEffectiveRet = true;
                                            return IsAbilityEffectiveRet;
                                        }
                                    }

                                    string argfname = "追加サポート";
                                    if (withBlock.IsFeatureAvailable(argfname))
                                    {
                                        if (withBlock.AdditionalSupport().SP < withBlock.AdditionalSupport().MaxSP)
                                        {
                                            IsAbilityEffectiveRet = true;
                                            return IsAbilityEffectiveRet;
                                        }
                                    }

                                    IsAbilityEffectiveRet = false;
                                }

                                break;
                            }

                        case "気力増加":
                            {
                                if (elevel > 0d)
                                {
                                    {
                                        var withBlock1 = withBlock.MainPilot();
                                        if (withBlock1.Morale < withBlock1.MaxMorale & withBlock1.Personality != "機械")
                                        {
                                            IsAbilityEffectiveRet = true;
                                            return IsAbilityEffectiveRet;
                                        }
                                    }

                                    var loopTo5 = withBlock.CountPilot();
                                    for (j = 2; j <= loopTo5; j++)
                                    {
                                        object argIndex33 = j;
                                        {
                                            var withBlock2 = withBlock.Pilot(argIndex33);
                                            if (withBlock2.Morale < withBlock2.MaxMorale & withBlock2.Personality != "機械")
                                            {
                                                IsAbilityEffectiveRet = true;
                                                return IsAbilityEffectiveRet;
                                            }
                                        }
                                    }

                                    var loopTo6 = withBlock.CountSupport();
                                    for (j = 1; j <= loopTo6; j++)
                                    {
                                        object argIndex34 = j;
                                        {
                                            var withBlock3 = withBlock.Support(argIndex34);
                                            if (withBlock3.Morale < withBlock3.MaxMorale & withBlock3.Personality != "機械")
                                            {
                                                IsAbilityEffectiveRet = true;
                                                return IsAbilityEffectiveRet;
                                            }
                                        }
                                    }

                                    string argfname1 = "追加サポート";
                                    if (withBlock.IsFeatureAvailable(argfname1))
                                    {
                                        {
                                            var withBlock4 = withBlock.AdditionalSupport();
                                            if (withBlock4.Morale < withBlock4.MaxMorale & withBlock4.Personality != "機械")
                                            {
                                                IsAbilityEffectiveRet = true;
                                                return IsAbilityEffectiveRet;
                                            }
                                        }
                                    }

                                    IsAbilityEffectiveRet = false;
                                }

                                break;
                            }

                        case "装填":
                            {
                                if (string.IsNullOrEmpty(edata))
                                {
                                    var loopTo7 = withBlock.CountWeapon();
                                    for (j = 1; j <= loopTo7; j++)
                                    {
                                        if (withBlock.Bullet(j) < withBlock.MaxBullet(j))
                                        {
                                            IsAbilityEffectiveRet = true;
                                            return IsAbilityEffectiveRet;
                                        }
                                    }
                                }
                                else
                                {
                                    var loopTo8 = withBlock.CountWeapon();
                                    for (j = 1; j <= loopTo8; j++)
                                    {
                                        if (withBlock.Bullet(j) < withBlock.MaxBullet(j))
                                        {
                                            if ((withBlock.WeaponNickname(j) ?? "") == (edata ?? "") | GeneralLib.InStrNotNest(withBlock.Weapon(j).Class_Renamed, edata) > 0)
                                            {
                                                IsAbilityEffectiveRet = true;
                                                return IsAbilityEffectiveRet;
                                            }
                                        }
                                    }
                                }

                                IsAbilityEffectiveRet = false;
                                break;
                            }

                        case "付加":
                            {
                                bool localIsConditionSatisfied() { object argIndex1 = GeneralLib.LIndex(edata, 1) + "付加"; var ret = withBlock.IsConditionSatisfied(argIndex1); return ret; }

                                string argattr = "除";
                                if (!localIsConditionSatisfied() | IsAbilityClassifiedAs(a, argattr))
                                {
                                    IsAbilityEffectiveRet = true;
                                    return IsAbilityEffectiveRet;
                                }

                                IsAbilityEffectiveRet = false;
                                break;
                            }

                        case "強化":
                            {
                                bool localIsConditionSatisfied1() { object argIndex1 = GeneralLib.LIndex(edata, 1) + "強化"; var ret = withBlock.IsConditionSatisfied(argIndex1); return ret; }

                                string argattr1 = "除";
                                if (!localIsConditionSatisfied1() | IsAbilityClassifiedAs(a, argattr1))
                                {
                                    IsAbilityEffectiveRet = true;
                                    return IsAbilityEffectiveRet;
                                }

                                IsAbilityEffectiveRet = false;
                                break;
                            }

                        case "状態":
                            {
                                bool localIsConditionSatisfied2() { object argIndex1 = edata; var ret = withBlock.IsConditionSatisfied(argIndex1); return ret; }

                                if (!localIsConditionSatisfied2())
                                {
                                    IsAbilityEffectiveRet = true;
                                    return IsAbilityEffectiveRet;
                                }

                                IsAbilityEffectiveRet = false;
                                break;
                            }

                        case "再行動":
                            {
                                if (this.Ability(a).MaxRange == 0)
                                {
                                    goto NextEffect;
                                }

                                if (withBlock.Action == 0 & withBlock.MaxAction() > 0)
                                {
                                    IsAbilityEffectiveRet = true;
                                    return IsAbilityEffectiveRet;
                                }

                                IsAbilityEffectiveRet = false;
                                break;
                            }

                        case "変身":
                            {
                                string argfname2 = "ノーマルモード";
                                if (!withBlock.IsFeatureAvailable(argfname2))
                                {
                                    IsAbilityEffectiveRet = true;
                                    return IsAbilityEffectiveRet;
                                }

                                IsAbilityEffectiveRet = false;
                                break;
                            }

                        case "能力コピー":
                            {
                                string argfname3 = "ノーマルモード";
                                object argIndex35 = "混乱";
                                var argt = this;
                                if (ReferenceEquals(t, this) | IsFeatureAvailable(argfname3) | Conversions.ToInteger(withBlock.IsConditionSatisfied(argIndex35)) > 0 | withBlock.IsEnemy(argt) | IsEnemy(t))
                                {
                                    IsAbilityEffectiveRet = false;
                                    goto NextEffect;
                                }

                                if (Strings.InStr(edata, "サイズ制限強") > 0)
                                {
                                    if ((Size ?? "") != (withBlock.Size ?? ""))
                                    {
                                        IsAbilityEffectiveRet = false;
                                        goto NextEffect;
                                    }
                                }
                                else if (Strings.InStr(edata, "サイズ制限無し") == 0)
                                {
                                    switch (Size ?? "")
                                    {
                                        case "SS":
                                            {
                                                switch (withBlock.Size ?? "")
                                                {
                                                    case "M":
                                                    case "L":
                                                    case "LL":
                                                    case "XL":
                                                        {
                                                            IsAbilityEffectiveRet = false;
                                                            goto NextEffect;
                                                            break;
                                                        }
                                                }

                                                break;
                                            }

                                        case "S":
                                            {
                                                switch (withBlock.Size ?? "")
                                                {
                                                    case "L":
                                                    case "LL":
                                                    case "XL":
                                                        {
                                                            IsAbilityEffectiveRet = false;
                                                            goto NextEffect;
                                                            break;
                                                        }
                                                }

                                                break;
                                            }

                                        case "M":
                                            {
                                                switch (withBlock.Size ?? "")
                                                {
                                                    case "SS":
                                                    case "LL":
                                                    case "XL":
                                                        {
                                                            IsAbilityEffectiveRet = false;
                                                            goto NextEffect;
                                                            break;
                                                        }
                                                }

                                                break;
                                            }

                                        case "L":
                                            {
                                                switch (withBlock.Size ?? "")
                                                {
                                                    case "SS":
                                                    case "S":
                                                    case "XL":
                                                        {
                                                            IsAbilityEffectiveRet = false;
                                                            goto NextEffect;
                                                            break;
                                                        }
                                                }

                                                break;
                                            }

                                        case "LL":
                                            {
                                                switch (withBlock.Size ?? "")
                                                {
                                                    case "SS":
                                                    case "S":
                                                    case "M":
                                                        {
                                                            IsAbilityEffectiveRet = false;
                                                            goto NextEffect;
                                                            break;
                                                        }
                                                }

                                                break;
                                            }

                                        case "XL":
                                            {
                                                switch (withBlock.Size ?? "")
                                                {
                                                    case "SS":
                                                    case "S":
                                                    case "M":
                                                    case "L":
                                                        {
                                                            IsAbilityEffectiveRet = false;
                                                            goto NextEffect;
                                                            break;
                                                        }
                                                }

                                                break;
                                            }
                                    }
                                }

                                IsAbilityEffectiveRet = true;
                                return IsAbilityEffectiveRet;
                            }
                    }

                    NextEffect:
                    ;
                }

                // そもそも効果がないものは常に使用可能とみなす
                // (include等で特殊効果を定義していると仮定)
                if (IsAbilityEffectiveRet)
                {
                    return IsAbilityEffectiveRet;
                }
            }

            return IsAbilityEffectiveRet;
        }

        // アビリティがターゲットtに対して適用可能かどうか
        public bool IsAbilityApplicable(int a, Unit t)
        {
            bool IsAbilityApplicableRet = default;
            int i;
            string fname;
            string argattr = "封";
            if (IsAbilityClassifiedAs(a, argattr))
            {
                if (!t.Weakness(Ability(a).Class_Renamed) & !t.Effective(Ability(a).Class_Renamed))
                {
                    return IsAbilityApplicableRet;
                }
            }

            string argattr1 = "限";
            if (IsAbilityClassifiedAs(a, argattr1))
            {
                bool localWeakness() { string argstring2 = "限"; string arganame = Strings.Mid(Ability(a).Class_Renamed, GeneralLib.InStrNotNest(Ability(a).Class_Renamed, argstring2) + 1); var ret = t.Weakness(arganame); return ret; }

                bool localEffective() { string argstring2 = "限"; string arganame = Strings.Mid(Ability(a).Class_Renamed, GeneralLib.InStrNotNest(Ability(a).Class_Renamed, argstring2) + 1); var ret = t.Effective(arganame); return ret; }

                if (!localWeakness() & !localEffective())
                {
                    return IsAbilityApplicableRet;
                }
            }

            if (ReferenceEquals(this, t))
            {
                // 支援専用アビリティは自分には使用できない
                string argattr2 = "援";
                if (!IsAbilityClassifiedAs(a, argattr2))
                {
                    IsAbilityApplicableRet = true;
                }

                return IsAbilityApplicableRet;
            }

            // 無効化の対象になる場合は使用出来ない
            if (t.Immune(Ability(a).Class_Renamed))
            {
                if (!t.Weakness(Ability(a).Class_Renamed) & !t.Effective(Ability(a).Class_Renamed))
                {
                    return IsAbilityApplicableRet;
                }
            }

            string argattr3 = "視";
            if (IsAbilityClassifiedAs(a, argattr3))
            {
                object argIndex1 = "盲目";
                if (t.IsConditionSatisfied(argIndex1))
                {
                    return IsAbilityApplicableRet;
                }
            }

            {
                var withBlock = t.MainPilot();
                string argattr5 = "対";
                if (IsAbilityClassifiedAs(a, argattr5))
                {
                    // UPGRADE_WARNING: Mod に新しい動作が指定されています。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="9B7D5ADD-D8FE-4819-A36C-6DEDAF088CC7"' をクリックしてください。
                    string argattr4 = "対";
                    if (withBlock.Level % AbilityLevel(a, argattr4) != 0d)
                    {
                        return IsAbilityApplicableRet;
                    }
                }

                string argattr6 = "精";
                if (IsAbilityClassifiedAs(a, argattr6))
                {
                    if (withBlock.Personality == "機械")
                    {
                        return IsAbilityApplicableRet;
                    }
                }

                string argattr7 = "♂";
                if (IsAbilityClassifiedAs(a, argattr7))
                {
                    if (withBlock.Sex != "男性")
                    {
                        return IsAbilityApplicableRet;
                    }
                }

                string argattr8 = "♀";
                if (IsAbilityClassifiedAs(a, argattr8))
                {
                    if (withBlock.Sex != "女性")
                    {
                        return IsAbilityApplicableRet;
                    }
                }
            }

            // 修理不可
            string argfname = "修理不可";
            if (t.IsFeatureAvailable(argfname))
            {
                var loopTo = Ability(a).CountEffect();
                for (i = 1; i <= loopTo; i++)
                {
                    object argIndex2 = i;
                    if (Ability(a).EffectType(argIndex2) == "回復")
                    {
                        break;
                    }
                }

                if (i <= Ability(a).CountEffect())
                {
                    object argIndex4 = "修理不可";
                    object argIndex5 = "修理不可";
                    var loopTo1 = Conversions.ToInteger(t.FeatureData(argIndex5));
                    for (i = 2; i <= loopTo1; i++)
                    {
                        object argIndex3 = "修理不可";
                        string arglist = t.FeatureData(argIndex3);
                        fname = GeneralLib.LIndex(arglist, i);
                        if (Strings.Left(fname, 1) == "!")
                        {
                            fname = Strings.Mid(fname, 2);
                            if ((fname ?? "") != (AbilityNickname(a) ?? ""))
                            {
                                return IsAbilityApplicableRet;
                            }
                        }
                        else if ((fname ?? "") == (AbilityNickname(a) ?? ""))
                        {
                            return IsAbilityApplicableRet;
                        }
                    }
                }
            }

            IsAbilityApplicableRet = true;
            return IsAbilityApplicableRet;
        }

        // ユニット t がアビリティ a の射程範囲内にいるかをチェック
        public bool IsTargetWithinAbilityRange(int a, Unit t)
        {
            bool IsTargetWithinAbilityRangeRet = default;
            int distance;
            IsTargetWithinAbilityRangeRet = true;
            distance = (Math.Abs((x - t.x)) + Math.Abs((y - t.y)));

            // 最小射程チェック
            if (distance < AbilityMinRange(a))
            {
                IsTargetWithinAbilityRangeRet = false;
                return IsTargetWithinAbilityRangeRet;
            }

            // 最大射程チェック
            if (distance > AbilityMaxRange(a))
            {
                IsTargetWithinAbilityRangeRet = false;
                return IsTargetWithinAbilityRangeRet;
            }

            // 合体技で射程が１の場合は相手を囲んでいる必要がある
            var partners = default(Unit[]);
            string argattr = "合";
            string argattr1 = "Ｍ";
            if (IsAbilityClassifiedAs(a, argattr) & !IsAbilityClassifiedAs(a, argattr1) & AbilityMaxRange(a) == 1)
            {
                string argctype_Renamed = "アビリティ";
                CombinationPartner(argctype_Renamed, a, partners, t.x, t.y);
                if (Information.UBound(partners) == 0)
                {
                    IsTargetWithinAbilityRangeRet = false;
                    return IsTargetWithinAbilityRangeRet;
                }
            }

            return IsTargetWithinAbilityRangeRet;
        }

        // 移動を併用した場合にユニット t がアビリティ a の射程範囲内にいるかをチェック
        public bool IsTargetReachableForAbility(int a, Unit t)
        {
            bool IsTargetReachableForAbilityRet = default;
            int i, j;
            int max_range;
            IsTargetReachableForAbilityRet = true;
            // 移動範囲から敵に攻撃が届くかをチェック
            max_range = AbilityMaxRange(a);
            var loopTo = GeneralLib.MinLng(t.x + max_range, Map.MapWidth);
            for (i = GeneralLib.MaxLng(t.x - max_range, 1); i <= loopTo; i++)
            {
                var loopTo1 = GeneralLib.MinLng(t.y + (max_range - Math.Abs((t.x - i))), Map.MapHeight);
                for (j = GeneralLib.MaxLng(t.y - (max_range - Math.Abs((t.x - i))), 1); j <= loopTo1; j++)
                {
                    if (!Map.MaskData[i, j])
                    {
                        return IsTargetReachableForAbilityRet;
                    }
                }
            }

            IsTargetReachableForAbilityRet = false;
            return IsTargetReachableForAbilityRet;
        }

        // アビリティの残り使用回数
        public int Stock(int a)
        {
            int StockRet = default;
            StockRet = (dblStock[a] * MaxStock(a));
            return StockRet;
        }

        // アビリティの最大使用回数
        public int MaxStock(int a)
        {
            int MaxStockRet = default;
            if (BossRank > 0)
            {
                MaxStockRet = (this.Ability(a).Stock * (5 + BossRank) / 5d);
            }
            else
            {
                MaxStockRet = Ability(a).Stock;
            }

            return MaxStockRet;
        }

        // アビリティの残り使用回数を設定
        public void SetStock(int a, int new_stock)
        {
            if (new_stock < 0)
            {
                dblStock[a] = 0d;
            }
            else if (MaxStock(a) > 0)
            {
                dblStock[a] = new_stock / (double)MaxStock(a);
            }
            else
            {
                dblStock[a] = 1d;
            }
        }



        // === アビリティ発動関連処理 ===

        // アビリティを使用
        public bool ExecuteAbility(int a, Unit t, bool is_map_ability = false, bool is_event = false)
        {
            bool ExecuteAbilityRet = default;
            var partners = default(Unit[]);
            int num, j, i, k, w = default;
            string aclass, aname, anickname, atype = default;
            string edata;
            double elevel, elevel2;
            double elv_mod, elv_mod2;
            int epower;
            int prev_value;
            bool is_useful = default, flag;
            Unit u;
            Pilot p;
            string buf, msg;
            string uname = default, pname, fname;
            string ftype, fdata;
            double flevel;
            string ftype2, fdata2;
            double flevel2;
            var is_anime_played = default(bool);
            double hp_ratio, en_ratio;
            int tx, ty;
            int tx2, ty2;
            string cname;
            aname = Ability(a).Name;
            anickname = AbilityNickname(a);
            aclass = Ability(a).Class_Renamed;

            // 現在の選択状況をセーブ
            Commands.SaveSelections();

            // 選択内容を切り替え
            Commands.SelectedUnit = this;
            Event_Renamed.SelectedUnitForEvent = this;
            Commands.SelectedTarget = t;
            Event_Renamed.SelectedTargetForEvent = t;
            Commands.SelectedAbility = a;
            Commands.SelectedAbilityName = aname;
            if (!is_map_ability)
            {
                // 通常アビリティの場合
                if (SRC.BattleAnimation)
                {
                    GUI.RedrawScreen();
                }

                string argattr = "合";
                if (IsAbilityClassifiedAs(a, argattr))
                {
                    // 射程が0の場合はマスクをクリアしておく
                    if (AbilityMaxRange(a) == 0)
                    {
                        var loopTo = Map.MapWidth;
                        for (i = 1; i <= loopTo; i++)
                        {
                            var loopTo1 = Map.MapHeight;
                            for (j = 1; j <= loopTo1; j++)
                                Map.MaskData[i, j] = true;
                        }

                        Map.MaskData[x, y] = false;
                    }

                    // 合体技の場合にパートナーをハイライト表示
                    if (AbilityMaxRange(a) == 1)
                    {
                        string argctype_Renamed = "アビリティ";
                        CombinationPartner(argctype_Renamed, a, partners, t.x, t.y);
                    }
                    else
                    {
                        string argctype_Renamed1 = "アビリティ";
                        CombinationPartner(argctype_Renamed1, a, partners);
                    }

                    var loopTo2 = Information.UBound(partners);
                    for (i = 1; i <= loopTo2; i++)
                    {
                        {
                            var withBlock = partners[i];
                            Map.MaskData[withBlock.x, withBlock.y] = false;
                        }
                    }

                    if (!SRC.BattleAnimation)
                    {
                        GUI.MaskScreen();
                    }
                }
                else
                {
                    partners = new Unit[1];
                    Commands.SelectedPartners = new Unit[1];
                }

                // ダイアログ用にあらかじめ追加パイロットを作成しておく
                var loopTo3 = Ability(a).CountEffect();
                for (i = 1; i <= loopTo3; i++)
                {
                    object argIndex1 = i;
                    edata = Ability(a).EffectData(argIndex1);
                    object argIndex4 = i;
                    switch (Ability(a).EffectType(argIndex4) ?? "")
                    {
                        case "変身":
                            {
                                bool localIsDefined() { object argIndex1 = GeneralLib.LIndex(edata, 1); var ret = SRC.UDList.IsDefined(argIndex1); return ret; }

                                if (!localIsDefined())
                                {
                                    string argmsg = GeneralLib.LIndex(edata, 1) + "のデータが定義されていません";
                                    GUI.ErrorMessage(argmsg);
                                    return ExecuteAbilityRet;
                                }

                                object argIndex3 = GeneralLib.LIndex(edata, 1);
                                {
                                    var withBlock1 = SRC.UDList.Item(argIndex3);
                                    string argfname = "追加パイロット";
                                    if (withBlock1.IsFeatureAvailable(argfname))
                                    {
                                        bool localIsDefined1() { object argIndex1 = "追加パイロット"; object argIndex2 = withBlock1.FeatureData(argIndex1); var ret = SRC.PList.IsDefined(argIndex2); return ret; }

                                        if (!localIsDefined1())
                                        {
                                            object argIndex2 = "追加パイロット";
                                            string argpname = withBlock1.FeatureData(argIndex2);
                                            string argpparty = Party0;
                                            string arggid = "";
                                            SRC.PList.Add(argpname, MainPilot().Level, argpparty, gid: arggid);
                                            this.Party0 = argpparty;
                                        }
                                    }
                                }

                                break;
                            }
                    }
                }

                // アビリティ使用時のメッセージ＆特殊効果
                string argmain_situation1 = aname + "(準備)";
                string argsub_situation1 = "";
                if (IsAnimationDefined(argmain_situation1, sub_situation: argsub_situation1))
                {
                    string argmain_situation = aname + "(準備)";
                    string argsub_situation = "";
                    PlayAnimation(argmain_situation, sub_situation: argsub_situation);
                }

                string argmain_situation2 = "かけ声(" + aname + ")";
                if (IsMessageDefined(argmain_situation2))
                {
                    if (!My.MyProject.Forms.frmMessage.Visible)
                    {
                        if (ReferenceEquals(Commands.SelectedTarget, this))
                        {
                            var argu1 = this;
                            Unit argu2 = null;
                            GUI.OpenMessageForm(argu1, u2: argu2);
                        }
                        else
                        {
                            var argu21 = this;
                            GUI.OpenMessageForm(Commands.SelectedTarget, argu21);
                        }
                    }

                    string argSituation = "かけ声(" + aname + ")";
                    string argmsg_mode = "";
                    PilotMessage(argSituation, msg_mode: argmsg_mode);
                }

                string argmain_situation3 = "アビリティ";
                if (IsMessageDefined(aname) | IsMessageDefined(argmain_situation3))
                {
                    if (!My.MyProject.Forms.frmMessage.Visible)
                    {
                        if (ReferenceEquals(Commands.SelectedTarget, this))
                        {
                            var argu11 = this;
                            Unit argu22 = null;
                            GUI.OpenMessageForm(argu11, u2: argu22);
                        }
                        else
                        {
                            var argu23 = this;
                            GUI.OpenMessageForm(Commands.SelectedTarget, argu23);
                        }
                    }

                    string argmsg_mode1 = "アビリティ";
                    PilotMessage(aname, argmsg_mode1);
                }

                string argmain_situation5 = aname + "(使用)";
                string argsub_situation3 = "";
                if (IsAnimationDefined(argmain_situation5, sub_situation: argsub_situation3))
                {
                    string argmain_situation4 = aname + "(使用)";
                    string argsub_situation2 = "";
                    PlayAnimation(argmain_situation4, argsub_situation2, true);
                }

                string argmain_situation7 = aname + "(発動)";
                string argsub_situation6 = "";
                string argsub_situation7 = "";
                if (IsAnimationDefined(argmain_situation7, sub_situation: argsub_situation6) | IsAnimationDefined(aname, sub_situation: argsub_situation7))
                {
                    string argmain_situation6 = aname + "(発動)";
                    string argsub_situation4 = "";
                    PlayAnimation(argmain_situation6, argsub_situation4, true);
                    is_anime_played = true;
                }
                else
                {
                    string argsub_situation5 = "";
                    SpecialEffect(aname, argsub_situation5, true);
                }

                // アビリティの種類は？
                var loopTo4 = Ability(a).CountEffect();
                for (i = 1; i <= loopTo4; i++)
                {
                    object argIndex7 = i;
                    switch (Ability(a).EffectType(argIndex7) ?? "")
                    {
                        case "召喚":
                            {
                                aname = "";
                                break;
                            }

                        case "再行動":
                            {
                                if (this.Ability(a).MaxRange > 0)
                                {
                                    object argIndex5 = i;
                                    atype = Ability(a).EffectType(argIndex5);
                                }

                                break;
                            }

                        case "解説":
                            {
                                break;
                            }

                        default:
                            {
                                object argIndex6 = i;
                                atype = Ability(a).EffectType(argIndex6);
                                break;
                            }
                    }
                }

                switch (Information.UBound(partners))
                {
                    case 0:
                        {
                            // 通常
                            msg = Nickname + "は";
                            break;
                        }

                    case 1:
                        {
                            // ２体合体
                            if ((Nickname ?? "") != (partners[1].Nickname ?? ""))
                            {
                                msg = Nickname + "は[" + partners[1].Nickname + "]と共に";
                            }
                            else if ((MainPilot().get_Nickname(false) ?? "") != (partners[1].MainPilot().get_Nickname(false) ?? ""))
                            {
                                msg = MainPilot().get_Nickname(false) + "と[" + partners[1].MainPilot().get_Nickname(false) + "]の[" + Nickname + "]は";
                            }
                            else
                            {
                                msg = Nickname + "達は";
                            }

                            break;
                        }

                    case 2:
                        {
                            // ３体合体
                            if ((Nickname ?? "") != (partners[1].Nickname ?? ""))
                            {
                                msg = Nickname + "は[" + partners[1].Nickname + "]、[" + partners[2].Nickname + "]と共に";
                            }
                            else if ((MainPilot().get_Nickname(false) ?? "") != (partners[1].MainPilot().get_Nickname(false) ?? ""))
                            {
                                msg = MainPilot().get_Nickname(false) + "、[" + partners[1].MainPilot().get_Nickname(false) + "]、[" + partners[2].MainPilot().get_Nickname(false) + "]の[" + Nickname + "]は";
                            }
                            else
                            {
                                msg = Nickname + "達は";
                            }

                            break;
                        }

                    default:
                        {
                            // ３体以上
                            msg = Nickname + "達は";
                            break;
                        }
                }

                if (IsSpellAbility(a))
                {
                    if (t is object & this.Ability(a).MaxRange != 0)
                    {
                        if (ReferenceEquals(this, t))
                        {
                            msg = msg + "自分に";
                        }
                        else
                        {
                            msg = msg + "[" + t.Nickname + "]に";
                        }
                    }

                    if (Strings.Right(anickname, 2) == "呪文")
                    {
                        msg = msg + "[" + anickname + "]を唱えた。";
                    }
                    else if (Strings.Right(anickname, 2) == "の杖")
                    {
                        msg = msg + "[" + Strings.Left(anickname, Strings.Len(anickname) - 2) + "]の呪文を唱えた。";
                    }
                    else
                    {
                        msg = msg + "[" + anickname + "]の呪文を唱えた。";
                    }
                }
                else if (Strings.Right(anickname, 1) == "歌")
                {
                    msg = msg + "[" + anickname + "]を歌った。";
                }
                else if (Strings.Right(anickname, 2) == "踊り")
                {
                    msg = msg + "[" + anickname + "]を踊った。";
                }
                else
                {
                    if (t is object & this.Ability(a).MaxRange != 0)
                    {
                        if (ReferenceEquals(this, t))
                        {
                            msg = msg + "自分に";
                        }
                        else
                        {
                            msg = msg + "[" + t.Nickname + "]に";
                        }
                    }

                    msg = msg + "[" + anickname + "]を使った。";
                }

                string argsub_situation10 = "";
                string argmain_situation9 = "アビリティ";
                string argsub_situation11 = "";
                if (IsSysMessageDefined(aname, sub_situation: argsub_situation10))
                {
                    // 「アビリティ名(解説)」のメッセージを使用
                    if (!My.MyProject.Forms.frmMessage.Visible)
                    {
                        if (ReferenceEquals(Commands.SelectedTarget, this))
                        {
                            var argu12 = this;
                            Unit argu24 = null;
                            GUI.OpenMessageForm(argu12, u2: argu24);
                        }
                        else
                        {
                            var argu25 = this;
                            GUI.OpenMessageForm(Commands.SelectedTarget, argu25);
                        }
                    }

                    string argsub_situation8 = "";
                    string argadd_msg = "";
                    SysMessage(aname, sub_situation: argsub_situation8, add_msg: argadd_msg);
                }
                else if (IsSysMessageDefined(argmain_situation9, sub_situation: argsub_situation11))
                {
                    // 「アビリティ(解説)」のメッセージを使用
                    if (!My.MyProject.Forms.frmMessage.Visible)
                    {
                        if (ReferenceEquals(Commands.SelectedTarget, this))
                        {
                            var argu13 = this;
                            Unit argu26 = null;
                            GUI.OpenMessageForm(argu13, u2: argu26);
                        }
                        else
                        {
                            var argu27 = this;
                            GUI.OpenMessageForm(Commands.SelectedTarget, argu27);
                        }
                    }

                    string argmain_situation8 = "アビリティ";
                    string argsub_situation9 = "";
                    string argadd_msg1 = "";
                    SysMessage(argmain_situation8, sub_situation: argsub_situation9, add_msg: argadd_msg1);
                }
                else if (atype == "変身" & this.Ability(a).MaxRange == 0)
                {
                }
                // 変身の場合はメッセージなし
                else if (!string.IsNullOrEmpty(atype))
                {
                    if (!My.MyProject.Forms.frmMessage.Visible)
                    {
                        if (ReferenceEquals(Commands.SelectedTarget, this))
                        {
                            var argu14 = this;
                            Unit argu28 = null;
                            GUI.OpenMessageForm(argu14, u2: argu28);
                        }
                        else
                        {
                            var argu29 = this;
                            GUI.OpenMessageForm(Commands.SelectedTarget, argu29);
                        }
                    }

                    GUI.DisplaySysMessage(msg);
                }

                // ＥＮ消費＆使用回数減少
                UseAbility(a);

                // アビリティの使用に失敗？
                string argattr1 = "難";
                if (GeneralLib.Dice(10) <= AbilityLevel(a, argattr1))
                {
                    GUI.DisplaySysMessage("しかし何もおきなかった…");
                    goto Finish;
                }
            }
            else
            {
                // マップアビリティの場合
                string argmain_situation11 = aname + "(発動)";
                string argsub_situation13 = "";
                string argsub_situation14 = "";
                if (IsAnimationDefined(argmain_situation11, sub_situation: argsub_situation13) | IsAnimationDefined(aname, sub_situation: argsub_situation14))
                {
                    string argmain_situation10 = aname + "(発動)";
                    string argsub_situation12 = "";
                    PlayAnimation(argmain_situation10, sub_situation: argsub_situation12);
                    is_anime_played = true;
                }
            }

            // 相手がアビリティの属性に対して無効化属性を持っているならアビリティは
            // 効果なし
            if (!ReferenceEquals(this, t))
            {
                if (t.Immune(aclass))
                {
                    goto Finish;
                }
            }

            // 気力低下アビリティ
            string argattr2 = "脱";
            if (IsAbilityClassifiedAs(a, argattr2))
            {
                t.IncreaseMorale(-10);
            }

            // 特殊効果除去アビリティ
            string argattr3 = "除";
            if (IsAbilityClassifiedAs(a, argattr3))
            {
                i = 1;
                while (i <= t.CountCondition())
                {
                    string localCondition() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                    string localCondition1() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                    string localCondition2() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                    string localCondition3() { object argIndex1 = i; var ret = t.Condition(argIndex1); return ret; }

                    int localConditionLifetime() { object argIndex1 = i; var ret = t.ConditionLifetime(argIndex1); return ret; }

                    if ((Strings.InStr(localCondition(), "付加") > 0 | Strings.InStr(localCondition1(), "強化") > 0 | Strings.InStr(localCondition2(), "ＵＰ") > 0) & localCondition3() != "ノーマルモード付加" & localConditionLifetime() != 0)
                    {
                        object argIndex8 = i;
                        t.DeleteCondition(argIndex8);
                    }
                    else
                    {
                        i = (i + 1);
                    }
                }
            }

            // 得意技・不得手によるアビリティ効果への修正値を計算
            elv_mod = 1d;
            elv_mod2 = 1d;
            {
                var withBlock2 = MainPilot();
                // 得意技
                string argsname = "得意技";
                if (withBlock2.IsSkillAvailable(argsname))
                {
                    object argIndex9 = "得意技";
                    buf = withBlock2.SkillData(argIndex9);
                    var loopTo5 = Strings.Len(buf);
                    for (i = 1; i <= loopTo5; i++)
                    {
                        if (Strings.InStr(aclass, GeneralLib.GetClassBundle(buf, i)) > 0)
                        {
                            elv_mod = 1.2d * elv_mod;
                            elv_mod2 = 1.4d * elv_mod2;
                            break;
                        }
                    }
                }

                // 不得手
                string argsname1 = "不得手";
                if (withBlock2.IsSkillAvailable(argsname1))
                {
                    object argIndex10 = "不得手";
                    buf = withBlock2.SkillData(argIndex10);
                    var loopTo6 = Strings.Len(buf);
                    for (i = 1; i <= loopTo6; i++)
                    {
                        if (Strings.InStr(aclass, GeneralLib.GetClassBundle(buf, i)) > 0)
                        {
                            elv_mod = 0.8d * elv_mod;
                            elv_mod2 = 0.6d * elv_mod2;
                            break;
                        }
                    }
                }
            }

            // アビリティの効果を適用
            var loopTo7 = Ability(a).CountEffect();
            for (i = 1; i <= loopTo7; i++)
            {
                {
                    var withBlock3 = Ability(a);
                    object argIndex11 = i;
                    edata = withBlock3.EffectData(argIndex11);
                    object argIndex12 = i;
                    elevel = withBlock3.EffectLevel(argIndex12) * elv_mod;
                    object argIndex13 = i;
                    elevel2 = withBlock3.EffectLevel(argIndex13) * elv_mod2;
                }

                object argIndex95 = i;
                switch (Ability(a).EffectType(argIndex95) ?? "")
                {
                    case "回復":
                        {
                            {
                                var withBlock4 = t;
                                if (elevel > 0d)
                                {
                                    // ＨＰは既に最大値？
                                    if (withBlock4.HP == withBlock4.MaxHP)
                                    {
                                        goto NextLoop;
                                    }

                                    // ゾンビ？
                                    object argIndex14 = "ゾンビ";
                                    if (withBlock4.IsConditionSatisfied(argIndex14))
                                    {
                                        goto NextLoop;
                                    }

                                    if (!is_anime_played)
                                    {
                                        string argattr4 = "魔";
                                        if (IsSpellAbility(a) | IsAbilityClassifiedAs(a, argattr4))
                                        {
                                            string arganame = "回復魔法発動";
                                            Effect.ShowAnimation(arganame);
                                        }
                                        else
                                        {
                                            string arganame1 = "修理装置発動";
                                            Effect.ShowAnimation(arganame1);
                                        }
                                    }

                                    prev_value = withBlock4.HP;
                                    {
                                        var withBlock5 = MainPilot();
                                        if (IsSpellAbility(a))
                                        {
                                            epower = (5d * elevel * withBlock5.Shooting);
                                        }
                                        else
                                        {
                                            epower = (500d * elevel);
                                        }

                                        object argIndex15 = "修理";
                                        string argref_mode = "";
                                        epower = ((long)(epower * (10d + withBlock5.SkillLevel(argIndex15, ref_mode: argref_mode))) / 10L);
                                    }

                                    t.HP = t.HP + epower;
                                    string argmsg1 = "+" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock4.HP - prev_value);
                                    GUI.DrawSysString(withBlock4.x, withBlock4.y, argmsg1);
                                    if (ReferenceEquals(t, this))
                                    {
                                        var argu15 = this;
                                        object argu210 = null;
                                        GUI.UpdateMessageForm(argu15, u2: argu210);
                                    }
                                    else
                                    {
                                        object argu211 = this;
                                        GUI.UpdateMessageForm(t, argu211);
                                    }

                                    string argtname = "ＨＰ";
                                    string argtname1 = "ＨＰ";
                                    GUI.DisplaySysMessage(withBlock4.Nickname + "の" + Expression.Term(argtname, t) + "が[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock4.HP - prev_value) + "]回復した;" + "残り" + Expression.Term(argtname1, t) + "は" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock4.HP) + "（損傷率 = " + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (withBlock4.MaxHP - withBlock4.HP) / withBlock4.MaxHP) + "％）");
                                    is_useful = true;
                                }
                                else if (elevel < 0d)
                                {
                                    prev_value = withBlock4.HP;
                                    {
                                        var withBlock6 = MainPilot();
                                        if (IsSpellAbility(a))
                                        {
                                            epower = (5d * elevel * withBlock6.Shooting);
                                        }
                                        else
                                        {
                                            epower = (500d * elevel);
                                        }
                                    }

                                    t.HP = t.HP + epower;
                                    string argmsg2 = "-" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock4.HP);
                                    GUI.DrawSysString(withBlock4.x, withBlock4.y, argmsg2);
                                    if (ReferenceEquals(t, this))
                                    {
                                        var argu16 = this;
                                        object argu212 = null;
                                        GUI.UpdateMessageForm(argu16, u2: argu212);
                                    }
                                    else
                                    {
                                        object argu213 = this;
                                        GUI.UpdateMessageForm(t, argu213);
                                    }

                                    string argtname2 = "ＨＰ";
                                    string argtname3 = "ＨＰ";
                                    GUI.DisplaySysMessage(withBlock4.Nickname + "の" + Expression.Term(argtname2, t) + "が[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock4.HP) + "]減少した;" + "残り" + Expression.Term(argtname3, t) + "は" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock4.HP) + "（損傷率 = " + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (withBlock4.MaxHP - withBlock4.HP) / withBlock4.MaxHP) + "％）");
                                }
                            }

                            break;
                        }

                    case "補給":
                        {
                            {
                                var withBlock7 = t;
                                if (elevel > 0d)
                                {
                                    // ＥＮは既に最大値？
                                    if (withBlock7.EN == withBlock7.MaxEN)
                                    {
                                        goto NextLoop;
                                    }

                                    // ゾンビ？
                                    object argIndex16 = "ゾンビ";
                                    if (withBlock7.IsConditionSatisfied(argIndex16))
                                    {
                                        goto NextLoop;
                                    }

                                    if (!is_anime_played)
                                    {
                                        string argattr5 = "魔";
                                        if (IsSpellAbility(a) | IsAbilityClassifiedAs(a, argattr5))
                                        {
                                            string arganame2 = "回復魔法発動";
                                            Effect.ShowAnimation(arganame2);
                                        }
                                        else
                                        {
                                            string arganame3 = "補給装置発動";
                                            Effect.ShowAnimation(arganame3);
                                        }
                                    }

                                    prev_value = withBlock7.EN;
                                    {
                                        var withBlock8 = MainPilot();
                                        if (IsSpellAbility(a))
                                        {
                                            epower = ((long)(elevel * withBlock8.Shooting) / 2L);
                                        }
                                        else
                                        {
                                            epower = (50d * elevel);
                                        }

                                        object argIndex17 = "補給";
                                        string argref_mode1 = "";
                                        epower = ((long)(epower * (10d + withBlock8.SkillLevel(argIndex17, ref_mode: argref_mode1))) / 10L);
                                    }

                                    t.EN = t.EN + epower;
                                    string argmsg3 = "+" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock7.EN - prev_value);
                                    GUI.DrawSysString(withBlock7.x, withBlock7.y, argmsg3);
                                    if (ReferenceEquals(t, this))
                                    {
                                        var argu17 = this;
                                        object argu214 = null;
                                        GUI.UpdateMessageForm(argu17, u2: argu214);
                                    }
                                    else
                                    {
                                        object argu215 = this;
                                        GUI.UpdateMessageForm(t, argu215);
                                    }

                                    string argtname4 = "ＥＮ";
                                    string argtname5 = "ＥＮ";
                                    GUI.DisplaySysMessage(withBlock7.Nickname + "の" + Expression.Term(argtname4, t) + "が[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock7.EN - prev_value) + "]回復した;" + "残り" + Expression.Term(argtname5, t) + "は" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock7.EN));
                                    is_useful = true;
                                }
                                else if (elevel < 0d)
                                {
                                    // ＥＮは既に0？
                                    if (withBlock7.EN == 0)
                                    {
                                        goto NextLoop;
                                    }

                                    prev_value = withBlock7.EN;
                                    {
                                        var withBlock9 = MainPilot();
                                        if (IsSpellAbility(a))
                                        {
                                            epower = ((long)(elevel * withBlock9.Shooting) / 2L);
                                        }
                                        else
                                        {
                                            epower = (50d * elevel);
                                        }
                                    }

                                    t.EN = t.EN + epower;
                                    string argmsg4 = "-" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock7.EN);
                                    GUI.DrawSysString(withBlock7.x, withBlock7.y, argmsg4);
                                    if (ReferenceEquals(t, this))
                                    {
                                        var argu18 = this;
                                        object argu216 = null;
                                        GUI.UpdateMessageForm(argu18, u2: argu216);
                                    }
                                    else
                                    {
                                        object argu217 = this;
                                        GUI.UpdateMessageForm(t, argu217);
                                    }

                                    string argtname6 = "ＥＮ";
                                    string argtname7 = "ＥＮ";
                                    GUI.DisplaySysMessage(withBlock7.Nickname + "の" + Expression.Term(argtname6, t) + "が[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock7.EN) + "]減少した;" + "残り" + Expression.Term(argtname7, t) + "は" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock7.EN));
                                }
                            }

                            break;
                        }

                    case "霊力回復":
                    case "プラーナ回復":
                        {
                            {
                                var withBlock10 = t.MainPilot();
                                if (elevel > 0d)
                                {
                                    // 霊力は既に最大値？
                                    if (withBlock10.Plana == withBlock10.MaxPlana())
                                    {
                                        goto NextLoop;
                                    }

                                    prev_value = withBlock10.Plana;
                                    if (IsSpellAbility(a))
                                    {
                                        withBlock10.Plana = withBlock10.Plana + ((long)(elevel * this.MainPilot().Shooting) / 10L);
                                    }
                                    else
                                    {
                                        withBlock10.Plana = (withBlock10.Plana + 10d * elevel);
                                    }

                                    string argmsg5 = "+" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock10.Plana - prev_value);
                                    GUI.DrawSysString(t.x, t.y, argmsg5);
                                    if (ReferenceEquals(t, this))
                                    {
                                        var argu19 = this;
                                        object argu218 = null;
                                        GUI.UpdateMessageForm(argu19, u2: argu218);
                                    }
                                    else
                                    {
                                        object argu219 = this;
                                        GUI.UpdateMessageForm(t, argu219);
                                    }

                                    object argIndex18 = "霊力";
                                    GUI.DisplaySysMessage(withBlock10.get_Nickname(false) + "の[" + withBlock10.SkillName0(argIndex18) + "]が[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock10.Plana - prev_value) + "]回復した。");
                                    is_useful = true;
                                }
                                else if (elevel < 0d)
                                {
                                    // 霊力は既に0？
                                    if (withBlock10.Plana == 0)
                                    {
                                        goto NextLoop;
                                    }

                                    prev_value = withBlock10.Plana;
                                    if (IsSpellAbility(a))
                                    {
                                        withBlock10.Plana = withBlock10.Plana + ((long)(elevel * this.MainPilot().Shooting) / 10L);
                                    }
                                    else
                                    {
                                        withBlock10.Plana = (withBlock10.Plana + 10d * elevel);
                                    }

                                    string argmsg6 = "-" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock10.Plana);
                                    GUI.DrawSysString(t.x, t.y, argmsg6);
                                    if (ReferenceEquals(t, this))
                                    {
                                        var argu110 = this;
                                        object argu220 = null;
                                        GUI.UpdateMessageForm(argu110, u2: argu220);
                                    }
                                    else
                                    {
                                        object argu221 = this;
                                        GUI.UpdateMessageForm(t, argu221);
                                    }

                                    object argIndex19 = "霊力";
                                    GUI.DisplaySysMessage(withBlock10.get_Nickname(false) + "の[" + withBlock10.SkillName0(argIndex19) + "]が[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock10.Plana) + "]減少した。");
                                }
                            }

                            break;
                        }

                    case "ＳＰ回復":
                        {
                            if (IsSpellAbility(a))
                            {
                                epower = ((long)(elevel * this.MainPilot().Shooting) / 10L);
                            }
                            else
                            {
                                epower = (10d * elevel);
                            }

                            {
                                var withBlock11 = t;
                                // パイロット数を計算
                                num = (withBlock11.CountPilot() + withBlock11.CountSupport());
                                string argfname1 = "追加サポート";
                                if (withBlock11.IsFeatureAvailable(argfname1))
                                {
                                    num = (num + 1);
                                }

                                if (elevel > 0d)
                                {
                                    if (num == 1)
                                    {
                                        // パイロットが１名のみ
                                        {
                                            var withBlock12 = withBlock11.MainPilot();
                                            prev_value = withBlock12.SP;
                                            withBlock12.SP = withBlock12.SP + epower;
                                            string argmsg7 = "+" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock12.SP - prev_value);
                                            GUI.DrawSysString(t.x, t.y, argmsg7);
                                            string argtname8 = "ＳＰ";
                                            GUI.DisplaySysMessage(withBlock12.get_Nickname(false) + "の" + Expression.Term(argtname8, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock12.SP - prev_value) + "回復した。");
                                            if (withBlock12.SP > prev_value)
                                            {
                                                is_useful = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        // 複数のパイロットが対象
                                        {
                                            var withBlock13 = withBlock11.MainPilot();
                                            prev_value = withBlock13.SP;
                                            withBlock13.SP = withBlock13.SP + epower / 5 + epower / num;
                                            string argmsg8 = "+" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock13.SP - prev_value);
                                            GUI.DrawSysString(t.x, t.y, argmsg8);
                                            string argtname9 = "ＳＰ";
                                            GUI.DisplaySysMessage(withBlock13.get_Nickname(false) + "の" + Expression.Term(argtname9, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock13.SP - prev_value) + "回復した。");
                                            if (withBlock13.SP > prev_value)
                                            {
                                                is_useful = true;
                                            }
                                        }

                                        var loopTo8 = withBlock11.CountPilot();
                                        for (j = 2; j <= loopTo8; j++)
                                        {
                                            object argIndex20 = j;
                                            {
                                                var withBlock14 = withBlock11.Pilot(argIndex20);
                                                prev_value = withBlock14.SP;
                                                withBlock14.SP = withBlock14.SP + epower / 5 + epower / num;
                                                string argtname10 = "ＳＰ";
                                                GUI.DisplaySysMessage(withBlock14.get_Nickname(false) + "の" + Expression.Term(argtname10, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock14.SP - prev_value) + "回復した。");
                                                if (withBlock14.SP > prev_value)
                                                {
                                                    is_useful = true;
                                                }
                                            }
                                        }

                                        var loopTo9 = withBlock11.CountSupport();
                                        for (j = 1; j <= loopTo9; j++)
                                        {
                                            object argIndex21 = j;
                                            {
                                                var withBlock15 = withBlock11.Support(argIndex21);
                                                prev_value = withBlock15.SP;
                                                withBlock15.SP = withBlock15.SP + epower / 5 + epower / num;
                                                string argtname11 = "ＳＰ";
                                                GUI.DisplaySysMessage(withBlock15.get_Nickname(false) + "の" + Expression.Term(argtname11, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock15.SP - prev_value) + "回復した。");
                                                if (withBlock15.SP > prev_value)
                                                {
                                                    is_useful = true;
                                                }
                                            }
                                        }

                                        string argfname2 = "追加サポート";
                                        if (withBlock11.IsFeatureAvailable(argfname2))
                                        {
                                            {
                                                var withBlock16 = withBlock11.AdditionalSupport();
                                                prev_value = withBlock16.SP;
                                                withBlock16.SP = withBlock16.SP + epower / 5 + epower / num;
                                                string argtname12 = "ＳＰ";
                                                GUI.DisplaySysMessage(withBlock16.get_Nickname(false) + "の" + Expression.Term(argtname12, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock16.SP - prev_value) + "回復した。");
                                                if (withBlock16.SP > prev_value)
                                                {
                                                    is_useful = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (elevel < 0d)
                                {
                                    if (num == 1)
                                    {
                                        // パイロットが１名のみ
                                        {
                                            var withBlock17 = withBlock11.MainPilot();
                                            prev_value = withBlock17.SP;
                                            withBlock17.SP = withBlock17.SP + epower;
                                            string argmsg9 = "-" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock17.SP);
                                            GUI.DrawSysString(t.x, t.y, argmsg9);
                                            string argtname13 = "ＳＰ";
                                            GUI.DisplaySysMessage(withBlock17.get_Nickname(false) + "の" + Expression.Term(argtname13, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock17.SP) + "減少した。");
                                        }
                                    }
                                    else
                                    {
                                        // 複数のパイロットが対象
                                        {
                                            var withBlock18 = withBlock11.MainPilot();
                                            prev_value = withBlock18.SP;
                                            withBlock18.SP = withBlock18.SP + epower / 5 + epower / num;
                                            string argmsg10 = "+" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock18.SP);
                                            GUI.DrawSysString(t.x, t.y, argmsg10);
                                            string argtname14 = "ＳＰ";
                                            GUI.DisplaySysMessage(withBlock18.get_Nickname(false) + "の" + Expression.Term(argtname14, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock18.SP) + "減少した。");
                                        }

                                        var loopTo10 = withBlock11.CountPilot();
                                        for (j = 2; j <= loopTo10; j++)
                                        {
                                            object argIndex22 = j;
                                            {
                                                var withBlock19 = withBlock11.Pilot(argIndex22);
                                                prev_value = withBlock19.SP;
                                                withBlock19.SP = withBlock19.SP + epower / 5 + epower / num;
                                                string argtname15 = "ＳＰ";
                                                GUI.DisplaySysMessage(withBlock19.get_Nickname(false) + "の" + Expression.Term(argtname15, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock19.SP) + "減少した。");
                                            }
                                        }

                                        var loopTo11 = withBlock11.CountSupport();
                                        for (j = 1; j <= loopTo11; j++)
                                        {
                                            object argIndex23 = j;
                                            {
                                                var withBlock20 = withBlock11.Support(argIndex23);
                                                prev_value = withBlock20.SP;
                                                withBlock20.SP = withBlock20.SP + epower / 5 + epower / num;
                                                string argtname16 = "ＳＰ";
                                                GUI.DisplaySysMessage(withBlock20.get_Nickname(false) + "の" + Expression.Term(argtname16, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock20.SP) + "減少した。");
                                            }
                                        }

                                        string argfname3 = "追加サポート";
                                        if (withBlock11.IsFeatureAvailable(argfname3))
                                        {
                                            {
                                                var withBlock21 = withBlock11.AdditionalSupport();
                                                prev_value = withBlock21.SP;
                                                withBlock21.SP = withBlock21.SP + epower / 5 + epower / num;
                                                string argtname17 = "ＳＰ";
                                                GUI.DisplaySysMessage(withBlock21.get_Nickname(false) + "の" + Expression.Term(argtname17, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock21.SP) + "減少した。");
                                            }
                                        }
                                    }
                                }
                            }

                            break;
                        }

                    case "気力増加":
                        {
                            if (IsSpellAbility(a))
                            {
                                epower = ((long)(elevel * this.MainPilot().Shooting) / 10L);
                            }
                            else
                            {
                                epower = (10d * elevel);
                            }

                            {
                                var withBlock22 = t;
                                prev_value = withBlock22.MainPilot().Morale;
                                withBlock22.IncreaseMorale(epower);
                                if (elevel > 0d)
                                {
                                    {
                                        var withBlock23 = withBlock22.MainPilot();
                                        string argmsg11 = "+" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock23.Morale - prev_value);
                                        GUI.DrawSysString(t.x, t.y, argmsg11);
                                        string argtname18 = "気力";
                                        GUI.DisplaySysMessage(withBlock23.get_Nickname(false) + "の" + Expression.Term(argtname18, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock23.Morale - prev_value) + "増加した。");
                                    }
                                }
                                else if (elevel < 0d)
                                {
                                    {
                                        var withBlock24 = withBlock22.MainPilot();
                                        string argmsg12 = "-" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock24.Morale);
                                        GUI.DrawSysString(t.x, t.y, argmsg12);
                                        string argtname19 = "気力";
                                        GUI.DisplaySysMessage(withBlock24.get_Nickname(false) + "の" + Expression.Term(argtname19, t) + "が" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(prev_value - withBlock24.Morale) + "減少した。");
                                    }
                                }

                                if (withBlock22.MainPilot().Morale > prev_value)
                                {
                                    is_useful = true;
                                }
                            }

                            break;
                        }

                    case "装填":
                        {
                            {
                                var withBlock25 = t;
                                flag = false;
                                if (string.IsNullOrEmpty(edata))
                                {
                                    // 全ての武器の弾数を回復
                                    var loopTo12 = withBlock25.CountWeapon();
                                    for (j = 1; j <= loopTo12; j++)
                                    {
                                        if (withBlock25.Bullet(j) < withBlock25.MaxBullet(j))
                                        {
                                            withBlock25.BulletSupply();
                                            flag = true;
                                            break;
                                        }
                                    }

                                    // 弾数とアビリティ使用回数の同期を取る
                                    if (flag)
                                    {
                                        var loopTo13 = withBlock25.CountAbility();
                                        for (j = 1; j <= loopTo13; j++)
                                        {
                                            string argattr9 = "共";
                                            if (withBlock25.IsAbilityClassifiedAs(j, argattr9))
                                            {
                                                var loopTo14 = withBlock25.CountWeapon();
                                                for (k = 1; k <= loopTo14; k++)
                                                {
                                                    string argattr6 = "共";
                                                    string argattr7 = "共";
                                                    string argattr8 = "共";
                                                    if (withBlock25.IsWeaponClassifiedAs(k, argattr6) & withBlock25.AbilityLevel(j, argattr7) == withBlock25.WeaponLevel(k, argattr8))
                                                    {
                                                        withBlock25.SetStock(j, withBlock25.MaxStock(j));
                                                    }
                                                }
                                            }
                                        }

                                        // 弾数・使用回数の共有化処理
                                        withBlock25.SyncBullet();
                                    }
                                }
                                else
                                {
                                    // 特定の武器の弾数のみを回復
                                    var loopTo15 = withBlock25.CountWeapon();
                                    for (j = 1; j <= loopTo15; j++)
                                    {
                                        if (withBlock25.Bullet(j) < withBlock25.MaxBullet(j))
                                        {
                                            if ((withBlock25.WeaponNickname(j) ?? "") == (edata ?? "") | GeneralLib.InStrNotNest(withBlock25.Weapon(j).Class_Renamed, edata) > 0)
                                            {
                                                withBlock25.SetBullet(j, withBlock25.MaxBullet(j));
                                                flag = true;
                                                w = j;
                                            }
                                        }
                                    }

                                    var loopTo16 = withBlock25.CountOtherForm();
                                    for (j = 1; j <= loopTo16; j++)
                                    {
                                        object argIndex24 = j;
                                        {
                                            var withBlock26 = withBlock25.OtherForm(argIndex24);
                                            var loopTo17 = withBlock26.CountWeapon();
                                            for (k = 1; k <= loopTo17; k++)
                                            {
                                                if (withBlock26.Bullet(k) < withBlock26.MaxBullet(k))
                                                {
                                                    if ((withBlock26.WeaponNickname(k) ?? "") == (edata ?? "") | GeneralLib.InStrNotNest(withBlock26.Weapon(k).Class_Renamed, edata) > 0)
                                                    {
                                                        withBlock26.SetBullet(k, withBlock26.MaxBullet(k));
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    // 弾数の同期を取る
                                    if (flag)
                                    {
                                        string argattr16 = "共";
                                        if (withBlock25.IsWeaponClassifiedAs(w, argattr16))
                                        {
                                            var loopTo18 = withBlock25.CountWeapon();
                                            for (j = 1; j <= loopTo18; j++)
                                            {
                                                string argattr10 = "共";
                                                string argattr11 = "共";
                                                string argattr12 = "共";
                                                if (withBlock25.IsWeaponClassifiedAs(j, argattr10) & withBlock25.WeaponLevel(j, argattr11) == withBlock25.WeaponLevel(w, argattr12))
                                                {
                                                    withBlock25.SetBullet(j, withBlock25.MaxBullet(j));
                                                }
                                            }

                                            var loopTo19 = withBlock25.CountAbility();
                                            for (j = 1; j <= loopTo19; j++)
                                            {
                                                string argattr13 = "共";
                                                string argattr14 = "共";
                                                string argattr15 = "共";
                                                if (withBlock25.IsAbilityClassifiedAs(j, argattr13) & withBlock25.AbilityLevel(j, argattr14) == withBlock25.WeaponLevel(w, argattr15))
                                                {
                                                    withBlock25.SetStock(j, withBlock25.MaxStock(j));
                                                }
                                            }
                                        }

                                        // 弾数・使用回数の共有化処理
                                        withBlock25.SyncBullet();
                                    }
                                }

                                if (flag)
                                {
                                    GUI.DisplaySysMessage(withBlock25.Nickname + "の武装の使用回数が回復した。");
                                    if (AbilityMaxRange(a) > 0)
                                    {
                                        is_useful = true;
                                    }
                                }
                            }

                            break;
                        }

                    case "治癒":
                        {
                            {
                                var withBlock27 = t;
                                if (!is_anime_played)
                                {
                                    string argattr17 = "魔";
                                    if (IsSpellAbility(a) | IsAbilityClassifiedAs(a, argattr17))
                                    {
                                        string arganame4 = "回復魔法発動";
                                        Effect.ShowAnimation(arganame4);
                                    }
                                }

                                if (string.IsNullOrEmpty(edata))
                                {
                                    // 全てのステータス異常を回復
                                    object argIndex26 = "攻撃不能";
                                    if (withBlock27.ConditionLifetime(argIndex26) > 0)
                                    {
                                        object argIndex25 = "攻撃不能";
                                        withBlock27.DeleteCondition(argIndex25);
                                        is_useful = true;
                                    }

                                    object argIndex28 = "移動不能";
                                    if (withBlock27.ConditionLifetime(argIndex28) > 0)
                                    {
                                        object argIndex27 = "移動不能";
                                        withBlock27.DeleteCondition(argIndex27);
                                        is_useful = true;
                                    }

                                    object argIndex30 = "装甲劣化";
                                    if (withBlock27.ConditionLifetime(argIndex30) > 0)
                                    {
                                        object argIndex29 = "装甲劣化";
                                        withBlock27.DeleteCondition(argIndex29);
                                        is_useful = true;
                                    }

                                    object argIndex32 = "混乱";
                                    if (withBlock27.ConditionLifetime(argIndex32) > 0)
                                    {
                                        object argIndex31 = "混乱";
                                        withBlock27.DeleteCondition(argIndex31);
                                        is_useful = true;
                                    }

                                    object argIndex34 = "恐怖";
                                    if (withBlock27.ConditionLifetime(argIndex34) > 0)
                                    {
                                        object argIndex33 = "恐怖";
                                        withBlock27.DeleteCondition(argIndex33);
                                        is_useful = true;
                                    }

                                    object argIndex36 = "踊り";
                                    if (withBlock27.ConditionLifetime(argIndex36) > 0)
                                    {
                                        object argIndex35 = "踊り";
                                        withBlock27.DeleteCondition(argIndex35);
                                        is_useful = true;
                                    }

                                    object argIndex38 = "狂戦士";
                                    if (withBlock27.ConditionLifetime(argIndex38) > 0)
                                    {
                                        object argIndex37 = "狂戦士";
                                        withBlock27.DeleteCondition(argIndex37);
                                        is_useful = true;
                                    }

                                    object argIndex40 = "ゾンビ";
                                    if (withBlock27.ConditionLifetime(argIndex40) > 0)
                                    {
                                        object argIndex39 = "ゾンビ";
                                        withBlock27.DeleteCondition(argIndex39);
                                        is_useful = true;
                                    }

                                    object argIndex42 = "回復不能";
                                    if (withBlock27.ConditionLifetime(argIndex42) > 0)
                                    {
                                        object argIndex41 = "回復不能";
                                        withBlock27.DeleteCondition(argIndex41);
                                        is_useful = true;
                                    }

                                    object argIndex44 = "石化";
                                    if (withBlock27.ConditionLifetime(argIndex44) > 0)
                                    {
                                        object argIndex43 = "石化";
                                        withBlock27.DeleteCondition(argIndex43);
                                        is_useful = true;
                                    }

                                    object argIndex46 = "凍結";
                                    if (withBlock27.ConditionLifetime(argIndex46) > 0)
                                    {
                                        object argIndex45 = "凍結";
                                        withBlock27.DeleteCondition(argIndex45);
                                        is_useful = true;
                                    }

                                    object argIndex48 = "麻痺";
                                    if (withBlock27.ConditionLifetime(argIndex48) > 0)
                                    {
                                        object argIndex47 = "麻痺";
                                        withBlock27.DeleteCondition(argIndex47);
                                        is_useful = true;
                                    }

                                    object argIndex50 = "睡眠";
                                    if (withBlock27.ConditionLifetime(argIndex50) > 0)
                                    {
                                        object argIndex49 = "睡眠";
                                        withBlock27.DeleteCondition(argIndex49);
                                        is_useful = true;
                                    }

                                    object argIndex52 = "毒";
                                    if (withBlock27.ConditionLifetime(argIndex52) > 0)
                                    {
                                        object argIndex51 = "毒";
                                        withBlock27.DeleteCondition(argIndex51);
                                        is_useful = true;
                                    }

                                    object argIndex54 = "盲目";
                                    if (withBlock27.ConditionLifetime(argIndex54) > 0)
                                    {
                                        object argIndex53 = "盲目";
                                        withBlock27.DeleteCondition(argIndex53);
                                        is_useful = true;
                                    }

                                    object argIndex56 = "沈黙";
                                    if (withBlock27.ConditionLifetime(argIndex56) > 0)
                                    {
                                        object argIndex55 = "沈黙";
                                        withBlock27.DeleteCondition(argIndex55);
                                        is_useful = true;
                                    }

                                    object argIndex58 = "魅了";
                                    if (withBlock27.ConditionLifetime(argIndex58) > 0)
                                    {
                                        object argIndex57 = "魅了";
                                        withBlock27.DeleteCondition(argIndex57);
                                        is_useful = true;
                                    }

                                    object argIndex60 = "憑依";
                                    if (withBlock27.ConditionLifetime(argIndex60) > 0)
                                    {
                                        object argIndex59 = "憑依";
                                        withBlock27.DeleteCondition(argIndex59);
                                        is_useful = true;
                                    }
                                    // 剋属性
                                    object argIndex62 = "オーラ使用不能";
                                    if (withBlock27.ConditionLifetime(argIndex62) > 0)
                                    {
                                        object argIndex61 = "オーラ使用不能";
                                        withBlock27.DeleteCondition(argIndex61);
                                    }

                                    object argIndex64 = "超能力使用不能";
                                    if (withBlock27.ConditionLifetime(argIndex64) > 0)
                                    {
                                        object argIndex63 = "超能力使用不能";
                                        withBlock27.DeleteCondition(argIndex63);
                                    }

                                    object argIndex66 = "同調率使用不能";
                                    if (withBlock27.ConditionLifetime(argIndex66) > 0)
                                    {
                                        object argIndex65 = "同調率使用不能";
                                        withBlock27.DeleteCondition(argIndex65);
                                    }

                                    object argIndex68 = "超感覚使用不能";
                                    if (withBlock27.ConditionLifetime(argIndex68) > 0)
                                    {
                                        object argIndex67 = "超感覚使用不能";
                                        withBlock27.DeleteCondition(argIndex67);
                                    }

                                    object argIndex70 = "知覚強化使用不能";
                                    if (withBlock27.ConditionLifetime(argIndex70) > 0)
                                    {
                                        object argIndex69 = "知覚強化使用不能";
                                        withBlock27.DeleteCondition(argIndex69);
                                    }

                                    object argIndex72 = "霊力使用不能";
                                    if (withBlock27.ConditionLifetime(argIndex72) > 0)
                                    {
                                        object argIndex71 = "霊力使用不能";
                                        withBlock27.DeleteCondition(argIndex71);
                                    }

                                    object argIndex74 = "術使用不能";
                                    if (withBlock27.ConditionLifetime(argIndex74) > 0)
                                    {
                                        object argIndex73 = "術使用不能";
                                        withBlock27.DeleteCondition(argIndex73);
                                    }

                                    object argIndex76 = "技使用不能";
                                    if (withBlock27.ConditionLifetime(argIndex76) > 0)
                                    {
                                        object argIndex75 = "技使用不能";
                                        withBlock27.DeleteCondition(argIndex75);
                                    }

                                    j = 1;
                                    while (j <= withBlock27.CountCondition())
                                    {
                                        // 弱点、有効付加はあえて外してあります。
                                        string localCondition5() { object argIndex1 = j; var ret = withBlock27.Condition(argIndex1); return ret; }

                                        string localCondition6() { object argIndex1 = j; var ret = withBlock27.Condition(argIndex1); return ret; }

                                        string localCondition7() { object argIndex1 = j; var ret = withBlock27.Condition(argIndex1); return ret; }

                                        int localConditionLifetime1() { object argIndex1 = (object)hs35eef8b33aab4975b1c788eecf306c48(); var ret = withBlock27.ConditionLifetime(argIndex1); return ret; }

                                        if (Strings.Len(localCondition5()) > 6 & Strings.Right(localCondition6(), 6) == "属性使用不能" & localConditionLifetime1() > 0)
                                        {
                                            string localCondition4() { object argIndex1 = j; var ret = withBlock27.Condition(argIndex1); return ret; }

                                            object argIndex77 = localCondition4();
                                            withBlock27.DeleteCondition(argIndex77);
                                            is_useful = true;
                                        }
                                        else
                                        {
                                            j = (j + 1);
                                        }
                                    }

                                    if (is_useful)
                                    {
                                        if (ReferenceEquals(t, CurrentForm()))
                                        {
                                            object argu222 = null;
                                            GUI.UpdateMessageForm(t, u2: argu222);
                                        }
                                        else
                                        {
                                            object argu223 = CurrentForm();
                                            GUI.UpdateMessageForm(t, argu223);
                                        }

                                        GUI.DisplaySysMessage(withBlock27.Nickname + "の状態が回復した。");
                                    }
                                }
                                else
                                {
                                    // 指定されたステータス異常のみを回復
                                    j = 1;
                                    while (j <= GeneralLib.LLength(edata))
                                    {
                                        cname = GeneralLib.LIndex(edata, j);
                                        object argIndex79 = cname;
                                        if (withBlock27.ConditionLifetime(argIndex79) > 0)
                                        {
                                            object argIndex78 = cname;
                                            withBlock27.DeleteCondition(argIndex78);
                                            if (ReferenceEquals(t, CurrentForm()))
                                            {
                                                object argu224 = null;
                                                GUI.UpdateMessageForm(t, u2: argu224);
                                            }
                                            else
                                            {
                                                object argu225 = CurrentForm();
                                                GUI.UpdateMessageForm(t, argu225);
                                            }

                                            if (cname == "装甲劣化")
                                            {
                                                string argtname20 = "装甲";
                                                cname = Expression.Term(argtname20, t) + "劣化";
                                            }

                                            GUI.DisplaySysMessage(withBlock27.Nickname + "の[" + cname + "]が回復した。");
                                            is_useful = true;
                                        }
                                        else
                                        {
                                            j = (j + 1);
                                        }
                                    }
                                }
                            }

                            break;
                        }

                    case "付加":
                        {
                            {
                                var withBlock28 = t;
                                if (elevel2 == 0d)
                                {
                                    // レベル指定がない場合は付加が半永久的に持続
                                    elevel2 = 10000d;
                                }
                                else
                                {
                                    // そうでなければ最低１ターンは効果が持続
                                    elevel2 = GeneralLib.MaxLng(elevel2, 1);
                                }

                                // 効果時間が継続中？
                                object argIndex80 = GeneralLib.LIndex(edata, 1) + "付加";
                                if (withBlock28.IsConditionSatisfied(argIndex80))
                                {
                                    goto NextLoop;
                                }

                                ftype = GeneralLib.LIndex(edata, 1);
                                flevel = Conversions.ToDouble(GeneralLib.LIndex(edata, 2));
                                fdata = "";
                                var loopTo20 = GeneralLib.LLength(edata);
                                for (j = 3; j <= loopTo20; j++)
                                    fdata = fdata + GeneralLib.LIndex(edata, j) + " ";
                                fdata = Strings.Trim(fdata);
                                if (Strings.Left(fdata, 1) == "\"" & Strings.Right(fdata, 1) == "\"")
                                {
                                    fdata = Strings.Trim(Strings.Mid(fdata, 2, Strings.Len(fdata) - 2));
                                }

                                // エリアスが定義されている？
                                object argIndex82 = ftype;
                                if (SRC.ALDList.IsDefined(argIndex82))
                                {
                                    object argIndex81 = ftype;
                                    {
                                        var withBlock29 = SRC.ALDList.Item(argIndex81);
                                        var loopTo21 = withBlock29.Count;
                                        for (j = 1; j <= loopTo21; j++)
                                        {
                                            // エリアスの定義に従って特殊能力定義を置き換える
                                            ftype2 = withBlock29.get_AliasType(j);
                                            string localLIndex() { string arglist = withBlock29.get_AliasData(j); var ret = GeneralLib.LIndex(arglist, 1); withBlock29.get_AliasData(j) = arglist; return ret; }

                                            if (localLIndex() == "解説")
                                            {
                                                // 特殊能力の解説
                                                if (!string.IsNullOrEmpty(fdata))
                                                {
                                                    ftype2 = GeneralLib.LIndex(fdata, 1);
                                                }

                                                flevel2 = SRC.DEFAULT_LEVEL;
                                                fdata2 = withBlock29.get_AliasData(j);
                                            }
                                            else
                                            {
                                                // 通常の特殊能力
                                                if (withBlock29.get_AliasLevelIsPlusMod(j))
                                                {
                                                    if (flevel == SRC.DEFAULT_LEVEL)
                                                    {
                                                        flevel = 1d;
                                                    }

                                                    flevel2 = flevel + withBlock29.get_AliasLevel(j);
                                                }
                                                else if (withBlock29.get_AliasLevelIsMultMod(j))
                                                {
                                                    if (flevel == SRC.DEFAULT_LEVEL)
                                                    {
                                                        flevel = 1d;
                                                    }

                                                    flevel2 = flevel * withBlock29.get_AliasLevel(j);
                                                }
                                                else if (flevel != SRC.DEFAULT_LEVEL)
                                                {
                                                    flevel2 = flevel;
                                                }
                                                else
                                                {
                                                    flevel2 = withBlock29.get_AliasLevel(j);
                                                }

                                                fdata2 = withBlock29.get_AliasData(j);
                                                if (!string.IsNullOrEmpty(fdata))
                                                {
                                                    if (Strings.InStr(fdata2, "非表示") != 1)
                                                    {
                                                        fdata2 = fdata + " " + GeneralLib.ListTail(fdata2, (GeneralLib.LLength(fdata) + 1));
                                                    }
                                                }
                                            }

                                            string argcname = ftype2 + "付加";
                                            t.AddCondition(argcname, elevel2, flevel2, fdata2);
                                        }
                                    }
                                }
                                else
                                {
                                    string argcname1 = ftype + "付加";
                                    withBlock28.AddCondition(argcname1, elevel2, flevel, fdata);
                                }

                                withBlock28.Update();
                                if (ReferenceEquals(t, CurrentForm()))
                                {
                                    object argu226 = null;
                                    GUI.UpdateMessageForm(t, u2: argu226);
                                }
                                else
                                {
                                    object argu227 = CurrentForm();
                                    GUI.UpdateMessageForm(t, argu227);
                                }

                                switch (GeneralLib.LIndex(edata, 1) ?? "")
                                {
                                    case "耐性":
                                    case "無効化":
                                    case "吸収":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "は[" + GeneralLib.LIndex(edata, 3) + "]属性に対する[" + GeneralLib.LIndex(edata, 1) + "]能力を得た。");
                                            break;
                                        }

                                    case "特殊効果無効化":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "は[" + GeneralLib.LIndex(edata, 3) + "]属性に対する無効化能力を得た。");
                                            break;
                                        }

                                    case "攻撃属性":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "は[" + GeneralLib.LIndex(edata, 3) + "]の攻撃属性を得た。");
                                            break;
                                        }

                                    case "武器強化":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "の" + "武器の攻撃力が上がった。");
                                            break;
                                        }

                                    case "命中率強化":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "の" + "武器の命中率が上がった。");
                                            break;
                                        }

                                    case "ＣＴ率強化":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "の" + "武器のＣＴ率が上がった。");
                                            break;
                                        }

                                    case "特殊効果発動率強化":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "の" + "武器の特殊効果発動率が上がった。");
                                            break;
                                        }

                                    case "射程延長":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "の" + "武器の射程が伸びた。");
                                            break;
                                        }

                                    case "サイズ変更":
                                        {
                                            GUI.DisplaySysMessage(withBlock28.Nickname + "の" + "サイズが" + Strings.StrConv(GeneralLib.LIndex(edata, 3), VbStrConv.Wide) + "サイズに変化した。");
                                            break;
                                        }
                                    // メッセージを表示しない。
                                    case "パイロット愛称":
                                    case "パイロット画像":
                                    case "愛称変更":
                                    case "ユニット画像":
                                    case "ＢＧＭ":
                                        {
                                            break;
                                        }

                                    default:
                                        {
                                            // 付加する能力名
                                            fname = GeneralLib.ListIndex(fdata, 1);
                                            if (string.IsNullOrEmpty(fname) | fname == "非表示")
                                            {
                                                if ((GeneralLib.LIndex(edata, 2) ?? "") != (Microsoft.VisualBasic.Compatibility.VB6.Support.Format(SRC.DEFAULT_LEVEL) ?? ""))
                                                {
                                                    fname = GeneralLib.LIndex(edata, 1) + "Lv" + GeneralLib.LIndex(edata, 2);
                                                }
                                                else
                                                {
                                                    fname = GeneralLib.LIndex(edata, 1);
                                                }
                                            }

                                            GUI.DisplaySysMessage(withBlock28.Nickname + "は[" + fname + "]の能力を得た。");
                                            break;
                                        }
                                }

                                if (AbilityMaxRange(a) > 0)
                                {
                                    is_useful = true;
                                }
                            }

                            break;
                        }

                    case "強化":
                        {
                            {
                                var withBlock30 = t;
                                if (elevel2 == 0d)
                                {
                                    // レベル指定がない場合は付加が半永久的に持続
                                    elevel2 = 10000d;
                                }
                                else
                                {
                                    // そうでなければ最低１ターンは効果が持続
                                    elevel2 = GeneralLib.MaxLng(elevel2, 1);
                                }

                                // 効果時間が継続中？
                                object argIndex83 = GeneralLib.LIndex(edata, 1) + "強化";
                                if (withBlock30.IsConditionSatisfied(argIndex83))
                                {
                                    goto NextLoop;
                                }

                                ftype = GeneralLib.LIndex(edata, 1);
                                flevel = Conversions.ToDouble(GeneralLib.LIndex(edata, 2));
                                fdata = "";
                                var loopTo22 = GeneralLib.LLength(edata);
                                for (j = 3; j <= loopTo22; j++)
                                    fdata = fdata + GeneralLib.LIndex(edata, j) + " ";
                                fdata = Strings.Trim(fdata);

                                // エリアスが定義されている？
                                object argIndex85 = ftype;
                                if (SRC.ALDList.IsDefined(argIndex85))
                                {
                                    object argIndex84 = ftype;
                                    {
                                        var withBlock31 = SRC.ALDList.Item(argIndex84);
                                        var loopTo23 = withBlock31.Count;
                                        for (j = 1; j <= loopTo23; j++)
                                        {
                                            // エリアスの定義に従って特殊能力定義を置き換える
                                            ftype2 = withBlock31.get_AliasType(i);
                                            string localLIndex1() { string arglist = withBlock31.get_AliasData(j); var ret = GeneralLib.LIndex(arglist, 1); withBlock31.get_AliasData(j) = arglist; return ret; }

                                            if (localLIndex1() == "解説")
                                            {
                                                // 特殊能力の解説
                                                if (!string.IsNullOrEmpty(fdata))
                                                {
                                                    ftype2 = GeneralLib.LIndex(fdata, 1);
                                                }

                                                flevel2 = SRC.DEFAULT_LEVEL;
                                                fdata2 = withBlock31.get_AliasData(j);
                                                string argcname2 = ftype2 + "付加";
                                                t.AddCondition(argcname2, elevel2, flevel2, fdata2);
                                            }
                                            else
                                            {
                                                // 通常の特殊能力
                                                if (withBlock31.get_AliasLevelIsMultMod(j))
                                                {
                                                    if (flevel == SRC.DEFAULT_LEVEL)
                                                    {
                                                        flevel = 1d;
                                                    }

                                                    flevel2 = flevel * withBlock31.get_AliasLevel(j);
                                                }
                                                else if (flevel != SRC.DEFAULT_LEVEL)
                                                {
                                                    flevel2 = flevel;
                                                }
                                                else
                                                {
                                                    flevel2 = withBlock31.get_AliasLevel(j);
                                                }

                                                fdata2 = withBlock31.get_AliasData(j);
                                                if (!string.IsNullOrEmpty(fdata))
                                                {
                                                    if (Strings.InStr(fdata2, "非表示") != 1)
                                                    {
                                                        fdata2 = fdata + " " + GeneralLib.ListTail(fdata2, (GeneralLib.LLength(fdata) + 1));
                                                    }
                                                }

                                                string argcname3 = ftype2 + "強化";
                                                t.AddCondition(argcname3, elevel2, flevel2, fdata2);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    string argcname4 = ftype + "強化";
                                    withBlock30.AddCondition(argcname4, elevel2, flevel, fdata);
                                }

                                withBlock30.Update();
                                if (ReferenceEquals(t, CurrentForm()))
                                {
                                    object argu228 = null;
                                    GUI.UpdateMessageForm(t, u2: argu228);
                                }
                                else
                                {
                                    object argu229 = CurrentForm();
                                    GUI.UpdateMessageForm(t, argu229);
                                }

                                // 強化する能力名
                                fname = GeneralLib.LIndex(edata, 3);
                                if (string.IsNullOrEmpty(fname) | fname == "非表示")
                                {
                                    fname = GeneralLib.LIndex(edata, 1);
                                }

                                if (t.SkillName0(fname) != "非表示")
                                {
                                    fname = t.SkillName0(fname);
                                }

                                GUI.DisplaySysMessage(withBlock30.Nickname + "の[" + fname + "]レベルが" + GeneralLib.LIndex(edata, 2) + "上がった。");
                                if (AbilityMaxRange(a) > 0)
                                {
                                    is_useful = true;
                                }
                            }

                            break;
                        }

                    case "状態":
                        {
                            {
                                var withBlock32 = t;
                                if (elevel2 == 0d)
                                {
                                    // レベル指定がない場合は付加が半永久的に持続
                                    elevel2 = 10000d;
                                }
                                else
                                {
                                    // そうでなければ最低１ターンは状態が持続
                                    elevel = GeneralLib.MaxLng(elevel2, 1);
                                }

                                // 効果時間が継続中？
                                object argIndex86 = edata;
                                if (withBlock32.IsConditionSatisfied(argIndex86))
                                {
                                    goto NextLoop;
                                }

                                string argcdata = "";
                                withBlock32.AddCondition(edata, elevel2, cdata: argcdata);

                                // 状態発動アニメーション表示
                                bool localIsAnimationDefined() { string argmain_situation = aname + "(発動)"; string argsub_situation = ""; var ret = IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                                string argsub_situation15 = "";
                                if (!localIsAnimationDefined() & !IsAnimationDefined(aname, sub_situation: argsub_situation15))
                                {
                                    switch (edata ?? "")
                                    {
                                        case "攻撃力ＵＰ":
                                        case "防御力ＵＰ":
                                        case "運動性ＵＰ":
                                        case "移動力ＵＰ":
                                        case "狂戦士":
                                            {
                                                string arganame5 = edata + "発動";
                                                Effect.ShowAnimation(arganame5);
                                                break;
                                            }
                                    }
                                }

                                switch (edata ?? "")
                                {
                                    case "装甲劣化":
                                        {
                                            string argtname21 = "装甲";
                                            cname = Expression.Term(argtname21, t) + "劣化";
                                            break;
                                        }

                                    case "運動性ＵＰ":
                                        {
                                            string argtname22 = "運動性";
                                            cname = Expression.Term(argtname22, t) + "ＵＰ";
                                            break;
                                        }

                                    case "運動性ＤＯＷＮ":
                                        {
                                            string argtname23 = "運動性";
                                            cname = Expression.Term(argtname23, t) + "ＤＯＷＮ";
                                            break;
                                        }

                                    case "移動力ＵＰ":
                                        {
                                            string argtname24 = "移動力";
                                            cname = Expression.Term(argtname24, t) + "ＵＰ";
                                            break;
                                        }

                                    case "移動力ＤＯＷＮ":
                                        {
                                            string argtname25 = "移動力";
                                            cname = Expression.Term(argtname25, t) + "ＤＯＷＮ";
                                            break;
                                        }

                                    default:
                                        {
                                            cname = edata;
                                            break;
                                        }
                                }

                                GUI.DisplaySysMessage(withBlock32.Nickname + "は" + cname + "の状態になった。");
                                if (AbilityMaxRange(a) > 0)
                                {
                                    is_useful = true;
                                }
                            }

                            break;
                        }

                    case "召喚":
                        {
                            object argu230 = null;
                            GUI.UpdateMessageForm(CurrentForm(), u2: argu230);
                            bool localIsDefined2() { object argIndex1 = edata; var ret = SRC.UDList.IsDefined(argIndex1); return ret; }

                            if (!localIsDefined2())
                            {
                                string argmsg13 = edata + "のデータが定義されていません";
                                GUI.ErrorMessage(argmsg13);
                                return ExecuteAbilityRet;
                            }

                            UnitData localItem() { object argIndex1 = edata; var ret = SRC.UDList.Item(argIndex1); return ret; }

                            object argIndex87 = "追加パイロット";
                            pname = localItem().FeatureData(argIndex87);
                            bool localIsDefined3() { object argIndex1 = pname; var ret = SRC.PDList.IsDefined(argIndex1); return ret; }

                            if (!localIsDefined3())
                            {
                                string argmsg14 = "追加パイロット「" + pname + "」のデータがありません";
                                GUI.ErrorMessage(argmsg14);
                                return ExecuteAbilityRet;
                            }

                            // 召喚したユニットを配置する座標を決定する。
                            // 最も近い敵ユニットの方向にユニットを配置する。
                            var argu = this;
                            u = COM.SearchNearestEnemy(argu);
                            if (u is object)
                            {
                                if (Math.Abs((x - u.x)) > Math.Abs((y - u.y)))
                                {
                                    if (x < u.x)
                                    {
                                        tx = (x + 1);
                                    }
                                    else if (x > u.x)
                                    {
                                        tx = (x - 1);
                                    }
                                    else
                                    {
                                        tx = x;
                                    }

                                    ty = y;
                                    tx2 = x;
                                    if (y < u.y)
                                    {
                                        ty2 = (y + 1);
                                    }
                                    else if (y > u.y)
                                    {
                                        ty2 = (y - 1);
                                    }
                                    else if (y == 1)
                                    {
                                        if (Map.MapDataForUnit[x, 2] is null)
                                        {
                                            ty2 = 2;
                                        }
                                        else
                                        {
                                            ty2 = 1;
                                        }
                                    }
                                    else if (y == Map.MapHeight)
                                    {
                                        if (Map.MapDataForUnit[x, Map.MapHeight - 1] is null)
                                        {
                                            ty2 = (Map.MapHeight - 1);
                                        }
                                        else
                                        {
                                            ty2 = Map.MapHeight;
                                        }
                                    }
                                    else if (Map.MapDataForUnit[x, y - 1] is null)
                                    {
                                        ty2 = (y - 1);
                                    }
                                    else if (Map.MapDataForUnit[x, y + 1] is null)
                                    {
                                        ty2 = (y - 1);
                                    }
                                    else
                                    {
                                        ty2 = y;
                                    }
                                }
                                else
                                {
                                    tx = x;
                                    if (y < u.y)
                                    {
                                        ty = (y + 1);
                                    }
                                    else if (y > u.y)
                                    {
                                        ty = (y - 1);
                                    }
                                    else
                                    {
                                        ty = y;
                                    }

                                    if (x < u.x)
                                    {
                                        tx2 = (x + 1);
                                    }
                                    else if (x > u.x)
                                    {
                                        tx2 = (x - 1);
                                    }
                                    else if (x == 1)
                                    {
                                        if (Map.MapDataForUnit[2, y] is null)
                                        {
                                            tx2 = 2;
                                        }
                                        else
                                        {
                                            tx2 = 1;
                                        }
                                    }
                                    else if (x == Map.MapWidth)
                                    {
                                        if (Map.MapDataForUnit[Map.MapWidth - 1, y] is null)
                                        {
                                            tx2 = (Map.MapWidth - 1);
                                        }
                                        else
                                        {
                                            tx2 = Map.MapWidth;
                                        }
                                    }
                                    else if (Map.MapDataForUnit[x - 1, y] is null)
                                    {
                                        tx2 = (x - 1);
                                    }
                                    else if (Map.MapDataForUnit[x + 1, y] is null)
                                    {
                                        tx2 = (x + 1);
                                    }
                                    else
                                    {
                                        tx2 = x;
                                    }

                                    ty2 = y;
                                }
                            }
                            else
                            {
                                tx = x;
                                ty = y;
                                tx2 = x;
                                ty2 = y;
                            }

                            var loopTo24 = GeneralLib.MaxLng(elevel, 1);
                            for (j = 1; j <= loopTo24; j++)
                            {
                                PilotData localItem1() { object argIndex1 = pname; var ret = SRC.PDList.Item(argIndex1); return ret; }

                                PilotData localItem2() { object argIndex1 = pname; var ret = SRC.PDList.Item(argIndex1); return ret; }

                                if (Strings.InStr(localItem1().Name, "(ザコ)") > 0 | Strings.InStr(localItem2().Name, "(汎用)") > 0)
                                {
                                    string argpparty1 = Party;
                                    string arggid1 = "";
                                    p = SRC.PList.Add(pname, MainPilot().Level, argpparty1, gid: arggid1);
                                    Party = argpparty1;
                                    p.FullRecover();
                                    string arguparty = Party;
                                    u = SRC.UList.Add(edata, Rank, arguparty);
                                    Party = arguparty;
                                }
                                else
                                {
                                    bool localIsDefined4() { object argIndex1 = pname; var ret = SRC.PList.IsDefined(argIndex1); return ret; }

                                    if (!localIsDefined4())
                                    {
                                        string argpparty2 = Party;
                                        string arggid2 = "";
                                        p = SRC.PList.Add(pname, MainPilot().Level, argpparty2, gid: arggid2);
                                        Party = argpparty2;
                                        p.FullRecover();
                                        string arguparty1 = Party;
                                        u = SRC.UList.Add(edata, Rank, arguparty1);
                                        Party = arguparty1;
                                    }
                                    else
                                    {
                                        object argIndex88 = pname;
                                        p = SRC.PList.Item(argIndex88);
                                        u = p.Unit_Renamed;
                                        if (u is null)
                                        {
                                            object argIndex90 = edata;
                                            if (SRC.UList.IsDefined(argIndex90))
                                            {
                                                object argIndex89 = edata;
                                                u = SRC.UList.Item(argIndex89);
                                            }
                                            else
                                            {
                                                string arguparty2 = Party;
                                                u = SRC.UList.Add(edata, Rank, arguparty2);
                                                Party = arguparty2;
                                            }
                                        }
                                    }
                                }

                                p.Ride(u);
                                AddServant(u);
                                if (Party == "味方")
                                {
                                    object argIndex91 = "召喚ユニット";
                                    string arglist = u.FeatureData(argIndex91);
                                    if (GeneralLib.LIndex(arglist, 2) == "ＮＰＣ")
                                    {
                                        string argnew_party = "ＮＰＣ";
                                        u.ChangeParty(argnew_party);
                                    }
                                }

                                u.Summoner = CurrentForm();
                                u.FullRecover();
                                u.Mode = MainPilot().ID;
                                u.UsedAction = 0;
                                string argfname4 = "制限時間";
                                if (u.IsFeatureAvailable(argfname4))
                                {
                                    string argcname5 = "残り時間";
                                    object argIndex92 = "制限時間";
                                    object argIndex93 = "制限時間";
                                    string argcdata1 = "";
                                    u.AddCondition(argcname5, Conversions.Toint(u.FeatureData(argIndex93)), cdata: argcdata1);
                                }

                                string argmain_situation12 = "発進";
                                if (u.IsMessageDefined(argmain_situation12))
                                {
                                    if (!My.MyProject.Forms.frmMessage.Visible)
                                    {
                                        var argu111 = this;
                                        Unit argu231 = null;
                                        GUI.OpenMessageForm(argu111, u2: argu231);
                                    }

                                    string argSituation1 = "発進";
                                    string argmsg_mode2 = "";
                                    u.PilotMessage(argSituation1, msg_mode: argmsg_mode2);
                                }

                                // ユニットを配置
                                if (Map.MapDataForUnit[tx, ty] is null & u.IsAbleToEnter(tx, ty))
                                {
                                    u.StandBy(tx, ty, "出撃");
                                }
                                else if (Map.MapDataForUnit[tx2, ty2] is null & u.IsAbleToEnter(tx2, ty2))
                                {
                                    u.StandBy(tx2, ty2, "出撃");
                                }
                                else
                                {
                                    u.StandBy(x, y, "出撃");
                                }

                                // ちゃんと配置できた？
                                if (u.Status_Renamed == "待機")
                                {
                                    // 空いた場所がなく出撃出来なかった場合
                                    GUI.DisplaySysMessage(Nickname + "は" + u.Nickname + "の召喚に失敗した。");
                                    object argIndex94 = u.ID;
                                    DeleteServant(argIndex94);
                                    u.Status_Renamed = "破棄";
                                }
                            }

                            break;
                        }

                    case "変身":
                        {
                            // 既に変身している場合は変身出来ない
                            string argfname5 = "ノーマルモード";
                            if (t.IsFeatureAvailable(argfname5))
                            {
                                goto NextLoop;
                            }

                            buf = t.Name;
                            string argnew_form = GeneralLib.LIndex(edata, 1);
                            t.Transform(argnew_form);
                            t = t.CurrentForm();
                            if (elevel2 > 0d)
                            {
                                string argcname6 = "残り時間";
                                string argcdata2 = "";
                                t.AddCondition(argcname6, GeneralLib.MaxLng(elevel2, 1), cdata: argcdata2);
                            }

                            var loopTo25 = GeneralLib.LLength(edata);
                            for (j = 2; j <= loopTo25; j++)
                                buf = buf + " " + GeneralLib.LIndex(edata, j);
                            string argcname7 = "ノーマルモード付加";
                            t.AddCondition(argcname7, -1, 1d, buf);

                            // 変身した場合はそこで終わり
                            break;
                        }

                    case "能力コピー":
                        {
                            // 既に変身している場合は能力コピー出来ない
                            string argfname6 = "ノーマルモード";
                            if (IsFeatureAvailable(argfname6))
                            {
                                goto NextLoop;
                            }

                            string argnew_form1 = t.Name;
                            Transform(argnew_form1);
                            t.Name = argnew_form1;
                            {
                                var withBlock33 = CurrentForm();
                                if (elevel2 > 0d)
                                {
                                    string argcname8 = "残り時間";
                                    string argcdata3 = "";
                                    withBlock33.AddCondition(argcname8, GeneralLib.MaxLng(elevel2, 1), cdata: argcdata3);
                                }

                                // 元の形態に戻れるように設定
                                buf = Name;
                                var loopTo26 = GeneralLib.LLength(edata);
                                for (j = 1; j <= loopTo26; j++)
                                    buf = buf + " " + GeneralLib.LIndex(edata, j);
                                string argcname9 = "ノーマルモード付加";
                                withBlock33.AddCondition(argcname9, -1, 1d, buf);
                                string argcname10 = "能力コピー";
                                string argcdata4 = "";
                                withBlock33.AddCondition(argcname10, -1, cdata: argcdata4);

                                // コピー元のパイロット画像とメッセージを使うように設定
                                string argcname11 = "パイロット画像";
                                string argcdata5 = "非表示 " + t.MainPilot().get_Bitmap(false);
                                withBlock33.AddCondition(argcname11, -1, 0d, argcdata5);
                                string argcname12 = "メッセージ";
                                string argcdata6 = "非表示 " + t.MainPilot().MessageType;
                                withBlock33.AddCondition(argcname12, -1, 0d, argcdata6);
                            }

                            // 能力コピーした場合はそこで終わり
                            ExecuteAbilityRet = true;
                            Commands.RestoreSelections();
                            return ExecuteAbilityRet;
                        }

                    case "再行動":
                        {
                            if (!ReferenceEquals(t, CurrentForm()))
                            {
                                if (t.Action == 0 & t.MaxAction() > 0)
                                {
                                    if (t.UsedAction > t.MaxAction())
                                    {
                                        t.UsedAction = t.MaxAction();
                                    }

                                    t.UsedAction = (t.UsedAction - 1);
                                    GUI.DisplaySysMessage(t.Nickname + "を行動可能にした。");
                                    is_useful = true;
                                }
                            }
                            else
                            {
                                t.UsedAction = (t.UsedAction - 1);
                            }

                            break;
                        }
                }

                NextLoop:
                ;
            }

            t.CurrentForm().Update();
            t.CurrentForm().CheckAutoHyperMode();
            t.CurrentForm().CheckAutoNormalMode();
            ExecuteAbilityRet = is_useful;
            Finish:
            ;


            // 選択状況を復元
            Commands.RestoreSelections();

            // マップアビリティの場合、これ以降の処理は必要なし
            if (is_map_ability)
            {
                return ExecuteAbilityRet;
            }

            // 合体技のパートナーの弾数＆ＥＮの消費
            var loopTo27 = Information.UBound(partners);
            for (i = 1; i <= loopTo27; i++)
            {
                {
                    var withBlock34 = partners[i].CurrentForm();
                    var loopTo28 = withBlock34.CountAbility();
                    for (j = 1; j <= loopTo28; j++)
                    {
                        // パートナーが同名のアビリティを持っていればそのアビリティのデータを使う
                        if ((withBlock34.Ability(j).Name ?? "") == (aname ?? ""))
                        {
                            withBlock34.UseAbility(j);
                            string argattr18 = "自";
                            string argattr19 = "失";
                            string argattr20 = "変";
                            if (withBlock34.IsAbilityClassifiedAs(j, argattr18))
                            {
                                string argfname7 = "パーツ分離";
                                if (withBlock34.IsFeatureAvailable(argfname7))
                                {
                                    object argIndex96 = "パーツ分離";
                                    string arglist1 = withBlock34.FeatureData(argIndex96);
                                    uname = GeneralLib.LIndex(arglist1, 2);
                                    Unit localOtherForm() { object argIndex1 = uname; var ret = withBlock34.OtherForm(argIndex1); return ret; }

                                    if (localOtherForm().IsAbleToEnter(withBlock34.x, withBlock34.y))
                                    {
                                        withBlock34.Transform(uname);
                                        {
                                            var withBlock35 = withBlock34.CurrentForm();
                                            withBlock35.HP = withBlock35.MaxHP;
                                            withBlock35.UsedAction = withBlock35.MaxAction();
                                        }
                                    }
                                    else
                                    {
                                        withBlock34.Die();
                                    }
                                }
                                else
                                {
                                    withBlock34.Die();
                                }
                            }
                            else if (withBlock34.IsAbilityClassifiedAs(j, argattr19) & withBlock34.HP == 0)
                            {
                                withBlock34.Die();
                            }
                            else if (withBlock34.IsAbilityClassifiedAs(j, argattr20))
                            {
                                string argfname9 = "変形技";
                                string argfname10 = "ノーマルモード";
                                if (withBlock34.IsFeatureAvailable(argfname9))
                                {
                                    var loopTo29 = withBlock34.CountFeature();
                                    for (k = 1; k <= loopTo29; k++)
                                    {
                                        string localFeature() { object argIndex1 = k; var ret = withBlock34.Feature(argIndex1); return ret; }

                                        string localFeatureData1() { object argIndex1 = k; var ret = withBlock34.FeatureData(argIndex1); return ret; }

                                        string localLIndex2() { string arglist = hsd94f2b67de0b4586a4a3a3d57d84bb20(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                        if (localFeature() == "変形技" & (localLIndex2() ?? "") == (aname ?? ""))
                                        {
                                            string localFeatureData() { object argIndex1 = k; var ret = withBlock34.FeatureData(argIndex1); return ret; }

                                            string arglist2 = localFeatureData();
                                            uname = GeneralLib.LIndex(arglist2, 2);
                                            Unit localOtherForm1() { object argIndex1 = uname; var ret = withBlock34.OtherForm(argIndex1); return ret; }

                                            if (localOtherForm1().IsAbleToEnter(withBlock34.x, withBlock34.y))
                                            {
                                                withBlock34.Transform(uname);
                                            }

                                            break;
                                        }
                                    }

                                    if ((uname ?? "") != (withBlock34.CurrentForm().Name ?? ""))
                                    {
                                        string argfname8 = "ノーマルモード";
                                        if (withBlock34.IsFeatureAvailable(argfname8))
                                        {
                                            object argIndex97 = "ノーマルモード";
                                            string arglist3 = withBlock34.FeatureData(argIndex97);
                                            uname = GeneralLib.LIndex(arglist3, 1);
                                            Unit localOtherForm2() { object argIndex1 = uname; var ret = withBlock34.OtherForm(argIndex1); return ret; }

                                            if (localOtherForm2().IsAbleToEnter(withBlock34.x, withBlock34.y))
                                            {
                                                withBlock34.Transform(uname);
                                            }
                                        }
                                    }
                                }
                                else if (withBlock34.IsFeatureAvailable(argfname10))
                                {
                                    object argIndex98 = "ノーマルモード";
                                    string arglist4 = withBlock34.FeatureData(argIndex98);
                                    uname = GeneralLib.LIndex(arglist4, 1);
                                    Unit localOtherForm3() { object argIndex1 = uname; var ret = withBlock34.OtherForm(argIndex1); return ret; }

                                    if (localOtherForm3().IsAbleToEnter(withBlock34.x, withBlock34.y))
                                    {
                                        withBlock34.Transform(uname);
                                    }
                                }
                            }

                            break;
                        }
                    }

                    // 同名のアビリティがなかった場合は自分のデータを使って処理
                    if (j > withBlock34.CountAbility())
                    {
                        if (this.Ability(a).ENConsumption > 0)
                        {
                            withBlock34.EN = withBlock34.EN - AbilityENConsumption(a);
                        }

                        string argattr21 = "消";
                        if (IsAbilityClassifiedAs(a, argattr21))
                        {
                            string argcname13 = "消耗";
                            string argcdata7 = "";
                            withBlock34.AddCondition(argcname13, 1, cdata: argcdata7);
                        }

                        string argattr22 = "Ｃ";
                        object argIndex100 = "チャージ完了";
                        if (IsAbilityClassifiedAs(a, argattr22) & withBlock34.IsConditionSatisfied(argIndex100))
                        {
                            object argIndex99 = "チャージ完了";
                            withBlock34.DeleteCondition(argIndex99);
                        }

                        string argattr24 = "気";
                        if (IsAbilityClassifiedAs(a, argattr24))
                        {
                            string argattr23 = "気";
                            withBlock34.IncreaseMorale((-5 * AbilityLevel(a, argattr23)));
                        }

                        string argattr27 = "霊";
                        string argattr28 = "プ";
                        if (IsAbilityClassifiedAs(a, argattr27))
                        {
                            hp_ratio = 100 * withBlock34.HP / (double)withBlock34.MaxHP;
                            en_ratio = 100 * withBlock34.EN / (double)withBlock34.MaxEN;
                            string argattr25 = "霊";
                            withBlock34.MainPilot().Plana = (withBlock34.MainPilot().Plana - 5d * AbilityLevel(a, argattr25));
                            withBlock34.HP = (withBlock34.MaxHP * hp_ratio / 100d);
                            withBlock34.EN = (withBlock34.MaxEN * en_ratio / 100d);
                        }
                        else if (IsAbilityClassifiedAs(a, argattr28))
                        {
                            hp_ratio = 100 * withBlock34.HP / (double)withBlock34.MaxHP;
                            en_ratio = 100 * withBlock34.EN / (double)withBlock34.MaxEN;
                            string argattr26 = "プ";
                            withBlock34.MainPilot().Plana = (withBlock34.MainPilot().Plana - 5d * AbilityLevel(a, argattr26));
                            withBlock34.HP = (withBlock34.MaxHP * hp_ratio / 100d);
                            withBlock34.EN = (withBlock34.MaxEN * en_ratio / 100d);
                        }

                        string argattr30 = "失";
                        if (IsAbilityClassifiedAs(a, argattr30))
                        {
                            string argattr29 = "失";
                            withBlock34.HP = GeneralLib.MaxLng((withBlock34.HP - (long)(withBlock34.MaxHP * AbilityLevel(a, argattr29)) / 10L), 0);
                        }

                        string argattr31 = "自";
                        string argattr32 = "失";
                        string argattr33 = "変";
                        if (IsAbilityClassifiedAs(a, argattr31))
                        {
                            string argfname11 = "パーツ分離";
                            if (withBlock34.IsFeatureAvailable(argfname11))
                            {
                                object argIndex101 = "パーツ分離";
                                string arglist5 = withBlock34.FeatureData(argIndex101);
                                uname = GeneralLib.LIndex(arglist5, 2);
                                Unit localOtherForm4() { object argIndex1 = uname; var ret = withBlock34.OtherForm(argIndex1); return ret; }

                                if (localOtherForm4().IsAbleToEnter(withBlock34.x, withBlock34.y))
                                {
                                    withBlock34.Transform(uname);
                                    {
                                        var withBlock36 = withBlock34.CurrentForm();
                                        withBlock36.HP = withBlock36.MaxHP;
                                        withBlock36.UsedAction = withBlock36.MaxAction();
                                    }
                                }
                                else
                                {
                                    withBlock34.Die();
                                }
                            }
                            else
                            {
                                withBlock34.Die();
                            }
                        }
                        else if (IsAbilityClassifiedAs(a, argattr32) & withBlock34.HP == 0)
                        {
                            withBlock34.Die();
                        }
                        else if (IsAbilityClassifiedAs(a, argattr33))
                        {
                            string argfname12 = "ノーマルモード";
                            if (withBlock34.IsFeatureAvailable(argfname12))
                            {
                                object argIndex102 = "ノーマルモード";
                                string arglist6 = withBlock34.FeatureData(argIndex102);
                                uname = GeneralLib.LIndex(arglist6, 1);
                                Unit localOtherForm5() { object argIndex1 = uname; var ret = withBlock34.OtherForm(argIndex1); return ret; }

                                if (localOtherForm5().IsAbleToEnter(withBlock34.x, withBlock34.y))
                                {
                                    withBlock34.Transform(uname);
                                }
                            }
                        }
                    }
                }
            }

            // 変身した場合
            if (Status_Renamed == "他形態")
            {
                {
                    var withBlock37 = CurrentForm();
                    // 使い捨てアイテムによる変身の処理
                    var loopTo30 = withBlock37.CountAbility();
                    for (i = 1; i <= loopTo30; i++)
                    {
                        if ((withBlock37.Ability(i).Name ?? "") == (aname ?? ""))
                        {
                            // アイテムを消費
                            if (withBlock37.Ability(i).IsItem() & withBlock37.Stock(i) == 0 & withBlock37.MaxStock(i) > 0)
                            {
                                var loopTo31 = withBlock37.CountItem();
                                for (j = 1; j <= loopTo31; j++)
                                {
                                    Item localItem5() { object argIndex1 = j; var ret = withBlock37.Item(argIndex1); return ret; }

                                    var loopTo32 = localItem5().CountAbility();
                                    for (k = 1; k <= loopTo32; k++)
                                    {
                                        Item localItem4() { object argIndex1 = j; var ret = withBlock37.Item(argIndex1); return ret; }

                                        AbilityData localAbility() { object argIndex1 = k; var ret = hs8bdb16b7368640769bb5144024b221c0().Ability(argIndex1); return ret; }

                                        if ((localAbility().Name ?? "") == (aname ?? ""))
                                        {
                                            Item localItem3() { object argIndex1 = j; var ret = withBlock37.Item(argIndex1); return ret; }

                                            localItem3().Exist = false;
                                            object argIndex103 = j;
                                            withBlock37.DeleteItem(argIndex103);
                                            withBlock37.Update();
                                            goto ExitLoop;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    ExitLoop:
                    ;


                    // 自殺？
                    if (withBlock37.HP == 0)
                    {
                        withBlock37.Die();
                    }
                }

                // WaitCommandによる画面クリアが行われないので
                GUI.RedrawScreen();
                return ExecuteAbilityRet;
            }

            // 経験値の獲得
            string argoname1 = "アビリティ経験値無効";
            if (is_useful & !is_event & !Expression.IsOptionDefined(argoname1))
            {
                string argexp_situation = "アビリティ";
                string argexp_mode = "";
                GetExp(t, argexp_situation, exp_mode: argexp_mode);
                string argoname = "合体技パートナー経験値無効";
                if (!Expression.IsOptionDefined(argoname))
                {
                    var loopTo33 = Information.UBound(partners);
                    for (i = 1; i <= loopTo33; i++)
                    {
                        string argexp_situation1 = "アビリティ";
                        string argexp_mode1 = "パートナー";
                        partners[i].CurrentForm().GetExp(t, argexp_situation1, argexp_mode1);
                    }
                }
            }

            // 以下の効果はアビリティデータが変化する場合があるため同時には適応されない

            // 自爆技
            string argattr34 = "自";

            // ＨＰ消費アビリティで自殺
            string argattr35 = "失";

            // 変形技
            string argattr36 = "変";
            if (IsAbilityClassifiedAs(a, argattr34))
            {
                string argfname13 = "パーツ分離";
                if (IsFeatureAvailable(argfname13))
                {
                    object argIndex104 = "パーツ分離";
                    string arglist7 = FeatureData(argIndex104);
                    uname = GeneralLib.LIndex(arglist7, 2);
                    Unit localOtherForm6() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm6().IsAbleToEnter(x, y))
                    {
                        Transform(uname);
                        {
                            var withBlock38 = CurrentForm();
                            withBlock38.HP = withBlock38.MaxHP;
                            withBlock38.UsedAction = withBlock38.MaxAction();
                        }

                        object argIndex105 = "パーツ分離";
                        fname = FeatureName(argIndex105);
                        bool localIsSysMessageDefined() { string argmain_situation = "破壊時分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        bool localIsSysMessageDefined1() { string argmain_situation = "分離(" + Name + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        bool localIsSysMessageDefined2() { string argmain_situation = "分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        string argmain_situation19 = "破壊時分離(" + Name + ")";
                        string argsub_situation22 = "";
                        string argmain_situation20 = "破壊時分離";
                        string argsub_situation23 = "";
                        string argmain_situation21 = "分離";
                        string argsub_situation24 = "";
                        if (IsSysMessageDefined(argmain_situation19, sub_situation: argsub_situation22))
                        {
                            string argmain_situation13 = "破壊時分離(" + Name + ")";
                            string argsub_situation16 = "";
                            string argadd_msg2 = "";
                            SysMessage(argmain_situation13, sub_situation: argsub_situation16, add_msg: argadd_msg2);
                        }
                        else if (localIsSysMessageDefined())
                        {
                            string argmain_situation14 = "破壊時分離(" + fname + ")";
                            string argsub_situation17 = "";
                            string argadd_msg3 = "";
                            SysMessage(argmain_situation14, sub_situation: argsub_situation17, add_msg: argadd_msg3);
                        }
                        else if (IsSysMessageDefined(argmain_situation20, sub_situation: argsub_situation23))
                        {
                            string argmain_situation15 = "破壊時分離";
                            string argsub_situation18 = "";
                            string argadd_msg4 = "";
                            SysMessage(argmain_situation15, sub_situation: argsub_situation18, add_msg: argadd_msg4);
                        }
                        else if (localIsSysMessageDefined1())
                        {
                            string argmain_situation16 = "分離(" + Name + ")";
                            string argsub_situation19 = "";
                            string argadd_msg5 = "";
                            SysMessage(argmain_situation16, sub_situation: argsub_situation19, add_msg: argadd_msg5);
                        }
                        else if (localIsSysMessageDefined2())
                        {
                            string argmain_situation17 = "分離(" + fname + ")";
                            string argsub_situation20 = "";
                            string argadd_msg6 = "";
                            SysMessage(argmain_situation17, sub_situation: argsub_situation20, add_msg: argadd_msg6);
                        }
                        else if (IsSysMessageDefined(argmain_situation21, sub_situation: argsub_situation24))
                        {
                            string argmain_situation18 = "分離";
                            string argsub_situation21 = "";
                            string argadd_msg7 = "";
                            SysMessage(argmain_situation18, sub_situation: argsub_situation21, add_msg: argadd_msg7);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(Nickname + "は破壊されたパーツを分離させた。");
                        }
                    }
                    else
                    {
                        Die();
                    }
                }
                else
                {
                    Die();
                }
            }
            else if (IsAbilityClassifiedAs(a, argattr35) & HP == 0)
            {
                Die();
            }
            else if (IsAbilityClassifiedAs(a, argattr36))
            {
                string argfname15 = "変形技";
                string argfname16 = "ノーマルモード";
                if (IsFeatureAvailable(argfname15))
                {
                    var loopTo34 = CountFeature();
                    for (i = 1; i <= loopTo34; i++)
                    {
                        string localFeature1() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                        string localFeatureData3() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localLIndex3() { string arglist = hs943d006232364b899ee9a8aea8dcca5a(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        if (localFeature1() == "変形技" & (localLIndex3() ?? "") == (Ability(a).Name ?? ""))
                        {
                            string localFeatureData2() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string arglist8 = localFeatureData2();
                            uname = GeneralLib.LIndex(arglist8, 2);
                            Unit localOtherForm7() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                            if (localOtherForm7().IsAbleToEnter(x, y))
                            {
                                Transform(uname);
                            }

                            break;
                        }
                    }

                    if ((uname ?? "") != (CurrentForm().Name ?? ""))
                    {
                        string argfname14 = "ノーマルモード";
                        if (IsFeatureAvailable(argfname14))
                        {
                            object argIndex106 = "ノーマルモード";
                            string arglist9 = FeatureData(argIndex106);
                            uname = GeneralLib.LIndex(arglist9, 1);
                            Unit localOtherForm8() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                            if (localOtherForm8().IsAbleToEnter(x, y))
                            {
                                Transform(uname);
                            }
                        }
                    }
                }
                else if (IsFeatureAvailable(argfname16))
                {
                    object argIndex107 = "ノーマルモード";
                    string arglist10 = FeatureData(argIndex107);
                    uname = GeneralLib.LIndex(arglist10, 1);
                    Unit localOtherForm9() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm9().IsAbleToEnter(x, y))
                    {
                        Transform(uname);
                    }
                }
            }

            // アイテムを消費
            else if (Ability(a).IsItem() & Stock(a) == 0 & MaxStock(a) > 0)
            {
                // アイテムを削除
                num = Data.CountAbility();
                num = (num + MainPilot().Data.CountAbility());
                var loopTo35 = CountPilot();
                for (i = 2; i <= loopTo35; i++)
                {
                    Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    num = (num + localPilot().Data.CountAbility());
                }

                var loopTo36 = CountSupport();
                for (i = 2; i <= loopTo36; i++)
                {
                    Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    num = (num + localSupport().Data.CountAbility());
                }

                string argfname17 = "追加サポート";
                if (IsFeatureAvailable(argfname17))
                {
                    num = (num + AdditionalSupport().Data.CountAbility());
                }

                foreach (Item itm in colItem)
                {
                    num = (num + itm.CountAbility());
                    if (a <= num)
                    {
                        itm.Exist = false;
                        DeleteItem((object)itm.ID);
                        break;
                    }
                }
            }

            // ADD START MARGE
            // 戦闘アニメ終了処理
            string argmain_situation24 = aname + "(終了)";
            string argsub_situation27 = "";
            string argmain_situation25 = "終了";
            string argsub_situation28 = "";
            if (IsAnimationDefined(argmain_situation24, sub_situation: argsub_situation27))
            {
                string argmain_situation22 = aname + "(終了)";
                string argsub_situation25 = "";
                PlayAnimation(argmain_situation22, sub_situation: argsub_situation25);
            }
            else if (IsAnimationDefined(argmain_situation25, sub_situation: argsub_situation28))
            {
                string argmain_situation23 = "終了";
                string argsub_situation26 = "";
                PlayAnimation(argmain_situation23, sub_situation: argsub_situation26);
            }
            // ADD END MARGE

            {
                var withBlock39 = CurrentForm();
                // 戦闘アニメで変更されたユニット画像を元に戻す
                object argIndex109 = "ユニット画像";
                if (withBlock39.IsConditionSatisfied(argIndex109))
                {
                    object argIndex108 = "ユニット画像";
                    withBlock39.DeleteCondition(argIndex108);
                    withBlock39.BitmapID = GUI.MakeUnitBitmap(CurrentForm());
                    GUI.PaintUnitBitmap(CurrentForm());
                }

                object argIndex111 = "非表示付加";
                if (withBlock39.IsConditionSatisfied(argIndex111))
                {
                    object argIndex110 = "非表示付加";
                    withBlock39.DeleteCondition(argIndex110);
                    withBlock39.BitmapID = GUI.MakeUnitBitmap(CurrentForm());
                    GUI.PaintUnitBitmap(CurrentForm());
                }
            }

            var loopTo37 = Information.UBound(partners);
            for (i = 1; i <= loopTo37; i++)
            {
                {
                    var withBlock40 = partners[i].CurrentForm();
                    object argIndex113 = "ユニット画像";
                    if (withBlock40.IsConditionSatisfied(argIndex113))
                    {
                        object argIndex112 = "ユニット画像";
                        withBlock40.DeleteCondition(argIndex112);
                        withBlock40.BitmapID = GUI.MakeUnitBitmap(partners[i].CurrentForm());
                        GUI.PaintUnitBitmap(partners[i].CurrentForm());
                    }

                    object argIndex115 = "非表示付加";
                    if (withBlock40.IsConditionSatisfied(argIndex115))
                    {
                        object argIndex114 = "非表示付加";
                        withBlock40.DeleteCondition(argIndex114);
                        withBlock40.BitmapID = GUI.MakeUnitBitmap(partners[i].CurrentForm());
                        GUI.PaintUnitBitmap(partners[i].CurrentForm());
                    }
                }
            }

            return ExecuteAbilityRet;
        }

        // マップアビリティ a を (tx,ty) に使用
        public void ExecuteMapAbility(int a, int tx, int ty, bool is_event = false)
        {
            int k, i, j, num;
            Unit t, max_lv_t;
            Unit[] targets;
            var partners = default(Unit[]);
            var is_useful = default(bool);
            string anickname, aname, msg;
            int min_range, max_range;
            int rx, ry;
            string uname = default, fname;
            double hp_ratio, en_ratio;
            aname = Ability(a).Name;
            anickname = AbilityNickname(a);
            if (!is_event)
            {
                // マップ攻撃の使用イベント
                Event_Renamed.HandleEvent("使用", MainPilot().ID, aname);
                if (SRC.IsScenarioFinished)
                {
                    return;
                }

                if (SRC.IsCanceled)
                {
                    SRC.IsCanceled = false;
                    return;
                }
            }

            // 効果範囲を設定
            min_range = AbilityMinRange(a);
            max_range = AbilityMaxRange(a);
            string argattr5 = "Ｍ直";
            string argattr6 = "Ｍ拡";
            string argattr7 = "Ｍ扇";
            string argattr8 = "Ｍ投";
            string argattr9 = "Ｍ全";
            string argattr10 = "Ｍ移";
            string argattr11 = "Ｍ線";
            if (IsAbilityClassifiedAs(a, argattr5))
            {
                if (ty < y)
                {
                    string argdirection = "N";
                    Map.AreaInLine(x, y, min_range, max_range, argdirection);
                }
                else if (ty > y)
                {
                    string argdirection2 = "S";
                    Map.AreaInLine(x, y, min_range, max_range, argdirection2);
                }
                else if (tx < x)
                {
                    string argdirection3 = "W";
                    Map.AreaInLine(x, y, min_range, max_range, argdirection3);
                }
                else
                {
                    string argdirection1 = "E";
                    Map.AreaInLine(x, y, min_range, max_range, argdirection1);
                }
            }
            else if (IsAbilityClassifiedAs(a, argattr6))
            {
                if (ty < y & Math.Abs((y - ty)) > Math.Abs((x - tx)))
                {
                    string argdirection4 = "N";
                    Map.AreaInCone(x, y, min_range, max_range, argdirection4);
                }
                else if (ty > y & Math.Abs((y - ty)) > Math.Abs((x - tx)))
                {
                    string argdirection6 = "S";
                    Map.AreaInCone(x, y, min_range, max_range, argdirection6);
                }
                else if (tx < x & Math.Abs((x - tx)) > Math.Abs((y - ty)))
                {
                    string argdirection7 = "W";
                    Map.AreaInCone(x, y, min_range, max_range, argdirection7);
                }
                else
                {
                    string argdirection5 = "E";
                    Map.AreaInCone(x, y, min_range, max_range, argdirection5);
                }
            }
            else if (IsAbilityClassifiedAs(a, argattr7))
            {
                if (ty < y & Math.Abs((y - ty)) >= Math.Abs((x - tx)))
                {
                    string argdirection8 = "N";
                    string argattr = "Ｍ扇";
                    Map.AreaInSector(x, y, min_range, max_range, argdirection8, AbilityLevel(a, argattr));
                }
                else if (ty > y & Math.Abs((y - ty)) >= Math.Abs((x - tx)))
                {
                    string argdirection10 = "S";
                    string argattr2 = "Ｍ扇";
                    Map.AreaInSector(x, y, min_range, max_range, argdirection10, AbilityLevel(a, argattr2));
                }
                else if (tx < x & Math.Abs((x - tx)) >= Math.Abs((y - ty)))
                {
                    string argdirection11 = "W";
                    string argattr3 = "Ｍ扇";
                    Map.AreaInSector(x, y, min_range, max_range, argdirection11, AbilityLevel(a, argattr3));
                }
                else
                {
                    string argdirection9 = "E";
                    string argattr1 = "Ｍ扇";
                    Map.AreaInSector(x, y, min_range, max_range, argdirection9, AbilityLevel(a, argattr1));
                }
            }
            else if (IsAbilityClassifiedAs(a, argattr8))
            {
                string argattr4 = "Ｍ投";
                string arguparty = "すべて";
                Map.AreaInRange(tx, ty, AbilityLevel(a, argattr4), 1, arguparty);
            }
            else if (IsAbilityClassifiedAs(a, argattr9))
            {
                string arguparty1 = "すべて";
                Map.AreaInRange(x, y, max_range, min_range, arguparty1);
            }
            else if (IsAbilityClassifiedAs(a, argattr10) | IsAbilityClassifiedAs(a, argattr11))
            {
                Map.AreaInPointToPoint(x, y, tx, ty);
            }

            // ユニットがいるマスの処理
            var loopTo = Map.MapWidth;
            for (i = 1; i <= loopTo; i++)
            {
                var loopTo1 = Map.MapHeight;
                for (j = 1; j <= loopTo1; j++)
                {
                    if (!Map.MaskData[i, j])
                    {
                        t = Map.MapDataForUnit[i, j];
                        if (t is object)
                        {
                            // 有効？
                            if (IsAbilityEffective(a, t))
                            {
                                Map.MaskData[i, j] = false;
                            }
                            else
                            {
                                Map.MaskData[i, j] = true;
                            }
                        }
                    }
                }
            }

            // 支援専用アビリティは自分には使用できない
            string argattr12 = "援";
            if (IsAbilityClassifiedAs(a, argattr12))
            {
                Map.MaskData[x, y] = true;
            }

            // マップアビリティの影響を受けるユニットのリストを作成
            targets = new Unit[1];
            var loopTo2 = Map.MapWidth;
            for (i = 1; i <= loopTo2; i++)
            {
                var loopTo3 = Map.MapHeight;
                for (j = 1; j <= loopTo3; j++)
                {
                    // マップアビリティの影響をうけるかチェック
                    if (Map.MaskData[i, j])
                    {
                        goto NextLoop;
                    }

                    t = Map.MapDataForUnit[i, j];
                    if (t is null)
                    {
                        goto NextLoop;
                    }

                    if (!IsAbilityApplicable(a, t))
                    {
                        Map.MaskData[i, j] = true;
                        goto NextLoop;
                    }

                    Array.Resize(targets, Information.UBound(targets) + 1 + 1);
                    targets[Information.UBound(targets)] = t;
                    NextLoop:
                    ;
                }
            }

            // アビリティ実行の起点を設定
            string argattr13 = "Ｍ投";
            if (IsAbilityClassifiedAs(a, argattr13))
            {
                rx = tx;
                ry = ty;
            }
            else
            {
                rx = x;
                ry = y;
            }

            // 起点からの距離に応じて並べ替え
            int min_item, min_value;
            var loopTo4 = (Information.UBound(targets) - 1);
            for (i = 1; i <= loopTo4; i++)
            {
                min_item = i;
                {
                    var withBlock = targets[i];
                    min_value = (Math.Abs((withBlock.x - rx)) + Math.Abs((withBlock.y - ry)));
                }

                var loopTo5 = Information.UBound(targets);
                for (j = (i + 1); j <= loopTo5; j++)
                {
                    {
                        var withBlock1 = targets[j];
                        if ((Math.Abs((withBlock1.x - rx)) + Math.Abs((withBlock1.y - ry))) < min_value)
                        {
                            min_item = j;
                            min_value = (Math.Abs((withBlock1.x - rx)) + Math.Abs((withBlock1.y - ry)));
                        }
                    }
                }

                if (min_item != i)
                {
                    t = targets[i];
                    targets[i] = targets[min_item];
                    targets[min_item] = t;
                }
            }

            // 合体技
            bool[] TmpMaskData;
            string argattr14 = "合";
            if (IsAbilityClassifiedAs(a, argattr14))
            {

                // 合体技のパートナーのハイライト表示
                // MaskDataを保存して使用している
                TmpMaskData = new bool[(Map.MapWidth + 1), (Map.MapHeight + 1)];
                var loopTo6 = Map.MapWidth;
                for (i = 1; i <= loopTo6; i++)
                {
                    var loopTo7 = Map.MapHeight;
                    for (j = 1; j <= loopTo7; j++)
                        TmpMaskData[i, j] = Map.MaskData[i, j];
                }

                string argctype_Renamed = "アビリティ";
                CombinationPartner(argctype_Renamed, a, partners);

                // パートナーユニットはマスクを解除
                var loopTo8 = Information.UBound(partners);
                for (i = 1; i <= loopTo8; i++)
                {
                    {
                        var withBlock2 = partners[i];
                        Map.MaskData[withBlock2.x, withBlock2.y] = false;
                        TmpMaskData[withBlock2.x, withBlock2.y] = true;
                    }
                }

                GUI.MaskScreen();

                // マスクを復元
                var loopTo9 = Map.MapWidth;
                for (i = 1; i <= loopTo9; i++)
                {
                    var loopTo10 = Map.MapHeight;
                    for (j = 1; j <= loopTo10; j++)
                        Map.MaskData[i, j] = TmpMaskData[i, j];
                }
            }
            else
            {
                partners = new Unit[1];
                Commands.SelectedPartners = new Unit[1];
                GUI.MaskScreen();
            }

            var argu1 = this;
            Unit argu2 = null;
            GUI.OpenMessageForm(argu1, u2: argu2);

            // 現在の選択状況をセーブ
            Commands.SaveSelections();

            // 選択内容を切り替え
            Commands.SelectedUnit = this;
            Event_Renamed.SelectedUnitForEvent = this;
            Commands.SelectedAbility = a;
            Commands.SelectedAbilityName = Ability(a).Name;
            Commands.SelectedX = tx;
            Commands.SelectedY = ty;

            // 変な「対～」メッセージが表示されないようにターゲットをオフ
            // UPGRADE_NOTE: オブジェクト SelectedTarget をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Commands.SelectedTarget = null;
            // UPGRADE_NOTE: オブジェクト SelectedTargetForEvent をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Event_Renamed.SelectedTargetForEvent = null;

            // マップアビリティ開始のメッセージ＆特殊効果
            string argmain_situation1 = aname + "(準備)";
            string argsub_situation1 = "";
            if (IsAnimationDefined(argmain_situation1, sub_situation: argsub_situation1))
            {
                string argmain_situation = aname + "(準備)";
                string argsub_situation = "";
                PlayAnimation(argmain_situation, sub_situation: argsub_situation);
            }

            string argmain_situation2 = "かけ声(" + aname + ")";
            if (IsMessageDefined(argmain_situation2))
            {
                string argSituation = "かけ声(" + aname + ")";
                string argmsg_mode = "";
                PilotMessage(argSituation, msg_mode: argmsg_mode);
            }

            string argmsg_mode1 = "アビリティ";
            PilotMessage(aname, argmsg_mode1);
            string argmain_situation4 = aname + "(使用)";
            string argsub_situation4 = "";
            if (IsAnimationDefined(argmain_situation4, sub_situation: argsub_situation4))
            {
                string argmain_situation3 = aname + "(使用)";
                string argsub_situation2 = "";
                PlayAnimation(argmain_situation3, argsub_situation2, true);
            }
            else
            {
                string argsub_situation3 = "";
                SpecialEffect(aname, argsub_situation3, true);
            }

            // ＥＮ消費＆使用回数減少
            UseAbility(a);
            var argu11 = this;
            object argu21 = null;
            GUI.UpdateMessageForm(argu11, u2: argu21);
            switch (Information.UBound(partners))
            {
                case 0:
                    {
                        // 通常
                        msg = Nickname + "は";
                        break;
                    }

                case 1:
                    {
                        // ２体合体
                        if ((Nickname ?? "") != (partners[1].Nickname ?? ""))
                        {
                            msg = Nickname + "は[" + partners[1].Nickname + "]と共に";
                        }
                        else if ((MainPilot().get_Nickname(false) ?? "") != (partners[1].MainPilot().get_Nickname(false) ?? ""))
                        {
                            msg = MainPilot().get_Nickname(false) + "と[" + partners[1].MainPilot().get_Nickname(false) + "]の[" + Nickname + "]は";
                        }
                        else
                        {
                            msg = Nickname + "達は";
                        }

                        break;
                    }

                case 2:
                    {
                        // ３体合体
                        if ((Nickname ?? "") != (partners[1].Nickname ?? ""))
                        {
                            msg = Nickname + "は[" + partners[1].Nickname + "]、[" + partners[2].Nickname + "]と共に";
                        }
                        else if ((MainPilot().get_Nickname(false) ?? "") != (partners[1].MainPilot().get_Nickname(false) ?? ""))
                        {
                            msg = MainPilot().get_Nickname(false) + "、[" + partners[1].MainPilot().get_Nickname(false) + "]、[" + partners[2].MainPilot().get_Nickname(false) + "]の[" + Nickname + "]は";
                        }
                        else
                        {
                            msg = Nickname + "達は";
                        }

                        break;
                    }

                default:
                    {
                        // ３体以上
                        msg = Nickname + "達は";
                        break;
                    }
            }

            if (IsSpellAbility(a))
            {
                if (Strings.Right(anickname, 2) == "呪文")
                {
                    msg = msg + "[" + anickname + "]を唱えた。";
                }
                else if (Strings.Right(anickname, 2) == "の杖")
                {
                    msg = msg + "[" + Strings.Left(anickname, Strings.Len(anickname) - 2) + "]の呪文を唱えた。";
                }
                else
                {
                    msg = msg + "[" + anickname + "]の呪文を唱えた。";
                }
            }
            else if (Strings.Right(anickname, 1) == "歌")
            {
                msg = msg + "[" + anickname + "]を歌った。";
            }
            else if (Strings.Right(anickname, 2) == "踊り")
            {
                msg = msg + "[" + anickname + "]を踊った。";
            }
            else
            {
                msg = msg + "[" + anickname + "]を使った。";
            }

            string argsub_situation7 = "";
            string argmain_situation6 = "アビリティ";
            string argsub_situation8 = "";
            if (IsSysMessageDefined(aname, sub_situation: argsub_situation7))
            {
                string argsub_situation5 = "";
                string argadd_msg = "";
                // 「アビリティ名(解説)」のメッセージを使用
                SysMessage(aname, sub_situation: argsub_situation5, add_msg: argadd_msg);
            }
            else if (IsSysMessageDefined(argmain_situation6, sub_situation: argsub_situation8))
            {
                // 「アビリティ(解説)」のメッセージを使用
                string argmain_situation5 = "アビリティ";
                string argsub_situation6 = "";
                string argadd_msg1 = "";
                SysMessage(argmain_situation5, sub_situation: argsub_situation6, add_msg: argadd_msg1);
            }
            else
            {
                GUI.DisplaySysMessage(msg);
            }

            // 選択状況を復元
            Commands.RestoreSelections();

            // アビリティの使用に失敗？
            string argattr15 = "難";
            if (GeneralLib.Dice(10) <= AbilityLevel(a, argattr15))
            {
                GUI.DisplaySysMessage("しかし何もおきなかった…");
                goto Finish;
            }

            // 使用元ユニットは SelectedTarget に設定していないといけない
            Commands.SelectedTarget = this;

            // 各ユニットにアビリティを使用
            // UPGRADE_NOTE: オブジェクト max_lv_t をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            max_lv_t = null;
            var loopTo11 = Information.UBound(targets);
            for (i = 1; i <= loopTo11; i++)
            {
                t = targets[i].CurrentForm();
                if (t.Status_Renamed == "出撃")
                {
                    if (ReferenceEquals(t, this))
                    {
                        var argu12 = this;
                        object argu22 = null;
                        GUI.UpdateMessageForm(argu12, u2: argu22);
                    }
                    else
                    {
                        object argu23 = this;
                        GUI.UpdateMessageForm(t, argu23);
                    }

                    if (ExecuteAbility(a, t, true))
                    {
                        t = t.CurrentForm();
                        is_useful = true;

                        // 獲得経験値算出用にメインパイロットのレベルが最も高い
                        // ユニットを求めておく
                        if (max_lv_t is null)
                        {
                            max_lv_t = t;
                        }
                        else if (t.MainPilot().Level > max_lv_t.MainPilot().Level)
                        {
                            max_lv_t = t;
                        }
                    }
                }
            }

            // ADD START MARGE
            // 戦闘アニメ終了処理
            string argmain_situation9 = aname + "(終了)";
            string argsub_situation11 = "";
            string argmain_situation10 = "終了";
            string argsub_situation12 = "";
            if (IsAnimationDefined(argmain_situation9, sub_situation: argsub_situation11))
            {
                string argmain_situation7 = aname + "(終了)";
                string argsub_situation9 = "";
                PlayAnimation(argmain_situation7, sub_situation: argsub_situation9);
            }
            else if (IsAnimationDefined(argmain_situation10, sub_situation: argsub_situation12))
            {
                string argmain_situation8 = "終了";
                string argsub_situation10 = "";
                PlayAnimation(argmain_situation8, sub_situation: argsub_situation10);
            }
            // ADD END MARGE

            {
                var withBlock3 = CurrentForm();
                // 戦闘アニメで変更されたユニット画像を元に戻す
                object argIndex2 = "ユニット画像";
                if (withBlock3.IsConditionSatisfied(argIndex2))
                {
                    object argIndex1 = "ユニット画像";
                    withBlock3.DeleteCondition(argIndex1);
                    withBlock3.BitmapID = GUI.MakeUnitBitmap(CurrentForm());
                    GUI.PaintUnitBitmap(CurrentForm());
                }

                object argIndex4 = "非表示付加";
                if (withBlock3.IsConditionSatisfied(argIndex4))
                {
                    object argIndex3 = "非表示付加";
                    withBlock3.DeleteCondition(argIndex3);
                    withBlock3.BitmapID = GUI.MakeUnitBitmap(CurrentForm());
                    GUI.PaintUnitBitmap(CurrentForm());
                }
            }

            var loopTo12 = Information.UBound(partners);
            for (i = 1; i <= loopTo12; i++)
            {
                {
                    var withBlock4 = partners[i].CurrentForm();
                    object argIndex6 = "ユニット画像";
                    if (withBlock4.IsConditionSatisfied(argIndex6))
                    {
                        object argIndex5 = "ユニット画像";
                        withBlock4.DeleteCondition(argIndex5);
                        withBlock4.BitmapID = GUI.MakeUnitBitmap(partners[i].CurrentForm());
                        GUI.PaintUnitBitmap(partners[i].CurrentForm());
                    }

                    object argIndex8 = "非表示付加";
                    if (withBlock4.IsConditionSatisfied(argIndex8))
                    {
                        object argIndex7 = "非表示付加";
                        withBlock4.DeleteCondition(argIndex7);
                        withBlock4.BitmapID = GUI.MakeUnitBitmap(partners[i].CurrentForm());
                        GUI.PaintUnitBitmap(partners[i].CurrentForm());
                    }
                }
            }

            // 獲得した経験値の表示
            string argoname1 = "アビリティ経験値無効";
            if (is_useful & !is_event & !Expression.IsOptionDefined(argoname1))
            {
                string argexp_situation = "アビリティ";
                string argexp_mode = "";
                GetExp(max_lv_t, argexp_situation, exp_mode: argexp_mode);
                string argoname = "合体技パートナー経験値無効";
                if (!Expression.IsOptionDefined(argoname))
                {
                    var loopTo13 = Information.UBound(partners);
                    for (i = 1; i <= loopTo13; i++)
                    {
                        Unit argt = null;
                        string argexp_situation1 = "アビリティ";
                        string argexp_mode1 = "パートナー";
                        partners[i].CurrentForm().GetExp(argt, argexp_situation1, argexp_mode1);
                    }
                }
            }

            // 合体技のパートナーの弾数＆ＥＮの消費
            var loopTo14 = Information.UBound(partners);
            for (i = 1; i <= loopTo14; i++)
            {
                {
                    var withBlock5 = partners[i].CurrentForm();
                    var loopTo15 = withBlock5.CountAbility();
                    for (j = 1; j <= loopTo15; j++)
                    {
                        // パートナーが同名のアビリティを持っていればそのアビリティのデータを使う
                        if ((withBlock5.Ability(j).Name ?? "") == (aname ?? ""))
                        {
                            withBlock5.UseAbility(j);
                            string argattr16 = "自";
                            string argattr17 = "失";
                            string argattr18 = "変";
                            if (withBlock5.IsAbilityClassifiedAs(j, argattr16))
                            {
                                string argfname = "パーツ分離";
                                if (withBlock5.IsFeatureAvailable(argfname))
                                {
                                    object argIndex9 = "パーツ分離";
                                    string arglist = withBlock5.FeatureData(argIndex9);
                                    uname = GeneralLib.LIndex(arglist, 2);
                                    Unit localOtherForm() { object argIndex1 = uname; var ret = withBlock5.OtherForm(argIndex1); return ret; }

                                    if (localOtherForm().IsAbleToEnter(withBlock5.x, withBlock5.y))
                                    {
                                        withBlock5.Transform(uname);
                                        {
                                            var withBlock6 = withBlock5.CurrentForm();
                                            withBlock6.HP = withBlock6.MaxHP;
                                            withBlock6.UsedAction = withBlock6.MaxAction();
                                        }
                                    }
                                    else
                                    {
                                        withBlock5.Die();
                                    }
                                }
                                else
                                {
                                    withBlock5.Die();
                                }
                            }
                            else if (withBlock5.IsAbilityClassifiedAs(j, argattr17) & withBlock5.HP == 0)
                            {
                                withBlock5.Die();
                            }
                            else if (withBlock5.IsAbilityClassifiedAs(j, argattr18))
                            {
                                string argfname2 = "変形技";
                                string argfname3 = "ノーマルモード";
                                if (withBlock5.IsFeatureAvailable(argfname2))
                                {
                                    var loopTo16 = withBlock5.CountFeature();
                                    for (k = 1; k <= loopTo16; k++)
                                    {
                                        string localFeature() { object argIndex1 = k; var ret = withBlock5.Feature(argIndex1); return ret; }

                                        string localFeatureData1() { object argIndex1 = k; var ret = withBlock5.FeatureData(argIndex1); return ret; }

                                        string localLIndex() { string arglist = hsa17e1f441163458982d95695a4abb266(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                        if (localFeature() == "変形技" & (localLIndex() ?? "") == (aname ?? ""))
                                        {
                                            string localFeatureData() { object argIndex1 = k; var ret = withBlock5.FeatureData(argIndex1); return ret; }

                                            string arglist1 = localFeatureData();
                                            uname = GeneralLib.LIndex(arglist1, 2);
                                            Unit localOtherForm1() { object argIndex1 = uname; var ret = withBlock5.OtherForm(argIndex1); return ret; }

                                            if (localOtherForm1().IsAbleToEnter(withBlock5.x, withBlock5.y))
                                            {
                                                withBlock5.Transform(uname);
                                            }

                                            break;
                                        }
                                    }

                                    if ((uname ?? "") != (withBlock5.CurrentForm().Name ?? ""))
                                    {
                                        string argfname1 = "ノーマルモード";
                                        if (withBlock5.IsFeatureAvailable(argfname1))
                                        {
                                            object argIndex10 = "ノーマルモード";
                                            string arglist2 = withBlock5.FeatureData(argIndex10);
                                            uname = GeneralLib.LIndex(arglist2, 1);
                                            Unit localOtherForm2() { object argIndex1 = uname; var ret = withBlock5.OtherForm(argIndex1); return ret; }

                                            if (localOtherForm2().IsAbleToEnter(withBlock5.x, withBlock5.y))
                                            {
                                                withBlock5.Transform(uname);
                                            }
                                        }
                                    }
                                }
                                else if (withBlock5.IsFeatureAvailable(argfname3))
                                {
                                    object argIndex11 = "ノーマルモード";
                                    string arglist3 = withBlock5.FeatureData(argIndex11);
                                    uname = GeneralLib.LIndex(arglist3, 1);
                                    Unit localOtherForm3() { object argIndex1 = uname; var ret = withBlock5.OtherForm(argIndex1); return ret; }

                                    if (localOtherForm3().IsAbleToEnter(withBlock5.x, withBlock5.y))
                                    {
                                        withBlock5.Transform(uname);
                                    }
                                }
                            }

                            break;
                        }
                    }

                    // 同名のアビリティがなかった場合は自分のデータを使って処理
                    if (j > withBlock5.CountAbility())
                    {
                        if (this.Ability(a).ENConsumption > 0)
                        {
                            withBlock5.EN = withBlock5.EN - AbilityENConsumption(a);
                        }

                        string argattr19 = "消";
                        if (IsAbilityClassifiedAs(a, argattr19))
                        {
                            string argcname = "消耗";
                            string argcdata = "";
                            withBlock5.AddCondition(argcname, 1, cdata: argcdata);
                        }

                        string argattr20 = "Ｃ";
                        object argIndex13 = "チャージ完了";
                        if (IsAbilityClassifiedAs(a, argattr20) & withBlock5.IsConditionSatisfied(argIndex13))
                        {
                            object argIndex12 = "チャージ完了";
                            withBlock5.DeleteCondition(argIndex12);
                        }

                        string argattr22 = "気";
                        if (IsAbilityClassifiedAs(a, argattr22))
                        {
                            string argattr21 = "気";
                            withBlock5.IncreaseMorale((-5 * AbilityLevel(a, argattr21)));
                        }

                        string argattr25 = "霊";
                        string argattr26 = "プ";
                        if (IsAbilityClassifiedAs(a, argattr25))
                        {
                            hp_ratio = 100 * withBlock5.HP / (double)withBlock5.MaxHP;
                            en_ratio = 100 * withBlock5.EN / (double)withBlock5.MaxEN;
                            string argattr23 = "霊";
                            withBlock5.MainPilot().Plana = (withBlock5.MainPilot().Plana - 5d * AbilityLevel(a, argattr23));
                            withBlock5.HP = (withBlock5.MaxHP * hp_ratio / 100d);
                            withBlock5.EN = (withBlock5.MaxEN * en_ratio / 100d);
                        }
                        else if (IsAbilityClassifiedAs(a, argattr26))
                        {
                            hp_ratio = 100 * withBlock5.HP / (double)withBlock5.MaxHP;
                            en_ratio = 100 * withBlock5.EN / (double)withBlock5.MaxEN;
                            string argattr24 = "プ";
                            withBlock5.MainPilot().Plana = (withBlock5.MainPilot().Plana - 5d * AbilityLevel(a, argattr24));
                            withBlock5.HP = (withBlock5.MaxHP * hp_ratio / 100d);
                            withBlock5.EN = (withBlock5.MaxEN * en_ratio / 100d);
                        }

                        string argattr28 = "失";
                        if (IsAbilityClassifiedAs(a, argattr28))
                        {
                            string argattr27 = "失";
                            withBlock5.HP = GeneralLib.MaxLng((withBlock5.HP - (long)(withBlock5.MaxHP * AbilityLevel(a, argattr27)) / 10L), 0);
                        }

                        string argattr29 = "自";
                        string argattr30 = "失";
                        string argattr31 = "変";
                        if (IsAbilityClassifiedAs(a, argattr29))
                        {
                            string argfname4 = "パーツ分離";
                            if (withBlock5.IsFeatureAvailable(argfname4))
                            {
                                object argIndex14 = "パーツ分離";
                                string arglist4 = withBlock5.FeatureData(argIndex14);
                                uname = GeneralLib.LIndex(arglist4, 2);
                                Unit localOtherForm4() { object argIndex1 = uname; var ret = withBlock5.OtherForm(argIndex1); return ret; }

                                if (localOtherForm4().IsAbleToEnter(withBlock5.x, withBlock5.y))
                                {
                                    withBlock5.Transform(uname);
                                    {
                                        var withBlock7 = withBlock5.CurrentForm();
                                        withBlock7.HP = withBlock7.MaxHP;
                                        withBlock7.UsedAction = withBlock7.MaxAction();
                                    }
                                }
                                else
                                {
                                    withBlock5.Die();
                                }
                            }
                            else
                            {
                                withBlock5.Die();
                            }
                        }
                        else if (IsAbilityClassifiedAs(a, argattr30) & withBlock5.HP == 0)
                        {
                            withBlock5.Die();
                        }
                        else if (IsAbilityClassifiedAs(a, argattr31))
                        {
                            string argfname5 = "ノーマルモード";
                            if (withBlock5.IsFeatureAvailable(argfname5))
                            {
                                object argIndex15 = "ノーマルモード";
                                string arglist5 = withBlock5.FeatureData(argIndex15);
                                uname = GeneralLib.LIndex(arglist5, 1);
                                Unit localOtherForm5() { object argIndex1 = uname; var ret = withBlock5.OtherForm(argIndex1); return ret; }

                                if (localOtherForm5().IsAbleToEnter(withBlock5.x, withBlock5.y))
                                {
                                    withBlock5.Transform(uname);
                                }
                            }
                        }
                    }
                }
            }

            // 移動型マップアビリティによる移動
            string argattr32 = "Ｍ移";
            if (IsAbilityClassifiedAs(a, argattr32))
            {
                Jump(tx, ty);
            }

            Finish:
            ;


            // 以下の効果はアビリティデータが変化する可能性があるため、同時には適用されない

            // 自爆の処理
            string argattr33 = "自";

            // ＨＰ消費アビリティで自殺した場合
            string argattr34 = "失";

            // 変形技
            string argattr35 = "変";
            if (IsAbilityClassifiedAs(a, argattr33))
            {
                string argfname6 = "パーツ分離";
                if (IsFeatureAvailable(argfname6))
                {
                    // パーツ合体したユニットが自爆する時はパーツを分離するだけ
                    object argIndex16 = "パーツ分離";
                    string arglist6 = FeatureData(argIndex16);
                    uname = GeneralLib.LIndex(arglist6, 2);
                    Unit localOtherForm6() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm6().IsAbleToEnter(x, y))
                    {
                        Transform(uname);
                        {
                            var withBlock8 = CurrentForm();
                            withBlock8.HP = withBlock8.MaxHP;
                            withBlock8.UsedAction = withBlock8.MaxAction();
                        }

                        object argIndex17 = "パーツ分離";
                        fname = FeatureName(argIndex17);
                        bool localIsSysMessageDefined() { string argmain_situation = "破壊時分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        bool localIsSysMessageDefined1() { string argmain_situation = "分離(" + Name + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        bool localIsSysMessageDefined2() { string argmain_situation = "分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        string argmain_situation17 = "破壊時分離(" + Name + ")";
                        string argsub_situation19 = "";
                        string argmain_situation18 = "破壊時分離";
                        string argsub_situation20 = "";
                        string argmain_situation19 = "分離";
                        string argsub_situation21 = "";
                        if (IsSysMessageDefined(argmain_situation17, sub_situation: argsub_situation19))
                        {
                            string argmain_situation11 = "破壊時分離(" + Name + ")";
                            string argsub_situation13 = "";
                            string argadd_msg2 = "";
                            SysMessage(argmain_situation11, sub_situation: argsub_situation13, add_msg: argadd_msg2);
                        }
                        else if (localIsSysMessageDefined())
                        {
                            string argmain_situation12 = "破壊時分離(" + fname + ")";
                            string argsub_situation14 = "";
                            string argadd_msg3 = "";
                            SysMessage(argmain_situation12, sub_situation: argsub_situation14, add_msg: argadd_msg3);
                        }
                        else if (IsSysMessageDefined(argmain_situation18, sub_situation: argsub_situation20))
                        {
                            string argmain_situation13 = "破壊時分離";
                            string argsub_situation15 = "";
                            string argadd_msg4 = "";
                            SysMessage(argmain_situation13, sub_situation: argsub_situation15, add_msg: argadd_msg4);
                        }
                        else if (localIsSysMessageDefined1())
                        {
                            string argmain_situation14 = "分離(" + Name + ")";
                            string argsub_situation16 = "";
                            string argadd_msg5 = "";
                            SysMessage(argmain_situation14, sub_situation: argsub_situation16, add_msg: argadd_msg5);
                        }
                        else if (localIsSysMessageDefined2())
                        {
                            string argmain_situation15 = "分離(" + fname + ")";
                            string argsub_situation17 = "";
                            string argadd_msg6 = "";
                            SysMessage(argmain_situation15, sub_situation: argsub_situation17, add_msg: argadd_msg6);
                        }
                        else if (IsSysMessageDefined(argmain_situation19, sub_situation: argsub_situation21))
                        {
                            string argmain_situation16 = "分離";
                            string argsub_situation18 = "";
                            string argadd_msg7 = "";
                            SysMessage(argmain_situation16, sub_situation: argsub_situation18, add_msg: argadd_msg7);
                        }
                        else
                        {
                            GUI.DisplaySysMessage(Nickname + "は破壊されたパーツを分離させた。");
                        }
                    }
                    else
                    {
                        // しかし、パーツ分離できない地形ではそのまま自爆
                        Die();
                        if (!is_event)
                        {
                            Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                            if (SRC.IsScenarioFinished)
                            {
                                return;
                            }
                        }
                    }
                }
                else
                {
                    Die();
                    if (!is_event)
                    {
                        Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                        if (SRC.IsScenarioFinished)
                        {
                            return;
                        }
                    }
                }
            }
            else if (IsAbilityClassifiedAs(a, argattr34) & HP == 0)
            {
                Die();
                if (!is_event)
                {
                    Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                    if (SRC.IsScenarioFinished)
                    {
                        return;
                    }
                }
            }
            else if (IsAbilityClassifiedAs(a, argattr35))
            {
                string argfname8 = "変形技";
                string argfname9 = "ノーマルモード";
                if (IsFeatureAvailable(argfname8))
                {
                    var loopTo17 = CountFeature();
                    for (i = 1; i <= loopTo17; i++)
                    {
                        string localFeature1() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                        string localFeatureData3() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localLIndex1() { string arglist = hs60551c61d0954d3e93ffb43a55a73d66(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        if (localFeature1() == "変形技" & (localLIndex1() ?? "") == (Ability(a).Name ?? ""))
                        {
                            string localFeatureData2() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string arglist7 = localFeatureData2();
                            uname = GeneralLib.LIndex(arglist7, 2);
                            Unit localOtherForm7() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                            if (localOtherForm7().IsAbleToEnter(x, y))
                            {
                                Transform(uname);
                            }

                            break;
                        }
                    }

                    if ((uname ?? "") != (CurrentForm().Name ?? ""))
                    {
                        string argfname7 = "ノーマルモード";
                        if (IsFeatureAvailable(argfname7))
                        {
                            object argIndex18 = "ノーマルモード";
                            string arglist8 = FeatureData(argIndex18);
                            uname = GeneralLib.LIndex(arglist8, 1);
                            Unit localOtherForm8() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                            if (localOtherForm8().IsAbleToEnter(x, y))
                            {
                                Transform(uname);
                            }
                        }
                    }
                }
                else if (IsFeatureAvailable(argfname9))
                {
                    object argIndex19 = "ノーマルモード";
                    string arglist9 = FeatureData(argIndex19);
                    uname = GeneralLib.LIndex(arglist9, 1);
                    Unit localOtherForm9() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm9().IsAbleToEnter(x, y))
                    {
                        Transform(uname);
                    }
                }
            }

            // アイテムを消費
            else if (Ability(a).IsItem() & Stock(a) == 0 & MaxStock(a) > 0)
            {
                // アイテムを削除
                num = Data.CountAbility();
                num = (num + MainPilot().Data.CountAbility());
                var loopTo18 = CountPilot();
                for (i = 2; i <= loopTo18; i++)
                {
                    Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    num = (num + localPilot().Data.CountAbility());
                }

                var loopTo19 = CountSupport();
                for (i = 2; i <= loopTo19; i++)
                {
                    Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    num = (num + localSupport().Data.CountAbility());
                }

                string argfname10 = "追加サポート";
                if (IsFeatureAvailable(argfname10))
                {
                    num = (num + AdditionalSupport().Data.CountAbility());
                }

                foreach (Item itm in colItem)
                {
                    num = (num + itm.CountAbility());
                    if (a <= num)
                    {
                        itm.Exist = false;
                        DeleteItem((object)itm.ID);
                        break;
                    }
                }
            }

            // 使用後イベント
            if (!is_event)
            {
                Event_Renamed.HandleEvent("使用後", CurrentForm().MainPilot().ID, aname);
                if (SRC.IsScenarioFinished | SRC.IsCanceled)
                {
                    return;
                }
            }

            GUI.CloseMessageForm();

            // ハイパーモード＆ノーマルモードの自動発動をチェック
            SRC.UList.CheckAutoHyperMode();
            SRC.UList.CheckAutoNormalMode();
        }

        // アビリティの使用によるＥＮ、使用回数の消費等を行う
        public void UseAbility(int a)
        {
            int i, lv;
            double hp_ratio, en_ratio;
            if (this.Ability(a).ENConsumption > 0)
            {
                EN = EN - AbilityENConsumption(a);
            }

            if (this.Ability(a).Stock > 0)
            {
                SetStock(a, (Stock(a) - 1));

                // 一斉使用
                string argattr1 = "斉";
                if (IsAbilityClassifiedAs(a, argattr1))
                {
                    var loopTo = Information.UBound(dblStock);
                    for (i = 1; i <= loopTo; i++)
                        SetStock(i, GeneralLib.MinLng((MaxStock(i) * Stock(a)) / MaxStock(a), Stock(i)));
                }
                else
                {
                    var loopTo1 = Information.UBound(dblStock);
                    for (i = 1; i <= loopTo1; i++)
                    {
                        string argattr = "斉";
                        if (IsAbilityClassifiedAs(i, argattr))
                        {
                            SetStock(i, GeneralLib.MinLng(((MaxStock(i) * Stock(a)) / MaxStock(a) + 0.49999d), Stock(i)));
                        }
                    }
                }

                // 弾数・使用回数共有の処理
                SyncBullet();
            }

            // 消耗技
            string argattr2 = "消";
            if (IsAbilityClassifiedAs(a, argattr2))
            {
                string argcname = "消耗";
                string argcdata = "";
                AddCondition(argcname, 1, cdata: argcdata);
            }

            // 全ＥＮ消費アビリティ
            string argattr3 = "尽";
            if (IsAbilityClassifiedAs(a, argattr3))
            {
                EN = 0;
            }

            // チャージ式アビリティ
            string argattr4 = "Ｃ";
            object argIndex2 = "チャージ完了";
            if (IsAbilityClassifiedAs(a, argattr4) & IsConditionSatisfied(argIndex2))
            {
                object argIndex1 = "チャージ完了";
                DeleteCondition(argIndex1);
            }

            // 自動充填式アビリティ
            string argattr6 = "Ａ";
            if (AbilityLevel(a, argattr6) > 0d)
            {
                string argcname1 = AbilityNickname(a) + "充填中";
                string argattr5 = "Ａ";
                string argcdata1 = "";
                AddCondition(argcname1, AbilityLevel(a, argattr5), cdata: argcdata1);
            }

            // 気力を消費
            string argattr8 = "気";
            if (IsAbilityClassifiedAs(a, argattr8))
            {
                string argattr7 = "気";
                IncreaseMorale((-5 * AbilityLevel(a, argattr7)));
            }

            // 霊力の消費
            string argattr11 = "霊";
            string argattr12 = "プ";
            if (IsAbilityClassifiedAs(a, argattr11))
            {
                hp_ratio = 100 * HP / (double)MaxHP;
                en_ratio = 100 * EN / (double)MaxEN;
                string argattr9 = "霊";
                MainPilot().Plana = (this.MainPilot().Plana - 5d * AbilityLevel(a, argattr9));
                HP = (MaxHP * hp_ratio / 100d);
                EN = (MaxEN * en_ratio / 100d);
            }
            else if (IsAbilityClassifiedAs(a, argattr12))
            {
                hp_ratio = 100 * HP / (double)MaxHP;
                en_ratio = 100 * EN / (double)MaxEN;
                string argattr10 = "プ";
                MainPilot().Plana = (this.MainPilot().Plana - 5d * AbilityLevel(a, argattr10));
                HP = (MaxHP * hp_ratio / 100d);
                EN = (MaxEN * en_ratio / 100d);
            }

            // 資金消費アビリティ
            if (Party == "味方")
            {
                string argattr14 = "銭";
                if (IsAbilityClassifiedAs(a, argattr14))
                {
                    string argattr13 = "銭";
                    SRC.IncrMoney(-GeneralLib.MaxLng(AbilityLevel(a, argattr13), 1) * Value / 10);
                }
            }

            // ＨＰ消費アビリティ
            string argattr16 = "失";
            if (IsAbilityClassifiedAs(a, argattr16))
            {
                string argattr15 = "失";
                HP = GeneralLib.MaxLng((HP - (long)(MaxHP * AbilityLevel(a, argattr15)) / 10L), 0);
            }
        }


        // === アイテム関連処理 ===

        // アイテム装備可能数
        public int MaxItemNum()
        {
            int MaxItemNumRet = default;
            int i;
            MaxItemNumRet = Data.ItemNum;
            string argfname = "ハードポイント";
            if (IsFeatureAvailable(argfname))
            {
                var loopTo = CountFeature();
                for (i = 1; i <= loopTo; i++)
                {
                    string localFeature() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                    string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                    string localFeatureData1() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                    if (localFeature() == "ハードポイント" & (localFeatureData() == "強化パーツ" | localFeatureData1() == "アイテム"))
                    {
                        double localFeatureLevel() { object argIndex1 = i; var ret = FeatureLevel(argIndex1); return ret; }

                        MaxItemNumRet = (MaxItemNumRet + localFeatureLevel());
                        break;
                    }
                }
            }

            return MaxItemNumRet;
        }

        // 装備しているアイテムの総数
        public int CountItem()
        {
            int CountItemRet = default;
            CountItemRet = colItem.Count;
            return CountItemRet;
        }

        // アイテム
        public Item Item(object Index)
        {
            Item ItemRet = default;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 645387


            Input:

                    On Error GoTo ErrorHandler

             */
            ItemRet = (Item)colItem[Index];
            return ItemRet;
            ErrorHandler:
            ;

            // 見つからなければアイテム名で検索
            foreach (Item itm in colItem)
            {
                // UPGRADE_WARNING: オブジェクト Index の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(itm.Name, Index, false)))
                {
                    ItemRet = itm;
                    return ItemRet;
                }
            }
            // UPGRADE_NOTE: オブジェクト Item をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            ItemRet = null;
        }

        // アイテムを装備
        public void AddItem(Item itm, bool without_refresh = false)
        {
            int i = default, num;
            var itm2 = default(Item);
            int empty_slot;
            bool found_item;

            // 既に装備していたらそのまま終了
            if (object.ReferenceEquals(itm.Unit, this))
            {
                return;
            }

            // イベント専用アイテムは装備個所を消費しない
            if (itm.Class_Renamed() == "固定")
            {
                string argfname = "非表示";
                if (itm.IsFeatureAvailable(argfname))
                {
                    goto EquipItem;
                }
            }

            // 装備個所が足りない場合に元のアイテムを外す
            switch (itm.Part() ?? "")
            {
                case "強化パーツ":
                case "アイテム":
                    {
                        object argIndex6 = "ハードポイント";
                        object argIndex7 = "ハードポイント";
                        if (itm.FeatureData(argIndex6) != "強化パーツ" & itm.FeatureData(argIndex7) != "アイテム")
                        {
                            // 装備している強化パーツ数をカウント
                            num = 0;
                            foreach (Item currentItm2 in colItem)
                            {
                                itm2 = currentItm2;
                                {
                                    var withBlock = itm2;
                                    if (withBlock.Part() == "強化パーツ" | withBlock.Part() == "アイテム")
                                    {
                                        num = (num + withBlock.Size());
                                    }
                                }
                            }

                            // 大型アイテムの場合は余分に外す
                            object argIndex1 = "大型アイテム";
                            num = (num + itm.FeatureLevel(argIndex1));

                            // 何れかを外さなければならない場合
                            while (num >= MaxItemNum() & num > 0)
                            {
                                found_item = false;

                                // まずはハードポイントを持たないものから
                                foreach (Item currentItm21 in colItem)
                                {
                                    itm2 = currentItm21;
                                    {
                                        var withBlock1 = itm2;
                                        if (withBlock1.Part() == "強化パーツ" | withBlock1.Part() == "アイテム")
                                        {
                                            string argfname1 = "ハードポイント";
                                            if (!withBlock1.IsFeatureAvailable(argfname1))
                                            {
                                                num = (num - withBlock1.Size());
                                                if (Party0 != "味方")
                                                {
                                                    withBlock1.Exist = false;
                                                }

                                                object argIndex2 = withBlock1.ID;
                                                DeleteItem(argIndex2);
                                                // UPGRADE_NOTE: オブジェクト itm2 をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                                itm2 = null;
                                                found_item = true;
                                                break;
                                            }
                                        }
                                    }
                                }

                                // ハードポイント付きのものしかない場合
                                if (itm2 is object)
                                {
                                    object argIndex3 = 1;
                                    num = (num - Item(argIndex3).Size());
                                    if (Party0 != "味方")
                                    {
                                        object argIndex4 = 1;
                                        Item(argIndex4).Exist = false;
                                    }

                                    object argIndex5 = 1;
                                    DeleteItem(argIndex5);
                                    found_item = true;
                                }

                                if (!found_item)
                                {
                                    // 外せるアイテムがない
                                    break;
                                }
                            }

                            if (MaxItemNum() == 0)
                            {
                                // 装備出来ません…
                                return;
                            }
                        }

                        break;
                    }

                case "両手":
                    {
                        foreach (Item currentItm22 in colItem)
                        {
                            itm2 = currentItm22;
                            if (itm2.Part() == "両手" | itm2.Part() == "片手" | itm2.Part() == "盾")
                            {
                                if (Party0 != "味方")
                                {
                                    itm2.Exist = false;
                                }

                                object argIndex8 = itm2.ID;
                                DeleteItem(argIndex8);
                                break;
                            }
                        }

                        break;
                    }

                case "片手":
                    {
                        string argfname2 = "両手利き";
                        if (IsFeatureAvailable(argfname2))
                        {
                            num = 0;
                            foreach (Item currentItm23 in colItem)
                            {
                                itm2 = currentItm23;
                                switch (itm2.Part() ?? "")
                                {
                                    case "両手":
                                        {
                                            if (Party0 != "味方")
                                            {
                                                itm2.Exist = false;
                                            }

                                            object argIndex9 = itm2.ID;
                                            DeleteItem(argIndex9);
                                            break;
                                        }

                                    case "片手":
                                    case "盾":
                                        {
                                            num = (num + 1);
                                            if (num > 1)
                                            {
                                                if (Party0 != "味方")
                                                {
                                                    itm2.Exist = false;
                                                }

                                                object argIndex10 = itm2.ID;
                                                DeleteItem(argIndex10);
                                                break;
                                            }

                                            break;
                                        }
                                }
                            }
                        }
                        else
                        {
                            foreach (Item currentItm24 in colItem)
                            {
                                itm2 = currentItm24;
                                switch (itm2.Part() ?? "")
                                {
                                    case "両手":
                                    case "片手":
                                        {
                                            if (Party0 != "味方")
                                            {
                                                itm2.Exist = false;
                                            }

                                            object argIndex11 = itm2.ID;
                                            DeleteItem(argIndex11);
                                            break;
                                        }
                                }
                            }
                        }

                        break;
                    }

                case "盾":
                    {
                        foreach (Item currentItm25 in colItem)
                        {
                            itm2 = currentItm25;
                            switch (itm2.Part() ?? "")
                            {
                                case "両手":
                                case "盾":
                                    {
                                        if (Party0 != "味方")
                                        {
                                            itm2.Exist = false;
                                        }

                                        object argIndex12 = itm2.ID;
                                        DeleteItem(argIndex12);
                                        break;
                                    }

                                case "片手":
                                    {
                                        i = (i + 1);
                                        if (i > 1)
                                        {
                                            if (Party0 != "味方")
                                            {
                                                itm2.Exist = false;
                                            }

                                            object argIndex13 = itm2.ID;
                                            DeleteItem(argIndex13);
                                            break;
                                        }

                                        break;
                                    }
                            }
                        }

                        break;
                    }

                case "両肩":
                    {
                        foreach (Item currentItm26 in colItem)
                        {
                            itm2 = currentItm26;
                            if (itm2.Part() == "両肩" | itm2.Part() == "肩")
                            {
                                if (Party0 != "味方")
                                {
                                    itm2.Exist = false;
                                }

                                object argIndex14 = itm2.ID;
                                DeleteItem(argIndex14);
                            }
                        }

                        break;
                    }

                case "肩":
                    {
                        num = 0;
                        foreach (Item currentItm27 in colItem)
                        {
                            itm2 = currentItm27;
                            switch (itm2.Part() ?? "")
                            {
                                case "両肩":
                                    {
                                        if (Party0 != "味方")
                                        {
                                            itm2.Exist = false;
                                        }

                                        object argIndex15 = itm2.ID;
                                        DeleteItem(argIndex15);
                                        break;
                                    }

                                case "肩":
                                    {
                                        num = (num + 1);
                                        if (num > 1)
                                        {
                                            if (Party0 != "味方")
                                            {
                                                itm2.Exist = false;
                                            }

                                            object argIndex16 = itm2.ID;
                                            DeleteItem(argIndex16);
                                            break;
                                        }

                                        break;
                                    }
                            }
                        }

                        break;
                    }
                // 装備個所が「非表示」のアイテムは装備数に制限なし

                case "非表示":
                    {
                        break;
                    }

                default:
                    {
                        // ハードポイントに装備する場合
                        var loopTo = CountFeature();
                        for (i = 1; i <= loopTo; i++)
                        {
                            string localFeature() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                            string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            if (localFeature() == "ハードポイント" & (localFeatureData() ?? "") == (itm.Part() ?? ""))
                            {
                                // まず空きスロット数を計算
                                empty_slot = ItemSlotSize(itm.Part());
                                foreach (Item currentItm28 in colItem)
                                {
                                    itm2 = currentItm28;
                                    if ((itm2.Part() ?? "") == (itm.Part() ?? ""))
                                    {
                                        empty_slot = (empty_slot - itm2.Size());
                                    }
                                }
                                // 足らないスロット数分、アイテムを外す
                                if (empty_slot < itm.Size())
                                {
                                    foreach (Item currentItm29 in colItem)
                                    {
                                        itm2 = currentItm29;
                                        if ((itm2.Part() ?? "") == (itm.Part() ?? ""))
                                        {
                                            if (Party0 != "味方")
                                            {
                                                itm2.Exist = false;
                                            }

                                            object argIndex17 = itm2.ID;
                                            DeleteItem(argIndex17);
                                            empty_slot = (empty_slot + itm2.Size());
                                            if (empty_slot >= itm.Size())
                                            {
                                                break;
                                            }
                                        }
                                    }
                                }

                                i = 0;
                                break;
                            }
                        }
                        // そうでない場合
                        if (i > 0)
                        {
                            foreach (Item currentItm210 in colItem)
                            {
                                itm2 = currentItm210;
                                if ((itm.Part() ?? "") == (itm2.Part() ?? ""))
                                {
                                    if (Party0 != "味方")
                                    {
                                        itm2.Exist = false;
                                    }

                                    object argIndex18 = itm2.ID;
                                    DeleteItem(argIndex18);
                                    break;
                                }
                            }
                        }

                        break;
                    }
            }

            EquipItem:
            ;


            // 装備されたアイテムは常に存在するとみなす
            if (Status_Renamed != "破棄")
            {
                itm.Exist = true;
            }

            colItem.Add(itm, itm.ID);
            itm.Unit = this;

            // アイテムを装備したことによるステータスの変化
            Update(without_refresh);
        }

        public void AddItem0(Item itm)
        {
            colItem.Add(itm, itm.ID);
            itm.Unit = this;
        }

        // アイテムをはずす
        public void DeleteItem(object Index, bool without_refresh = false)
        {
            Item itm;
            int num, i, j, num2;
            int prev_max_item_num;
            string[] prev_hard_point;
            int[] prev_hard_point_size;
            string[] cur_hard_point;
            int[] cur_hard_point_size;
            bool is_changed;
            bool is_ambidextrous;
            itm = Item(Index);

            // 存在しないアイテム？
            if (itm is null)
            {
                return;
            }

            // 削除するアイテムの武器・アビリティの残弾数が引き継がれるのを防ぐため、
            // 削除するアイテムによって付加された武器・アビリティのデータを削除する。
            num = Data.CountWeapon();
            num2 = Data.CountAbility();
            if (CountPilot() > 0)
            {
                num = (num + MainPilot().Data.CountWeapon());
                num2 = (num2 + MainPilot().Data.CountAbility());
                var loopTo = CountPilot();
                for (i = 2; i <= loopTo; i++)
                {
                    Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    num = (num + localPilot().Data.CountWeapon());
                    Pilot localPilot1() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                    num2 = (num2 + localPilot1().Data.CountAbility());
                }

                var loopTo1 = CountSupport();
                for (i = 2; i <= loopTo1; i++)
                {
                    Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    num = (num + localSupport().Data.CountWeapon());
                    Pilot localSupport1() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    num2 = (num2 + localSupport1().Data.CountAbility());
                }

                string argfname = "追加サポート";
                if (IsFeatureAvailable(argfname))
                {
                    num = (num + AdditionalSupport().Data.CountWeapon());
                    num2 = (num2 + AdditionalSupport().Data.CountAbility());
                }
            }

            foreach (Item itm2 in colItem)
            {
                if (ReferenceEquals(itm, itm2))
                {
                    var loopTo2 = (num + itm2.CountWeapon());
                    for (i = (num + 1); i <= loopTo2; i++)
                    {
                        if (i <= CountWeapon())
                        {
                            // UPGRADE_NOTE: オブジェクト WData() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                            WData[i] = null;
                        }
                    }

                    var loopTo3 = (num2 + itm2.CountAbility());
                    for (i = (num2 + 1); i <= loopTo3; i++)
                    {
                        if (i <= CountAbility())
                        {
                            // UPGRADE_NOTE: オブジェクト adata() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                            adata[i] = null;
                        }
                    }

                    break;
                }
                else
                {
                    num = (num + itm2.CountWeapon());
                    num2 = (num2 + itm2.CountAbility());
                }
            }

            colItem.Remove(itm.ID);
            if (itm.Unit is object)
            {
                if (itm.Unit.ID == ID)
                {
                    // UPGRADE_NOTE: オブジェクト itm.Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                    itm.Unit = null;
                }
                // 追加パイロットを持つアイテムを削除する場合
                string argfname1 = "追加パイロット";
                if (itm.IsFeatureAvailable(argfname1))
                {
                    object argIndex3 = "追加パイロット";
                    object argIndex4 = itm.FeatureData(argIndex3);
                    if (SRC.PList.IsDefined(argIndex4))
                    {
                        object argIndex1 = "追加パイロット";
                        object argIndex2 = itm.FeatureData(argIndex1);
                        {
                            var withBlock = SRC.PList.Item(argIndex2);
                            withBlock.Alive = false;
                            // UPGRADE_NOTE: オブジェクト PList.Item().Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                            withBlock.Unit_Renamed = null;
                        }
                    }
                }
            }

            // ハードポイントを持つアイテムをはずした場合は他のアイテムを連続してはずす必要がある
            do
            {
                is_changed = false;

                // 現在のアイテム装備可能回数を記録
                prev_max_item_num = MaxItemNum();
                prev_hard_point = new string[1];
                prev_hard_point_size = new int[1];
                var loopTo4 = CountFeature();
                for (i = 1; i <= loopTo4; i++)
                {
                    object argIndex7 = i;
                    if (Feature(argIndex7) == "ハードポイント")
                    {
                        string localFeatureData1() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localFeatureData2() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        if (localFeatureData1() != "強化パーツ" & localFeatureData2() != "アイテム")
                        {
                            var loopTo5 = Information.UBound(prev_hard_point);
                            for (j = 1; j <= loopTo5; j++)
                            {
                                string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                                if ((prev_hard_point[j] ?? "") == (localFeatureData() ?? ""))
                                {
                                    double localFeatureLevel() { object argIndex1 = i; var ret = FeatureLevel(argIndex1); return ret; }

                                    prev_hard_point_size[j] = (prev_hard_point_size[j] + localFeatureLevel());
                                    break;
                                }
                            }

                            if (j > Information.UBound(prev_hard_point))
                            {
                                Array.Resize(prev_hard_point, Information.UBound(prev_hard_point) + 1 + 1);
                                Array.Resize(prev_hard_point_size, Information.UBound(prev_hard_point) + 1);
                                object argIndex5 = i;
                                prev_hard_point[Information.UBound(prev_hard_point)] = FeatureData(argIndex5);
                                object argIndex6 = i;
                                prev_hard_point_size[Information.UBound(prev_hard_point)] = FeatureLevel(argIndex6);
                            }
                        }
                    }
                }

                string argfname2 = "両手利き";
                is_ambidextrous = IsFeatureAvailable(argfname2);

                // アイテムを外したことによるステータスの変化
                Update(without_refresh);

                // アイテム装備可能数が減少？
                if (prev_max_item_num > MaxItemNum())
                {
                    is_changed = true;
                    num = MaxItemNum();
                    i = 0;
                    foreach (Item currentItm in colItem)
                    {
                        itm = currentItm;
                        if (itm.Part() == "強化パーツ" | itm.Part() == "アイテム")
                        {
                            i = (i + 1);
                            // ハードポイントを持たないアイテムから選んで削除
                            string argfname4 = "ハードポイント";
                            if (i > num & !itm.IsFeatureAvailable(argfname4))
                            {
                                colItem.Remove(itm.ID);
                                if (itm.Unit is object)
                                {
                                    if (itm.Unit.ID == ID)
                                    {
                                        // UPGRADE_NOTE: オブジェクト itm.Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                        itm.Unit = null;
                                    }
                                }
                                // 追加パイロットを持つアイテムを削除する場合
                                string argfname3 = "追加パイロット";
                                if (itm.IsFeatureAvailable(argfname3))
                                {
                                    object argIndex10 = "追加パイロット";
                                    object argIndex11 = itm.FeatureData(argIndex10);
                                    if (SRC.PList.IsDefined(argIndex11))
                                    {
                                        object argIndex8 = "追加パイロット";
                                        object argIndex9 = itm.FeatureData(argIndex8);
                                        {
                                            var withBlock1 = SRC.PList.Item(argIndex9);
                                            withBlock1.Alive = false;
                                            // UPGRADE_NOTE: オブジェクト PList.Item().Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                            withBlock1.Unit_Renamed = null;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    i = 0;
                    foreach (Item currentItm1 in colItem)
                    {
                        itm = currentItm1;
                        if (itm.Part() == "強化パーツ" | itm.Part() == "アイテム")
                        {
                            i = (i + 1);
                            if (i > num)
                            {
                                colItem.Remove(itm.ID);
                                if (itm.Unit is object)
                                {
                                    if (itm.Unit.ID == ID)
                                    {
                                        // UPGRADE_NOTE: オブジェクト itm.Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                        itm.Unit = null;
                                    }
                                }
                                // 追加パイロットを持つアイテムを削除する場合
                                string argfname5 = "追加パイロット";
                                if (itm.IsFeatureAvailable(argfname5))
                                {
                                    object argIndex14 = "追加パイロット";
                                    object argIndex15 = itm.FeatureData(argIndex14);
                                    if (SRC.PList.IsDefined(argIndex15))
                                    {
                                        object argIndex12 = "追加パイロット";
                                        object argIndex13 = itm.FeatureData(argIndex12);
                                        {
                                            var withBlock2 = SRC.PList.Item(argIndex13);
                                            withBlock2.Alive = false;
                                            // UPGRADE_NOTE: オブジェクト PList.Item().Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                            withBlock2.Unit_Renamed = null;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // 現在のアイテム装備可能回数を記録
                cur_hard_point = new string[1];
                cur_hard_point_size = new int[1];
                var loopTo6 = CountFeature();
                for (i = 1; i <= loopTo6; i++)
                {
                    object argIndex18 = i;
                    if (Feature(argIndex18) == "ハードポイント")
                    {
                        var loopTo7 = Information.UBound(cur_hard_point);
                        for (j = 1; j <= loopTo7; j++)
                        {
                            string localFeatureData3() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            if ((cur_hard_point[j] ?? "") == (localFeatureData3() ?? ""))
                            {
                                double localFeatureLevel1() { object argIndex1 = i; var ret = FeatureLevel(argIndex1); return ret; }

                                cur_hard_point_size[j] = (cur_hard_point_size[j] + localFeatureLevel1());
                                break;
                            }
                        }

                        if (j > Information.UBound(cur_hard_point))
                        {
                            Array.Resize(cur_hard_point, Information.UBound(cur_hard_point) + 1 + 1);
                            Array.Resize(cur_hard_point_size, Information.UBound(cur_hard_point) + 1);
                            object argIndex16 = i;
                            cur_hard_point[Information.UBound(cur_hard_point)] = FeatureData(argIndex16);
                            object argIndex17 = i;
                            cur_hard_point_size[Information.UBound(cur_hard_point)] = FeatureLevel(argIndex17);
                        }
                    }
                }

                // ハードポイントが減少？
                var loopTo8 = Information.UBound(prev_hard_point);
                for (i = 1; i <= loopTo8; i++)
                {
                    num = 0;
                    var loopTo9 = Information.UBound(cur_hard_point);
                    for (j = 1; j <= loopTo9; j++)
                    {
                        if ((prev_hard_point[i] ?? "") == (cur_hard_point[j] ?? ""))
                        {
                            num = cur_hard_point_size[j];
                        }
                    }

                    if (num < prev_hard_point_size[i])
                    {
                        is_changed = true;
                        foreach (Item currentItm2 in colItem)
                        {
                            itm = currentItm2;
                            if ((itm.Part() ?? "") == (prev_hard_point[i] ?? ""))
                            {
                                num = (num - itm.Size());
                                if (num < 0)
                                {
                                    colItem.Remove(itm.ID);
                                    if (itm.Unit is object)
                                    {
                                        if (itm.Unit.ID == ID)
                                        {
                                            // UPGRADE_NOTE: オブジェクト itm.Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                            itm.Unit = null;
                                        }
                                    }
                                    // 追加パイロットを持つアイテムを削除する場合
                                    string argfname6 = "追加パイロット";
                                    if (itm.IsFeatureAvailable(argfname6))
                                    {
                                        object argIndex21 = "追加パイロット";
                                        object argIndex22 = itm.FeatureData(argIndex21);
                                        if (SRC.PList.IsDefined(argIndex22))
                                        {
                                            object argIndex19 = "追加パイロット";
                                            object argIndex20 = itm.FeatureData(argIndex19);
                                            {
                                                var withBlock3 = SRC.PList.Item(argIndex20);
                                                withBlock3.Alive = false;
                                                // UPGRADE_NOTE: オブジェクト PList.Item().Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                                withBlock3.Unit_Renamed = null;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // 両手利きで無くなってしまった場合は二個目の片手アイテムを外す
                string argfname8 = "両手利き";
                if (is_ambidextrous & !IsFeatureAvailable(argfname8))
                {
                    num = 0;
                    foreach (Item currentItm3 in colItem)
                    {
                        itm = currentItm3;
                        if (itm.Part() == "片手")
                        {
                            num = (num + 1);
                            if (num > 1)
                            {
                                is_changed = true;
                                colItem.Remove(itm.ID);
                                if (itm.Unit is object)
                                {
                                    if (itm.Unit.ID == ID)
                                    {
                                        // UPGRADE_NOTE: オブジェクト itm.Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                        itm.Unit = null;
                                    }
                                }
                                // 追加パイロットを持つアイテムを削除する場合
                                string argfname7 = "追加パイロット";
                                if (itm.IsFeatureAvailable(argfname7))
                                {
                                    object argIndex25 = "追加パイロット";
                                    object argIndex26 = itm.FeatureData(argIndex25);
                                    if (SRC.PList.IsDefined(argIndex26))
                                    {
                                        object argIndex23 = "追加パイロット";
                                        object argIndex24 = itm.FeatureData(argIndex23);
                                        {
                                            var withBlock4 = SRC.PList.Item(argIndex24);
                                            withBlock4.Alive = false;
                                            // UPGRADE_NOTE: オブジェクト PList.Item().Unit をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                            withBlock4.Unit_Renamed = null;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            while (is_changed);
        }

        // 装備個所が ipart のアイテムの装備可能数
        public int ItemSlotSize(string ipart)
        {
            int ItemSlotSizeRet = default;
            int i;
            switch (ipart ?? "")
            {
                case "強化パーツ":
                case "アイテム":
                    {
                        ItemSlotSizeRet = Data.ItemNum;
                        string argfname = "ハードポイント";
                        if (!IsFeatureAvailable(argfname))
                        {
                            return ItemSlotSizeRet;
                        }

                        var loopTo = CountFeature();
                        for (i = 1; i <= loopTo; i++)
                        {
                            object argIndex2 = i;
                            if (Feature(argIndex2) == "ハードポイント")
                            {
                                object argIndex1 = i;
                                switch (FeatureData(argIndex1) ?? "")
                                {
                                    case "強化パーツ":
                                    case "アイテム":
                                        {
                                            double localFeatureLevel() { object argIndex1 = i; var ret = FeatureLevel(argIndex1); return ret; }

                                            ItemSlotSizeRet = (ItemSlotSizeRet + localFeatureLevel());
                                            break;
                                        }
                                }
                            }
                        }

                        break;
                    }

                default:
                    {
                        string argfname1 = "ハードポイント";
                        if (!IsFeatureAvailable(argfname1))
                        {
                            ItemSlotSizeRet = 1;
                            return ItemSlotSizeRet;
                        }

                        var loopTo1 = CountFeature();
                        for (i = 1; i <= loopTo1; i++)
                        {
                            object argIndex4 = i;
                            if (Feature(argIndex4) == "ハードポイント")
                            {
                                object argIndex3 = i;
                                if ((FeatureData(argIndex3) ?? "") == (ipart ?? ""))
                                {
                                    double localFeatureLevel1() { object argIndex1 = i; var ret = FeatureLevel(argIndex1); return ret; }

                                    ItemSlotSizeRet = (ItemSlotSizeRet + localFeatureLevel1());
                                }
                            }
                        }

                        break;
                    }
            }

            return ItemSlotSizeRet;
        }

        // アイテム iname を装備しているか？
        public bool IsEquiped(string iname)
        {
            bool IsEquipedRet = default;
            int i;
            IsEquipedRet = false;
            var loopTo = CountItem();
            for (i = 1; i <= loopTo; i++)
            {
                Item localItem() { object argIndex1 = i; var ret = Item(argIndex1); return ret; }

                if ((localItem().Name ?? "") == (iname ?? ""))
                {
                    IsEquipedRet = true;
                    return IsEquipedRet;
                }
            }

            return IsEquipedRet;
        }

        // 装備可能な武器クラス
        public string WeaponProficiency()
        {
            string WeaponProficiencyRet = default;
            foreach (FeatureData fd in colFeature)
            {
                if (fd.Name == "武器クラス")
                {
                    WeaponProficiencyRet = WeaponProficiencyRet + " " + fd.StrData;
                }
            }

            return WeaponProficiencyRet;
        }

        // 装備可能な防具クラス
        public string ArmorProficiency()
        {
            string ArmorProficiencyRet = default;
            foreach (FeatureData fd in colFeature)
            {
                if (fd.Name == "防具クラス")
                {
                    ArmorProficiencyRet = ArmorProficiencyRet + " " + fd.StrData;
                }
            }

            return ArmorProficiencyRet;
        }

        // アイテムitを装備できるかどうかを判定
        public bool IsAbleToEquip(Item it)
        {
            bool IsAbleToEquipRet = default;
            string iclass;
            string eclass0, uclass, eclass;
            int i, j;
            // 既に装備済みのアイテムは装備できない
            if (it.Unit is object)
            {
                if (it.Unit.ID == ID)
                {
                    IsAbleToEquipRet = false;
                    return IsAbleToEquipRet;
                }
            }

            // Fixコマンドで固定されたアイテムは装備不可能
            string argvname = "Fix(" + it.Name + ")";
            if (Expression.IsGlobalVariableDefined(argvname))
            {
                IsAbleToEquipRet = false;
                return IsAbleToEquipRet;
            }

            // 必要技能は満たしているか？
            var argu = this;
            if (!it.IsAvailable(argu))
            {
                IsAbleToEquipRet = false;
                return IsAbleToEquipRet;
            }

            // アイテムのクラスを記録
            iclass = it.Class_Renamed();

            // 汎用ならばユニットの種類に関わらず装備可能
            if (iclass == "汎用")
            {
                // ただし強化パーツのチェックは必要
                if (it.Part() == "強化パーツ" & IsHero())
                {
                    IsAbleToEquipRet = false;
                    return IsAbleToEquipRet;
                }

                IsAbleToEquipRet = true;
                return IsAbleToEquipRet;
            }

            // 固定アイテムは装備不能とみなす
            if (iclass == "固定")
            {
                IsAbleToEquipRet = false;
                return IsAbleToEquipRet;
            }

            // ユニットクラスから余分な指定を取り除く
            uclass = Class0;

            // 装備個所
            switch (it.Part() ?? "")
            {
                case "武器":
                case "片手":
                case "両手":
                    {
                        eclass = WeaponProficiency();
                        var loopTo = GeneralLib.LLength(eclass);
                        for (i = 1; i <= loopTo; i++)
                        {
                            eclass0 = GeneralLib.LIndex(eclass, i);
                            if ((iclass ?? "") == (eclass0 ?? ""))
                            {
                                IsAbleToEquipRet = true;
                                return IsAbleToEquipRet;
                            }
                            else if (Strings.InStr(iclass, "専用)") > 0)
                            {
                                // ユニットクラス、ユニット名による専用指定？
                                if (Strings.InStr(iclass, eclass0 + "(") == 1 & (Strings.InStr(iclass, "(" + uclass + "専用)") > 0 | Strings.InStr(iclass, "(" + Name + "専用)") > 0 | Strings.InStr(iclass, "(" + Nickname + "専用)") > 0))
                                {
                                    IsAbleToEquipRet = true;
                                    return IsAbleToEquipRet;
                                }

                                // 性別による専用指定？
                                if (CountPilot() > 0)
                                {
                                    if ((iclass ?? "") == (eclass0 + "(" + MainPilot().Sex + "専用)" ?? ""))
                                    {
                                        IsAbleToEquipRet = true;
                                        return IsAbleToEquipRet;
                                    }
                                }
                            }
                        }

                        // 一部の形態でのみ利用可能な武器の判定
                        var loopTo1 = CountOtherForm();
                        for (i = 1; i <= loopTo1; i++)
                        {
                            object argIndex1 = i;
                            {
                                var withBlock = OtherForm(argIndex1);
                                uclass = withBlock.Class0;
                                eclass = withBlock.WeaponProficiency();
                                var loopTo2 = GeneralLib.LLength(eclass);
                                for (j = 1; j <= loopTo2; j++)
                                {
                                    eclass0 = GeneralLib.LIndex(eclass, j);
                                    if ((iclass ?? "") == (eclass0 ?? ""))
                                    {
                                        IsAbleToEquipRet = true;
                                        return IsAbleToEquipRet;
                                    }
                                    else if (Strings.InStr(iclass, "専用)") > 0)
                                    {
                                        // ユニットクラス、ユニット名による専用指定？
                                        if (Strings.InStr(iclass, eclass0 + "(") == 1 & (Strings.InStr(iclass, "(" + uclass + "専用)") > 0 | Strings.InStr(iclass, "(" + withBlock.Name + "専用)") > 0 | Strings.InStr(iclass, "(" + withBlock.Nickname + "専用)") > 0))
                                        {
                                            IsAbleToEquipRet = true;
                                            return IsAbleToEquipRet;
                                        }

                                        // 性別による専用指定？
                                        if (CountPilot() > 0)
                                        {
                                            if ((iclass ?? "") == (eclass0 + "(" + MainPilot().Sex + "専用)" ?? ""))
                                            {
                                                IsAbleToEquipRet = true;
                                                return IsAbleToEquipRet;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        break;
                    }

                case "体":
                case "頭":
                case "盾":
                    {
                        eclass = ArmorProficiency();
                        var loopTo3 = GeneralLib.LLength(eclass);
                        for (i = 1; i <= loopTo3; i++)
                        {
                            eclass0 = GeneralLib.LIndex(eclass, i);
                            if ((iclass ?? "") == (eclass0 ?? ""))
                            {
                                IsAbleToEquipRet = true;
                                return IsAbleToEquipRet;
                            }
                            else if (Strings.InStr(iclass, "専用)") > 0)
                            {
                                // ユニットクラス、ユニット名による専用指定？
                                if (Strings.InStr(iclass, eclass0 + "(") == 1 & (Strings.InStr(iclass, "(" + uclass + "専用)") > 0 | Strings.InStr(iclass, "(" + Name + "専用)") > 0 | Strings.InStr(iclass, "(" + Nickname + "専用)") > 0))
                                {
                                    IsAbleToEquipRet = true;
                                    return IsAbleToEquipRet;
                                }

                                // 性別による専用指定？
                                if (CountPilot() > 0)
                                {
                                    if ((iclass ?? "") == (eclass0 + "(" + MainPilot().Sex + "専用)" ?? ""))
                                    {
                                        IsAbleToEquipRet = true;
                                        return IsAbleToEquipRet;
                                    }
                                }
                            }
                        }

                        // 一部の形態でのみ利用可能な防具の判定
                        var loopTo4 = CountOtherForm();
                        for (i = 1; i <= loopTo4; i++)
                        {
                            object argIndex2 = i;
                            {
                                var withBlock1 = OtherForm(argIndex2);
                                uclass = withBlock1.Class0;
                                eclass = withBlock1.ArmorProficiency();
                                var loopTo5 = GeneralLib.LLength(eclass);
                                for (j = 1; j <= loopTo5; j++)
                                {
                                    eclass0 = GeneralLib.LIndex(eclass, j);
                                    if ((iclass ?? "") == (eclass0 ?? ""))
                                    {
                                        IsAbleToEquipRet = true;
                                        return IsAbleToEquipRet;
                                    }
                                    else if (Strings.InStr(iclass, "専用)") > 0)
                                    {
                                        // ユニットクラス、ユニット名による専用指定？
                                        if (Strings.InStr(iclass, eclass0 + "(") == 1 & (Strings.InStr(iclass, "(" + uclass + "専用)") > 0 | Strings.InStr(iclass, "(" + withBlock1.Name + "専用)") > 0 | Strings.InStr(iclass, "(" + withBlock1.Nickname + "専用)") > 0))
                                        {
                                            IsAbleToEquipRet = true;
                                            return IsAbleToEquipRet;
                                        }

                                        // 性別による専用指定？
                                        if (CountPilot() > 0)
                                        {
                                            if ((iclass ?? "") == (eclass0 + "(" + MainPilot().Sex + "専用)" ?? ""))
                                            {
                                                IsAbleToEquipRet = true;
                                                return IsAbleToEquipRet;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        break;
                    }

                case "アイテム":
                case "強化パーツ":
                    {
                        // 強化パーツは人間ユニットには装備できない
                        if (Strings.InStr(it.Part(), "強化パーツ") == 1)
                        {
                            if (IsHero())
                            {
                                IsAbleToEquipRet = false;
                                return IsAbleToEquipRet;
                            }
                        }

                        // これらのアイテムは専用アイテムでない限り必ず装備可能
                        if (Strings.InStr(iclass, "専用)") == 0)
                        {
                            IsAbleToEquipRet = true;
                            return IsAbleToEquipRet;
                        }

                        // ユニットクラス、ユニット名による専用指定？
                        if (Strings.InStr(iclass, "(" + uclass + "専用)") > 0 | Strings.InStr(iclass, "(" + Name + "専用)") > 0 | Strings.InStr(iclass, "(" + Nickname + "専用)") > 0)
                        {
                            IsAbleToEquipRet = true;
                            return IsAbleToEquipRet;
                        }

                        // 性別による専用指定？
                        if (CountPilot() > 0)
                        {
                            if (Strings.InStr(iclass, "(" + MainPilot().Sex + "専用)") > 0)
                            {
                                IsAbleToEquipRet = true;
                                return IsAbleToEquipRet;
                            }
                        }

                        // 他の形態の名前で専用指定されている？
                        var loopTo6 = CountOtherForm();
                        for (i = 1; i <= loopTo6; i++)
                        {
                            object argIndex3 = i;
                            {
                                var withBlock2 = OtherForm(argIndex3);
                                if (Strings.InStr(iclass, "(" + withBlock2.Class0 + "専用)") > 0 | Strings.InStr(iclass, "(" + withBlock2.Name + "専用)") > 0 | Strings.InStr(iclass, "(" + withBlock2.Nickname + "専用)") > 0)
                                {
                                    IsAbleToEquipRet = true;
                                    return IsAbleToEquipRet;
                                }
                            }
                        }

                        break;
                    }

                default:
                    {
                        // 創作された装備個所のアイテムは専用アイテムでない限り必ず装備可能
                        if (Strings.InStr(iclass, "専用)") == 0)
                        {
                            IsAbleToEquipRet = true;
                            return IsAbleToEquipRet;
                        }

                        // ユニットクラス、ユニット名による専用指定？
                        if (Strings.InStr(iclass, "(" + uclass + "専用)") > 0 | Strings.InStr(iclass, "(" + Name + "専用)") > 0 | Strings.InStr(iclass, "(" + Nickname + "専用)") > 0)
                        {
                            IsAbleToEquipRet = true;
                            return IsAbleToEquipRet;
                        }

                        // 性別による専用指定？
                        if (CountPilot() > 0)
                        {
                            if (Strings.InStr(iclass, "(" + MainPilot().Sex + "専用)") > 0)
                            {
                                IsAbleToEquipRet = true;
                                return IsAbleToEquipRet;
                            }
                        }

                        // 他の形態の名前で専用指定されている？
                        var loopTo7 = CountOtherForm();
                        for (i = 1; i <= loopTo7; i++)
                        {
                            object argIndex4 = i;
                            {
                                var withBlock3 = OtherForm(argIndex4);
                                if (Strings.InStr(iclass, "(" + withBlock3.Class0 + "専用)") > 0 | Strings.InStr(iclass, "(" + withBlock3.Name + "専用)") > 0 | Strings.InStr(iclass, "(" + withBlock3.Nickname + "専用)") > 0)
                                {
                                    IsAbleToEquipRet = true;
                                    return IsAbleToEquipRet;
                                }
                            }
                        }

                        break;
                    }
            }

            IsAbleToEquipRet = false;
            return IsAbleToEquipRet;
        }


        // === メッセージ関連処理 ===

        // 状況 Situation に応じたパイロットメッセージを表示
        public void PilotMessage(string Situation, [Optional, DefaultParameterValue("")] string msg_mode)
        {
            int k, i, j, w;
            Pilot p;
            MessageData md;
            Dialog dd;
            string msg;
            string[] situations;
            var wname = default(string);
            string[] pnames;
            string buf;
            var selected_pilot = default(string);
            var selected_situation = default(string);
            var selected_msg = default(string);

            // WAVEを演奏したかチェックするため、あらかじめクリア
            Sound.IsWavePlayed = false;

            // 対応メッセージが定義されていなかった場合に使用するシチュエーションを設定
            situations = new string[2];
            situations[1] = Situation;
            switch (Situation ?? "")
            {
                case "分身":
                case "切り払い":
                case "迎撃":
                case "反射":
                case "当て身技":
                case "阻止":
                case "ダミー":
                case "緊急テレポート":
                    {
                        Array.Resize(situations, 3);
                        situations[2] = "回避";
                        break;
                    }

                case "ビーム無効化":
                case "攻撃無効化":
                case "シールド防御":
                    {
                        Array.Resize(situations, 3);
                        situations[2] = "ダメージ小";
                        break;
                    }

                case "回避":
                case "破壊":
                case "ダメージ大":
                case "ダメージ中":
                case "ダメージ小":
                case "かけ声":
                    {
                        break;
                    }

                default:
                    {
                        if (msg_mode == "攻撃" | msg_mode == "カウンター")
                        {
                            // 攻撃メッセージ
                            wname = situations[1];

                            // 武器番号を検索
                            var loopTo = CountWeapon();
                            for (w = 1; w <= loopTo; w++)
                            {
                                {
                                    var withBlock = Weapon(w);
                                    if ((Situation ?? "") == (withBlock.Name ?? "") | (Situation ?? "") == (withBlock.Nickname() ?? ""))
                                    {
                                        break;
                                    }
                                }
                            }

                            if (!IsDefense())
                            {
                                Array.Resize(situations, 3);
                                string argattr = "格闘系";
                                if (IsWeaponClassifiedAs(w, argattr))
                                {
                                    situations[2] = "格闘";
                                }
                                else
                                {
                                    situations[2] = "射撃";
                                }
                            }
                            else if (msg_mode == "カウンター")
                            {
                                Array.Resize(situations, 4);
                                situations[1] = Situation + "(反撃)";
                                situations[2] = Situation;
                                string argattr2 = "格闘系";
                                if (IsWeaponClassifiedAs(w, argattr2))
                                {
                                    situations[3] = "格闘";
                                }
                                else
                                {
                                    situations[3] = "射撃";
                                }
                            }
                            else
                            {
                                Array.Resize(situations, 5);
                                situations[1] = Situation + "(反撃)";
                                situations[2] = Situation;
                                string argattr1 = "格闘系";
                                if (IsWeaponClassifiedAs(w, argattr1))
                                {
                                    situations[3] = "格闘(反撃)";
                                    situations[4] = "格闘";
                                }
                                else
                                {
                                    situations[3] = "射撃(反撃)";
                                    situations[4] = "射撃";
                                }
                            }
                        }
                        else if (msg_mode == "アビリティ")
                        {
                            Array.Resize(situations, 3);
                            situations[2] = "アビリティ";
                        }
                        else if (Strings.InStr(Situation, "(命中)") > 0 | Strings.InStr(Situation, "(回避)") > 0 | Strings.InStr(Situation, "(とどめ)") > 0 | Strings.InStr(Situation, "(クリティカル)") > 0)
                        {
                            // サブシチュエーション付きの攻撃メッセージ

                            // 武器番号を検索
                            string argstr2 = "(";
                            wname = Strings.Left(Situation, GeneralLib.InStr2(Situation, argstr2) - 1);
                            var loopTo1 = CountWeapon();
                            for (w = 1; w <= loopTo1; w++)
                            {
                                {
                                    var withBlock1 = Weapon(w);
                                    if ((wname ?? "") == (withBlock1.Name ?? "") | (wname ?? "") == (withBlock1.Nickname() ?? ""))
                                    {
                                        break;
                                    }
                                }
                            }

                            if (!IsDefense())
                            {
                                Array.Resize(situations, 3);
                                string argattr3 = "格闘系";
                                if (IsWeaponClassifiedAs(w, argattr3))
                                {
                                    string argstr21 = "(";
                                    situations[2] = "格闘" + Strings.Mid(Situation, GeneralLib.InStr2(Situation, argstr21));
                                }
                                else
                                {
                                    string argstr22 = "(";
                                    situations[2] = "射撃" + Strings.Mid(Situation, GeneralLib.InStr2(Situation, argstr22));
                                }
                            }
                            else if (msg_mode == "カウンター")
                            {
                                Array.Resize(situations, 4);
                                situations[1] = Situation + "(反撃)";
                                situations[2] = Situation;
                                string argattr5 = "格闘系";
                                if (IsWeaponClassifiedAs(w, argattr5))
                                {
                                    string argstr27 = "(";
                                    situations[3] = "格闘" + Strings.Mid(Situation, GeneralLib.InStr2(Situation, argstr27));
                                }
                                else
                                {
                                    string argstr28 = "(";
                                    situations[3] = "射撃" + Strings.Mid(Situation, GeneralLib.InStr2(Situation, argstr28));
                                }
                            }
                            else
                            {
                                Array.Resize(situations, 5);
                                situations[1] = Situation + "(反撃)";
                                situations[2] = Situation;
                                string argattr4 = "格闘系";
                                if (IsWeaponClassifiedAs(w, argattr4))
                                {
                                    string argstr23 = "(";
                                    situations[3] = "格闘" + Strings.Mid(Situation, GeneralLib.InStr2(Situation, argstr23)) + "(反撃)";
                                    string argstr24 = "(";
                                    situations[4] = "格闘" + Strings.Mid(Situation, GeneralLib.InStr2(Situation, argstr24));
                                }
                                else
                                {
                                    string argstr25 = "(";
                                    situations[3] = "射撃" + Strings.Mid(Situation, GeneralLib.InStr2(Situation, argstr25)) + "(反撃)";
                                    string argstr26 = "(";
                                    situations[4] = "射撃" + Strings.Mid(Situation, GeneralLib.InStr2(Situation, argstr26));
                                }
                            }
                        }
                        // 攻撃メッセージでなくても一応攻撃武器名を設定
                        else if (ReferenceEquals(Commands.SelectedUnit, this))
                        {
                            if (0 < Commands.SelectedWeapon & Commands.SelectedWeapon <= CountWeapon())
                            {
                                wname = Weapon(Commands.SelectedWeapon).Name;
                            }
                        }
                        else if (ReferenceEquals(Commands.SelectedTarget, this))
                        {
                            if (0 < Commands.SelectedTWeapon & Commands.SelectedTWeapon <= CountWeapon())
                            {
                                wname = Weapon(Commands.SelectedTWeapon).Name;
                            }
                        }

                        break;
                    }
            }

            // SelectMessageコマンド
            var loopTo2 = Information.UBound(situations);
            for (i = 1; i <= loopTo2; i++)
            {
                buf = "Message(" + MainPilot().ID + "," + situations[i] + ")";
                if (Expression.IsLocalVariableDefined(buf))
                {
                    // UPGRADE_WARNING: オブジェクト LocalVariableList.Item().StringValue の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                    selected_msg = Conversions.ToString(Event_Renamed.LocalVariableList[buf].StringValue);
                    selected_situation = situations[i];
                    Expression.UndefineVariable(buf);
                    break;
                }

                if (situations[i] == "格闘" | situations[i] == "射撃")
                {
                    buf = "Message(" + MainPilot().ID + ",攻撃)";
                    if (Expression.IsLocalVariableDefined(buf))
                    {
                        // UPGRADE_WARNING: オブジェクト LocalVariableList.Item().StringValue の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                        selected_msg = Conversions.ToString(Event_Renamed.LocalVariableList[buf].StringValue);
                        selected_situation = "攻撃";
                        Expression.UndefineVariable(buf);
                        break;
                    }
                }

                if (situations[i] == "格闘(反撃)" | situations[i] == "射撃(反撃)")
                {
                    buf = "Message(" + MainPilot().ID + ",攻撃(反撃))";
                    if (Expression.IsLocalVariableDefined(buf))
                    {
                        // UPGRADE_WARNING: オブジェクト LocalVariableList.Item().StringValue の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                        selected_msg = Conversions.ToString(Event_Renamed.LocalVariableList[buf].StringValue);
                        selected_situation = "攻撃(反撃)";
                        Expression.UndefineVariable(buf);
                        break;
                    }
                }
            }

            if (Strings.InStr(selected_msg, "::") > 0)
            {
                selected_pilot = Strings.Left(selected_msg, Strings.InStr(selected_msg, "::") - 1);
                selected_msg = Strings.Mid(selected_msg, Strings.InStr(selected_msg, "::") + 2);
            }

            // かけ声は３分の２の確率で表示
            if (string.IsNullOrEmpty(selected_msg))
            {
                if (Strings.InStr(Situation, "かけ声") == 1)
                {
                    if (GeneralLib.Dice(3) == 1)
                    {
                        return;
                    }
                }
            }

            // しゃべれない場合
            // ただしSetMessageコマンドでメッセージが設定されている場合は
            // そちらを使用。
            if (string.IsNullOrEmpty(selected_msg))
            {
                object argIndex1 = "石化";
                object argIndex2 = "凍結";
                object argIndex3 = "麻痺";
                if (IsConditionSatisfied(argIndex1) | IsConditionSatisfied(argIndex2) | IsConditionSatisfied(argIndex3))
                {
                    // 意識不明
                    return;
                }

                object argIndex6 = "沈黙";
                object argIndex7 = "憑依";
                if (IsConditionSatisfied(argIndex6) | IsConditionSatisfied(argIndex7))
                {
                    // 無言
                    if (Strings.InStr(Situation, "(") == 0)
                    {
                        switch (Situation ?? "")
                        {
                            case "ダメージ中":
                            case "ダメージ大":
                            case "破壊":
                                {
                                    object argIndex4 = MainPilot().Name + "(ダメージ)";
                                    if (SRC.NPDList.IsDefined(argIndex4))
                                    {
                                        string argpname = MainPilot().Name + "(ダメージ)";
                                        string argmsg_mode = "";
                                        GUI.DisplayBattleMessage(argpname, "…………！", msg_mode: argmsg_mode);
                                        return;
                                    }

                                    break;
                                }

                            case "かけ声":
                                {
                                    return;
                                }
                        }

                        if (!string.IsNullOrEmpty(wname))
                        {
                            object argIndex5 = MainPilot().Name + "(攻撃)";
                            if (SRC.NPDList.IsDefined(argIndex5))
                            {
                                string argpname1 = MainPilot().Name + "(攻撃)";
                                string argmsg_mode1 = "";
                                GUI.DisplayBattleMessage(argpname1, "…………！", msg_mode: argmsg_mode1);
                                return;
                            }
                        }

                        string argmsg_mode2 = "";
                        GUI.DisplayBattleMessage(MainPilot().ID, "…………", msg_mode: argmsg_mode2);
                    }

                    return;
                }

                object argIndex8 = "睡眠";
                if (IsConditionSatisfied(argIndex8))
                {
                    // 寝言
                    if (Strings.InStr(Situation, "(") == 0)
                    {
                        string argmsg_mode3 = "";
                        GUI.DisplayBattleMessage(MainPilot().ID, "ＺＺＺ……", msg_mode: argmsg_mode3);
                    }

                    return;
                }

                object argIndex10 = "恐怖";
                if (IsConditionSatisfied(argIndex10))
                {
                    string argmain_situation = "恐怖";
                    if (IsMessageDefined(argmain_situation))
                    {
                        // 恐怖状態用メッセージが定義されていればそちらを使う
                        situations = new string[2];
                        situations[1] = "恐怖";
                    }
                    else
                    {
                        // パニック時のメッセージを作成して表示
                        if (Strings.InStr(Situation, "(") == 0)
                        {
                            msg = "";
                            switch (MainPilot().Sex ?? "")
                            {
                                case "男性":
                                    {
                                        switch (GeneralLib.Dice(4))
                                        {
                                            case 1:
                                                {
                                                    msg = "う、うわああああっ！";
                                                    break;
                                                }

                                            case 2:
                                                {
                                                    msg = "うわあああっ！";
                                                    break;
                                                }

                                            case 3:
                                                {
                                                    msg = "ひ、ひいいいっ！";
                                                    break;
                                                }

                                            case 4:
                                                {
                                                    msg = "ひいいいっ！";
                                                    break;
                                                }
                                        }

                                        break;
                                    }

                                case "女性":
                                    {
                                        switch (GeneralLib.Dice(4))
                                        {
                                            case 1:
                                                {
                                                    msg = "きゃあああああっ！";
                                                    break;
                                                }

                                            case 2:
                                                {
                                                    msg = "きゃああっ！";
                                                    break;
                                                }

                                            case 3:
                                                {
                                                    msg = "うわあああっ！";
                                                    break;
                                                }

                                            case 4:
                                                {
                                                    msg = "た、助けてええっ！";
                                                    break;
                                                }
                                        }

                                        break;
                                    }
                            }

                            if (!string.IsNullOrEmpty(msg))
                            {
                                bool localIsDefined() { object argIndex1 = MainPilot().Name + "(ダメージ)"; var ret = SRC.NPDList.IsDefined(argIndex1); return ret; }

                                object argIndex9 = MainPilot().Name + "(泣き)";
                                if (SRC.NPDList.IsDefined(argIndex9))
                                {
                                    string argpname2 = MainPilot().Name + "(泣き)";
                                    string argmsg_mode4 = "";
                                    GUI.DisplayBattleMessage(argpname2, msg, msg_mode: argmsg_mode4);
                                }
                                else if (localIsDefined())
                                {
                                    string argpname3 = MainPilot().Name + "(ダメージ)";
                                    string argmsg_mode6 = "";
                                    GUI.DisplayBattleMessage(argpname3, msg, msg_mode: argmsg_mode6);
                                }
                                else
                                {
                                    string argmsg_mode5 = "";
                                    GUI.DisplayBattleMessage(MainPilot().ID, msg, msg_mode: argmsg_mode5);
                                }
                            }
                        }

                        return;
                    }
                }

                object argIndex11 = "混乱";
                if (IsConditionSatisfied(argIndex11))
                {
                    string argmain_situation1 = "混乱";
                    if (IsMessageDefined(argmain_situation1))
                    {
                        // 混乱状態用メッセージが定義されていればそちらを使う
                        situations = new string[2];
                        situations[1] = "混乱";
                    }
                }
            }

            // ダイアログデータを使って判定
            pnames = new string[4];
            pnames[1] = MainPilot().MessageType;
            pnames[2] = MainPilot().MessageType;
            pnames[3] = MainPilot().MessageType;
            string argfname = "追加パイロット";
            if (IsFeatureAvailable(argfname))
            {
                Array.Resize(pnames, 5);
                object argIndex12 = 1;
                pnames[4] = Pilot(argIndex12).MessageType;
            }

            var loopTo3 = CountPilot();
            for (i = 2; i <= loopTo3; i++)
            {
                Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                pnames[1] = pnames[1] + " " + localPilot().MessageType;
                Pilot localPilot1() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                pnames[2] = pnames[2] + " " + localPilot1().MessageType;
            }

            var loopTo4 = CountSupport();
            for (i = 1; i <= loopTo4; i++)
            {
                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                pnames[1] = pnames[1] + " " + localSupport().MessageType;
            }

            string argfname1 = "追加サポート";
            if (IsFeatureAvailable(argfname1))
            {
                pnames[1] = pnames[1] + " " + AdditionalSupport().MessageType;
            }

            if ((Situation ?? "") == (Commands.SelectedSpecialPower ?? ""))
            {
                pnames[3] = Commands.SelectedPilot.MessageType;
            }

            var loopTo5 = Information.UBound(pnames);
            for (i = 1; i <= loopTo5; i++)
            {
                // 追加パイロットにメッセージデータがあればそちらを優先
                if (i == 4)
                {
                    bool localIsDefined1() { object argIndex1 = MainPilot().MessageType; var ret = SRC.MDList.IsDefined(argIndex1); MainPilot().MessageType = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined1())
                    {
                        break;
                    }
                }

                var tmp1 = pnames;
                object argIndex14 = tmp1[i];
                if (SRC.DDList.IsDefined(argIndex14))
                {
                    var tmp = pnames;
                    object argIndex13 = tmp[i];
                    {
                        var withBlock2 = SRC.DDList.Item(argIndex13);
                        if (!string.IsNullOrEmpty(selected_msg))
                        {
                            // SelectMessageで選択されたメッセージを検索
                            k = 0;
                            var loopTo6 = withBlock2.CountDialog();
                            for (j = 1; j <= loopTo6; j++)
                            {
                                if ((withBlock2.Situation(j) ?? "") == (selected_situation ?? ""))
                                {
                                    k = (k + 1);
                                    if ((Microsoft.VisualBasic.Compatibility.VB6.Support.Format(k) ?? "") == (selected_msg ?? ""))
                                    {
                                        var argdd = withBlock2.Dialog(j);
                                        PlayDialog(argdd, wname);
                                        return;
                                    }
                                }
                                else if ((withBlock2.Situation(j) ?? "") == (selected_msg ?? ""))
                                {
                                    var argdd1 = withBlock2.Dialog(j);
                                    PlayDialog(argdd1, wname);
                                    return;
                                }
                            }
                        }
                        else
                        {
                            var loopTo7 = Information.UBound(situations);
                            for (j = 1; j <= loopTo7; j++)
                            {
                                var argu = this;
                                dd = withBlock2.SelectDialog(situations[j], argu);
                                if (dd is object)
                                {
                                    PlayDialog(dd, wname);
                                    return;
                                }
                            }
                        }
                    }
                }
            }

            // ゲッターのようなユニットは必ずメインパイロットを使ってメッセージを表示
            object argIndex15 = 1;
            if (Data.PilotNum > 0 & ReferenceEquals(MainPilot(), Pilot(argIndex15)) & (Situation ?? "") != (Commands.SelectedSpecialPower ?? ""))
            {
                i = GeneralLib.Dice(CountPilot() + CountSupport());
            }
            else
            {
                i = 1;
            }

            TryAgain:
            ;

            // 選んだパイロットによるメッセージデータで判定
            if ((Situation ?? "") == (Commands.SelectedSpecialPower ?? ""))
            {
                bool localIsDefined2() { object argIndex1 = Commands.SelectedPilot.MessageType; var ret = SRC.MDList.IsDefined(argIndex1); Commands.SelectedPilot.MessageType = Conversions.ToString(argIndex1); return ret; }

                if (!localIsDefined2())
                {
                    goto TrySelectedMessage;
                }
            }
            else if (i == 1)
            {
                bool localIsDefined4() { object argIndex1 = MainPilot().MessageType; var ret = SRC.MDList.IsDefined(argIndex1); MainPilot().MessageType = Conversions.ToString(argIndex1); return ret; }

                bool localIsDefined5() { object argIndex1 = 1; object argIndex2 = Pilot(argIndex1).MessageType; var ret = SRC.MDList.IsDefined(argIndex2); Pilot(argIndex1).MessageType = Conversions.ToString(argIndex2); return ret; }

                if (!localIsDefined4() & !localIsDefined5())
                {
                    goto TrySelectedMessage;
                }
            }
            else if (i <= CountPilot())
            {
                Pilot localPilot2() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                bool localIsDefined6() { object argIndex1 = (object)hsfce6a149060e4f46a8f718c3a6bd3f01().MessageType; var ret = SRC.MDList.IsDefined(argIndex1); hsfce6a149060e4f46a8f718c3a6bd3f01().MessageType = Conversions.ToString(argIndex1); return ret; }

                if (!localIsDefined6())
                {
                    i = 1;
                    goto TryAgain;
                }
            }
            else
            {
                Pilot localSupport1() { object argIndex1 = i - CountPilot(); var ret = Support(argIndex1); return ret; }

                bool localIsDefined3() { object argIndex1 = (object)hsaf4c50d4b23f4cb1b890b9fa34bacc97().MessageType; var ret = SRC.MDList.IsDefined(argIndex1); hsaf4c50d4b23f4cb1b890b9fa34bacc97().MessageType = Conversions.ToString(argIndex1); return ret; }

                if (!localIsDefined3())
                {
                    if (i > 1)
                    {
                        i = 1;
                        goto TryAgain;
                    }
                    else
                    {
                        goto TrySelectedMessage;
                    }
                }
            }

            // メッセージを表示
            if ((Situation ?? "") == (Commands.SelectedSpecialPower ?? ""))
            {
                object argIndex16 = Commands.SelectedPilot.MessageType;
                md = SRC.MDList.Item(argIndex16);
                Commands.SelectedPilot.MessageType = Conversions.ToString(argIndex16);
                p = Commands.SelectedPilot;
            }
            else if (i == 1)
            {
                object argIndex19 = MainPilot().MessageType;
                md = SRC.MDList.Item(argIndex19);
                MainPilot().MessageType = Conversions.ToString(argIndex19);
                p = MainPilot();
                if (md is object)
                {
                    var loopTo8 = Information.UBound(situations);
                    for (j = 1; j <= loopTo8; j++)
                    {
                        var argu1 = this;
                        if (Strings.Len(md.SelectMessage(situations[j], argu1)) > 0)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    object argIndex20 = 1;
                    object argIndex21 = Pilot(argIndex20).MessageType;
                    md = SRC.MDList.Item(argIndex21);
                    Pilot(argIndex20).MessageType = Conversions.ToString(argIndex21);
                    object argIndex22 = 1;
                    p = Pilot(argIndex22);
                }
            }
            else if (i <= CountPilot())
            {
                Pilot localPilot3() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                object argIndex23 = localPilot3().MessageType;
                md = SRC.MDList.Item(argIndex23);
                localPilot3().MessageType = Conversions.ToString(argIndex23);
                object argIndex24 = i;
                p = Pilot(argIndex24);
            }
            else
            {
                Pilot localSupport2() { object argIndex1 = i - CountPilot(); var ret = Support(argIndex1); return ret; }

                object argIndex17 = localSupport2().MessageType;
                md = SRC.MDList.Item(argIndex17);
                localSupport2().MessageType = Conversions.ToString(argIndex17);
                object argIndex18 = i - CountPilot();
                p = Support(argIndex18);
            }

            // メッセージデータが見つからない場合は他のパイロットで探しなおす
            if (md is null)
            {
                if (i != 1)
                {
                    i = 1;
                    goto TryAgain;
                }
                else
                {
                    goto TrySelectedMessage;
                }
            }

            if (!string.IsNullOrEmpty(selected_msg))
            {
                // SelectMessageで選択されたメッセージを検索
                k = 0;
                var loopTo9 = md.CountMessage();
                for (j = 1; j <= loopTo9; j++)
                {
                    if ((md.Situation(j) ?? "") == (selected_situation ?? ""))
                    {
                        k = (k + 1);
                        if ((Microsoft.VisualBasic.Compatibility.VB6.Support.Format(k) ?? "") == (selected_msg ?? ""))
                        {
                            string argmsg = md.Message(j);
                            PlayMessage(p, argmsg, wname);
                            return;
                        }
                    }
                    else if ((md.Situation(j) ?? "") == (selected_msg ?? ""))
                    {
                        string argmsg1 = md.Message(j);
                        PlayMessage(p, argmsg1, wname);
                        return;
                    }
                }
            }
            else
            {
                // メッセージデータからメッセージを検索
                var loopTo10 = Information.UBound(situations);
                for (j = 1; j <= loopTo10; j++)
                {
                    var argu2 = this;
                    msg = md.SelectMessage(situations[j], argu2);
                    if (!string.IsNullOrEmpty(msg))
                    {
                        PlayMessage(p, msg, wname);
                        return;
                    }
                }
            }

            if (i != 1)
            {
                i = 1;
                goto TryAgain;
            }

            TrySelectedMessage:
            ;

            // メッセージを表示
            if (!string.IsNullOrEmpty(selected_msg) & selected_msg != "-")
            {
                if (!string.IsNullOrEmpty(selected_pilot))
                {
                    string argmsg_mode7 = "";
                    GUI.DisplayBattleMessage(selected_pilot, selected_msg, msg_mode: argmsg_mode7);
                }
                else
                {
                    string argmsg_mode8 = "";
                    GUI.DisplayBattleMessage(MainPilot().ID, selected_msg, msg_mode: argmsg_mode8);
                }
            }
        }

        // ダイアログの再生
        public void PlayDialog(Dialog dd, string wname)
        {
            string msg, buf;
            int i, idx;
            Unit t;
            int tw;

            // 画像描画が行われたかどうかの判定のためにフラグを初期化
            GUI.IsPictureDrawn = false;
            // ダイアログの個々のメッセージを表示
            var loopTo = dd.Count;
            for (i = 1; i <= loopTo; i++)
            {
                msg = dd.Message(i);

                // メッセージ表示のキャンセル
                if (msg == "-")
                {
                    return;
                }

                // ユニット名
                while (Strings.InStr(msg, "$(ユニット)") > 0)
                {
                    idx = Strings.InStr(msg, "$(ユニット)");
                    buf = Nickname;
                    if (Strings.InStr(buf, "(") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                    }

                    if (Strings.InStr(buf, "専用") > 0)
                    {
                        buf = Strings.Mid(buf, Strings.InStr(buf, "専用") + 2);
                    }

                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 7);
                }

                while (Strings.InStr(msg, "$(機体)") > 0)
                {
                    idx = Strings.InStr(msg, "$(機体)");
                    buf = Nickname;
                    if (Strings.InStr(buf, "(") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                    }

                    if (Strings.InStr(buf, "専用") > 0)
                    {
                        buf = Strings.Mid(buf, Strings.InStr(buf, "専用") + 2);
                    }

                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 5);
                }

                // パイロット名
                while (Strings.InStr(msg, "$(パイロット)") > 0)
                {
                    buf = MainPilot().get_Nickname(false);
                    if (Strings.InStr(buf, "(") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                    }

                    idx = Strings.InStr(msg, "$(パイロット)");
                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 8);
                }

                // 武器名
                while (Strings.InStr(msg, "$(武器)") > 0)
                {
                    idx = Strings.InStr(msg, "$(武器)");
                    buf = wname;
                    Expression.ReplaceSubExpression(buf);
                    if (Strings.InStr(buf, "(") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                    }

                    if (Strings.InStr(buf, "<") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "<") - 1);
                    }

                    if (Strings.InStr(buf, "＜") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "＜") - 1);
                    }

                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 5);
                }

                // 損傷率
                while (Strings.InStr(msg, "$(損傷率)") > 0)
                {
                    idx = Strings.InStr(msg, "$(損傷率)");
                    msg = Strings.Left(msg, idx - 1) + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (MaxHP - HP) / MaxHP) + Strings.Mid(msg, idx + 6);
                }

                // 相手ユニットを設定
                if (ReferenceEquals(Commands.SelectedUnit, this))
                {
                    t = Commands.SelectedTarget;
                    tw = Commands.SelectedTWeapon;
                }
                else
                {
                    t = Commands.SelectedUnit;
                    tw = Commands.SelectedWeapon;
                }

                if (t is object)
                {
                    // 相手ユニット名
                    while (Strings.InStr(msg, "$(相手ユニット)") > 0)
                    {
                        buf = t.Nickname;
                        if (Strings.InStr(buf, "(") > 0)
                        {
                            buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                        }

                        if (Strings.InStr(buf, "専用") > 0)
                        {
                            buf = Strings.Mid(buf, Strings.InStr(buf, "専用") + 2);
                        }

                        idx = Strings.InStr(msg, "$(相手ユニット)");
                        msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 9);
                    }

                    while (Strings.InStr(msg, "$(相手機体)") > 0)
                    {
                        buf = t.Nickname;
                        if (Strings.InStr(buf, "(") > 0)
                        {
                            buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                        }

                        if (Strings.InStr(buf, "専用") > 0)
                        {
                            buf = Strings.Mid(buf, Strings.InStr(buf, "専用") + 2);
                        }

                        idx = Strings.InStr(msg, "$(相手機体)");
                        msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 7);
                    }

                    // 相手パイロット名
                    while (Strings.InStr(msg, "$(相手パイロット)") > 0)
                    {
                        buf = t.MainPilot().get_Nickname(false);
                        if (Strings.InStr(buf, "(") > 0)
                        {
                            buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                        }

                        idx = Strings.InStr(msg, "$(相手パイロット)");
                        msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 10);
                    }

                    // 相手武器名
                    while (Strings.InStr(msg, "$(相手武器)") > 0)
                    {
                        if (1 <= tw & tw <= t.CountWeapon())
                        {
                            buf = t.WeaponNickname(tw);
                        }
                        else
                        {
                            buf = "";
                        }

                        if (Strings.InStr(buf, "<") > 0)
                        {
                            buf = Strings.Left(buf, Strings.InStr(buf, "<") - 1);
                        }

                        if (Strings.InStr(buf, "＜") > 0)
                        {
                            buf = Strings.Left(buf, Strings.InStr(buf, "＜") - 1);
                        }

                        idx = Strings.InStr(msg, "$(相手武器)");
                        msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 7);
                    }

                    // 相手損傷率
                    while (Strings.InStr(msg, "$(相手損傷率)") > 0)
                    {
                        buf = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (t.MaxHP - t.HP) / t.MaxHP);
                        idx = Strings.InStr(msg, "$(相手損傷率)");
                        msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 8);
                    }
                }

                // メッセージを表示
                if ((dd.Name(i) ?? "") == (MainPilot().Name ?? ""))
                {
                    string argmsg_mode = "";
                    GUI.DisplayBattleMessage(MainPilot().ID, msg, msg_mode: argmsg_mode);
                }
                else if (Strings.Left(dd.Name(i), 1) == "@")
                {
                    string argpname1 = Strings.Mid(dd.Name(i), 2);
                    string argmsg_mode2 = "";
                    GUI.DisplayBattleMessage(argpname1, msg, msg_mode: argmsg_mode2);
                }
                else
                {
                    string argpname = dd.Name(i);
                    string argmsg_mode1 = "";
                    GUI.DisplayBattleMessage(argpname, msg, msg_mode: argmsg_mode1);
                }
            }

            // カットインは消去しておく
            string argoname = "戦闘中画面初期化無効";
            if (!Expression.IsOptionDefined(argoname))
            {
                if (GUI.IsPictureDrawn)
                {
                    GUI.ClearPicture();
                    // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                    GUI.MainForm.picMain(0).Refresh();
                }
            }
        }

        // メッセージを再生
        public void PlayMessage(Pilot p, string msg, string wname)
        {
            string buf;
            int idx;
            Unit t;
            int tw;

            // メッセージ表示をキャンセル
            if (msg == "-")
            {
                return;
            }

            // 画像描画が行われたかどうかの判定のためにフラグを初期化
            GUI.IsPictureDrawn = false;

            // ユニット名
            while (Strings.InStr(msg, "$(ユニット)") > 0)
            {
                idx = Strings.InStr(msg, "$(ユニット)");
                buf = Nickname;
                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                if (Strings.InStr(buf, "専用") > 0)
                {
                    buf = Strings.Mid(buf, Strings.InStr(buf, "専用") + 2);
                }

                msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 7);
            }

            while (Strings.InStr(msg, "$(機体)") > 0)
            {
                idx = Strings.InStr(msg, "$(機体)");
                buf = Nickname;
                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                if (Strings.InStr(buf, "専用") > 0)
                {
                    buf = Strings.Mid(buf, Strings.InStr(buf, "専用") + 2);
                }

                msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 5);
            }

            // パイロット名
            while (Strings.InStr(msg, "$(パイロット)") > 0)
            {
                buf = MainPilot().get_Nickname(false);
                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                idx = Strings.InStr(msg, "$(パイロット)");
                msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 8);
            }

            // 武器名
            while (Strings.InStr(msg, "$(武器)") > 0)
            {
                idx = Strings.InStr(msg, "$(武器)");
                buf = wname;
                Expression.ReplaceSubExpression(buf);
                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                if (Strings.InStr(buf, "<") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "<") - 1);
                }

                if (Strings.InStr(buf, "＜") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "＜") - 1);
                }

                msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 5);
            }

            // 損傷率
            while (Strings.InStr(msg, "$(損傷率)") > 0)
            {
                idx = Strings.InStr(msg, "$(損傷率)");
                msg = Strings.Left(msg, idx - 1) + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (MaxHP - HP) / MaxHP) + Strings.Mid(msg, idx + 6);
            }

            // 相手ユニットを設定
            if (ReferenceEquals(Commands.SelectedUnit, this))
            {
                t = Commands.SelectedTarget;
                tw = Commands.SelectedTWeapon;
            }
            else
            {
                t = Commands.SelectedUnit;
                tw = Commands.SelectedWeapon;
            }

            if (t is object)
            {
                // 相手ユニット名
                while (Strings.InStr(msg, "$(相手ユニット)") > 0)
                {
                    buf = t.Nickname;
                    if (Strings.InStr(buf, "(") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                    }

                    if (Strings.InStr(buf, "専用") > 0)
                    {
                        buf = Strings.Mid(buf, Strings.InStr(buf, "専用") + 2);
                    }

                    idx = Strings.InStr(msg, "$(相手ユニット)");
                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 9);
                }

                while (Strings.InStr(msg, "$(相手機体)") > 0)
                {
                    buf = t.Nickname;
                    if (Strings.InStr(buf, "(") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                    }

                    if (Strings.InStr(buf, "専用") > 0)
                    {
                        buf = Strings.Mid(buf, Strings.InStr(buf, "専用") + 2);
                    }

                    idx = Strings.InStr(msg, "$(相手機体)");
                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 7);
                }

                // 相手パイロット名
                while (Strings.InStr(msg, "$(相手パイロット)") > 0)
                {
                    buf = t.MainPilot().get_Nickname(false);
                    if (Strings.InStr(buf, "(") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                    }

                    idx = Strings.InStr(msg, "$(相手パイロット)");
                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 10);
                }

                // 相手武器名
                while (Strings.InStr(msg, "$(相手武器)") > 0)
                {
                    if (1 <= tw & tw <= t.CountWeapon())
                    {
                        buf = t.WeaponNickname(tw);
                    }
                    else
                    {
                        buf = "";
                    }

                    if (Strings.InStr(buf, "<") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "<") - 1);
                    }

                    if (Strings.InStr(buf, "＜") > 0)
                    {
                        buf = Strings.Left(buf, Strings.InStr(buf, "＜") - 1);
                    }

                    idx = Strings.InStr(msg, "$(相手武器)");
                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 7);
                }

                // 相手損傷率
                while (Strings.InStr(msg, "$(相手損傷率)") > 0)
                {
                    buf = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (t.MaxHP - t.HP) / t.MaxHP);
                    idx = Strings.InStr(msg, "$(相手損傷率)");
                    msg = Strings.Left(msg, idx - 1) + buf + Strings.Mid(msg, idx + 8);
                }
            }

            // メッセージを表示
            string argmsg_mode = "";
            GUI.DisplayBattleMessage(p.ID, msg, msg_mode: argmsg_mode);

            // カットインは消去しておく
            string argoname = "戦闘中画面初期化無効";
            if (!Expression.IsOptionDefined(argoname))
            {
                if (GUI.IsPictureDrawn)
                {
                    GUI.ClearPicture();
                    // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                    GUI.MainForm.picMain(0).Refresh();
                }
            }
        }

        // シチュエーション main_situation に対応するメッセージが定義されているか
        public bool IsMessageDefined(string main_situation, bool ignore_condition = false)
        {
            bool IsMessageDefinedRet = default;
            var pnames = new string[5];
            var msg = default(string);
            int i;

            // しゃべれない場合
            if (!ignore_condition)
            {
                object argIndex1 = "沈黙";
                object argIndex2 = "憑依";
                object argIndex3 = "石化";
                object argIndex4 = "凍結";
                object argIndex5 = "麻痺";
                object argIndex6 = "睡眠";
                if (IsConditionSatisfied(argIndex1) | IsConditionSatisfied(argIndex2) | IsConditionSatisfied(argIndex3) | IsConditionSatisfied(argIndex4) | IsConditionSatisfied(argIndex5) | IsConditionSatisfied(argIndex6))
                {
                    IsMessageDefinedRet = false;
                    return IsMessageDefinedRet;
                }

                // 特殊状態用メッセージが定義されているか確認する場合を考慮
                object argIndex7 = "恐怖";
                if (IsConditionSatisfied(argIndex7) & main_situation != "恐怖")
                {
                    IsMessageDefinedRet = false;
                    return IsMessageDefinedRet;
                }

                object argIndex8 = "混乱";
                if (IsConditionSatisfied(argIndex8) & main_situation != "混乱")
                {
                    IsMessageDefinedRet = false;
                    return IsMessageDefinedRet;
                }
            }

            // SetMessageコマンドでメッセージが設定されているか判定
            string argvname = "Message(" + MainPilot().ID + "," + main_situation + ")";
            if (Expression.IsLocalVariableDefined(argvname))
            {
                IsMessageDefinedRet = true;
                return IsMessageDefinedRet;
            }

            // ダイアログデータを使って判定
            {
                var withBlock = MainPilot();
                pnames[1] = withBlock.MessageType;
                pnames[2] = withBlock.MessageType;
                pnames[3] = withBlock.MessageType;
            }

            object argIndex9 = 1;
            pnames[4] = Pilot(argIndex9).MessageType;
            var loopTo = CountPilot();
            for (i = 2; i <= loopTo; i++)
            {
                object argIndex10 = i;
                {
                    var withBlock1 = Pilot(argIndex10);
                    pnames[1] = pnames[1] + " " + withBlock1.MessageType;
                    pnames[2] = pnames[2] + " " + withBlock1.MessageType;
                }
            }

            var loopTo1 = CountSupport();
            for (i = 1; i <= loopTo1; i++)
            {
                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                pnames[1] = pnames[1] + " " + localSupport().MessageType;
            }

            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                pnames[1] = pnames[1] + " " + AdditionalSupport().MessageType;
            }

            if (!string.IsNullOrEmpty(main_situation))
            {
                if ((main_situation ?? "") == (Commands.SelectedSpecialPower ?? ""))
                {
                    pnames[3] = Commands.SelectedPilot.MessageType;
                }
            }

            for (i = 1; i <= 4; i++)
            {
                var tmp1 = pnames;
                object argIndex12 = tmp1[i];
                if (SRC.DDList.IsDefined(argIndex12))
                {
                    var tmp = pnames;
                    object argIndex11 = tmp[i];
                    {
                        var withBlock2 = SRC.DDList.Item(argIndex11);
                        var argu = this;
                        var argu1 = this;
                        if (withBlock2.SelectDialog(main_situation, argu1, ignore_condition) is object)
                        {
                            IsMessageDefinedRet = true;
                            return IsMessageDefinedRet;
                        }
                    }
                }
            }

            // メッセージデータを使って判定
            if ((main_situation ?? "") == (Commands.SelectedSpecialPower ?? ""))
            {
                {
                    var withBlock3 = Commands.SelectedPilot;
                    bool localIsDefined() { object argIndex1 = withBlock3.MessageType; var ret = SRC.MDList.IsDefined(argIndex1); withBlock3.MessageType = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined())
                    {
                        MessageData localItem() { object argIndex1 = withBlock3.MessageType; var ret = SRC.MDList.Item(argIndex1); withBlock3.MessageType = Conversions.ToString(argIndex1); return ret; }

                        var argu2 = this;
                        msg = localItem().SelectMessage(main_situation, argu2);
                    }
                }
            }
            else
            {
                {
                    var withBlock4 = MainPilot();
                    bool localIsDefined1() { object argIndex1 = withBlock4.MessageType; var ret = SRC.MDList.IsDefined(argIndex1); withBlock4.MessageType = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined1())
                    {
                        MessageData localItem1() { object argIndex1 = withBlock4.MessageType; var ret = SRC.MDList.Item(argIndex1); withBlock4.MessageType = Conversions.ToString(argIndex1); return ret; }

                        var argu3 = this;
                        msg = localItem1().SelectMessage(main_situation, argu3);
                    }
                }

                if (Strings.Len(msg) == 0)
                {
                    object argIndex13 = 1;
                    {
                        var withBlock5 = Pilot(argIndex13);
                        bool localIsDefined2() { object argIndex1 = withBlock5.MessageType; var ret = SRC.MDList.IsDefined(argIndex1); withBlock5.MessageType = Conversions.ToString(argIndex1); return ret; }

                        if (localIsDefined2())
                        {
                            MessageData localItem2() { object argIndex1 = withBlock5.MessageType; var ret = SRC.MDList.Item(argIndex1); withBlock5.MessageType = Conversions.ToString(argIndex1); return ret; }

                            var argu4 = this;
                            msg = localItem2().SelectMessage(main_situation, argu4);
                        }
                    }
                }
            }

            if (Strings.Len(msg) > 0)
            {
                IsMessageDefinedRet = true;
            }

            return IsMessageDefinedRet;
        }

        // 解説メッセージを表示
        public void SysMessage(string main_situation, [Optional, DefaultParameterValue("")] string sub_situation, [Optional, DefaultParameterValue("")] string add_msg)
        {
            string uname, msg, uclass;
            string[] situations;
            string idx, buf;
            int i, ret;
            string wname;
            if (string.IsNullOrEmpty(sub_situation) | (main_situation ?? "") == (sub_situation ?? ""))
            {
                situations = new string[2];
                situations[1] = main_situation + "(解説)";
            }
            else
            {
                situations = new string[3];
                situations[1] = main_situation + "(" + sub_situation + ")(解説)";
                situations[2] = main_situation + "(解説)";
            }

            // ADD START MARGE
            // 拡張戦闘アニメデータで検索
            if (SRC.ExtendedAnimation)
            {
                {
                    var withBlock = SRC.EADList;
                    var loopTo = Information.UBound(situations);
                    for (i = 1; i <= loopTo; i++)
                    {
                        // 戦闘アニメ能力で指定された名称で検索
                        string argfname = "戦闘アニメ";
                        if (IsFeatureAvailable(argfname))
                        {
                            object argIndex1 = "戦闘アニメ";
                            uname = FeatureData(argIndex1);
                            object argIndex2 = uname;
                            if (withBlock.IsDefined(argIndex2))
                            {
                                MessageData localItem() { object argIndex1 = uname; var ret = withBlock.Item(argIndex1); return ret; }

                                var argu = this;
                                msg = localItem().SelectMessage(situations[i], argu);
                                if (Strings.Len(msg) > 0)
                                {
                                    goto FoundMessage;
                                }
                            }
                        }

                        // ユニット名称で検索
                        bool localIsDefined() { object argIndex1 = Name; var ret = withBlock.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                        if (localIsDefined())
                        {
                            MessageData localItem1() { object argIndex1 = Name; var ret = withBlock.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                            var argu1 = this;
                            msg = localItem1().SelectMessage(situations[i], argu1);
                            if (Strings.Len(msg) > 0)
                            {
                                goto FoundMessage;
                            }
                        }

                        // ユニット愛称を修正したもので検索
                        uname = Nickname0;
                        ret = Strings.InStr(uname, "(");
                        if (ret > 1)
                        {
                            uname = Strings.Left(uname, ret - 1);
                        }

                        ret = Strings.InStr(uname, "用");
                        if (ret > 0)
                        {
                            if (ret < Strings.Len(uname))
                            {
                                uname = Strings.Mid(uname, ret + 1);
                            }
                        }

                        ret = Strings.InStr(uname, "型");
                        if (ret > 0)
                        {
                            if (ret < Strings.Len(uname))
                            {
                                uname = Strings.Mid(uname, ret + 1);
                            }
                        }

                        if (Strings.Right(uname, 4) == "カスタム")
                        {
                            uname = Strings.Left(uname, Strings.Len(uname) - 4);
                        }

                        if (Strings.Right(uname, 1) == "改")
                        {
                            uname = Strings.Left(uname, Strings.Len(uname) - 1);
                        }

                        object argIndex3 = uname;
                        if (withBlock.IsDefined(argIndex3))
                        {
                            MessageData localItem2() { object argIndex1 = uname; var ret = withBlock.Item(argIndex1); return ret; }

                            var argu2 = this;
                            msg = localItem2().SelectMessage(situations[i], argu2);
                            if (Strings.Len(msg) > 0)
                            {
                                goto FoundMessage;
                            }
                        }

                        // ユニットクラスで検索
                        uclass = Class0;
                        object argIndex4 = uclass;
                        if (withBlock.IsDefined(argIndex4))
                        {
                            MessageData localItem3() { object argIndex1 = uclass; var ret = withBlock.Item(argIndex1); return ret; }

                            var argu3 = this;
                            msg = localItem3().SelectMessage(situations[i], argu3);
                            if (Strings.Len(msg) > 0)
                            {
                                goto FoundMessage;
                            }
                        }

                        // 汎用
                        object argIndex6 = "汎用";
                        if (withBlock.IsDefined(argIndex6))
                        {
                            object argIndex5 = "汎用";
                            var argu4 = this;
                            msg = withBlock.Item(argIndex5).SelectMessage(situations[i], argu4);
                            if (Strings.Len(msg) > 0)
                            {
                                goto FoundMessage;
                            }
                        }
                    }
                }
            }
            // ADD END MARGE

            // 戦闘アニメデータで検索
            {
                var withBlock1 = SRC.ADList;
                var loopTo1 = Information.UBound(situations);
                for (i = 1; i <= loopTo1; i++)
                {
                    // 戦闘アニメ能力で指定された名称で検索
                    string argfname1 = "戦闘アニメ";
                    if (IsFeatureAvailable(argfname1))
                    {
                        object argIndex7 = "戦闘アニメ";
                        uname = FeatureData(argIndex7);
                        object argIndex8 = uname;
                        if (withBlock1.IsDefined(argIndex8))
                        {
                            MessageData localItem4() { object argIndex1 = uname; var ret = withBlock1.Item(argIndex1); return ret; }

                            var argu5 = this;
                            msg = localItem4().SelectMessage(situations[i], argu5);
                            if (Strings.Len(msg) > 0)
                            {
                                goto FoundMessage;
                            }
                        }
                    }

                    // ユニット名称で検索
                    bool localIsDefined1() { object argIndex1 = Name; var ret = withBlock1.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined1())
                    {
                        MessageData localItem5() { object argIndex1 = Name; var ret = withBlock1.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                        var argu6 = this;
                        msg = localItem5().SelectMessage(situations[i], argu6);
                        if (Strings.Len(msg) > 0)
                        {
                            goto FoundMessage;
                        }
                    }

                    // ユニット愛称を修正したもので検索
                    uname = Nickname0;
                    ret = Strings.InStr(uname, "(");
                    if (ret > 1)
                    {
                        uname = Strings.Left(uname, ret - 1);
                    }

                    ret = Strings.InStr(uname, "用");
                    if (ret > 0)
                    {
                        if (ret < Strings.Len(uname))
                        {
                            uname = Strings.Mid(uname, ret + 1);
                        }
                    }

                    ret = Strings.InStr(uname, "型");
                    if (ret > 0)
                    {
                        if (ret < Strings.Len(uname))
                        {
                            uname = Strings.Mid(uname, ret + 1);
                        }
                    }

                    if (Strings.Right(uname, 4) == "カスタム")
                    {
                        uname = Strings.Left(uname, Strings.Len(uname) - 4);
                    }

                    if (Strings.Right(uname, 1) == "改")
                    {
                        uname = Strings.Left(uname, Strings.Len(uname) - 1);
                    }

                    object argIndex9 = uname;
                    if (withBlock1.IsDefined(argIndex9))
                    {
                        MessageData localItem6() { object argIndex1 = uname; var ret = withBlock1.Item(argIndex1); return ret; }

                        var argu7 = this;
                        msg = localItem6().SelectMessage(situations[i], argu7);
                        if (Strings.Len(msg) > 0)
                        {
                            goto FoundMessage;
                        }
                    }

                    // ユニットクラスで検索
                    uclass = Class0;
                    object argIndex10 = uclass;
                    if (withBlock1.IsDefined(argIndex10))
                    {
                        MessageData localItem7() { object argIndex1 = uclass; var ret = withBlock1.Item(argIndex1); return ret; }

                        var argu8 = this;
                        msg = localItem7().SelectMessage(situations[i], argu8);
                        if (Strings.Len(msg) > 0)
                        {
                            goto FoundMessage;
                        }
                    }

                    // 汎用
                    object argIndex12 = "汎用";
                    if (withBlock1.IsDefined(argIndex12))
                    {
                        object argIndex11 = "汎用";
                        var argu9 = this;
                        msg = withBlock1.Item(argIndex11).SelectMessage(situations[i], argu9);
                        if (Strings.Len(msg) > 0)
                        {
                            goto FoundMessage;
                        }
                    }
                }
            }

            // 特殊効果データで検索
            {
                var withBlock2 = SRC.EDList;
                var loopTo2 = Information.UBound(situations);
                for (i = 1; i <= loopTo2; i++)
                {
                    // 特殊効果能力で指定された名称で検索
                    string argfname2 = "特殊効果";
                    if (IsFeatureAvailable(argfname2))
                    {
                        object argIndex13 = "特殊効果";
                        uname = FeatureData(argIndex13);
                        object argIndex14 = uname;
                        if (withBlock2.IsDefined(argIndex14))
                        {
                            MessageData localItem8() { object argIndex1 = uname; var ret = withBlock2.Item(argIndex1); return ret; }

                            var argu10 = this;
                            msg = localItem8().SelectMessage(situations[i], argu10);
                            if (Strings.Len(msg) > 0)
                            {
                                goto FoundMessage;
                            }
                        }
                    }

                    // ユニット名称で検索
                    bool localIsDefined2() { object argIndex1 = Name; var ret = withBlock2.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined2())
                    {
                        MessageData localItem9() { object argIndex1 = Name; var ret = withBlock2.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                        var argu11 = this;
                        msg = localItem9().SelectMessage(situations[i], argu11);
                        if (Strings.Len(msg) > 0)
                        {
                            goto FoundMessage;
                        }
                    }

                    // ユニット愛称を修正したもので検索
                    uname = Nickname0;
                    ret = Strings.InStr(uname, "(");
                    if (ret > 1)
                    {
                        uname = Strings.Left(uname, ret - 1);
                    }

                    ret = Strings.InStr(uname, "用");
                    if (ret > 0)
                    {
                        if (ret < Strings.Len(uname))
                        {
                            uname = Strings.Mid(uname, ret + 1);
                        }
                    }

                    ret = Strings.InStr(uname, "型");
                    if (ret > 0)
                    {
                        if (ret < Strings.Len(uname))
                        {
                            uname = Strings.Mid(uname, ret + 1);
                        }
                    }

                    if (Strings.Right(uname, 4) == "カスタム")
                    {
                        uname = Strings.Left(uname, Strings.Len(uname) - 4);
                    }

                    if (Strings.Right(uname, 1) == "改")
                    {
                        uname = Strings.Left(uname, Strings.Len(uname) - 1);
                    }

                    object argIndex15 = uname;
                    if (withBlock2.IsDefined(argIndex15))
                    {
                        MessageData localItem10() { object argIndex1 = uname; var ret = withBlock2.Item(argIndex1); return ret; }

                        var argu12 = this;
                        msg = localItem10().SelectMessage(situations[i], argu12);
                        if (Strings.Len(msg) > 0)
                        {
                            goto FoundMessage;
                        }
                    }

                    // ユニットクラスで検索
                    uclass = Class0;
                    object argIndex16 = uclass;
                    if (withBlock2.IsDefined(argIndex16))
                    {
                        MessageData localItem11() { object argIndex1 = uclass; var ret = withBlock2.Item(argIndex1); return ret; }

                        var argu13 = this;
                        msg = localItem11().SelectMessage(situations[i], argu13);
                        if (Strings.Len(msg) > 0)
                        {
                            goto FoundMessage;
                        }
                    }

                    // 汎用
                    object argIndex18 = "汎用";
                    if (withBlock2.IsDefined(argIndex18))
                    {
                        object argIndex17 = "汎用";
                        var argu14 = this;
                        msg = withBlock2.Item(argIndex17).SelectMessage(situations[i], argu14);
                        if (Strings.Len(msg) > 0)
                        {
                            goto FoundMessage;
                        }
                    }
                }
            }

            // 対応するメッセージが見つからなかった
            return;
            FoundMessage:
            ;


            // メッセージ表示のキャンセル
            if (msg == "-")
            {
                return;
            }

            // ユニット名
            while (Strings.InStr(msg, "$(ユニット)") > 0)
            {
                idx = Strings.InStr(msg, "$(ユニット)").ToString();
                buf = Nickname;
                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                if (Strings.InStr(buf, "専用") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "専用") + 2);
                }

                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + buf + Strings.Mid(msg, (Conversions.ToDouble(idx) + 7d));
            }

            while (Strings.InStr(msg, "$(機体)") > 0)
            {
                idx = Strings.InStr(msg, "$(機体)").ToString();
                buf = Nickname;
                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                if (Strings.InStr(buf, "専用") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "専用") + 2);
                }

                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + buf + Strings.Mid(msg, (Conversions.ToDouble(idx) + 5d));
            }

            // パイロット名
            while (Strings.InStr(msg, "$(パイロット)") > 0)
            {
                idx = Strings.InStr(msg, "$(パイロット)").ToString();
                buf = MainPilot().get_Nickname(false);
                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + buf + Strings.Mid(msg, (Conversions.ToDouble(idx) + 8d));
            }

            // 武器名
            if (Strings.InStr(msg, "$(武器)") > 0)
            {
                if (ReferenceEquals(Commands.SelectedUnit, this))
                {
                    wname = Weapon(Commands.SelectedWeapon).Name;
                }
                else
                {
                    wname = Weapon(Commands.SelectedTWeapon).Name;
                }

                if (Strings.InStr(wname, "(") > 0)
                {
                    wname = Strings.Left(wname, Strings.InStr(wname, "(") - 1);
                }

                if (Strings.InStr(wname, "<") > 0)
                {
                    wname = Strings.Left(wname, Strings.InStr(wname, "<") - 1);
                }

                while (Strings.InStr(msg, "$(武器)") > 0)
                {
                    idx = Strings.InStr(msg, "$(武器)").ToString();
                    msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + wname + Strings.Mid(msg, (Conversions.ToDouble(idx) + 5d));
                }
            }

            // 損傷率
            while (Strings.InStr(msg, "$(損傷率)") > 0)
            {
                idx = Strings.InStr(msg, "$(損傷率)").ToString();
                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (MaxHP - HP) / MaxHP) + Strings.Mid(msg, (Conversions.ToDouble(idx) + 6d));
            }

            // 相手ユニット名
            while (Strings.InStr(msg, "$(相手ユニット)") > 0)
            {
                if (ReferenceEquals(Commands.SelectedUnit, this))
                {
                    if (Commands.SelectedTarget is object)
                    {
                        buf = Commands.SelectedTarget.Nickname;
                    }
                    else
                    {
                        buf = "";
                    }
                }
                else
                {
                    buf = Commands.SelectedUnit.Nickname;
                }

                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                if (Strings.InStr(buf, "専用") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "専用") + 2);
                }

                idx = Strings.InStr(msg, "$(相手ユニット)").ToString();
                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + buf + Strings.Mid(msg, (Conversions.ToDouble(idx) + 9d));
            }

            while (Strings.InStr(msg, "$(相手機体)") > 0)
            {
                if (ReferenceEquals(Commands.SelectedUnit, this))
                {
                    if (Commands.SelectedTarget is object)
                    {
                        buf = Commands.SelectedTarget.Nickname;
                    }
                    else
                    {
                        buf = "";
                    }
                }
                else
                {
                    buf = Commands.SelectedUnit.Nickname;
                }

                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                if (Strings.InStr(buf, "専用") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "専用") + 2);
                }

                idx = Strings.InStr(msg, "$(相手機体)").ToString();
                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + buf + Strings.Mid(msg, (Conversions.ToDouble(idx) + 7d));
            }

            // 相手パイロット名
            while (Strings.InStr(msg, "$(相手パイロット)") > 0)
            {
                if (ReferenceEquals(Commands.SelectedUnit, this))
                {
                    if (Commands.SelectedTarget is object)
                    {
                        buf = Commands.SelectedTarget.MainPilot().get_Nickname(false);
                    }
                    else
                    {
                        buf = "";
                    }
                }
                else
                {
                    buf = Commands.SelectedUnit.MainPilot().get_Nickname(false);
                }

                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                idx = Strings.InStr(msg, "$(相手パイロット)").ToString();
                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + buf + Strings.Mid(msg, (Conversions.ToDouble(idx) + 10d));
            }

            // 相手武器名
            while (Strings.InStr(msg, "$(相手武器)") > 0)
            {
                if (ReferenceEquals(Commands.SelectedUnit, this))
                {
                    if (Commands.SelectedTarget is object)
                    {
                        buf = Commands.SelectedTarget.Weapon(Commands.SelectedTWeapon).Name;
                    }
                    else
                    {
                        buf = "";
                    }
                }
                else
                {
                    buf = Commands.SelectedUnit.Weapon(Commands.SelectedWeapon).Name;
                }

                if (Strings.InStr(buf, "(") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "(") - 1);
                }

                if (Strings.InStr(buf, "<") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "<") - 1);
                }

                if (Strings.InStr(buf, "＜") > 0)
                {
                    buf = Strings.Left(buf, Strings.InStr(buf, "＜") - 1);
                }

                idx = Strings.InStr(msg, "$(相手武器)").ToString();
                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + buf + Strings.Mid(msg, (Conversions.ToDouble(idx) + 7d));
            }

            // 相手損傷率
            while (Strings.InStr(msg, "$(相手損傷率)") > 0)
            {
                idx = Strings.InStr(msg, "$(相手損傷率)").ToString();
                if (ReferenceEquals(Commands.SelectedUnit, this))
                {
                    if (Commands.SelectedTarget is object)
                    {
                        {
                            var withBlock3 = Commands.SelectedTarget;
                            buf = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (withBlock3.MaxHP - withBlock3.HP) / withBlock3.MaxHP);
                        }
                    }
                    else
                    {
                        buf = "";
                    }
                }
                else
                {
                    {
                        var withBlock4 = Commands.SelectedUnit;
                        buf = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(100 * (withBlock4.MaxHP - withBlock4.HP) / withBlock4.MaxHP);
                    }
                }

                msg = Strings.Left(msg, (Conversions.ToDouble(idx) - 1d)) + buf + Strings.Mid(msg, (Conversions.ToDouble(idx) + 8d));
            }

            if (!My.MyProject.Forms.frmMessage.Visible)
            {
                Unit argu15 = null;
                Unit argu21 = null;
                GUI.OpenMessageForm(u1: argu15, u2: argu21);
            }

            if (!string.IsNullOrEmpty(add_msg))
            {
                string argpname = "-";
                string argmsg_mode = "";
                GUI.DisplayBattleMessage(argpname, msg + "." + add_msg, msg_mode: argmsg_mode);
            }
            else
            {
                string argpname1 = "-";
                string argmsg_mode1 = "";
                GUI.DisplayBattleMessage(argpname1, msg, msg_mode: argmsg_mode1);
            }
        }

        // 解説メッセージが定義されているか？
        public bool IsSysMessageDefined(string main_situation, [Optional, DefaultParameterValue("")] string sub_situation)
        {
            bool IsSysMessageDefinedRet = default;
            string uclass, uname, msg;
            string[] situations;
            int i, ret;
            if (string.IsNullOrEmpty(sub_situation) | (main_situation ?? "") == (sub_situation ?? ""))
            {
                situations = new string[2];
                situations[1] = main_situation + "(解説)";
            }
            else
            {
                situations = new string[3];
                situations[1] = main_situation + "(" + sub_situation + ")(解説)";
                situations[2] = main_situation + "(解説)";
            }

            // ADD START MARGE
            // 拡張戦闘アニメデータで検索
            if (SRC.ExtendedAnimation)
            {
                {
                    var withBlock = SRC.EADList;
                    var loopTo = Information.UBound(situations);
                    for (i = 1; i <= loopTo; i++)
                    {
                        // 戦闘アニメ能力で指定された名称で検索
                        string argfname = "戦闘アニメ";
                        if (IsFeatureAvailable(argfname))
                        {
                            object argIndex1 = "戦闘アニメ";
                            uname = FeatureData(argIndex1);
                            object argIndex2 = uname;
                            if (withBlock.IsDefined(argIndex2))
                            {
                                MessageData localItem() { object argIndex1 = uname; var ret = withBlock.Item(argIndex1); return ret; }

                                var argu = this;
                                msg = localItem().SelectMessage(situations[i], argu);
                                if (Strings.Len(msg) > 0)
                                {
                                    IsSysMessageDefinedRet = true;
                                    return IsSysMessageDefinedRet;
                                }
                            }
                        }

                        // ユニット名称で検索
                        bool localIsDefined() { object argIndex1 = Name; var ret = withBlock.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                        if (localIsDefined())
                        {
                            MessageData localItem1() { object argIndex1 = Name; var ret = withBlock.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                            var argu1 = this;
                            msg = localItem1().SelectMessage(situations[i], argu1);
                            if (Strings.Len(msg) > 0)
                            {
                                IsSysMessageDefinedRet = true;
                                return IsSysMessageDefinedRet;
                            }
                        }

                        // ユニット愛称を修正したもので検索
                        uname = Nickname0;
                        ret = Strings.InStr(uname, "(");
                        if (ret > 1)
                        {
                            uname = Strings.Left(uname, ret - 1);
                        }

                        ret = Strings.InStr(uname, "用");
                        if (ret > 0)
                        {
                            if (ret < Strings.Len(uname))
                            {
                                uname = Strings.Mid(uname, ret + 1);
                            }
                        }

                        ret = Strings.InStr(uname, "型");
                        if (ret > 0)
                        {
                            if (ret < Strings.Len(uname))
                            {
                                uname = Strings.Mid(uname, ret + 1);
                            }
                        }

                        if (Strings.Right(uname, 4) == "カスタム")
                        {
                            uname = Strings.Left(uname, Strings.Len(uname) - 4);
                        }

                        if (Strings.Right(uname, 1) == "改")
                        {
                            uname = Strings.Left(uname, Strings.Len(uname) - 1);
                        }

                        object argIndex3 = uname;
                        if (withBlock.IsDefined(argIndex3))
                        {
                            MessageData localItem2() { object argIndex1 = uname; var ret = withBlock.Item(argIndex1); return ret; }

                            var argu2 = this;
                            msg = localItem2().SelectMessage(situations[i], argu2);
                            if (Strings.Len(msg) > 0)
                            {
                                IsSysMessageDefinedRet = true;
                                return IsSysMessageDefinedRet;
                            }
                        }

                        // ユニットクラスで検索
                        uclass = Class0;
                        object argIndex4 = uclass;
                        if (withBlock.IsDefined(argIndex4))
                        {
                            MessageData localItem3() { object argIndex1 = uclass; var ret = withBlock.Item(argIndex1); return ret; }

                            var argu3 = this;
                            msg = localItem3().SelectMessage(situations[i], argu3);
                            if (Strings.Len(msg) > 0)
                            {
                                IsSysMessageDefinedRet = true;
                                return IsSysMessageDefinedRet;
                            }
                        }

                        // 汎用
                        object argIndex6 = "汎用";
                        if (withBlock.IsDefined(argIndex6))
                        {
                            object argIndex5 = "汎用";
                            var argu4 = this;
                            msg = withBlock.Item(argIndex5).SelectMessage(situations[i], argu4);
                            if (Strings.Len(msg) > 0)
                            {
                                IsSysMessageDefinedRet = true;
                                return IsSysMessageDefinedRet;
                            }
                        }
                    }
                }
            }
            // ADD END MARGE

            // 戦闘アニメデータで検索
            {
                var withBlock1 = SRC.ADList;
                var loopTo1 = Information.UBound(situations);
                for (i = 1; i <= loopTo1; i++)
                {
                    // 戦闘アニメ能力で指定された名称で検索
                    string argfname1 = "戦闘アニメ";
                    if (IsFeatureAvailable(argfname1))
                    {
                        object argIndex7 = "戦闘アニメ";
                        uname = FeatureData(argIndex7);
                        object argIndex8 = uname;
                        if (withBlock1.IsDefined(argIndex8))
                        {
                            MessageData localItem4() { object argIndex1 = uname; var ret = withBlock1.Item(argIndex1); return ret; }

                            var argu5 = this;
                            msg = localItem4().SelectMessage(situations[i], argu5);
                            if (Strings.Len(msg) > 0)
                            {
                                IsSysMessageDefinedRet = true;
                                return IsSysMessageDefinedRet;
                            }
                        }
                    }

                    // ユニット名称で検索
                    bool localIsDefined1() { object argIndex1 = Name; var ret = withBlock1.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined1())
                    {
                        MessageData localItem5() { object argIndex1 = Name; var ret = withBlock1.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                        var argu6 = this;
                        msg = localItem5().SelectMessage(situations[i], argu6);
                        if (Strings.Len(msg) > 0)
                        {
                            IsSysMessageDefinedRet = true;
                            return IsSysMessageDefinedRet;
                        }
                    }

                    // ユニット愛称を修正したもので検索
                    uname = Nickname0;
                    ret = Strings.InStr(uname, "(");
                    if (ret > 1)
                    {
                        uname = Strings.Left(uname, ret - 1);
                    }

                    ret = Strings.InStr(uname, "用");
                    if (ret > 0)
                    {
                        if (ret < Strings.Len(uname))
                        {
                            uname = Strings.Mid(uname, ret + 1);
                        }
                    }

                    ret = Strings.InStr(uname, "型");
                    if (ret > 0)
                    {
                        if (ret < Strings.Len(uname))
                        {
                            uname = Strings.Mid(uname, ret + 1);
                        }
                    }

                    if (Strings.Right(uname, 4) == "カスタム")
                    {
                        uname = Strings.Left(uname, Strings.Len(uname) - 4);
                    }

                    if (Strings.Right(uname, 1) == "改")
                    {
                        uname = Strings.Left(uname, Strings.Len(uname) - 1);
                    }

                    object argIndex9 = uname;
                    if (withBlock1.IsDefined(argIndex9))
                    {
                        MessageData localItem6() { object argIndex1 = uname; var ret = withBlock1.Item(argIndex1); return ret; }

                        var argu7 = this;
                        msg = localItem6().SelectMessage(situations[i], argu7);
                        if (Strings.Len(msg) > 0)
                        {
                            IsSysMessageDefinedRet = true;
                            return IsSysMessageDefinedRet;
                        }
                    }

                    // ユニットクラスで検索
                    uclass = Class0;
                    object argIndex10 = uclass;
                    if (withBlock1.IsDefined(argIndex10))
                    {
                        MessageData localItem7() { object argIndex1 = uclass; var ret = withBlock1.Item(argIndex1); return ret; }

                        var argu8 = this;
                        msg = localItem7().SelectMessage(situations[i], argu8);
                        if (Strings.Len(msg) > 0)
                        {
                            IsSysMessageDefinedRet = true;
                            return IsSysMessageDefinedRet;
                        }
                    }

                    // 汎用
                    object argIndex12 = "汎用";
                    if (withBlock1.IsDefined(argIndex12))
                    {
                        object argIndex11 = "汎用";
                        var argu9 = this;
                        msg = withBlock1.Item(argIndex11).SelectMessage(situations[i], argu9);
                        if (Strings.Len(msg) > 0)
                        {
                            IsSysMessageDefinedRet = true;
                            return IsSysMessageDefinedRet;
                        }
                    }
                }
            }

            // 特殊効果データで検索
            {
                var withBlock2 = SRC.EDList;
                var loopTo2 = Information.UBound(situations);
                for (i = 1; i <= loopTo2; i++)
                {
                    // 特殊効果能力で指定された名称で検索
                    string argfname2 = "特殊効果";
                    if (IsFeatureAvailable(argfname2))
                    {
                        object argIndex13 = "特殊効果";
                        uname = FeatureData(argIndex13);
                        object argIndex14 = uname;
                        if (withBlock2.IsDefined(argIndex14))
                        {
                            MessageData localItem8() { object argIndex1 = uname; var ret = withBlock2.Item(argIndex1); return ret; }

                            var argu10 = this;
                            msg = localItem8().SelectMessage(situations[i], argu10);
                            if (Strings.Len(msg) > 0)
                            {
                                IsSysMessageDefinedRet = true;
                                return IsSysMessageDefinedRet;
                            }
                        }
                    }

                    // ユニット名称で検索
                    bool localIsDefined2() { object argIndex1 = Name; var ret = withBlock2.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined2())
                    {
                        MessageData localItem9() { object argIndex1 = Name; var ret = withBlock2.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                        var argu11 = this;
                        msg = localItem9().SelectMessage(situations[i], argu11);
                        if (Strings.Len(msg) > 0)
                        {
                            IsSysMessageDefinedRet = true;
                            return IsSysMessageDefinedRet;
                        }
                    }

                    // ユニット愛称を修正したもので検索
                    uname = Nickname0;
                    ret = Strings.InStr(uname, "(");
                    if (ret > 1)
                    {
                        uname = Strings.Left(uname, ret - 1);
                    }

                    ret = Strings.InStr(uname, "用");
                    if (ret > 0)
                    {
                        if (ret < Strings.Len(uname))
                        {
                            uname = Strings.Mid(uname, ret + 1);
                        }
                    }

                    ret = Strings.InStr(uname, "型");
                    if (ret > 0)
                    {
                        if (ret < Strings.Len(uname))
                        {
                            uname = Strings.Mid(uname, ret + 1);
                        }
                    }

                    if (Strings.Right(uname, 4) == "カスタム")
                    {
                        uname = Strings.Left(uname, Strings.Len(uname) - 4);
                    }

                    if (Strings.Right(uname, 1) == "改")
                    {
                        uname = Strings.Left(uname, Strings.Len(uname) - 1);
                    }

                    object argIndex15 = uname;
                    if (withBlock2.IsDefined(argIndex15))
                    {
                        MessageData localItem10() { object argIndex1 = uname; var ret = withBlock2.Item(argIndex1); return ret; }

                        var argu12 = this;
                        msg = localItem10().SelectMessage(situations[i], argu12);
                        if (Strings.Len(msg) > 0)
                        {
                            IsSysMessageDefinedRet = true;
                            return IsSysMessageDefinedRet;
                        }
                    }

                    // ユニットクラスで検索
                    uclass = Class0;
                    object argIndex16 = uclass;
                    if (withBlock2.IsDefined(argIndex16))
                    {
                        MessageData localItem11() { object argIndex1 = uclass; var ret = withBlock2.Item(argIndex1); return ret; }

                        var argu13 = this;
                        msg = localItem11().SelectMessage(situations[i], argu13);
                        if (Strings.Len(msg) > 0)
                        {
                            IsSysMessageDefinedRet = true;
                            return IsSysMessageDefinedRet;
                        }
                    }

                    // 汎用
                    object argIndex18 = "汎用";
                    if (withBlock2.IsDefined(argIndex18))
                    {
                        object argIndex17 = "汎用";
                        var argu14 = this;
                        msg = withBlock2.Item(argIndex17).SelectMessage(situations[i], argu14);
                        if (Strings.Len(msg) > 0)
                        {
                            IsSysMessageDefinedRet = true;
                            return IsSysMessageDefinedRet;
                        }
                    }
                }
            }

            IsSysMessageDefinedRet = false;
            return IsSysMessageDefinedRet;
        }


        // === 特殊効果関連処理 ===

        // 特殊効果データを検索
        public string SpecialEffectData(string main_situation, [Optional, DefaultParameterValue("")] string sub_situation)
        {
            string SpecialEffectDataRet = default;
            string uname, uclass;
            string[] situations;
            int i, ret;

            // シチュエーションのリストを構築
            if (string.IsNullOrEmpty(sub_situation) | (main_situation ?? "") == (sub_situation ?? ""))
            {
                situations = new string[2];
                situations[1] = main_situation;
            }
            else
            {
                situations = new string[3];
                situations[1] = main_situation + "(" + sub_situation + ")";
                situations[2] = main_situation;
            }

            var loopTo = Information.UBound(situations);
            for (i = 1; i <= loopTo; i++)
            {
                // 特殊効果能力で指定された名称で検索
                string argfname = "特殊効果";
                if (IsFeatureAvailable(argfname))
                {
                    object argIndex1 = "特殊効果";
                    uname = FeatureData(argIndex1);
                    object argIndex2 = uname;
                    if (SRC.EDList.IsDefined(argIndex2))
                    {
                        MessageData localItem() { object argIndex1 = uname; var ret = SRC.EDList.Item(argIndex1); return ret; }

                        var argu = this;
                        SpecialEffectDataRet = localItem().SelectMessage(situations[i], argu);
                        if (Strings.Len(SpecialEffectDataRet) > 0)
                        {
                            return SpecialEffectDataRet;
                        }
                    }
                }

                // ユニット名称で検索
                bool localIsDefined() { object argIndex1 = Name; var ret = SRC.EDList.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                if (localIsDefined())
                {
                    MessageData localItem1() { object argIndex1 = Name; var ret = SRC.EDList.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                    var argu1 = this;
                    SpecialEffectDataRet = localItem1().SelectMessage(situations[i], argu1);
                    if (Strings.Len(SpecialEffectDataRet) > 0)
                    {
                        return SpecialEffectDataRet;
                    }
                }

                // ユニット愛称を修正したもので検索
                uname = Nickname;
                ret = Strings.InStr(uname, "(");
                if (ret > 1)
                {
                    uname = Strings.Left(uname, ret - 1);
                }

                ret = Strings.InStr(uname, "用");
                if (ret > 0)
                {
                    if (ret < Strings.Len(uname))
                    {
                        uname = Strings.Mid(uname, ret + 1);
                    }
                }

                ret = Strings.InStr(uname, "型");
                if (ret > 0)
                {
                    if (ret < Strings.Len(uname))
                    {
                        uname = Strings.Mid(uname, ret + 1);
                    }
                }

                if (Strings.Right(uname, 4) == "カスタム")
                {
                    uname = Strings.Left(uname, Strings.Len(uname) - 4);
                }

                if (Strings.Right(uname, 1) == "改")
                {
                    uname = Strings.Left(uname, Strings.Len(uname) - 1);
                }

                object argIndex3 = uname;
                if (SRC.EDList.IsDefined(argIndex3))
                {
                    MessageData localItem2() { object argIndex1 = uname; var ret = SRC.EDList.Item(argIndex1); return ret; }

                    var argu2 = this;
                    SpecialEffectDataRet = localItem2().SelectMessage(situations[i], argu2);
                    if (Strings.Len(SpecialEffectDataRet) > 0)
                    {
                        return SpecialEffectDataRet;
                    }
                }

                // ユニットクラスで検索
                uclass = Class0;
                object argIndex4 = uclass;
                if (SRC.EDList.IsDefined(argIndex4))
                {
                    MessageData localItem3() { object argIndex1 = uclass; var ret = SRC.EDList.Item(argIndex1); return ret; }

                    var argu3 = this;
                    SpecialEffectDataRet = localItem3().SelectMessage(situations[i], argu3);
                    if (Strings.Len(SpecialEffectDataRet) > 0)
                    {
                        return SpecialEffectDataRet;
                    }
                }

                // 汎用
                object argIndex6 = "汎用";
                if (SRC.EDList.IsDefined(argIndex6))
                {
                    object argIndex5 = "汎用";
                    var argu4 = this;
                    SpecialEffectDataRet = SRC.EDList.Item(argIndex5).SelectMessage(situations[i], argu4);
                    if (Strings.Len(SpecialEffectDataRet) > 0)
                    {
                        return SpecialEffectDataRet;
                    }
                }
            }

            return SpecialEffectDataRet;
        }

        // 特殊効果データを再生
        public void SpecialEffect(string main_situation, [Optional, DefaultParameterValue("")] string sub_situation, bool keep_message_form = false)
        {
            string anime, sname;
            string[] animes;
            int idx, i, j, w = default;
            double ret;
            string buf;
            int anime_head;
            bool is_message_form_opened;
            var is_weapon = default(bool);
            var is_ability = default(bool);
            bool in_bulk;
            var wait_time = default;
            var need_refresh = default(bool);
            int prev_obj_color;
            int prev_obj_fill_color;
            int prev_obj_fill_style;
            int prev_obj_draw_width;
            string prev_obj_draw_option;
            Unit prev_selected_target;

            // 特殊効果データを検索
            anime = SpecialEffectData(main_situation, sub_situation);
            GeneralLib.TrimString(anime);

            // 表示キャンセル
            if (string.IsNullOrEmpty(anime) | anime == "-")
            {
                return;
            }

            // マウスの右ボタンでキャンセル
            if (GUI.IsRButtonPressed())
            {
                // 式評価のみ行う
                Expression.FormatMessage(anime);
                return;
            }

            string argoname = "戦闘アニメ非自動選択";
            if (SRC.BattleAnimation & !Expression.IsOptionDefined(argoname))
            {
                var loopTo = CountWeapon();
                for (i = 1; i <= loopTo; i++)
                {
                    if ((Weapon(i).Name ?? "") == (main_situation ?? ""))
                    {
                        w = i;
                        break;
                    }
                }

                if (w > 0)
                {
                    switch (Strings.LCase(anime) ?? "")
                    {
                        case "swing.wav":
                            {
                                string argattr = "武";
                                string argattr1 = "実";
                                if (Strings.InStr(main_situation, "槍") > 0 | Strings.InStr(main_situation, "スピア") > 0 | Strings.InStr(main_situation, "ランス") > 0 | Strings.InStr(main_situation, "ジャベリン") > 0)
                                {
                                    string arganame = "刺突攻撃";
                                    Effect.ShowAnimation(arganame);
                                    return;
                                }
                                else if (IsWeaponClassifiedAs(w, argattr) | IsWeaponClassifiedAs(w, argattr1))
                                {
                                    string arganame1 = "白兵武器攻撃";
                                    Effect.ShowAnimation(arganame1);
                                    return;
                                }

                                break;
                            }
                    }
                }
                else if (Strings.InStr(main_situation, "(命中)") > 0)
                {
                    switch (Strings.LCase(anime) ?? "")
                    {
                        case "break.wav":
                            {
                                string arganame2 = "打撃命中";
                                Effect.ShowAnimation(arganame2);
                                return;
                            }

                        case "combo.wav":
                            {
                                string arganame3 = "乱打命中";
                                Effect.ShowAnimation(arganame3);
                                return;
                            }

                        case "crash.wav":
                            {
                                string arganame4 = "強打命中 Crash.wav";
                                Effect.ShowAnimation(arganame4);
                                return;
                            }

                        case "explode.wav":
                            {
                                string arganame5 = "爆発命中";
                                Effect.ShowAnimation(arganame5);
                                return;
                            }

                        case "explode(far).wav":
                            {
                                string arganame6 = "超爆発命中 Explode(Far).wav";
                                Effect.ShowAnimation(arganame6);
                                return;
                            }

                        case "explode(nuclear).wav":
                            {
                                string arganame7 = "超爆発命中 Explode(Nuclear).wav";
                                Effect.ShowAnimation(arganame7);
                                return;
                            }

                        case "fire.wav":
                            {
                                string arganame8 = "炎命中";
                                Effect.ShowAnimation(arganame8);
                                return;
                            }

                        case "glass.wav":
                            {
                                string argattr2 = "冷";
                                if (IsWeaponClassifiedAs(w, argattr2))
                                {
                                    string arganame9 = "凍結命中 Glass.wav";
                                    Effect.ShowAnimation(arganame9);
                                }

                                return;
                            }

                        case "punch.wav":
                            {
                                string arganame10 = "打撃命中";
                                Effect.ShowAnimation(arganame10);
                                return;
                            }

                        case "punch(2).wav":
                        case "punch(3).wav":
                        case "punch(4).wav":
                            {
                                string arganame11 = "連打命中";
                                Effect.ShowAnimation(arganame11);
                                return;
                            }

                        case "saber.wav":
                        case "slash.wav":
                            {
                                string arganame12 = "斬撃命中 " + anime;
                                Effect.ShowAnimation(arganame12);
                                return;
                            }

                        case "shock(low).wav":
                            {
                                string arganame13 = "強打命中 Shock(Low).wav";
                                Effect.ShowAnimation(arganame13);
                                return;
                            }

                        case "stab.wav":
                            {
                                string arganame14 = "刺突命中";
                                Effect.ShowAnimation(arganame14);
                                return;
                            }

                        case "thunder.wav":
                            {
                                string arganame15 = "放電命中 Thunder.wav";
                                Effect.ShowAnimation(arganame15);
                                return;
                            }

                        case "whip.wav":
                            {
                                string arganame16 = "打撃命中 Whip.wav";
                                Effect.ShowAnimation(arganame16);
                                return;
                            }
                    }
                }
            }

            // メッセージウィンドウは表示されている？
            is_message_form_opened = My.MyProject.Forms.frmMessage.Visible;

            // オブジェクト色等を記録しておく
            prev_obj_color = Event_Renamed.ObjColor;
            prev_obj_fill_color = Event_Renamed.ObjFillColor;
            prev_obj_fill_style = Event_Renamed.ObjFillStyle;
            prev_obj_draw_width = Event_Renamed.ObjDrawWidth;
            prev_obj_draw_option = Event_Renamed.ObjDrawOption;

            // オブジェクト色等をデフォルトに戻す
            Event_Renamed.ObjColor = ColorTranslator.ToOle(Color.White);
            Event_Renamed.ObjFillColor = ColorTranslator.ToOle(Color.White);
            // UPGRADE_ISSUE: 定数 vbFSTransparent はアップグレードされませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="55B59875-9A95-4B71-9D6A-7C294BF7139D"' をクリックしてください。
            Event_Renamed.ObjFillStyle = vbFSTransparent;
            Event_Renamed.ObjDrawWidth = 1;
            Event_Renamed.ObjDrawOption = "";

            // 検索するシチュエーションが武器名かどうか調べる
            var loopTo1 = CountWeapon();
            for (i = 1; i <= loopTo1; i++)
            {
                if ((main_situation ?? "") == (Weapon(i).Name ?? ""))
                {
                    is_weapon = true;
                    break;
                }
            }

            // 検索するシチュエーションがアビリティかどうか調べる
            var loopTo2 = CountAbility();
            for (i = 1; i <= loopTo2; i++)
            {
                if ((main_situation ?? "") == (Ability(i).Name ?? ""))
                {
                    is_ability = true;
                    break;
                }
            }

            // イベント用ターゲットを記録しておく
            prev_selected_target = Event_Renamed.SelectedTargetForEvent;

            // 攻撃でもアビリティでもない場合、ターゲットが設定されていなければ
            // 自分自身をターゲットに設定する
            // (発動アニメではアニメ表示にSelectedTargetForEventが使われるため)
            if (!is_weapon & !is_ability)
            {
                if (Event_Renamed.SelectedTargetForEvent is null)
                {
                    Event_Renamed.SelectedTargetForEvent = this;
                }
            }

            // 特殊効果指定を分割
            animes = new string[2];
            anime_head = 1;
            var loopTo3 = Strings.Len(anime);
            for (i = 1; i <= loopTo3; i++)
            {
                if (Strings.Mid(anime, i, 1) == ";")
                {
                    animes[Information.UBound(animes)] = Strings.Mid(anime, anime_head, i - anime_head);
                    Array.Resize(animes, Information.UBound(animes) + 1 + 1);
                    anime_head = (i + 1);
                }
            }

            animes[Information.UBound(animes)] = Strings.Mid(anime, anime_head);
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 743599


            Input:

                    On Error GoTo ErrorHandler

             */
            var loopTo4 = Information.UBound(animes);
            for (i = 1; i <= loopTo4; i++)
            {
                anime = animes[i];

                // 式評価
                Expression.FormatMessage(anime);

                // 画面クリア？
                if (Strings.LCase(anime) == "clear")
                {
                    GUI.ClearPicture();
                    need_refresh = true;
                    goto NextAnime;
                }

                // 特殊効果
                switch (Strings.LCase(Strings.Right(GeneralLib.LIndex(anime, 1), 4)) ?? "")
                {
                    case ".wav":
                    case ".mp3":
                        {
                            // 効果音
                            Sound.PlayWave(anime);
                            if (wait_time > 0)
                            {
                                if (need_refresh)
                                {
                                    // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                                    GUI.MainForm.picMain(0).Refresh();
                                    need_refresh = false;
                                }

                                GUI.Sleep(wait_time);
                                wait_time = 0;
                            }

                            goto NextAnime;
                            break;
                        }

                    case ".bmp":
                    case ".jpg":
                    case ".gif":
                    case ".png":
                        {
                            // カットインの表示
                            if (wait_time > 0)
                            {
                                anime = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(wait_time / 100d) + ";" + anime;
                                wait_time = 0;
                                need_refresh = false;
                            }
                            else if (Strings.Left(anime, 1) == "@")
                            {
                                need_refresh = false;
                            }
                            else
                            {
                                need_refresh = true;
                            }

                            string argpname = "-";
                            string argmsg_mode = "";
                            GUI.DisplayBattleMessage(argpname, anime, msg_mode: argmsg_mode);
                            goto NextAnime;
                            break;
                        }
                }

                switch (Strings.LCase(GeneralLib.LIndex(anime, 1)) ?? "")
                {
                    case "line":
                    case "circle":
                    case "arc":
                    case "oval":
                    case "color":
                    case "fillcolor":
                    case "fillstyle":
                    case "drawwidth":
                        {
                            // 画面処理コマンド
                            if (wait_time > 0)
                            {
                                anime = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(wait_time / 100d) + ";" + anime;
                                wait_time = 0;
                                need_refresh = false;
                            }
                            else
                            {
                                need_refresh = true;
                            }

                            string argpname1 = "-";
                            string argmsg_mode1 = "";
                            GUI.DisplayBattleMessage(argpname1, anime, msg_mode: argmsg_mode1);
                            goto NextAnime;
                            break;
                        }

                    case "center":
                        {
                            // 指定したユニットを中央表示
                            string argexpr = GeneralLib.ListIndex(anime, 2);
                            buf = Expression.GetValueAsString(argexpr);
                            object argIndex2 = buf;
                            if (SRC.UList.IsDefined(argIndex2))
                            {
                                object argIndex1 = buf;
                                {
                                    var withBlock = SRC.UList.Item(argIndex1);
                                    GUI.Center(withBlock.x, withBlock.y);
                                    GUI.RedrawScreen();
                                    need_refresh = false;
                                }
                            }

                            goto NextAnime;
                            break;
                        }

                    case "keep":
                        {
                            // そのまま終了
                            break;
                        }
                }

                // ウェイト？
                if (Information.IsNumeric(anime))
                {
                    wait_time = (100d * Conversions.ToDouble(anime));
                    goto NextAnime;
                }

                // メッセージ表示として処理
                if (wait_time > 0)
                {
                    anime = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(wait_time / 100d) + ";" + anime;
                    wait_time = 0;
                }

                if (!My.MyProject.Forms.frmMessage.Visible)
                {
                    if (ReferenceEquals(Commands.SelectedTarget, this))
                    {
                        var argu1 = this;
                        Unit argu2 = null;
                        GUI.OpenMessageForm(argu1, u2: argu2);
                    }
                    else
                    {
                        var argu21 = this;
                        GUI.OpenMessageForm(Commands.SelectedTarget, argu21);
                    }
                }

                string argpname2 = "-";
                string argmsg_mode2 = "";
                GUI.DisplayBattleMessage(argpname2, anime, msg_mode: argmsg_mode2);
                goto NextAnime;
                NextAnime:
                ;
            }

            string argoname1 = "戦闘アニメ非自動選択";
            if (SRC.BattleAnimation & !GUI.IsPictureDrawn & !Expression.IsOptionDefined(argoname1))
            {
                if (w > 0)
                {
                    string arganame17 = "デフォルト攻撃";
                    Effect.ShowAnimation(arganame17);
                }
                else if (Strings.InStr(main_situation, "(命中)") > 0)
                {
                    string arganame18 = "ダメージ命中 -.wav";
                    Effect.ShowAnimation(arganame18);
                }
            }

            // 特殊効果再生後にウェイトを入れる？
            if (need_refresh)
            {
                // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                GUI.MainForm.picMain(0).Refresh();
                need_refresh = false;
            }

            if (wait_time > 0)
            {
                GUI.Sleep(wait_time);
                wait_time = 0;
            }

            // 画像を消去しておく
            if (GUI.IsPictureDrawn & Strings.InStr(main_situation, "(準備)") == 0 & Strings.LCase(anime) != "keep")
            {
                GUI.ClearPicture();
                // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                GUI.MainForm.picMain(0).Refresh();
            }

            // 最初から表示されていたのでなければメッセージウィンドウを閉じる
            if (!is_message_form_opened & !keep_message_form)
            {
                GUI.CloseMessageForm();
            }

            // オブジェクト色等を元に戻す
            Event_Renamed.ObjColor = prev_obj_color;
            Event_Renamed.ObjFillColor = prev_obj_fill_color;
            Event_Renamed.ObjFillStyle = prev_obj_fill_style;
            Event_Renamed.ObjDrawWidth = prev_obj_draw_width;
            Event_Renamed.ObjDrawOption = prev_obj_draw_option;

            // イベント用ターゲットを元に戻す
            Event_Renamed.SelectedTargetForEvent = prev_selected_target;
            return;
            ErrorHandler:
            ;
            if (Strings.Len(Event_Renamed.EventErrorMessage) > 0)
            {
                Event_Renamed.DisplayEventErrorMessage(Event_Renamed.CurrentLineNum, Event_Renamed.EventErrorMessage);
                Event_Renamed.EventErrorMessage = "";
            }
            else
            {
                Event_Renamed.DisplayEventErrorMessage(Event_Renamed.CurrentLineNum, "");
            }
        }

        // 特殊効果データが定義されているか？
        public bool IsSpecialEffectDefined(string main_situation, [Optional, DefaultParameterValue("")] string sub_situation)
        {
            bool IsSpecialEffectDefinedRet = default;
            string msg;
            msg = SpecialEffectData(main_situation, sub_situation);
            if (Strings.Len(msg) > 0)
            {
                IsSpecialEffectDefinedRet = true;
            }

            return IsSpecialEffectDefinedRet;
        }


        // === 戦闘アニメ関連処理 ===

        // 戦闘アニメデータを検索
        // MOD START MARGE
        // Public Function AnimationData(main_situation As String, sub_situation As String) As String
        public string AnimationData(string main_situation, string sub_situation, bool ext_anime_only = false)
        {
            string AnimationDataRet = default;
            // MOD END MARGE
            string uname, uclass;
            string[] situations;
            int i, ret;
            if (!SRC.BattleAnimation)
            {
                return AnimationDataRet;
            }

            // シチュエーションのリストを構築
            if (string.IsNullOrEmpty(sub_situation) | (main_situation ?? "") == (sub_situation ?? ""))
            {
                situations = new string[2];
                situations[1] = main_situation;
            }
            else
            {
                situations = new string[3];
                situations[1] = main_situation + "(" + sub_situation + ")";
                situations[2] = main_situation;
            }

            var loopTo = Information.UBound(situations);
            for (i = 1; i <= loopTo; i++)
            {
                // 戦闘アニメ能力で指定された名称で検索
                string argfname = "戦闘アニメ";
                if (IsFeatureAvailable(argfname))
                {
                    object argIndex1 = "戦闘アニメ";
                    uname = FeatureData(argIndex1);
                    // MOD START MARGE
                    // If ADList.IsDefined(uname) Then
                    // AnimationData = ADList.Item(uname).SelectMessage(situations(i), Me)
                    // If Len(AnimationData) > 0 Then
                    // Exit Function
                    // End If
                    // End If
                    if (SRC.ExtendedAnimation)
                    {
                        object argIndex2 = uname;
                        if (SRC.EADList.IsDefined(argIndex2))
                        {
                            MessageData localItem() { object argIndex1 = uname; var ret = SRC.EADList.Item(argIndex1); return ret; }

                            var argu = this;
                            AnimationDataRet = localItem().SelectMessage(situations[i], argu);
                            if (Strings.Len(AnimationDataRet) > 0)
                            {
                                return AnimationDataRet;
                            }
                        }
                    }

                    if (!ext_anime_only)
                    {
                        object argIndex3 = uname;
                        if (SRC.ADList.IsDefined(argIndex3))
                        {
                            MessageData localItem1() { object argIndex1 = uname; var ret = SRC.ADList.Item(argIndex1); return ret; }

                            var argu1 = this;
                            AnimationDataRet = localItem1().SelectMessage(situations[i], argu1);
                            if (Strings.Len(AnimationDataRet) > 0)
                            {
                                return AnimationDataRet;
                            }
                        }
                    }
                    // MOD END MARGE
                }

                // ユニット名称で検索
                // MOD START MARGE
                // If ADList.IsDefined(Name) Then
                // AnimationData = ADList.Item(Name).SelectMessage(situations(i), Me)
                // If Len(AnimationData) > 0 Then
                // Exit Function
                // End If
                // End If
                if (SRC.ExtendedAnimation)
                {
                    bool localIsDefined() { object argIndex1 = Name; var ret = SRC.EADList.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined())
                    {
                        MessageData localItem2() { object argIndex1 = Name; var ret = SRC.EADList.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                        var argu2 = this;
                        AnimationDataRet = localItem2().SelectMessage(situations[i], argu2);
                        if (Strings.Len(AnimationDataRet) > 0)
                        {
                            return AnimationDataRet;
                        }
                    }
                }

                if (!ext_anime_only)
                {
                    bool localIsDefined1() { object argIndex1 = Name; var ret = SRC.ADList.IsDefined(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                    if (localIsDefined1())
                    {
                        MessageData localItem3() { object argIndex1 = Name; var ret = SRC.ADList.Item(argIndex1); Name = Conversions.ToString(argIndex1); return ret; }

                        var argu3 = this;
                        AnimationDataRet = localItem3().SelectMessage(situations[i], argu3);
                        if (Strings.Len(AnimationDataRet) > 0)
                        {
                            return AnimationDataRet;
                        }
                    }
                }
                // MOD END MARGE

                // ユニット愛称を修正したもので検索
                uname = Nickname0;
                ret = Strings.InStr(uname, "(");
                if (ret > 1)
                {
                    uname = Strings.Left(uname, ret - 1);
                }

                ret = Strings.InStr(uname, "用");
                if (ret > 0)
                {
                    if (ret < Strings.Len(uname))
                    {
                        uname = Strings.Mid(uname, ret + 1);
                    }
                }

                ret = Strings.InStr(uname, "型");
                if (ret > 0)
                {
                    if (ret < Strings.Len(uname))
                    {
                        uname = Strings.Mid(uname, ret + 1);
                    }
                }

                if (Strings.Right(uname, 4) == "カスタム")
                {
                    uname = Strings.Left(uname, Strings.Len(uname) - 4);
                }

                if (Strings.Right(uname, 1) == "改")
                {
                    uname = Strings.Left(uname, Strings.Len(uname) - 1);
                }
                // MOD START MARGE
                // If ADList.IsDefined(uname) Then
                // AnimationData = ADList.Item(uname).SelectMessage(situations(i), Me)
                // If Len(AnimationData) > 0 Then
                // Exit Function
                // End If
                // End If
                if (SRC.ExtendedAnimation)
                {
                    object argIndex4 = uname;
                    if (SRC.EADList.IsDefined(argIndex4))
                    {
                        MessageData localItem4() { object argIndex1 = uname; var ret = SRC.EADList.Item(argIndex1); return ret; }

                        var argu4 = this;
                        AnimationDataRet = localItem4().SelectMessage(situations[i], argu4);
                        if (Strings.Len(AnimationDataRet) > 0)
                        {
                            return AnimationDataRet;
                        }
                    }
                }

                if (!ext_anime_only)
                {
                    object argIndex5 = uname;
                    if (SRC.ADList.IsDefined(argIndex5))
                    {
                        MessageData localItem5() { object argIndex1 = uname; var ret = SRC.ADList.Item(argIndex1); return ret; }

                        var argu5 = this;
                        AnimationDataRet = localItem5().SelectMessage(situations[i], argu5);
                        if (Strings.Len(AnimationDataRet) > 0)
                        {
                            return AnimationDataRet;
                        }
                    }
                }
                // MOD END MARGE

                // ユニットクラスで検索
                uclass = Class0;
                // MOD START MARGE
                // If ADList.IsDefined(uclass) Then
                // AnimationData = ADList.Item(uclass).SelectMessage(situations(i), Me)
                // If Len(AnimationData) > 0 Then
                // Exit Function
                // End If
                // End If
                if (SRC.ExtendedAnimation)
                {
                    object argIndex6 = uclass;
                    if (SRC.EADList.IsDefined(argIndex6))
                    {
                        MessageData localItem6() { object argIndex1 = uclass; var ret = SRC.EADList.Item(argIndex1); return ret; }

                        var argu6 = this;
                        AnimationDataRet = localItem6().SelectMessage(situations[i], argu6);
                        if (Strings.Len(AnimationDataRet) > 0)
                        {
                            return AnimationDataRet;
                        }
                    }
                }

                if (!ext_anime_only)
                {
                    object argIndex7 = uclass;
                    if (SRC.ADList.IsDefined(argIndex7))
                    {
                        MessageData localItem7() { object argIndex1 = uclass; var ret = SRC.ADList.Item(argIndex1); return ret; }

                        var argu7 = this;
                        AnimationDataRet = localItem7().SelectMessage(situations[i], argu7);
                        if (Strings.Len(AnimationDataRet) > 0)
                        {
                            return AnimationDataRet;
                        }
                    }
                }
                // MOD END MARGE

                // 汎用
                // MOD START MARGE
                // If ADList.IsDefined("汎用") Then
                // AnimationData = ADList.Item("汎用").SelectMessage(situations(i), Me)
                // If Len(AnimationData) > 0 Then
                // Exit Function
                // End If
                // End If
                if (SRC.ExtendedAnimation)
                {
                    object argIndex9 = "汎用";
                    if (SRC.EADList.IsDefined(argIndex9))
                    {
                        object argIndex8 = "汎用";
                        var argu8 = this;
                        AnimationDataRet = SRC.EADList.Item(argIndex8).SelectMessage(situations[i], argu8);
                        if (Strings.Len(AnimationDataRet) > 0)
                        {
                            return AnimationDataRet;
                        }
                    }
                }

                if (!ext_anime_only)
                {
                    object argIndex11 = "汎用";
                    if (SRC.ADList.IsDefined(argIndex11))
                    {
                        object argIndex10 = "汎用";
                        var argu9 = this;
                        AnimationDataRet = SRC.ADList.Item(argIndex10).SelectMessage(situations[i], argu9);
                        if (Strings.Len(AnimationDataRet) > 0)
                        {
                            return AnimationDataRet;
                        }
                    }
                }
                // MOD END MARGE
            }

            return AnimationDataRet;
        }

        // 戦闘アニメを再生
        public void PlayAnimation(string main_situation, [Optional, DefaultParameterValue("")] string sub_situation, bool keep_message_form = false)
        {
            string anime, sname = default;
            string[] animes;
            int j, i, idx;
            var ret = default(double);
            var buf = default(string);
            int anime_head;
            bool is_message_form_opened;
            var is_weapon = default(bool);
            var is_ability = default(bool);
            var in_bulk = default(bool);
            var wait_time = default;
            var need_refresh = default(bool);
            int prev_obj_color;
            int prev_obj_fill_color;
            int prev_obj_fill_style;
            int prev_obj_draw_width;
            string prev_obj_draw_option;
            Unit prev_selected_target;

            // 戦闘アニメデータを検索
            anime = AnimationData(main_situation, sub_situation);

            // 見つからなかった場合は一括指定を試してみる
            if (string.IsNullOrEmpty(anime))
            {
                switch (Strings.Right(main_situation, 4) ?? "")
                {
                    case "(準備)":
                    case "(攻撃)":
                    case "(命中)":
                        {
                            string argmain_situation = Strings.Left(main_situation, Strings.Len(main_situation) - 4);
                            anime = AnimationData(argmain_situation, sub_situation);
                            in_bulk = true;
                            break;
                        }

                    case "(発動)":
                        {
                            string argmain_situation1 = Strings.Left(main_situation, Strings.Len(main_situation) - 4);
                            anime = AnimationData(argmain_situation1, sub_situation);
                            break;
                        }
                }
            }

            GeneralLib.TrimString(anime);

            // 表示キャンセル
            if (string.IsNullOrEmpty(anime) | anime == "-")
            {
                return;
            }

            // マウスの右ボタンでキャンセル
            if (GUI.IsRButtonPressed())
            {
                // MOD START MARGE
                // '式評価のみ行う
                // FormatMessage anime
                // Exit Sub
                // アニメの終了処理はキャンセルしない
                if (main_situation != "終了" & Strings.Right(main_situation, 4) != "(終了)")
                {
                    // 式評価のみ行う
                    Expression.FormatMessage(anime);
                    return;
                }
                // MOD END MARGE
            }

            // メッセージウィンドウは表示されている？
            is_message_form_opened = My.MyProject.Forms.frmMessage.Visible;

            // オブジェクト色等を記録しておく
            prev_obj_color = Event_Renamed.ObjColor;
            prev_obj_fill_color = Event_Renamed.ObjFillColor;
            prev_obj_fill_style = Event_Renamed.ObjFillStyle;
            prev_obj_draw_width = Event_Renamed.ObjDrawWidth;
            prev_obj_draw_option = Event_Renamed.ObjDrawOption;

            // オブジェクト色等をデフォルトに戻す
            Event_Renamed.ObjColor = ColorTranslator.ToOle(Color.White);
            Event_Renamed.ObjFillColor = ColorTranslator.ToOle(Color.White);
            // UPGRADE_ISSUE: 定数 vbFSTransparent はアップグレードされませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="55B59875-9A95-4B71-9D6A-7C294BF7139D"' をクリックしてください。
            Event_Renamed.ObjFillStyle = vbFSTransparent;
            Event_Renamed.ObjDrawWidth = 1;
            Event_Renamed.ObjDrawOption = "";

            // 検索するシチュエーションが武器名かどうか調べる
            var loopTo = CountWeapon();
            for (i = 1; i <= loopTo; i++)
            {
                if ((main_situation ?? "") == (Weapon(i).Name + "(攻撃)" ?? ""))
                {
                    is_weapon = true;
                    break;
                }
            }

            // 検索するシチュエーションがアビリティかどうか調べる
            var loopTo1 = CountAbility();
            for (i = 1; i <= loopTo1; i++)
            {
                if ((main_situation ?? "") == (Ability(i).Name + "(発動)" ?? ""))
                {
                    is_ability = true;
                    break;
                }
            }

            // イベント用ターゲットを記録しておく
            prev_selected_target = Event_Renamed.SelectedTargetForEvent;

            // 攻撃でもアビリティでもない場合、ターゲットが設定されていなければ
            // 自分自身をターゲットに設定する
            // (発動アニメではアニメ表示にSelectedTargetForEventが使われるため)
            if (!is_weapon & !is_ability)
            {
                if (Event_Renamed.SelectedTargetForEvent is null)
                {
                    Event_Renamed.SelectedTargetForEvent = this;
                }
            }

            // アニメ指定を分割
            animes = new string[2];
            anime_head = 1;
            var loopTo2 = Strings.Len(anime);
            for (i = 1; i <= loopTo2; i++)
            {
                if (Strings.Mid(anime, i, 1) == ";")
                {
                    animes[Information.UBound(animes)] = Strings.Mid(anime, anime_head, i - anime_head);
                    Array.Resize(animes, Information.UBound(animes) + 1 + 1);
                    anime_head = (i + 1);
                }
            }

            animes[Information.UBound(animes)] = Strings.Mid(anime, anime_head);
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 761038


            Input:

                    On Error GoTo ErrorHandler

             */
            var loopTo3 = Information.UBound(animes);
            for (i = 1; i <= loopTo3; i++)
            {
                anime = animes[i];

                // 最後に実行されたのがサブルーチン呼び出しかどうかを判定するため
                // サブルーチン名をあらかじめクリアしておく
                sname = "";

                // 式評価
                Expression.FormatMessage(anime);

                // 画面クリア？
                if (Strings.LCase(anime) == "clear")
                {
                    GUI.ClearPicture();
                    need_refresh = true;
                    goto NextAnime;
                }

                // 戦闘アニメ以外の特殊効果
                switch (Strings.LCase(Strings.Right(GeneralLib.LIndex(anime, 1), 4)) ?? "")
                {
                    case ".wav":
                    case ".mp3":
                        {
                            // 効果音
                            Sound.PlayWave(anime);
                            if (wait_time > 0)
                            {
                                if (need_refresh)
                                {
                                    // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                                    GUI.MainForm.picMain(0).Refresh();
                                    need_refresh = false;
                                }

                                GUI.Sleep(wait_time);
                                wait_time = 0;
                            }

                            goto NextAnime;
                            break;
                        }

                    case ".bmp":
                    case ".jpg":
                    case ".gif":
                    case ".png":
                        {
                            // カットインの表示
                            if (wait_time > 0)
                            {
                                anime = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(wait_time / 100d) + ";" + anime;
                                wait_time = 0;
                                need_refresh = false;
                            }
                            else if (Strings.Left(anime, 1) == "@")
                            {
                                need_refresh = false;
                            }
                            else
                            {
                                need_refresh = true;
                            }

                            string argpname = "-";
                            string argmsg_mode = "";
                            GUI.DisplayBattleMessage(argpname, anime, msg_mode: argmsg_mode);
                            goto NextAnime;
                            break;
                        }
                }

                switch (Strings.LCase(GeneralLib.LIndex(anime, 1)) ?? "")
                {
                    case "line":
                    case "circle":
                    case "arc":
                    case "oval":
                    case "color":
                    case "fillcolor":
                    case "fillstyle":
                    case "drawwidth":
                        {
                            // 画面処理コマンド
                            if (wait_time > 0)
                            {
                                anime = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(wait_time / 100d) + ";" + anime;
                                wait_time = 0;
                                need_refresh = false;
                            }
                            else
                            {
                                need_refresh = true;
                            }

                            string argpname1 = "-";
                            string argmsg_mode1 = "";
                            GUI.DisplayBattleMessage(argpname1, anime, msg_mode: argmsg_mode1);
                            goto NextAnime;
                            break;
                        }

                    case "center":
                        {
                            // 指定したユニットを中央表示
                            string argexpr = GeneralLib.ListIndex(anime, 2);
                            buf = Expression.GetValueAsString(argexpr);
                            object argIndex2 = buf;
                            if (SRC.UList.IsDefined(argIndex2))
                            {
                                object argIndex1 = buf;
                                {
                                    var withBlock = SRC.UList.Item(argIndex1);
                                    GUI.Center(withBlock.x, withBlock.y);
                                    GUI.RedrawScreen();
                                    need_refresh = false;
                                }
                            }

                            goto NextAnime;
                            break;
                        }

                    case "keep":
                        {
                            // そのまま終了
                            break;
                        }
                }

                // ウェイト？
                if (Information.IsNumeric(anime))
                {
                    wait_time = (100d * Conversions.ToDouble(anime));
                    goto NextAnime;
                }

                // サブルーチンの呼び出しが確定

                // 戦闘アニメ再生用のサブルーチン名を作成
                sname = GeneralLib.LIndex(anime, 1);
                if (Strings.Left(sname, 1) == "@")
                {
                    sname = Strings.Mid(sname, 2);
                }
                else if (is_weapon)
                {
                    // 武器名の場合
                    sname = "戦闘アニメ_" + sname + "攻撃";
                }
                else
                {
                    // その他の場合
                    // 括弧を含んだ武器名に対応するため、"("は後ろから検索
                    string argstr2 = "(";
                    idx = GeneralLib.InStr2(main_situation, argstr2);

                    // 変形系のシチュエーションではサフィックスを無視
                    if (idx > 0)
                    {
                        switch (Strings.Left(main_situation, idx - 1) ?? "")
                        {
                            case "変形":
                            case "ハイパーモード":
                            case "ノーマルモード":
                            case "パーツ分離":
                            case "合体":
                            case "分離":
                                {
                                    idx = 0;
                                    break;
                                }
                        }
                    }

                    // 武器名(攻撃無効化)の場合もサフィックスを無視
                    if (idx > 0)
                    {
                        if (Strings.Mid(main_situation, idx) == "(攻撃無効化)")
                        {
                            idx = 0;
                        }
                    }

                    if (idx > 0)
                    {
                        // サフィックスあり
                        sname = "戦闘アニメ_" + sname + Strings.Mid(main_situation, idx + 1, Strings.Len(main_situation) - idx - 1);
                    }
                    else
                    {
                        sname = "戦闘アニメ_" + sname + "発動";
                    }
                }

                // サブルーチンが見つからなかった
                if (Event_Renamed.FindNormalLabel(sname) == 0)
                {
                    if (in_bulk)
                    {
                        // 一括指定を利用している場合
                        switch (Strings.Right(main_situation, 4) ?? "")
                        {
                            case "(準備)":
                                {
                                    // 表示をキャンセル
                                    goto NextAnime;
                                    break;
                                }

                            case "(攻撃)":
                                {
                                    // 複数のアニメ指定がある場合は諦めて他のものを使う
                                    if (Information.UBound(animes) > 1)
                                    {
                                        goto NextAnime;
                                    }
                                    // そうでなければ「デフォルト」を使用
                                    sname = "戦闘アニメ_デフォルト攻撃";
                                    break;
                                }

                            case "(命中)":
                                {
                                    // 複数のアニメ指定がある場合は諦めて他のものを使う
                                    if (Information.UBound(animes) > 1)
                                    {
                                        goto NextAnime;
                                    }
                                    // そうでなければ「ダメージ」を使用
                                    sname = "戦闘アニメ_ダメージ命中";
                                    break;
                                }
                        }
                    }
                    else
                    {
                        if (wait_time > 0)
                        {
                            anime = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(wait_time / 100d) + ";" + anime;
                            wait_time = 0;
                        }

                        if (!My.MyProject.Forms.frmMessage.Visible)
                        {
                            if (ReferenceEquals(Commands.SelectedTarget, this))
                            {
                                var argu1 = this;
                                Unit argu2 = null;
                                GUI.OpenMessageForm(argu1, u2: argu2);
                            }
                            else
                            {
                                var argu21 = this;
                                GUI.OpenMessageForm(Commands.SelectedTarget, argu21);
                            }
                        }

                        string argpname2 = "-";
                        string argmsg_mode2 = "";
                        GUI.DisplayBattleMessage(argpname2, anime, msg_mode: argmsg_mode2);
                        goto NextAnime;
                    }
                }

                sname = "`" + sname + "`";

                // 引数の構築
                var loopTo4 = GeneralLib.ListLength(anime);
                for (j = 2; j <= loopTo4; j++)
                    sname = sname + "," + GeneralLib.ListIndex(anime, j);
                if (in_bulk)
                {
                    sname = sname + ",`一括指定`";
                }

                // 戦闘アニメ再生前にウェイトを入れる
                if (need_refresh)
                {
                    // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                    GUI.MainForm.picMain(0).Refresh();
                    need_refresh = false;
                }

                if (wait_time > 0)
                {
                    GUI.Sleep(wait_time);
                    wait_time = 0;
                }

                // 画像描画が行われたかどうかの判定のためにフラグを初期化
                GUI.IsPictureDrawn = false;

                // 戦闘アニメ再生
                Event_Renamed.SaveBasePoint();
                string argexpr1 = "Call(" + sname + ")";
                Expression.CallFunction(argexpr1, Expression.ValueType.StringType, buf, ret);
                Event_Renamed.RestoreBasePoint();

                // 画像を消去しておく
                if (GUI.IsPictureDrawn & Strings.LCase(buf) != "keep")
                {
                    GUI.ClearPicture();
                    // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                    GUI.MainForm.picMain(0).Refresh();
                }

                NextAnime:
                ;
            }

            // 戦闘アニメ再生後にウェイトを入れる？
            if (need_refresh)
            {
                // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                GUI.MainForm.picMain(0).Refresh();
                need_refresh = false;
            }

            if (wait_time > 0)
            {
                GUI.Sleep(wait_time);
                wait_time = 0;
            }

            // 画像を消去しておく
            if (GUI.IsPictureDrawn & string.IsNullOrEmpty(sname) & Strings.InStr(main_situation, "(準備)") == 0 & Strings.LCase(anime) != "keep")
            {
                GUI.ClearPicture();
                // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                GUI.MainForm.picMain(0).Refresh();
            }

            // 最初から表示されていたのでなければメッセージウィンドウを閉じる
            if (!is_message_form_opened & !keep_message_form)
            {
                GUI.CloseMessageForm();
            }

            // オブジェクト色等を元に戻す
            Event_Renamed.ObjColor = prev_obj_color;
            Event_Renamed.ObjFillColor = prev_obj_fill_color;
            Event_Renamed.ObjFillStyle = prev_obj_fill_style;
            Event_Renamed.ObjDrawWidth = prev_obj_draw_width;
            Event_Renamed.ObjDrawOption = prev_obj_draw_option;

            // イベント用ターゲットを元に戻す
            Event_Renamed.SelectedTargetForEvent = prev_selected_target;
            return;
            ErrorHandler:
            ;
            if (Strings.Len(Event_Renamed.EventErrorMessage) > 0)
            {
                Event_Renamed.DisplayEventErrorMessage(Event_Renamed.CurrentLineNum, Event_Renamed.EventErrorMessage);
                Event_Renamed.EventErrorMessage = "";
            }
            else
            {
                Event_Renamed.DisplayEventErrorMessage(Event_Renamed.CurrentLineNum, "");
            }
        }

        // 戦闘アニメが定義されているか？
        // MOD START MARGE
        // Public Function IsAnimationDefined(main_situation As String, _
        // '    Optional sub_situation As String) As Boolean
        public bool IsAnimationDefined(string main_situation, [Optional, DefaultParameterValue("")] string sub_situation, bool ext_anime_only = false)
        {
            bool IsAnimationDefinedRet = default;
            // MOD END MARGE
            string anime;

            // MOD START MARGE
            // anime = AnimationData(main_situation, sub_situation)
            anime = AnimationData(main_situation, sub_situation, ext_anime_only);
            // MOD END MARGE

            if (Strings.Len(anime) > 0)
            {
                IsAnimationDefinedRet = true;
            }
            else
            {
                IsAnimationDefinedRet = false;
            }

            return IsAnimationDefinedRet;
        }



        // ユニットを(new_x,new_y)に配置
        public void StandBy(int new_x, int new_y, string smode = "")
        {
            int j, i, k;

            // とりあえず地形を考慮せずにデフォルトのポジションを決めておく
            // (Createコマンドの後で空中移動用アイテムを付けるときのため)
            for (i = 0; i <= 20; i++)
            {
                var loopTo = GeneralLib.MinLng(new_x + i, Map.MapWidth);
                for (j = GeneralLib.MaxLng(new_x - i, 1); j <= loopTo; j++)
                {
                    var loopTo1 = GeneralLib.MinLng(new_y + i, Map.MapHeight);
                    for (k = GeneralLib.MaxLng(new_y - i, 1); k <= loopTo1; k++)
                    {
                        if ((Math.Abs((new_x - j)) + Math.Abs((new_y - k))) == i)
                        {
                            if (Map.MapDataForUnit[j, k] is null)
                            {
                                x = j;
                                y = k;
                                goto DefaultPositionDefined;
                            }
                        }
                    }
                }
            }

            DefaultPositionDefined:
            ;


            // 空いた場所を検索
            for (i = 0; i <= 20; i++)
            {
                // ユニット同士を隣接させずに配置する？
                // MOD START MARGE
                // If smode = "部隊配置" Then
                if (Strings.InStr(smode, "部隊配置") > 0)
                {
                    // MOD END MARGE
                    if (i % 2 != 0)
                    {
                        goto NextDistance;
                    }
                }
                // 指定した場所の周りを調べる
                var loopTo2 = GeneralLib.MinLng(new_x + i, Map.MapWidth);
                for (j = GeneralLib.MaxLng(new_x - i, 1); j <= loopTo2; j++)
                {
                    var loopTo3 = GeneralLib.MinLng(new_y + i, Map.MapHeight);
                    for (k = GeneralLib.MaxLng(new_y - i, 1); k <= loopTo3; k++)
                    {
                        if ((Math.Abs((new_x - j)) + Math.Abs((new_y - k))) != i)
                        {
                            goto NextLoop;
                        }

                        // 既に他のユニットがいる？
                        if (Map.MapDataForUnit[j, k] is object)
                        {
                            goto NextLoop;
                        }

                        // 進入不能の地形？
                        if (Map.TerrainMoveCost(j, k) > 100)
                        {
                            goto NextLoop;
                        }

                        switch (Map.TerrainClass(j, k) ?? "")
                        {
                            case "空":
                                {
                                    string argarea_name = "空";
                                    if (!IsTransAvailable(argarea_name))
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }

                            case "水":
                                {
                                    string argarea_name1 = "水上";
                                    string argarea_name2 = "空";
                                    if (!IsTransAvailable(argarea_name1) & !IsTransAvailable(argarea_name2) & get_Adaption(3) == 0)
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }

                            case "深水":
                                {
                                    string argarea_name3 = "水上";
                                    string argarea_name4 = "空";
                                    string argarea_name5 = "水";
                                    if (!IsTransAvailable(argarea_name3) & !IsTransAvailable(argarea_name4) & !IsTransAvailable(argarea_name5))
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }
                        }

                        // 空き位置が見つかった
                        x = j;
                        y = k;
                        goto ExitFor;
                        NextLoop:
                        ;
                    }
                }

                NextDistance:
                ;
            }

            ExitFor:
            ;


            // 空いた場所がなかった？
            if (x == 0 & y == 0)
            {
                Status_Renamed = "待機";
                return;
            }

            // 他の形態と格納したユニットの座標も合わせておく
            var loopTo4 = CountOtherForm();
            for (i = 1; i <= loopTo4; i++)
            {
                object argIndex1 = i;
                {
                    var withBlock = OtherForm(argIndex1);
                    withBlock.x = x;
                    withBlock.y = y;
                }
            }

            var loopTo5 = CountUnitOnBoard();
            for (i = 1; i <= loopTo5; i++)
            {
                object argIndex2 = i;
                {
                    var withBlock1 = UnitOnBoard(argIndex2);
                    withBlock1.x = x;
                    withBlock1.y = y;
                }
            }

            // 格納されていた場合はあらかじめ降ろしておく
            if (Status_Renamed == "格納")
            {
                foreach (Unit u in SRC.UList)
                {
                    var loopTo6 = u.CountUnitOnBoard();
                    for (i = 1; i <= loopTo6; i++)
                    {
                        Unit localUnitOnBoard() { object argIndex1 = i; var ret = u.UnitOnBoard(argIndex1); return ret; }

                        if ((ID ?? "") == (localUnitOnBoard().ID ?? ""))
                        {
                            object argIndex3 = ID;
                            u.UnloadUnit(argIndex3);
                            goto EndLoop;
                        }
                    }
                }

                EndLoop:
                ;
            }

            // Statusを更新
            Status_Renamed = "出撃";
            var loopTo7 = CountOtherForm();
            for (i = 1; i <= loopTo7; i++)
            {
                Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                localOtherForm().Status_Renamed = "他形態";
            }

            // ユニットのいる地形は？
            switch (Map.TerrainClass(x, y) ?? "")
            {
                case "空":
                    {
                        Area = "空中";
                        break;
                    }

                case "陸":
                    {
                        string argarea_name6 = "地中";
                        string argarea_name7 = "空";
                        string argarea_name8 = "陸";
                        if (IsTransAvailable(argarea_name6) & Area == "地中")
                        {
                            Area = "地中";
                        }
                        else if (IsTransAvailable(argarea_name7) & get_Adaption(1) >= get_Adaption(2))
                        {
                            Area = "空中";
                        }
                        else if (IsTransAvailable(argarea_name8))
                        {
                            Area = "地上";
                        }
                        else
                        {
                            Area = "空中";
                        }

                        break;
                    }

                case "屋内":
                    {
                        string argarea_name9 = "空";
                        string argarea_name10 = "陸";
                        if (IsTransAvailable(argarea_name9) & get_Adaption(1) >= get_Adaption(2))
                        {
                            Area = "空中";
                        }
                        else if (IsTransAvailable(argarea_name10))
                        {
                            Area = "地上";
                        }
                        else
                        {
                            Area = "空中";
                        }

                        break;
                    }

                case "月面":
                    {
                        string argarea_name11 = "空";
                        string argarea_name12 = "宇宙";
                        string argarea_name13 = "陸";
                        if (IsTransAvailable(argarea_name11) | IsTransAvailable(argarea_name12))
                        {
                            Area = "宇宙";
                        }
                        else if (IsTransAvailable(argarea_name13))
                        {
                            Area = "地上";
                        }
                        else
                        {
                            Area = "宇宙";
                        }

                        break;
                    }

                case "水":
                case "深水":
                    {
                        string argarea_name14 = "空";
                        string argarea_name15 = "水上";
                        if (IsTransAvailable(argarea_name14) & get_Adaption(1) >= get_Adaption(2))
                        {
                            Area = "空中";
                        }
                        else if (IsTransAvailable(argarea_name15))
                        {
                            Area = "水上";
                        }
                        else
                        {
                            Area = "水中";
                        }

                        break;
                    }

                case "宇宙":
                    {
                        Area = "宇宙";
                        break;
                    }

                default:
                    {
                        Area = "地上";
                        break;
                    }
            }

            // マップに登録
            Map.MapDataForUnit[x, y] = this;

            // ビットマップを作成
            if (BitmapID == 0)
            {
                var argu = this;
                BitmapID = GUI.MakeUnitBitmap(argu);
            }

            // 登場時アニメを表示
            // MOD START MARGE
            // If (smode = "出撃" Or smode = "部隊配置") _
            // '        And MainForm.Visible _
            // '        And Not IsPictureVisible _
            // '        And Not IsRButtonPressed() _
            // '        And BitmapID > 0 _
            // '    Then
            var fname = default(string);
            int start_time, current_time;
            if ((Strings.InStr(smode, "出撃") > 0 | Strings.InStr(smode, "部隊配置") > 0) & GUI.MainForm.Visible & !GUI.IsPictureVisible & !GUI.IsRButtonPressed() & BitmapID > 0)
            {
                // MOD END MARGE

                // ユニット出現音
                string argwave_name = "UnitOn.wav";
                Sound.PlayWave(argwave_name);

                // 表示させる画像
                switch (Party0 ?? "")
                {
                    case "味方":
                    case "ＮＰＣ":
                        {
                            fname = @"Bitmap\Event\AUnitOn0";
                            break;
                        }

                    case "敵":
                        {
                            fname = @"Bitmap\Event\EUnitOn0";
                            break;
                        }

                    case "中立":
                        {
                            fname = @"Bitmap\Event\NUnitOn0";
                            break;
                        }
                }

                string argfname1 = SRC.AppPath + fname + "1.bmp";
                if (GeneralLib.FileExists(argfname1))
                {
                    // アニメ表示開始時刻を記録
                    start_time = GeneralLib.timeGetTime();
                    for (i = 1; i <= 4; i++)
                    {
                        // 画像を透過表示
                        string argfname = fname + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(i) + ".bmp";
                        string argdraw_option = "透過";
                        if (GUI.DrawPicture(argfname, GUI.MapToPixelX(x), GUI.MapToPixelY(y), 32, 32, 0, 0, 0, 0, argdraw_option) == false)
                        {
                            break;
                        }
                        // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                        GUI.MainForm.picMain(0).Refresh();

                        // ウェイト
                        do
                        {
                            Application.DoEvents();
                            current_time = GeneralLib.timeGetTime();
                        }
                        while (current_time < start_time + 15);
                        start_time = current_time;

                        // 画像を消去
                        GUI.ClearPicture();
                    }

                    // アニメ画像は上書きして消してしまうので……
                    GUI.IsPictureVisible = false;
                }
            }

            // ユニット画像をマップに描画
            if (!GUI.IsPictureVisible & !string.IsNullOrEmpty(Map.MapFileName))
            {
                // MOD START MARGE
                // If smode = "非同期" Then
                if (Strings.InStr(smode, "非同期") > 0)
                {
                    // MOD END MARGE
                    var argu1 = this;
                    GUI.PaintUnitBitmap(argu1, "リフレッシュ無し");
                }
                else
                {
                    var argu2 = this;
                    GUI.PaintUnitBitmap(argu2);
                }
            }

            // 制御不能？
            string argfname2 = "制御不可";
            if (IsFeatureAvailable(argfname2))
            {
                string argcname = "暴走";
                string argcdata = "";
                AddCondition(argcname, -1, cdata: argcdata);
            }

            Update();
            SRC.PList.UpdateSupportMod(this);
        }

        // ユニットを(new_x,new_y)に移動
        public void Move(int new_x, int new_y, bool without_en_consumption = false, bool by_cancel = false, bool by_teleport_or_jump = false)
        {
            int prev_x, prev_y;
            int i;

            // ユニットをマップからいったん削除
            if (ReferenceEquals(Map.MapDataForUnit[x, y], this))
            {
                // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Map.MapDataForUnit[x, y] = null;
            }

            if (GUI.IsPictureVisible)
            {
                GUI.EraseUnitBitmap(x, y, false);
            }
            else
            {
                GUI.EraseUnitBitmap(x, y, false);
            }

            SRC.PList.UpdateSupportMod(this);

            // ユニット位置を指定された座標に
            prev_x = x;
            prev_y = y;
            x = new_x;
            y = new_y;
            var loopTo = CountOtherForm();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex1 = i;
                {
                    var withBlock = OtherForm(argIndex1);
                    withBlock.x = x;
                    withBlock.y = y;
                }
            }

            var loopTo1 = CountUnitOnBoard();
            for (i = 1; i <= loopTo1; i++)
            {
                object argIndex2 = i;
                {
                    var withBlock1 = UnitOnBoard(argIndex2);
                    withBlock1.x = x;
                    withBlock1.y = y;
                }
            }

            // 指定された場所に既にユニットが存在？
            if (Map.MapDataForUnit[x, y] is object)
            {
                {
                    var withBlock2 = Map.MapDataForUnit[x, y];
                    // 合体？
                    var loopTo2 = withBlock2.CountFeature();
                    for (i = 1; i <= loopTo2; i++)
                    {
                        string localFeature() { object argIndex1 = i; var ret = withBlock2.Feature(argIndex1); return ret; }

                        string localFeatureData2() { object argIndex1 = i; var ret = withBlock2.FeatureData(argIndex1); return ret; }

                        int localLLength() { string arglist = hsb631fea4c5cf49098946ae0a91f0346e(); var ret = GeneralLib.LLength(arglist); return ret; }

                        if (localFeature() == "合体" & localLLength() == 3)
                        {
                            string localFeatureData1() { object argIndex1 = i; var ret = withBlock2.FeatureData(argIndex1); return ret; }

                            string localLIndex1() { string arglist = hsb6975299bb8a44cda80cb8aa733a682c(); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                            object argIndex3 = localLIndex1();
                            if (SRC.UList.IsDefined(argIndex3))
                            {
                                string localFeatureData() { object argIndex1 = i; var ret = withBlock2.FeatureData(argIndex1); return ret; }

                                string localLIndex() { string arglist = hs429ff88444314337bcbc774b8db33f1c(); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                                Unit localItem() { object argIndex1 = (object)hs60134dcbf45946b48db157b192860c4e(); var ret = SRC.UList.Item(argIndex1); return ret; }

                                if (ReferenceEquals(localItem().CurrentForm(), this))
                                {
                                    string arguname = "";
                                    Combine(uname: arguname);
                                    return;
                                }
                            }
                        }
                    }

                    // 着艦？
                    string argfname = "母艦";
                    if (!withBlock2.IsFeatureAvailable(argfname))
                    {
                        string argmsg = "合体元ユニット「" + Name + "」が複数あるため合体処理が出来ません";
                        GUI.ErrorMessage(argmsg);
                        return;
                    }
                }

                // 着艦処理
                Land(Map.MapDataForUnit[x, y], by_cancel);
                return;
            }

            // 移動先によるユニット位置変更
            switch (Map.TerrainClass(x, y) ?? "")
            {
                case "空":
                    {
                        Area = "空中";
                        break;
                    }

                case "陸":
                case "屋内":
                    {
                        switch (Area ?? "")
                        {
                            case "水中":
                            case "水上":
                                {
                                    Area = "地上";
                                    break;
                                }

                            case "宇宙":
                                {
                                    string argarea_name = "空";
                                    string argarea_name1 = "陸";
                                    if (IsTransAvailable(argarea_name) & get_Adaption(1) >= get_Adaption(2))
                                    {
                                        Area = "空中";
                                    }
                                    else if (IsTransAvailable(argarea_name1))
                                    {
                                        Area = "地上";
                                    }
                                    else
                                    {
                                        Area = "空中";
                                    }

                                    break;
                                }
                        }

                        break;
                    }

                case "月面":
                    {
                        switch (Area ?? "")
                        {
                            // 変更なし
                            case "地上":
                            case "地中":
                                {
                                    break;
                                }

                            default:
                                {
                                    string argarea_name2 = "空";
                                    string argarea_name3 = "宇宙";
                                    string argarea_name4 = "陸";
                                    if ((IsTransAvailable(argarea_name2) | IsTransAvailable(argarea_name3)) & get_Adaption(4) >= get_Adaption(2))
                                    {
                                        Area = "宇宙";
                                    }
                                    else if (IsTransAvailable(argarea_name4))
                                    {
                                        Area = "地上";
                                    }
                                    else
                                    {
                                        Area = "宇宙";
                                    }

                                    break;
                                }
                        }

                        break;
                    }

                case "水":
                case "深水":
                    {
                        switch (Area ?? "")
                        {
                            case "地上":
                                {
                                    string argarea_name5 = "水上";
                                    if (IsTransAvailable(argarea_name5))
                                    {
                                        Area = "水上";
                                    }
                                    else
                                    {
                                        Area = "水中";
                                    }

                                    break;
                                }

                            case "宇宙":
                                {
                                    Area = "水中";
                                    break;
                                }
                        }

                        break;
                    }

                case "宇宙":
                    {
                        Area = "宇宙";
                        break;
                    }
            }

            // マップにユニットを登録
            Map.MapDataForUnit[x, y] = this;

            // ユニット描画
            if (!GUI.IsPictureVisible)
            {
                if (SRC.MoveAnimation & !by_cancel & !by_teleport_or_jump)
                {
                    var argu = this;
                    GUI.MoveUnitBitmap2(argu, 20);
                }
                else
                {
                    var argu1 = this;
                    GUI.PaintUnitBitmap(argu1);
                }
            }

            // 移動によるＥＮ消費
            if (!without_en_consumption)
            {
                switch (Area ?? "")
                {
                    case "地上":
                    case "水上":
                        {
                            string argfname1 = "ホバー移動";
                            if (IsFeatureAvailable(argfname1))
                            {
                                EN = EN - 5;
                            }

                            break;
                        }

                    case "空中":
                    case "宇宙":
                        {
                            EN = EN - 5;
                            break;
                        }

                    case "地中":
                        {
                            EN = EN - 10;
                            break;
                        }
                }
            }

            // 情報更新
            Update();
            SRC.PList.UpdateSupportMod(this);
        }

        // ユニットを(new_x,new_y)にジャンプ
        public void Jump(int new_x, int new_y, bool do_refresh = true)
        {
            int j, i, k;

            // ユニットを一旦マップから削除
            // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Map.MapDataForUnit[x, y] = null;
            GUI.EraseUnitBitmap(x, y, do_refresh);
            SRC.PList.UpdateSupportMod(this);

            // 空き位置を検索
            for (i = 0; i <= 10; i++)
            {
                var loopTo = GeneralLib.MinLng(new_x + i, Map.MapWidth);
                for (j = GeneralLib.MaxLng(new_x - i, 1); j <= loopTo; j++)
                {
                    var loopTo1 = GeneralLib.MinLng(new_y + i, Map.MapHeight);
                    for (k = GeneralLib.MaxLng(new_y - i, 1); k <= loopTo1; k++)
                    {
                        if ((Math.Abs((new_x - j)) + Math.Abs((new_y - k))) != i)
                        {
                            goto NextLoop;
                        }

                        if (Map.MapDataForUnit[j, k] is object)
                        {
                            goto NextLoop;
                        }

                        if (Map.TerrainMoveCost(j, k) > 100)
                        {
                            goto NextLoop;
                        }

                        switch (Map.TerrainClass(j, k) ?? "")
                        {
                            case "空":
                                {
                                    string argarea_name = "空";
                                    if (!IsTransAvailable(argarea_name))
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }

                            case "水":
                            case "深水":
                                {
                                    string argarea_name1 = "水上";
                                    string argarea_name2 = "空";
                                    if (!IsTransAvailable(argarea_name1) & !IsTransAvailable(argarea_name2) & get_Adaption(3) == 0)
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }
                        }

                        x = j;
                        y = k;
                        goto ExitFor;
                        NextLoop:
                        ;
                    }
                }
            }

            ExitFor:
            ;


            // 他の形態と格納したユニットの座標を更新
            var loopTo2 = CountOtherForm();
            for (i = 1; i <= loopTo2; i++)
            {
                object argIndex1 = i;
                {
                    var withBlock = OtherForm(argIndex1);
                    withBlock.x = x;
                    withBlock.y = y;
                }
            }

            var loopTo3 = CountUnitOnBoard();
            for (i = 1; i <= loopTo3; i++)
            {
                object argIndex2 = i;
                {
                    var withBlock1 = UnitOnBoard(argIndex2);
                    withBlock1.x = x;
                    withBlock1.y = y;
                }
            }

            // 移動先によるユニット位置変更
            switch (Map.TerrainClass(x, y) ?? "")
            {
                case "空":
                    {
                        Area = "空中";
                        break;
                    }

                case "陸":
                case "屋内":
                    {
                        switch (Area ?? "")
                        {
                            case "水中":
                            case "水上":
                                {
                                    Area = "地上";
                                    break;
                                }

                            case "宇宙":
                                {
                                    string argarea_name3 = "空";
                                    string argarea_name4 = "陸";
                                    if (IsTransAvailable(argarea_name3) & get_Adaption(1) >= get_Adaption(2))
                                    {
                                        Area = "空中";
                                    }
                                    else if (IsTransAvailable(argarea_name4))
                                    {
                                        Area = "地上";
                                    }
                                    else
                                    {
                                        Area = "空中";
                                    }

                                    break;
                                }
                        }

                        break;
                    }

                case "月面":
                    {
                        switch (Area ?? "")
                        {
                            // 変更なし
                            case "地上":
                            case "地中":
                                {
                                    break;
                                }

                            default:
                                {
                                    string argarea_name5 = "空";
                                    string argarea_name6 = "宇宙";
                                    string argarea_name7 = "陸";
                                    if ((IsTransAvailable(argarea_name5) | IsTransAvailable(argarea_name6)) & get_Adaption(4) >= get_Adaption(2))
                                    {
                                        Area = "宇宙";
                                    }
                                    else if (IsTransAvailable(argarea_name7))
                                    {
                                        Area = "地上";
                                    }
                                    else
                                    {
                                        Area = "宇宙";
                                    }

                                    break;
                                }
                        }

                        break;
                    }

                case "水":
                case "深水":
                    {
                        switch (Area ?? "")
                        {
                            case "地上":
                                {
                                    string argarea_name8 = "水上";
                                    if (IsTransAvailable(argarea_name8))
                                    {
                                        Area = "水上";
                                    }
                                    else
                                    {
                                        Area = "水中";
                                    }

                                    break;
                                }

                            case "宇宙":
                                {
                                    Area = "水中";
                                    break;
                                }
                        }

                        break;
                    }

                case "宇宙":
                    {
                        Area = "宇宙";
                        break;
                    }
            }

            // マップにユニットを登録
            Map.MapDataForUnit[x, y] = this;

            // 情報更新
            Update();
            SRC.PList.UpdateSupportMod(this);

            // ユニット描画
            if (do_refresh)
            {
                var argu = this;
                GUI.PaintUnitBitmap(argu);
            }
        }

        // マップ上から脱出
        public void Escape(string smode = "")
        {
            Unit u;
            int i, j;

            // 母艦に乗っていた場合は降りておく
            if (Status_Renamed == "格納")
            {
                foreach (Unit currentU in SRC.UList)
                {
                    u = currentU;
                    var loopTo = u.CountUnitOnBoard();
                    for (i = 1; i <= loopTo; i++)
                    {
                        Unit localUnitOnBoard() { object argIndex1 = i; var ret = u.UnitOnBoard(argIndex1); return ret; }

                        if ((ID ?? "") == (localUnitOnBoard().ID ?? ""))
                        {
                            object argIndex1 = ID;
                            u.UnloadUnit(argIndex1);
                            goto EndLoop;
                        }
                    }
                }

                EndLoop:
                ;
            }

            // 出撃している場合は画面上からユニットを消去
            if (Status_Renamed == "出撃" | Status_Renamed == "破壊")
            {
                if (ReferenceEquals(Map.MapDataForUnit[x, y], this))
                {
                    // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                    Map.MapDataForUnit[x, y] = null;
                    if (smode == "非同期" | GUI.IsPictureVisible | string.IsNullOrEmpty(Map.MapFileName))
                    {
                        GUI.EraseUnitBitmap(x, y, false);
                    }
                    else
                    {
                        GUI.EraseUnitBitmap(x, y, true);
                    }

                    SRC.PList.UpdateSupportMod(this);
                }
            }

            if (Status_Renamed == "出撃" | Status_Renamed == "格納")
            {
                Status_Renamed = "待機";
            }

            // 破壊をキャンセル状態は解除
            object argIndex3 = "破壊キャンセル";
            if (IsConditionSatisfied(argIndex3))
            {
                object argIndex2 = "破壊キャンセル";
                DeleteCondition(argIndex2);
            }

            // ユニットを格納していたら降ろす
            foreach (Unit currentU1 in colUnitOnBoard)
            {
                u = currentU1;
                u.Status_Renamed = "待機";
                colUnitOnBoard.Remove(u.ID);
            }

            // 召喚したユニットを解放
            DismissServant();

            // 魅了・憑依したユニットを解放
            DismissSlave();

            // ステータス表示中の場合は表示を解除
            if (ReferenceEquals(this, Status.DisplayedUnit))
            {
                Status.ClearUnitStatus();
            }
        }

        // 母艦 u に着艦
        public void Land(Unit u, bool by_cancel = false, bool is_event = false)
        {
            string tclass;
            int i;

            // Landコマンドで着艦した場合
            if (is_event)
            {
                if (Status_Renamed == "出撃" | Status_Renamed == "格納")
                {
                    Escape();
                }
                else
                {
                    // 出撃のための前準備

                    // ユニットが存在する位置を決定
                    if (u.Status_Renamed == "出撃")
                    {
                        tclass = Map.TerrainClass(u.x, u.y);
                    }
                    else
                    {
                        tclass = Map.TerrainClass((Map.MapWidth / 2), (Map.MapHeight / 2));
                    }

                    switch (tclass ?? "")
                    {
                        case "空":
                            {
                                Area = "空中";
                                break;
                            }

                        case "陸":
                        case "屋内":
                            {
                                string argarea_name = "空";
                                string argarea_name1 = "陸";
                                if (IsTransAvailable(argarea_name) & Strings.Mid(strAdaption, 1, 1) == "A")
                                {
                                    Area = "空中";
                                }
                                else if (IsTransAvailable(argarea_name1))
                                {
                                    Area = "地上";
                                }
                                else
                                {
                                    Area = "空中";
                                }

                                break;
                            }

                        case "月面":
                            {
                                string argarea_name2 = "空";
                                string argarea_name3 = "宇宙";
                                string argarea_name4 = "陸";
                                if ((IsTransAvailable(argarea_name2) | IsTransAvailable(argarea_name3)) & Strings.Mid(strAdaption, 4, 1) == "A")
                                {
                                    Area = "宇宙";
                                }
                                else if (IsTransAvailable(argarea_name4))
                                {
                                    Area = "地上";
                                }
                                else
                                {
                                    Area = "宇宙";
                                }

                                break;
                            }

                        case "水":
                        case "深水":
                            {
                                string argarea_name5 = "空";
                                string argarea_name6 = "水上";
                                if (IsTransAvailable(argarea_name5))
                                {
                                    Area = "空中";
                                }
                                else if (IsTransAvailable(argarea_name6))
                                {
                                    Area = "水上";
                                }
                                else
                                {
                                    Area = "水中";
                                }

                                break;
                            }

                        case "宇宙":
                            {
                                Area = "宇宙";
                                break;
                            }
                    }

                    // 行動回数等を回復
                    UsedAction = 0;
                    UsedSupportAttack = 0;
                    UsedSupportGuard = 0;
                    UsedSyncAttack = 0;
                    UsedCounterAttack = 0;
                    if (BitmapID == 0)
                    {
                        object argIndex1 = Name;
                        {
                            var withBlock = SRC.UList.Item(argIndex1);
                            if ((withBlock.Party0 ?? "") == (Party0 ?? "") & withBlock.BitmapID != 0 & (withBlock.get_Bitmap(false) ?? "") == (get_Bitmap(false) ?? ""))
                            {
                                BitmapID = withBlock.BitmapID;
                            }
                            else
                            {
                                var argu = this;
                                BitmapID = GUI.MakeUnitBitmap(argu);
                            }
                        }

                        Name = Conversions.ToString(argIndex1);
                    }

                    string argfname = "制御不可";
                    if (IsFeatureAvailable(argfname))
                    {
                        string argcname = "暴走";
                        string argcdata = "";
                        AddCondition(argcname, -1, cdata: argcdata);
                    }
                }
            }

            // 母艦に自分自身を格納
            var argu1 = this;
            u.LoadUnit(argu1);

            // 座標を母艦に合わせる
            x = u.x;
            y = u.y;
            Status_Renamed = "格納";
            if (Area != "宇宙" & Area != "空中")
            {
                Area = "地上";
            }

            // 気力減少
            if (!by_cancel)
            {
                {
                    var withBlock1 = MainPilot();
                    if (withBlock1.Personality != "機械")
                    {
                        string argoname = "母艦収納時気力低下小";
                        if (Expression.IsOptionDefined(argoname))
                        {
                            withBlock1.Morale = GeneralLib.MinLng(withBlock1.Morale, GeneralLib.MaxLng(withBlock1.Morale - 5, 100));
                        }
                        else
                        {
                            withBlock1.Morale = (withBlock1.Morale - 5);
                        }
                    }
                }

                var loopTo = CountPilot();
                for (i = 1; i <= loopTo; i++)
                {
                    object argIndex2 = i;
                    {
                        var withBlock2 = Pilot(argIndex2);
                        if ((MainPilot().ID ?? "") != (withBlock2.ID ?? "") & withBlock2.Personality != "機械")
                        {
                            string argoname1 = "母艦収納時気力低下小";
                            if (Expression.IsOptionDefined(argoname1))
                            {
                                withBlock2.Morale = GeneralLib.MinLng(withBlock2.Morale, GeneralLib.MaxLng(withBlock2.Morale - 5, 100));
                            }
                            else
                            {
                                withBlock2.Morale = (withBlock2.Morale - 5);
                            }
                        }
                    }
                }

                var loopTo1 = CountSupport();
                for (i = 1; i <= loopTo1; i++)
                {
                    object argIndex3 = i;
                    {
                        var withBlock3 = Support(argIndex3);
                        if (withBlock3.Personality != "機械")
                        {
                            string argoname2 = "母艦収納時気力低下小";
                            if (Expression.IsOptionDefined(argoname2))
                            {
                                withBlock3.Morale = GeneralLib.MinLng(withBlock3.Morale, GeneralLib.MaxLng(withBlock3.Morale - 5, 100));
                            }
                            else
                            {
                                withBlock3.Morale = (withBlock3.Morale - 5);
                            }
                        }
                    }
                }

                string argfname1 = "追加サポート";
                if (IsFeatureAvailable(argfname1))
                {
                    {
                        var withBlock4 = AdditionalSupport();
                        if (withBlock4.Personality != "機械")
                        {
                            string argoname3 = "母艦収納時気力低下小";
                            if (Expression.IsOptionDefined(argoname3))
                            {
                                withBlock4.Morale = GeneralLib.MinLng(withBlock4.Morale, GeneralLib.MaxLng(withBlock4.Morale - 5, 100));
                            }
                            else
                            {
                                withBlock4.Morale = (withBlock4.Morale - 5);
                            }
                        }
                    }
                }
            }
        }

        // new_form へ変形（換装、ハイパーモード、パーツ分離＆合体を含む）
        public void Transform(string new_form)
        {
            string list;
            int i, idx, idx2, j;
            Unit u;
            string[] wname;
            int[] wbullet;
            int[] wmaxbullet;
            string[] aname;
            int[] astock;
            int[] amaxstock;
            double hp_ratio, en_ratio;
            int prev_x, prev_y;
            string buf;
            hp_ratio = 100 * HP / (double)MaxHP;
            en_ratio = 100 * EN / (double)MaxEN;
            object argIndex1 = new_form;
            u = OtherForm(argIndex1);
            u.Status_Renamed = Status_Renamed;
            if (Status_Renamed != "破棄")
            {
                Status_Renamed = "他形態";
            }

            // 制御不可能な形態から元に戻る場合は暴走を解除
            string argfname = "制御不可";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex3 = "暴走";
                if (IsConditionSatisfied(argIndex3))
                {
                    object argIndex2 = "暴走";
                    DeleteCondition(argIndex2);
                }
            }

            // 元の形態に戻る？
            object argIndex17 = "ノーマルモード";
            string arglist4 = FeatureData(argIndex17);
            if ((GeneralLib.LIndex(arglist4, 1) ?? "") == (new_form ?? ""))
            {
                object argIndex14 = "ノーマルモード付加";
                if (IsConditionSatisfied(argIndex14))
                {
                    // 変身が解ける場合
                    if (!string.IsNullOrEmpty(Map.MapFileName))
                    {
                        object argIndex5 = "ノーマルモード";
                        string arglist1 = FeatureData(argIndex5);
                        var loopTo = GeneralLib.LLength(arglist1);
                        for (i = 2; i <= loopTo; i++)
                        {
                            object argIndex4 = "ノーマルモード";
                            string arglist = FeatureData(argIndex4);
                            switch (GeneralLib.LIndex(arglist, i) ?? "")
                            {
                                case "消耗あり":
                                    {
                                        string argcname = "消耗";
                                        string argcdata = "";
                                        AddCondition(argcname, 1, cdata: argcdata);
                                        break;
                                    }

                                case "気力低下":
                                    {
                                        IncreaseMorale(-10);
                                        break;
                                    }
                            }
                        }
                    }

                    object argIndex6 = "ノーマルモード付加";
                    DeleteCondition(argIndex6);
                    object argIndex10 = "能力コピー";
                    if (IsConditionSatisfied(argIndex10))
                    {
                        object argIndex7 = "能力コピー";
                        DeleteCondition(argIndex7);
                        object argIndex8 = "パイロット画像";
                        DeleteCondition(argIndex8);
                        object argIndex9 = "メッセージ";
                        DeleteCondition(argIndex9);
                    }
                }
                // ハイパーモードが解ける場合
                else if (!string.IsNullOrEmpty(Map.MapFileName))
                {
                    string argcname1 = "消耗";
                    string argcdata1 = "";
                    AddCondition(argcname1, 1, cdata: argcdata1);
                    object argIndex13 = "ノーマルモード";
                    string arglist3 = FeatureData(argIndex13);
                    var loopTo1 = GeneralLib.LLength(arglist3);
                    for (i = 2; i <= loopTo1; i++)
                    {
                        object argIndex12 = "ノーマルモード";
                        string arglist2 = FeatureData(argIndex12);
                        switch (GeneralLib.LIndex(arglist2, i) ?? "")
                        {
                            case "消耗なし":
                                {
                                    object argIndex11 = "消耗";
                                    DeleteCondition(argIndex11);
                                    break;
                                }

                            case "気力低下":
                                {
                                    IncreaseMorale(-10);
                                    break;
                                }
                        }
                    }
                }

                object argIndex16 = "残り時間";
                if (IsConditionSatisfied(argIndex16))
                {
                    object argIndex15 = "残り時間";
                    DeleteCondition(argIndex15);
                }
            }

            // 戦闘アニメで変更されたユニット画像を元に戻す
            object argIndex19 = "ユニット画像";
            if (IsConditionSatisfied(argIndex19))
            {
                object argIndex18 = "ユニット画像";
                DeleteCondition(argIndex18);
                var argu = this;
                BitmapID = GUI.MakeUnitBitmap(argu);
            }

            object argIndex21 = "非表示付加";
            if (IsConditionSatisfied(argIndex21))
            {
                object argIndex20 = "非表示付加";
                DeleteCondition(argIndex20);
                var argu1 = this;
                BitmapID = GUI.MakeUnitBitmap(argu1);
            }

            int counter;
            {
                var withBlock = u;
                // パラメータ受け継ぎ
                withBlock.BossRank = BossRank;
                withBlock.Rank = Rank;
                withBlock.Mode = Mode;
                withBlock.Area = Area;
                withBlock.UsedSupportAttack = UsedSupportAttack;
                withBlock.UsedSupportGuard = UsedSupportGuard;
                withBlock.UsedSyncAttack = UsedSyncAttack;
                withBlock.UsedCounterAttack = UsedCounterAttack;
                withBlock.Master = Master;
                // UPGRADE_NOTE: オブジェクト Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Master = null;
                withBlock.Summoner = Summoner;
                // UPGRADE_NOTE: オブジェクト Summoner をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Summoner = null;

                // アイテム受け継ぎ
                var loopTo2 = CountItem();
                for (i = 1; i <= loopTo2; i++)
                {
                    Item localItem() { object argIndex1 = i; var ret = Item(argIndex1); return ret; }

                    var argitm = localItem();
                    withBlock.AddItem0(argitm);
                }

                // スペシャルパワー効果のコピー
                CopySpecialPowerInEffect(u);
                RemoveAllSpecialPowerInEffect();

                // 特殊ステータスのコピー
                var loopTo3 = withBlock.CountCondition();
                for (i = 1; i <= loopTo3; i++)
                {
                    object argIndex22 = 1;
                    withBlock.DeleteCondition0(argIndex22);
                }

                var loopTo4 = CountCondition();
                for (i = 1; i <= loopTo4; i++)
                {
                    int localConditionLifetime1() { object argIndex1 = i; var ret = ConditionLifetime(argIndex1); return ret; }

                    string localConditionData1() { object argIndex1 = i; var ret = ConditionData(argIndex1); return ret; }

                    string localConditionData2() { object argIndex1 = i; var ret = ConditionData(argIndex1); return ret; }

                    if (localConditionLifetime1() != 0 & Strings.InStr(localConditionData1(), "パイロット能力付加") == 0 & Strings.InStr(localConditionData2(), "パイロット能力強化") == 0)
                    {
                        string localCondition() { object argIndex1 = i; var ret = Condition(argIndex1); return ret; }

                        int localConditionLifetime() { object argIndex1 = i; var ret = ConditionLifetime(argIndex1); return ret; }

                        double localConditionLevel() { object argIndex1 = i; var ret = ConditionLevel(argIndex1); return ret; }

                        string localConditionData() { object argIndex1 = i; var ret = ConditionData(argIndex1); return ret; }

                        string argcname2 = localCondition();
                        string argcdata2 = localConditionData();
                        withBlock.AddCondition(argcname2, localConditionLifetime(), localConditionLevel(), argcdata2);
                    }
                }

                var loopTo5 = CountCondition();
                for (i = 1; i <= loopTo5; i++)
                {
                    object argIndex23 = 1;
                    DeleteCondition0(argIndex23);
                }

                // パイロットの乗せ換え
                object argIndex24 = "変形";
                list = FeatureData(argIndex24);
                if (GeneralLib.LLength(list) > 0 & Data.PilotNum == -GeneralLib.LLength(list) & CountPilot() == GeneralLib.LLength(list))
                {
                    // 変形によりパイロットの順番が変化する場合
                    var loopTo6 = GeneralLib.LLength(list);
                    for (idx = 2; idx <= loopTo6; idx++)
                    {
                        if ((withBlock.Name ?? "") == (GeneralLib.LIndex(list, idx) ?? ""))
                        {
                            break;
                        }
                    }

                    if (idx <= GeneralLib.LLength(list))
                    {
                        object argIndex25 = "変形";
                        list = withBlock.FeatureData(argIndex25);
                        var loopTo7 = GeneralLib.LLength(list);
                        for (idx2 = 2; idx2 <= loopTo7; idx2++)
                        {
                            buf = GeneralLib.LIndex(list, idx2);
                            if ((Name ?? "") == (buf ?? ""))
                            {
                                break;
                            }
                        }

                        j = 2;
                        var loopTo8 = CountPilot();
                        for (i = 1; i <= loopTo8; i++)
                        {
                            switch (i)
                            {
                                case 1:
                                    {
                                        Pilot localPilot() { object argIndex1 = idx; var ret = Pilot(argIndex1); return ret; }

                                        var argp = localPilot();
                                        withBlock.AddPilot(argp);
                                        break;
                                    }

                                case var @case when @case == idx2:
                                    {
                                        object argIndex26 = 1;
                                        var argp1 = Pilot(argIndex26);
                                        withBlock.AddPilot(argp1);
                                        break;
                                    }

                                default:
                                    {
                                        if (idx == j)
                                        {
                                            j = (j + 1);
                                        }

                                        Pilot localPilot1() { object argIndex1 = j; var ret = Pilot(argIndex1); return ret; }

                                        var argp2 = localPilot1();
                                        withBlock.AddPilot(argp2);
                                        j = (j + 1);
                                        break;
                                    }
                            }
                        }
                    }
                    else
                    {
                        var loopTo9 = CountPilot();
                        for (i = 1; i <= loopTo9; i++)
                        {
                            Pilot localPilot2() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                            var argp3 = localPilot2();
                            withBlock.AddPilot(argp3);
                        }
                    }
                }
                else
                {
                    var loopTo10 = CountPilot();
                    for (i = 1; i <= loopTo10; i++)
                    {
                        Pilot localPilot3() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                        var argp4 = localPilot3();
                        withBlock.AddPilot(argp4);
                    }
                }

                var loopTo11 = CountSupport();
                for (i = 1; i <= loopTo11; i++)
                {
                    Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                    var argp5 = localSupport();
                    withBlock.AddSupport(argp5);
                }

                var loopTo12 = CountUnitOnBoard();
                for (i = 1; i <= loopTo12; i++)
                {
                    Unit localUnitOnBoard() { object argIndex1 = i; var ret = UnitOnBoard(argIndex1); return ret; }

                    var argu2 = localUnitOnBoard();
                    withBlock.LoadUnit(argu2);
                }

                var loopTo13 = CountServant();
                for (i = 1; i <= loopTo13; i++)
                {
                    Unit localServant() { object argIndex1 = i; var ret = Servant(argIndex1); return ret; }

                    var argu3 = localServant();
                    withBlock.AddServant(argu3);
                }

                var loopTo14 = CountSlave();
                for (i = 1; i <= loopTo14; i++)
                {
                    Unit localSlave() { object argIndex1 = i; var ret = Slave(argIndex1); return ret; }

                    var argu4 = localSlave();
                    withBlock.AddSlave(argu4);
                }

                var loopTo15 = CountPilot();
                for (i = 1; i <= loopTo15; i++)
                {
                    object argIndex27 = 1;
                    DeletePilot(argIndex27);
                }

                var loopTo16 = CountSupport();
                for (i = 1; i <= loopTo16; i++)
                {
                    object argIndex28 = 1;
                    DeleteSupport(argIndex28);
                }

                var loopTo17 = CountUnitOnBoard();
                for (i = 1; i <= loopTo17; i++)
                {
                    object argIndex29 = 1;
                    UnloadUnit(argIndex29);
                }

                var loopTo18 = CountServant();
                for (i = 1; i <= loopTo18; i++)
                {
                    object argIndex30 = 1;
                    DeleteServant(argIndex30);
                }

                var loopTo19 = CountSlave();
                for (i = 1; i <= loopTo19; i++)
                {
                    object argIndex31 = 1;
                    DeleteSlave(argIndex31);
                }

                var loopTo20 = withBlock.CountPilot();
                for (i = 1; i <= loopTo20; i++)
                {
                    Pilot localPilot4() { object argIndex1 = i; var ret = withBlock.Pilot(argIndex1); return ret; }

                    localPilot4().Unit_Renamed = u;
                }

                var loopTo21 = withBlock.CountSupport();
                for (i = 1; i <= loopTo21; i++)
                {
                    Pilot localSupport1() { object argIndex1 = i; var ret = withBlock.Support(argIndex1); return ret; }

                    localSupport1().Unit_Renamed = u;
                    Pilot localSupport4() { object argIndex1 = i; var ret = withBlock.Support(argIndex1); return ret; }

                    if (localSupport4().SupportIndex > 0)
                    {
                        string argfname1 = "分離";
                        string argfname2 = "分離";
                        if (IsFeatureAvailable(argfname1) & withBlock.IsFeatureAvailable(argfname2))
                        {
                            object argIndex33 = "分離";
                            string arglist6 = withBlock.FeatureData(argIndex33);
                            var loopTo22 = GeneralLib.LLength(arglist6);
                            for (j = 2; j <= loopTo22; j++)
                            {
                                Pilot localSupport3() { object argIndex1 = i; var ret = withBlock.Support(argIndex1); return ret; }

                                string localLIndex() { object argIndex1 = "分離"; string arglist = withBlock.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, j); return ret; }

                                object argIndex32 = "分離";
                                string arglist5 = FeatureData(argIndex32);
                                if ((GeneralLib.LIndex(arglist5, (localSupport3().SupportIndex + 1)) ?? "") == (localLIndex() ?? ""))
                                {
                                    Pilot localSupport2() { object argIndex1 = i; var ret = withBlock.Support(argIndex1); return ret; }

                                    localSupport2().SupportIndex = (j - 1);
                                    break;
                                }
                            }
                        }
                    }
                }

                withBlock.Update();

                // 弾数データを記録
                wname = new string[(CountWeapon() + 1)];
                wbullet = new int[(CountWeapon() + 1)];
                wmaxbullet = new int[(CountWeapon() + 1)];
                var loopTo23 = CountWeapon();
                for (i = 1; i <= loopTo23; i++)
                {
                    wname[i] = Weapon(i).Name;
                    wbullet[i] = Bullet(i);
                    wmaxbullet[i] = MaxBullet(i);
                }

                aname = new string[(CountAbility() + 1)];
                astock = new int[(CountAbility() + 1)];
                amaxstock = new int[(CountAbility() + 1)];
                var loopTo24 = CountAbility();
                for (i = 1; i <= loopTo24; i++)
                {
                    aname[i] = Ability(i).Name;
                    astock[i] = Stock(i);
                    amaxstock[i] = MaxStock(i);
                }

                // 弾数の受け継ぎ
                idx = 1;
                var loopTo25 = withBlock.CountWeapon();
                for (i = 1; i <= loopTo25; i++)
                {
                    counter = idx;
                    var loopTo26 = Information.UBound(wname);
                    for (j = counter; j <= loopTo26; j++)
                    {
                        if ((withBlock.Weapon(i).Name ?? "") == (wname[j] ?? "") & withBlock.MaxBullet(i) > 0 & wmaxbullet[j] > 0)
                        {
                            withBlock.SetBullet(i, ((wbullet[j] * withBlock.MaxBullet(i)) / wmaxbullet[j]));
                            idx = (j + 1);
                            break;
                        }
                    }
                }

                idx = 1;
                var loopTo27 = withBlock.CountAbility();
                for (i = 1; i <= loopTo27; i++)
                {
                    counter = idx;
                    var loopTo28 = Information.UBound(aname);
                    for (j = counter; j <= loopTo28; j++)
                    {
                        if ((withBlock.Ability(i).Name ?? "") == (aname[j] ?? "") & withBlock.MaxStock(i) > 0 & amaxstock[j] > 0)
                        {
                            withBlock.SetStock(i, ((astock[j] * withBlock.MaxStock(i)) / amaxstock[j]));
                            idx = (j + 1);
                            break;
                        }
                    }
                }

                // 弾数・使用回数共有の実現
                withBlock.SyncBullet();

                // アイテムを削除
                var loopTo29 = CountItem();
                for (i = 1; i <= loopTo29; i++)
                {
                    object argIndex34 = 1;
                    DeleteItem(argIndex34);
                }

                withBlock.Update();

                // ＨＰ＆ＥＮの受け継ぎ
                string localLIndex1() { object argIndex1 = "パーツ分離"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                if ((new_form ?? "") == (localLIndex1() ?? ""))
                {
                    withBlock.HP = withBlock.MaxHP;
                }
                else
                {
                    withBlock.HP = (withBlock.MaxHP * hp_ratio / 100d);
                }

                withBlock.EN = (withBlock.MaxEN * en_ratio / 100d);

                // ノーマルモードや制限時間つきの形態の場合は残り時間を付加
                object argIndex40 = "残り時間";
                string argfname5 = "ノーマルモード";
                string argfname6 = "制限時間";
                if (!withBlock.IsConditionSatisfied(argIndex40))
                {
                    string argfname3 = "ノーマルモード";
                    string argfname4 = "制限時間";
                    if (withBlock.IsFeatureAvailable(argfname3))
                    {
                        string localLIndex4() { object argIndex1 = "ノーマルモード"; string arglist = withBlock.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                        if (Information.IsNumeric(localLIndex4()))
                        {
                            object argIndex36 = "残り時間";
                            if (withBlock.IsConditionSatisfied(argIndex36))
                            {
                                object argIndex35 = "残り時間";
                                withBlock.DeleteCondition(argIndex35);
                            }

                            string localLIndex2() { object argIndex1 = "ノーマルモード"; string arglist = withBlock.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                            string localLIndex3() { object argIndex1 = "ノーマルモード"; string arglist = withBlock.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                            string argcname3 = "残り時間";
                            string argcdata3 = "";
                            withBlock.AddCondition(argcname3, Conversions.Toint(localLIndex3()), cdata: argcdata3);
                        }
                    }
                    else if (withBlock.IsFeatureAvailable(argfname4))
                    {
                        string argcname4 = "残り時間";
                        object argIndex37 = "制限時間";
                        object argIndex38 = "制限時間";
                        string argcdata4 = "";
                        withBlock.AddCondition(argcname4, Conversions.Toint(withBlock.FeatureData(argIndex38)), cdata: argcdata4);
                    }
                }
                else if (!withBlock.IsFeatureAvailable(argfname5) & !withBlock.IsFeatureAvailable(argfname6))
                {
                    // 残り時間が必要ない形態にTransformコマンドで強制変形された？
                    object argIndex39 = "残り時間";
                    withBlock.DeleteCondition(argIndex39);
                }

                switch (withBlock.Status_Renamed ?? "")
                {
                    case "出撃":
                        {
                            // 変形後のユニットを出撃させる
                            // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                            Map.MapDataForUnit[x, y] = null;
                            prev_x = x;
                            prev_y = y;
                            withBlock.UsedAction = UsedAction;
                            withBlock.StandBy(x, y);
                            if (withBlock.x != prev_x | withBlock.y != prev_y)
                            {
                                GUI.EraseUnitBitmap(prev_x, prev_y, false);
                            }

                            break;
                        }

                    case "格納":
                        {
                            // 変形後のユニットを格納する
                            foreach (Unit eu in SRC.UList)
                            {
                                var loopTo30 = eu.CountUnitOnBoard();
                                for (j = 1; j <= loopTo30; j++)
                                {
                                    Unit localUnitOnBoard1() { object argIndex1 = j; var ret = eu.UnitOnBoard(argIndex1); return ret; }

                                    if ((ID ?? "") == (localUnitOnBoard1().ID ?? ""))
                                    {
                                        object argIndex41 = ID;
                                        eu.UnloadUnit(argIndex41);
                                        eu.LoadUnit(u);
                                        goto EndLoop;
                                    }
                                }
                            }

                            EndLoop:
                            ;
                            break;
                        }
                }
            }

            if (string.IsNullOrEmpty(Map.MapFileName))
            {
                return;
            }

            // ハイパーモードが解ける場合
            object argIndex42 = "ノーマルモード";
            buf = FeatureData(argIndex42);
            if ((GeneralLib.LIndex(buf, 1) ?? "") == (new_form ?? ""))
            {
                var loopTo31 = GeneralLib.LLength(buf);
                for (i = 2; i <= loopTo31; i++)
                {
                    switch (GeneralLib.LIndex(buf, i) ?? "")
                    {
                        case "回数制限":
                            {
                                string argcname5 = "行動不能";
                                string argcdata5 = "";
                                AddCondition(argcname5, -1, cdata: argcdata5);
                                break;
                            }
                    }
                }
            }
        }

        // 合体
        public void Combine([Optional, DefaultParameterValue("")] string uname, bool is_event = false)
        {
            int k, i, j, l;
            Unit u;
            Unit[] rarray;
            string prev_status;
            double hp_ratio = default, en_ratio = default;
            string fdata;
            prev_status = Status_Renamed;
            if (string.IsNullOrEmpty(uname))
            {
                // 合体形態が指定されてなければその場所にいるユニットと２体合体
                // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                u = null;
                var loopTo = CountFeature();
                for (i = 1; i <= loopTo; i++)
                {
                    object argIndex2 = i;
                    if (Feature(argIndex2) == "合体")
                    {
                        object argIndex1 = i;
                        fdata = FeatureData(argIndex1);
                        bool localIsDefined() { object argIndex1 = GeneralLib.LIndex(fdata, 2); var ret = SRC.UList.IsDefined(argIndex1); return ret; }

                        if (GeneralLib.LLength(fdata) == 3 & Map.MapDataForUnit[x, y].Name == GeneralLib.LIndex(fdata, 3) & localIsDefined())
                        {
                            string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string localLIndex() { string arglist = hs81b489053b0047fb8fab2715d76f0b3f(); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                            Unit localItem() { object argIndex1 = (object)hse7677c879f2b418e8dbb67c5dad5db85(); var ret = SRC.UList.Item(argIndex1); return ret; }

                            u = localItem().CurrentForm();
                            break;
                        }
                    }
                }

                if (u is null)
                {
                    var loopTo1 = CountFeature();
                    for (i = 1; i <= loopTo1; i++)
                    {
                        object argIndex4 = i;
                        if (Feature(argIndex4) == "合体")
                        {
                            object argIndex3 = i;
                            fdata = FeatureData(argIndex3);
                            bool localIsDefined1() { object argIndex1 = GeneralLib.LIndex(fdata, 2); var ret = SRC.UList.IsDefined(argIndex1); return ret; }

                            if (GeneralLib.LLength(fdata) == 3 & Map.MapDataForUnit[x, y].IsEqual(GeneralLib.LIndex(fdata, 3)) & localIsDefined1())
                            {
                                Unit localItem1() { object argIndex1 = GeneralLib.LIndex(fdata, 2); var ret = SRC.UList.Item(argIndex1); return ret; }

                                u = localItem1().CurrentForm();
                                break;
                            }
                        }
                    }
                }

                // 合体のパートナーを調べる
                var loopTo2 = u.CountFeature();
                for (i = 1; i <= loopTo2; i++)
                {
                    string localFeature() { object argIndex1 = i; var ret = u.Feature(argIndex1); return ret; }

                    string localFeatureData1() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                    int localLLength() { string arglist = hs51faf446da8e4981a1c2f1fe759168f4(); var ret = GeneralLib.LLength(arglist); return ret; }

                    string localFeatureData2() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                    string localLIndex1() { string arglist = hsb077af4743da47379ef57233cdc6fa2e(); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                    string localFeatureData3() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                    string localLIndex2() { string arglist = hs35a57c94693d489ca95b1b6c02b7f584(); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                    string localFeatureData4() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                    string localLIndex3() { string arglist = hscc5ae77b155c4db6b72a8ff201c4d383(); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                    string localFeatureData5() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                    string localLIndex4() { string arglist = hs55605004ddf144379941d1bb4dbdc993(); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                    if (localFeature() == "分離" & localLLength() == 3 & (IsEqual(localLIndex1()) & Map.MapDataForUnit[x, y].IsEqual(localLIndex2()) | IsEqual(localLIndex3()) & Map.MapDataForUnit[x, y].IsEqual(localLIndex4())))
                    {
                        break;
                    }
                }
            }
            else
            {
                // 合体ユニットが作成されていない
                bool localIsDefined2() { object argIndex1 = uname; var ret = SRC.UList.IsDefined(argIndex1); return ret; }

                if (!localIsDefined2())
                {
                    string argmsg = uname + "が作成されていません";
                    GUI.ErrorMessage(argmsg);
                    SRC.ExitGame();
                }

                Unit localItem2() { object argIndex1 = uname; var ret = SRC.UList.Item(argIndex1); return ret; }

                u = localItem2().CurrentForm();

                // 合体のパートナーを調べる
                var loopTo3 = u.CountFeature();
                for (i = 1; i <= loopTo3; i++)
                {
                    string localFeature1() { object argIndex1 = i; var ret = u.Feature(argIndex1); return ret; }

                    string localFeatureData6() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                    int localLLength1() { string arglist = hs19d13409c3c14abeb6633b778b53f517(); var ret = GeneralLib.LLength(arglist); return ret; }

                    if (localFeature1() == "分離" & localLLength1() > 2)
                    {
                        break;
                    }
                }
            }

            // 合体するユニットの配列を作成
            if (i > u.CountFeature())
            {
                string argmsg1 = u.Name + "のデータに" + Name + "に対する分離指定がみつかりません。" + "書式を確認してください。";
                GUI.ErrorMessage(argmsg1);
                return;
            }

            string localFeatureData7() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

            int localLLength2() { string arglist = hs7e9583a3d5b64b0e89ed2b453203ed96(); var ret = GeneralLib.LLength(arglist); return ret; }

            rarray = new Unit[(localLLength2())];
            var loopTo4 = Information.UBound(rarray);
            for (j = 1; j <= loopTo4; j++)
            {
                string localFeatureData9() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                string localLIndex6() { string arglist = hsdde5a2bab5114fb984e607877f33a598(); var ret = GeneralLib.LIndex(arglist, (j + 1)); return ret; }

                bool localIsDefined3() { object argIndex1 = (object)hs864ff7ed86044dd6afb3abdbc02521a4(); var ret = SRC.UList.IsDefined(argIndex1); return ret; }

                if (!localIsDefined3())
                {
                    string localFeatureData8() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                    string localLIndex5() { string arglist = hsd9f70e51b07d4e9fa7669aca81ec510a(); var ret = GeneralLib.LIndex(arglist, (j + 1)); return ret; }

                    string argmsg2 = localLIndex5() + "が作成されていません";
                    GUI.ErrorMessage(argmsg2);
                    return;
                }

                string localFeatureData10() { object argIndex1 = i; var ret = u.FeatureData(argIndex1); return ret; }

                string localLIndex7() { string arglist = hs00e33e973a4149d388ddb705e43ffed7(); var ret = GeneralLib.LIndex(arglist, (j + 1)); return ret; }

                object argIndex5 = localLIndex7();
                rarray[j] = SRC.UList.Item(argIndex5);
            }

            string BGM;
            if (!is_event)
            {
                if (Status_Renamed == "出撃")
                {
                    // ダイアログでメッセージを表示させるため追加パイロットをあらかじめ作成
                    string argfname = "追加パイロット";
                    if (u.IsFeatureAvailable(argfname))
                    {
                        bool localIsDefined5() { object argIndex1 = "追加パイロット"; object argIndex2 = u.FeatureData(argIndex1); var ret = SRC.PList.IsDefined(argIndex2); return ret; }

                        if (!localIsDefined5())
                        {
                            bool localIsDefined4() { object argIndex1 = "追加パイロット"; object argIndex2 = u.FeatureData(argIndex1); var ret = SRC.PDList.IsDefined(argIndex2); return ret; }

                            if (!localIsDefined4())
                            {
                                object argIndex6 = "追加パイロット";
                                string argmsg3 = u.Name + "の追加パイロット「" + u.FeatureData(argIndex6) + "」のデータが見つかりません";
                                GUI.ErrorMessage(argmsg3);
                                SRC.TerminateSRC();
                            }

                            object argIndex7 = "追加パイロット";
                            string argpname = u.FeatureData(argIndex7);
                            string argpparty = Party0;
                            string arggid = "";
                            SRC.PList.Add(argpname, MainPilot().Level, argpparty, gid: arggid);
                            this.Party0 = argpparty;
                        }
                    }

                    bool localIsMessageDefined1() { string argmain_situation = "合体(" + u.Name + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                    bool localIsMessageDefined2() { object argIndex1 = "合体"; string argmain_situation = "合体(" + FeatureName(argIndex1) + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                    string argmain_situation1 = "合体";
                    if (localIsMessageDefined1() | localIsMessageDefined2() | IsMessageDefined(argmain_situation1))
                    {
                        string argfname1 = "合体ＢＧＭ";
                        if (IsFeatureAvailable(argfname1))
                        {
                            var loopTo5 = CountFeature();
                            for (i = 1; i <= loopTo5; i++)
                            {
                                string localFeature2() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                                string localFeatureData13() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                                string localLIndex8() { string arglist = hs8b8df815445f4c329f8d70f276cd46e5(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                                if (localFeature2() == "合体ＢＧＭ" & (localLIndex8() ?? "") == (u.Name ?? ""))
                                {
                                    string localFeatureData11() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                                    string localFeatureData12() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                                    string argmidi_name = Strings.Mid(localFeatureData11(), Strings.InStr(localFeatureData12(), " ") + 1);
                                    BGM = Sound.SearchMidiFile(argmidi_name);
                                    if (Strings.Len(BGM) > 0)
                                    {
                                        Sound.ChangeBGM(BGM);
                                        GUI.Sleep(500);
                                    }

                                    break;
                                }
                            }
                        }

                        Unit argu1 = null;
                        Unit argu2 = null;
                        GUI.OpenMessageForm(u1: argu1, u2: argu2);
                        bool localIsMessageDefined() { object argIndex1 = "合体"; string argmain_situation = "合体(" + FeatureName(argIndex1) + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                        string argmain_situation = "合体(" + u.Name + ")";
                        if (IsMessageDefined(argmain_situation))
                        {
                            string argSituation = "合体(" + u.Name + ")";
                            string argmsg_mode = "";
                            PilotMessage(argSituation, msg_mode: argmsg_mode);
                        }
                        else if (localIsMessageDefined())
                        {
                            object argIndex8 = "合体";
                            string argSituation2 = "合体(" + FeatureName(argIndex8) + ")";
                            string argmsg_mode2 = "";
                            PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                        }
                        else
                        {
                            string argSituation1 = "合体";
                            string argmsg_mode1 = "";
                            PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                        }

                        GUI.CloseMessageForm();
                    }
                }
            }

            // 分離ユニットと合体ユニットが同名の武器を持つ場合は弾数を累積するため
            // このような武器の弾数を0にする
            var loopTo6 = u.CountWeapon();
            for (i = 1; i <= loopTo6; i++)
            {
                var loopTo7 = Information.UBound(rarray);
                for (j = 1; j <= loopTo7; j++)
                {
                    {
                        var withBlock = rarray[j].CurrentForm();
                        var loopTo8 = withBlock.CountWeapon();
                        for (k = 1; k <= loopTo8; k++)
                        {
                            if ((u.Weapon(i).Name ?? "") == (withBlock.Weapon(k).Name ?? ""))
                            {
                                u.SetBullet(i, 0);
                                break;
                            }
                        }
                    }
                }
            }
            // 使用回数を合わせる
            var loopTo9 = u.CountAbility();
            for (i = 1; i <= loopTo9; i++)
            {
                var loopTo10 = Information.UBound(rarray);
                for (j = 1; j <= loopTo10; j++)
                {
                    {
                        var withBlock1 = rarray[j].CurrentForm();
                        var loopTo11 = withBlock1.CountAbility();
                        for (k = 1; k <= loopTo11; k++)
                        {
                            if ((u.Ability(i).Name ?? "") == (withBlock1.Ability(k).Name ?? ""))
                            {
                                u.SetStock(i, 0);
                                break;
                            }
                        }
                    }
                }
            }

            // １番目のユニットのステータスを合体後のユニットに継承
            {
                var withBlock2 = rarray[1].CurrentForm();
                withBlock2.CopySpecialPowerInEffect(u);
                withBlock2.RemoveAllSpecialPowerInEffect();
                var loopTo12 = withBlock2.CountItem();
                for (i = 1; i <= loopTo12; i++)
                {
                    Item localItem3() { object argIndex1 = i; var ret = withBlock2.Item(argIndex1); return ret; }

                    var argitm = localItem3();
                    u.AddItem(argitm);
                }

                u.Master = withBlock2.Master;
                // UPGRADE_NOTE: オブジェクト rarray().CurrentForm.Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                withBlock2.Master = null;
                u.Summoner = withBlock2.Summoner;
                // UPGRADE_NOTE: オブジェクト rarray().CurrentForm.Summoner をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                withBlock2.Summoner = null;
                u.UsedSupportAttack = withBlock2.UsedSupportAttack;
                u.UsedSupportGuard = withBlock2.UsedSupportGuard;
                u.UsedSyncAttack = withBlock2.UsedSyncAttack;
                u.UsedCounterAttack = withBlock2.UsedCounterAttack;
                var loopTo13 = withBlock2.CountServant();
                for (i = 1; i <= loopTo13; i++)
                {
                    Unit localServant() { object argIndex1 = i; var ret = withBlock2.Servant(argIndex1); return ret; }

                    var argu = localServant();
                    u.AddServant(argu);
                }

                var loopTo14 = withBlock2.CountServant();
                for (i = 1; i <= loopTo14; i++)
                {
                    object argIndex9 = 1;
                    withBlock2.DeleteServant(argIndex9);
                }

                var loopTo15 = withBlock2.CountSlave();
                for (i = 1; i <= loopTo15; i++)
                {
                    Unit localSlave() { object argIndex1 = i; var ret = withBlock2.Slave(argIndex1); return ret; }

                    var argu3 = localSlave();
                    u.AddSlave(argu3);
                }

                var loopTo16 = withBlock2.CountSlave();
                for (i = 1; i <= loopTo16; i++)
                {
                    object argIndex10 = 1;
                    withBlock2.DeleteSlave(argIndex10);
                }

                // 合体する各ユニットに対しての処理を行う
            }

            var loopTo17 = Information.UBound(rarray);
            for (i = 1; i <= loopTo17; i++)
            {
                // マップ上から撤退させる
                {
                    var withBlock3 = rarray[i].CurrentForm();
                    switch (withBlock3.Status_Renamed ?? "")
                    {
                        case "出撃":
                            {
                                withBlock3.Status_Renamed = "待機";
                                // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                Map.MapDataForUnit[withBlock3.x, withBlock3.y] = null;
                                GUI.EraseUnitBitmap(withBlock3.x, withBlock3.y);
                                break;
                            }

                        case "格納":
                            {
                                withBlock3.Status_Renamed = "待機";
                                foreach (Unit eu in SRC.UList)
                                {
                                    var loopTo18 = eu.CountUnitOnBoard();
                                    for (j = 1; j <= loopTo18; j++)
                                    {
                                        Unit localUnitOnBoard() { object argIndex1 = j; var ret = eu.UnitOnBoard(argIndex1); return ret; }

                                        if ((withBlock3.ID ?? "") == (localUnitOnBoard().ID ?? ""))
                                        {
                                            object argIndex11 = withBlock3.ID;
                                            eu.UnloadUnit(argIndex11);
                                            goto EndLoop;
                                        }
                                    }
                                }

                                EndLoop:
                                ;
                                break;
                            }
                    }
                }

                // デフォルトの形態に変形させておく
                if (!ReferenceEquals(rarray[i].CurrentForm(), rarray[i]))
                {
                    string argnew_form = rarray[i].Name;
                    rarray[i].CurrentForm().Transform(argnew_form);
                    rarray[i].Name = argnew_form;
                }

                {
                    var withBlock4 = rarray[i];
                    if (i == 1)
                    {
                        withBlock4.Status_Renamed = "旧主形態";
                    }
                    else
                    {
                        withBlock4.Status_Renamed = "旧形態";
                    }

                    hp_ratio = hp_ratio + 100 * withBlock4.HP / (double)withBlock4.MaxHP;
                    en_ratio = en_ratio + 100 * withBlock4.EN / (double)withBlock4.MaxEN;
                    if (withBlock4.Rank > u.Rank)
                    {
                        u.Rank = withBlock4.Rank;
                    }

                    if (withBlock4.BossRank > u.BossRank)
                    {
                        u.BossRank = withBlock4.BossRank;
                        u.FullRecover();
                    }

                    string argfname2 = "召喚ユニット";
                    if (withBlock4.IsFeatureAvailable(argfname2))
                    {
                        // 召喚ユニットの場合はパイロットの乗せ換えは行わない
                        if (Strings.InStr(withBlock4.MainPilot().Name, "(ザコ)") > 0 | Strings.InStr(withBlock4.MainPilot().Name, "(汎用)") > 0)
                        {
                            // 汎用パイロットの場合は削除
                            withBlock4.MainPilot().Alive = false;
                        }
                    }
                    else
                    {
                        // パイロットの乗せ換え
                        var loopTo19 = withBlock4.CountPilot();
                        for (j = 1; j <= loopTo19; j++)
                        {
                            Pilot localPilot() { object argIndex1 = j; var ret = withBlock4.Pilot(argIndex1); return ret; }

                            localPilot().Ride(u);
                        }

                        var loopTo20 = withBlock4.CountPilot();
                        for (j = 1; j <= loopTo20; j++)
                        {
                            object argIndex12 = 1;
                            withBlock4.DeletePilot(argIndex12);
                        }

                        // サポートの乗せ換え
                        var loopTo21 = withBlock4.CountSupport();
                        for (j = 1; j <= loopTo21; j++)
                        {
                            Pilot localSupport() { object argIndex1 = j; var ret = withBlock4.Support(argIndex1); return ret; }

                            localSupport().Ride(u, true);
                            Pilot localSupport1() { object argIndex1 = j; var ret = withBlock4.Support(argIndex1); return ret; }

                            localSupport1().SupportIndex = i;
                        }

                        var loopTo22 = withBlock4.CountSupport();
                        for (j = 1; j <= loopTo22; j++)
                        {
                            object argIndex13 = 1;
                            withBlock4.DeleteSupport(argIndex13);
                        }
                    }

                    // 搭載ユニットの乗せ換え
                    var loopTo23 = withBlock4.CountUnitOnBoard();
                    for (j = 1; j <= loopTo23; j++)
                    {
                        Unit localUnitOnBoard1() { object argIndex1 = j; var ret = withBlock4.UnitOnBoard(argIndex1); return ret; }

                        var argu4 = localUnitOnBoard1();
                        u.LoadUnit(argu4);
                    }

                    var loopTo24 = u.CountUnitOnBoard();
                    for (j = 1; j <= loopTo24; j++)
                    {
                        object argIndex14 = 1;
                        withBlock4.UnloadUnit(argIndex14);
                    }

                    // 分離ユニットと共通する武装の弾数は一旦0にクリア
                    var loopTo25 = u.CountWeapon();
                    for (j = 1; j <= loopTo25; j++)
                    {
                        var loopTo26 = withBlock4.CountWeapon();
                        for (k = 1; k <= loopTo26; k++)
                        {
                            if ((u.Weapon(j).Name ?? "") == (withBlock4.Weapon(k).Name ?? ""))
                            {
                                u.SetBullet(j, 0);
                                break;
                            }
                        }

                        var loopTo27 = withBlock4.CountOtherForm();
                        for (k = 1; k <= loopTo27; k++)
                        {
                            object argIndex15 = k;
                            {
                                var withBlock5 = withBlock4.OtherForm(argIndex15);
                                var loopTo28 = withBlock5.CountWeapon();
                                for (l = 1; l <= loopTo28; l++)
                                {
                                    if ((u.Weapon(j).Name ?? "") == (withBlock5.Weapon(l).Name ?? ""))
                                    {
                                        u.SetBullet(j, 0);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    // アビリティの使用回数も同様の処理を行う
                    var loopTo29 = u.CountAbility();
                    for (j = 1; j <= loopTo29; j++)
                    {
                        var loopTo30 = withBlock4.CountAbility();
                        for (k = 1; k <= loopTo30; k++)
                        {
                            if ((u.Ability(j).Name ?? "") == (withBlock4.Ability(k).Name ?? ""))
                            {
                                u.SetStock(j, 0);
                                break;
                            }
                        }

                        var loopTo31 = withBlock4.CountOtherForm();
                        for (k = 1; k <= loopTo31; k++)
                        {
                            object argIndex16 = k;
                            {
                                var withBlock6 = withBlock4.OtherForm(argIndex16);
                                var loopTo32 = withBlock6.CountAbility();
                                for (l = 1; l <= loopTo32; l++)
                                {
                                    if ((u.Ability(j).Name ?? "") == (withBlock6.Ability(l).Name ?? ""))
                                    {
                                        u.SetStock(j, 0);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    // スペシャルパワーの効果を消去
                    withBlock4.RemoveAllSpecialPowerInEffect();
                }
            }

            // 合体後のユニットの武装の弾数及びアビリティの使用回数は分離ユニットの
            // 弾数及び使用回数の合計に設定する
            var loopTo33 = Information.UBound(rarray);
            for (i = 1; i <= loopTo33; i++)
            {
                {
                    var withBlock7 = rarray[i];
                    // 武装の弾数の処理
                    var loopTo34 = u.CountWeapon();
                    for (j = 1; j <= loopTo34; j++)
                    {
                        var loopTo35 = withBlock7.CountWeapon();
                        for (k = 1; k <= loopTo35; k++)
                        {
                            if ((u.Weapon(j).Name ?? "") == (withBlock7.Weapon(k).Name ?? ""))
                            {
                                u.SetBullet(j, (u.Bullet(j) + withBlock7.Bullet(k)));
                                goto NextWeapon;
                            }
                        }

                        var loopTo36 = withBlock7.CountOtherForm();
                        for (k = 1; k <= loopTo36; k++)
                        {
                            object argIndex17 = k;
                            {
                                var withBlock8 = withBlock7.OtherForm(argIndex17);
                                var loopTo37 = withBlock8.CountWeapon();
                                for (l = 1; l <= loopTo37; l++)
                                {
                                    if ((u.Weapon(j).Name ?? "") == (withBlock8.Weapon(l).Name ?? ""))
                                    {
                                        u.SetBullet(j, (u.Bullet(j) + withBlock8.Bullet(l)));
                                        goto NextWeapon;
                                    }
                                }
                            }
                        }

                        NextWeapon:
                        ;
                    }

                    // アビリティの使用回数の処理
                    var loopTo38 = u.CountAbility();
                    for (j = 1; j <= loopTo38; j++)
                    {
                        var loopTo39 = withBlock7.CountAbility();
                        for (k = 1; k <= loopTo39; k++)
                        {
                            if ((u.Ability(j).Name ?? "") == (withBlock7.Ability(k).Name ?? ""))
                            {
                                u.SetStock(j, (u.Stock(j) + withBlock7.Stock(k)));
                                goto NextAbility;
                            }
                        }

                        var loopTo40 = withBlock7.CountOtherForm();
                        for (k = 1; k <= loopTo40; k++)
                        {
                            object argIndex18 = k;
                            {
                                var withBlock9 = withBlock7.OtherForm(argIndex18);
                                var loopTo41 = withBlock9.CountAbility();
                                for (l = 1; l <= loopTo41; l++)
                                {
                                    if ((u.Ability(j).Name ?? "") == (withBlock9.Ability(l).Name ?? ""))
                                    {
                                        u.SetStock(j, (u.Stock(j) + withBlock9.Stock(l)));
                                        goto NextAbility;
                                    }
                                }
                            }
                        }

                        NextAbility:
                        ;
                    }
                }
            }

            // １番目のユニットのアイテムを外す
            {
                var withBlock10 = rarray[1];
                var loopTo42 = withBlock10.CountItem();
                for (i = 1; i <= loopTo42; i++)
                {
                    object argIndex19 = 1;
                    withBlock10.DeleteItem(argIndex19);
                }
            }

            // 合体後のユニットに関する処理
            u.Update();
            u.Party = Party0;
            var loopTo43 = u.CountOtherForm();
            for (i = 1; i <= loopTo43; i++)
            {
                Unit localOtherForm() { object argIndex1 = i; var ret = u.OtherForm(argIndex1); return ret; }

                localOtherForm().Party = Party0;
            }

            var loopTo44 = u.CountPilot();
            for (i = 1; i <= loopTo44; i++)
            {
                Pilot localPilot1() { object argIndex1 = i; var ret = u.Pilot(argIndex1); return ret; }

                localPilot1().Party = Party0;
            }

            var loopTo45 = u.CountSupport();
            for (i = 1; i <= loopTo45; i++)
            {
                Pilot localSupport2() { object argIndex1 = i; var ret = u.Support(argIndex1); return ret; }

                localSupport2().Party = Party0;
            }

            u.HP = (u.MaxHP * hp_ratio / 100d / Information.UBound(rarray));
            u.EN = (1 * u.MaxEN * en_ratio / 100d / Information.UBound(rarray));

            // 弾数・使用回数共有の実現
            u.SyncBullet();
            if (prev_status == "出撃")
            {
                u.StandBy(x, y);

                // ノーマルモードや制限時間つきの形態の場合は残り時間を付加
                string argfname3 = "ノーマルモード";
                string argfname4 = "制限時間";
                if (u.IsFeatureAvailable(argfname3))
                {
                    string localLIndex11() { object argIndex1 = "ノーマルモード"; string arglist = u.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                    if (Information.IsNumeric(localLIndex11()))
                    {
                        object argIndex21 = "残り時間";
                        if (u.IsConditionSatisfied(argIndex21))
                        {
                            object argIndex20 = "残り時間";
                            u.DeleteCondition(argIndex20);
                        }

                        string localLIndex9() { object argIndex1 = "ノーマルモード"; string arglist = u.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                        string localLIndex10() { object argIndex1 = "ノーマルモード"; string arglist = u.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                        string argcname = "残り時間";
                        string argcdata = "";
                        u.AddCondition(argcname, Conversions.Toint(localLIndex10()), cdata: argcdata);
                    }
                }
                else if (u.IsFeatureAvailable(argfname4))
                {
                    string argcname1 = "残り時間";
                    object argIndex22 = "制限時間";
                    object argIndex23 = "制限時間";
                    string argcdata1 = "";
                    u.AddCondition(argcname1, Conversions.Toint(u.FeatureData(argIndex23)), cdata: argcdata1);
                }
            }
            else
            {
                u.Status_Renamed = prev_status;
            }

            // 分離ユニットの座標を合体後のユニットの座標に合わせる
            var loopTo46 = Information.UBound(rarray);
            for (i = 1; i <= loopTo46; i++)
            {
                {
                    var withBlock11 = rarray[i].CurrentForm();
                    withBlock11.x = u.x;
                    withBlock11.y = u.y;
                }
            }
        }

        // 分離
        // UPGRADE_NOTE: Split は Split_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
        public void Split_Renamed()
        {
            int k, i, j, l;
            int idx, n;
            string buf;
            Unit[] uarray;
            double hp_ratio, en_ratio;
            string pname;
            Pilot p;
            hp_ratio = 100 * HP / (double)MaxHP;
            en_ratio = 100 * EN / (double)MaxEN;

            // まずは撤退
            if (Status_Renamed == "出撃")
            {
                // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Map.MapDataForUnit[x, y] = null;
                GUI.EraseUnitBitmap(x, y);
            }

            // 分離先のユニットを調べる
            object argIndex1 = "分離";
            buf = FeatureData(argIndex1);
            uarray = new Unit[(GeneralLib.LLength(buf))];
            var loopTo = GeneralLib.LLength(buf);
            for (i = 2; i <= loopTo; i++)
            {
                object argIndex2 = GeneralLib.LIndex(buf, i);
                uarray[i - 1] = SRC.UList.Item(argIndex2);
                if (uarray[i - 1] is null)
                {
                    string argmsg = GeneralLib.LIndex(buf, (i - 1)) + "が存在しません";
                    GUI.ErrorMessage(argmsg);
                    return;
                }
            }

            // 分離後の１番機を検索
            var loopTo1 = Information.UBound(uarray);
            for (i = 1; i <= loopTo1; i++)
            {
                if (uarray[i].Status_Renamed == "旧主形態")
                {
                    break;
                }
            }

            if (i > Information.UBound(uarray))
            {
                i = 1;
            }

            // １番機に現在のステータスを継承
            CopySpecialPowerInEffect(uarray[i]);
            RemoveAllSpecialPowerInEffect();
            {
                var withBlock = uarray[i];
                var loopTo2 = CountItem();
                for (j = 1; j <= loopTo2; j++)
                {
                    Item localItem() { object argIndex1 = j; var ret = Item(argIndex1); return ret; }

                    var argitm = localItem();
                    withBlock.AddItem(argitm);
                }

                var loopTo3 = CountItem();
                for (j = 1; j <= loopTo3; j++)
                {
                    object argIndex3 = 1;
                    DeleteItem(argIndex3);
                }

                withBlock.Master = Master;
                // UPGRADE_NOTE: オブジェクト Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Master = null;
                withBlock.Summoner = Summoner;
                // UPGRADE_NOTE: オブジェクト Summoner をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Summoner = null;
                withBlock.UsedSupportAttack = UsedSupportAttack;
                withBlock.UsedSupportGuard = UsedSupportGuard;
                withBlock.UsedSyncAttack = UsedSyncAttack;
                withBlock.UsedCounterAttack = UsedCounterAttack;
                var loopTo4 = CountServant();
                for (j = 1; j <= loopTo4; j++)
                {
                    Unit localServant() { object argIndex1 = j; var ret = Servant(argIndex1); return ret; }

                    var argu = localServant();
                    withBlock.AddServant(argu);
                }

                var loopTo5 = CountServant();
                for (j = 1; j <= loopTo5; j++)
                {
                    object argIndex4 = 1;
                    DeleteServant(argIndex4);
                }

                var loopTo6 = CountSlave();
                for (j = 1; j <= loopTo6; j++)
                {
                    Unit localSlave() { object argIndex1 = j; var ret = Slave(argIndex1); return ret; }

                    var argu1 = localSlave();
                    withBlock.AddSlave(argu1);
                }

                var loopTo7 = CountSlave();
                for (j = 1; j <= loopTo7; j++)
                {
                    object argIndex5 = 1;
                    DeleteSlave(argIndex5);
                }
            }

            // 各分離ユニットに対する処理
            n = 1;
            int counter;
            var loopTo8 = Information.UBound(uarray);
            for (i = 1; i <= loopTo8; i++)
            {
                {
                    var withBlock1 = uarray[i];
                    // 召喚ユニットでない場合は陣営を合わせる
                    string argfname = "召喚ユニット";
                    if (!withBlock1.IsFeatureAvailable(argfname))
                    {
                        withBlock1.Party = Party0;
                    }

                    // パイロットの搭乗
                    if (CountPilot() > 0)
                    {
                        var loopTo9 = Math.Abs(withBlock1.Data.PilotNum);
                        for (j = 1; j <= loopTo9; j++)
                        {
                            string argfname2 = "召喚ユニット";
                            if (withBlock1.IsFeatureAvailable(argfname2))
                            {
                                if (Status_Renamed == "出撃" | Status_Renamed == "格納")
                                {
                                    object argIndex6 = "追加パイロット";
                                    pname = withBlock1.FeatureData(argIndex6);
                                    PilotData localItem1() { object argIndex1 = pname; var ret = SRC.PDList.Item(argIndex1); return ret; }

                                    PilotData localItem2() { object argIndex1 = pname; var ret = SRC.PDList.Item(argIndex1); return ret; }

                                    if (Strings.InStr(localItem1().Name, "(ザコ)") > 0 | Strings.InStr(localItem2().Name, "(汎用)") > 0)
                                    {
                                        string argpparty = Party;
                                        string arggid = "";
                                        p = SRC.PList.Add(pname, MainPilot().Level, argpparty, gid: arggid);
                                        Party = argpparty;
                                        p.FullRecover();
                                    }
                                    else
                                    {
                                        bool localIsDefined() { object argIndex1 = pname; var ret = SRC.PList.IsDefined(argIndex1); return ret; }

                                        if (!localIsDefined())
                                        {
                                            string argpparty1 = Party;
                                            string arggid1 = "";
                                            p = SRC.PList.Add(pname, MainPilot().Level, argpparty1, gid: arggid1);
                                            Party = argpparty1;
                                            p.FullRecover();
                                        }
                                        else
                                        {
                                            object argIndex7 = pname;
                                            p = SRC.PList.Item(argIndex7);
                                        }
                                    }

                                    p.Ride(uarray[i]);
                                }
                            }
                            else
                            {
                                string argfname1 = "追加パイロット";
                                if (n <= CountPilot())
                                {
                                    Pilot localPilot() { object argIndex1 = n; var ret = Pilot(argIndex1); return ret; }

                                    localPilot().Ride(uarray[i]);
                                    n = (n + 1);
                                }
                                else if (!withBlock1.IsFeatureAvailable(argfname1))
                                {
                                    if (CountSupport() > 0)
                                    {
                                        object argIndex8 = 1;
                                        Support(argIndex8).Ride(uarray[i]);
                                        object argIndex9 = 1;
                                        DeleteSupport(argIndex9);
                                    }
                                    else
                                    {
                                        string argmsg1 = Name + "分離後のユニットに載せる" + "パイロットが存在しません。" + "データのパイロット数を確認して下さい。";
                                        GUI.ErrorMessage(argmsg1);
                                        SRC.TerminateSRC();
                                    }
                                }
                            }
                        }
                    }

                    withBlock1.Update();

                    // 母艦の場合は格納したユニットを受け渡し
                    string argfname3 = "母艦";
                    if (withBlock1.IsFeatureAvailable(argfname3))
                    {
                        var loopTo10 = CountUnitOnBoard();
                        for (j = 1; j <= loopTo10; j++)
                        {
                            Unit localUnitOnBoard() { object argIndex1 = j; var ret = UnitOnBoard(argIndex1); return ret; }

                            var argu2 = localUnitOnBoard();
                            withBlock1.LoadUnit(argu2);
                        }

                        var loopTo11 = CountUnitOnBoard();
                        for (j = 1; j <= loopTo11; j++)
                        {
                            object argIndex10 = 1;
                            UnloadUnit(argIndex10);
                        }
                    }

                    // ＨＰ＆ＥＮの同期
                    withBlock1.HP = (withBlock1.MaxHP * hp_ratio / 100d);
                    withBlock1.EN = (1 * withBlock1.MaxEN * en_ratio / 100d);

                    // 弾数を合わせる
                    idx = 1;
                    var loopTo12 = CountWeapon();
                    for (j = 1; j <= loopTo12; j++)
                    {
                        counter = idx;
                        var loopTo13 = withBlock1.CountWeapon();
                        for (k = counter; k <= loopTo13; k++)
                        {
                            if ((Weapon(j).Name ?? "") == (withBlock1.Weapon(k).Name ?? "") & this.Weapon(j).Bullet > 0 & withBlock1.Weapon(k).Bullet > 0)
                            {
                                withBlock1.SetBullet(k, ((withBlock1.MaxBullet(k) * Bullet(j)) / MaxBullet(j)));
                                idx = (k + 1);
                                break;
                            }
                        }
                    }

                    var loopTo14 = withBlock1.CountOtherForm();
                    for (j = 1; j <= loopTo14; j++)
                    {
                        object argIndex11 = j;
                        {
                            var withBlock2 = withBlock1.OtherForm(argIndex11);
                            idx = 1;
                            var loopTo15 = CountWeapon();
                            for (k = 1; k <= loopTo15; k++)
                            {
                                counter = idx;
                                var loopTo16 = withBlock2.CountWeapon();
                                for (l = counter; l <= loopTo16; l++)
                                {
                                    if ((Weapon(k).Name ?? "") == (withBlock2.Weapon(l).Name ?? "") & this.Weapon(k).Bullet > 0 & withBlock2.Weapon(l).Bullet > 0)
                                    {
                                        withBlock2.SetBullet(l, ((withBlock2.MaxBullet(l) * Bullet(k)) / MaxBullet(k)));
                                        idx = (l + 1);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    // 使用回数を合わせる
                    idx = 1;
                    var loopTo17 = CountAbility();
                    for (j = 1; j <= loopTo17; j++)
                    {
                        counter = idx;
                        var loopTo18 = withBlock1.CountAbility();
                        for (k = counter; k <= loopTo18; k++)
                        {
                            if ((Ability(j).Name ?? "") == (withBlock1.Ability(k).Name ?? "") & this.Ability(j).Stock > 0 & withBlock1.Ability(k).Stock > 0)
                            {
                                withBlock1.SetStock(k, ((withBlock1.Ability(k).Stock * Stock(j)) / MaxStock(j)));
                                idx = (k + 1);
                                break;
                            }
                        }
                    }

                    var loopTo19 = withBlock1.CountOtherForm();
                    for (j = 1; j <= loopTo19; j++)
                    {
                        object argIndex12 = j;
                        {
                            var withBlock3 = withBlock1.OtherForm(argIndex12);
                            idx = 1;
                            var loopTo20 = CountAbility();
                            for (k = 1; k <= loopTo20; k++)
                            {
                                counter = idx;
                                var loopTo21 = withBlock3.CountAbility();
                                for (l = counter; l <= loopTo21; l++)
                                {
                                    if ((Ability(k).Name ?? "") == (withBlock3.Ability(l).Name ?? "") & this.Ability(k).Stock > 0 & withBlock3.Ability(l).Stock > 0)
                                    {
                                        withBlock3.SetStock(l, ((withBlock3.Ability(l).Stock * Stock(k)) / MaxStock(k)));
                                        idx = (l + 1);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    // 弾数・使用回数共有の実現
                    withBlock1.SyncBullet();

                    // 出撃 or 格納？
                    withBlock1.Status_Renamed = Status_Renamed;
                    switch (Status_Renamed ?? "")
                    {
                        case "出撃":
                            {
                                if (i == 1)
                                {
                                    withBlock1.UsedAction = UsedAction;
                                }
                                else
                                {
                                    withBlock1.UsedAction = GeneralLib.MaxLng(UsedAction, withBlock1.UsedAction);
                                    withBlock1.UsedSupportAttack = 0;
                                    withBlock1.UsedSupportGuard = 0;
                                    withBlock1.UsedSyncAttack = 0;
                                    withBlock1.UsedCounterAttack = 0;
                                }

                                withBlock1.StandBy(x, y);
                                break;
                            }

                        case "格納":
                            {
                                foreach (Unit eu in SRC.UList)
                                {
                                    var loopTo22 = eu.CountOtherForm();
                                    for (j = 1; j <= loopTo22; j++)
                                    {
                                        Unit localUnitOnBoard1() { object argIndex1 = j; var ret = eu.UnitOnBoard(argIndex1); return ret; }

                                        if ((ID ?? "") == (localUnitOnBoard1().ID ?? ""))
                                        {
                                            eu.LoadUnit(uarray[i]);
                                            goto EndLoop;
                                        }
                                    }
                                }

                                EndLoop:
                                ;
                                break;
                            }
                    }

                    // ノーマルモードや制限時間つきの形態の場合は残り時間を付加
                    string argfname4 = "ノーマルモード";
                    string argfname5 = "制限時間";
                    if (withBlock1.IsFeatureAvailable(argfname4))
                    {
                        string localLIndex2() { object argIndex1 = "ノーマルモード"; string arglist = withBlock1.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                        if (Information.IsNumeric(localLIndex2()))
                        {
                            object argIndex14 = "残り時間";
                            if (withBlock1.IsConditionSatisfied(argIndex14))
                            {
                                object argIndex13 = "残り時間";
                                withBlock1.DeleteCondition(argIndex13);
                            }

                            string localLIndex() { object argIndex1 = "ノーマルモード"; string arglist = withBlock1.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                            string localLIndex1() { object argIndex1 = "ノーマルモード"; string arglist = withBlock1.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                            string argcname = "残り時間";
                            string argcdata = "";
                            withBlock1.AddCondition(argcname, Conversions.Toint(localLIndex1()), cdata: argcdata);
                        }
                    }
                    else if (withBlock1.IsFeatureAvailable(argfname5))
                    {
                        string argcname1 = "残り時間";
                        object argIndex15 = "制限時間";
                        object argIndex16 = "制限時間";
                        string argcdata1 = "";
                        withBlock1.AddCondition(argcname1, Conversions.Toint(withBlock1.FeatureData(argIndex16)), cdata: argcdata1);
                    }
                }
            }

            // パイロットを合体ユニットから削除
            var loopTo23 = CountPilot();
            for (i = 1; i <= loopTo23; i++)
            {
                object argIndex17 = 1;
                DeletePilot(argIndex17);
            }

            // サポートパイロットの乗り換え
            var loopTo24 = CountSupport();
            for (i = 1; i <= loopTo24; i++)
            {
                object argIndex18 = i;
                {
                    var withBlock4 = Support(argIndex18);
                    if (withBlock4.SupportIndex == 0)
                    {
                        Unit localItem3() { object argIndex1 = GeneralLib.LIndex(buf, 2); var ret = SRC.UList.Item(argIndex1); return ret; }

                        var argu3 = localItem3();
                        withBlock4.Ride(argu3);
                    }
                    else
                    {
                        withBlock4.Ride(uarray[withBlock4.SupportIndex]);
                    }
                }
            }

            var loopTo25 = CountSupport();
            for (i = 1; i <= loopTo25; i++)
            {
                object argIndex19 = 1;
                DeleteSupport(argIndex19);
            }

            // 格納されている場合は母艦から自分のエントリーを外しておく
            if (Status_Renamed == "格納")
            {
                foreach (Unit u in SRC.UList)
                {
                    var loopTo26 = u.CountUnitOnBoard();
                    for (j = 1; j <= loopTo26; j++)
                    {
                        Unit localUnitOnBoard2() { object argIndex1 = j; var ret = u.UnitOnBoard(argIndex1); return ret; }

                        if ((ID ?? "") == (localUnitOnBoard2().ID ?? ""))
                        {
                            object argIndex20 = ID;
                            u.UnloadUnit(argIndex20);
                            goto EndLoop2;
                        }
                    }
                }

                EndLoop2:
                ;
            }

            Status_Renamed = "他形態";

            // ユニットステータスコマンドの場合以外は制限時間付き合体ユニットは
            // ２度とその形態を利用できない
            if (string.IsNullOrEmpty(Map.MapFileName))
            {
                return;
            }

            string argfname6 = "制限時間";
            if (IsFeatureAvailable(argfname6))
            {
                string argcname2 = "行動不能";
                string argcdata2 = "";
                AddCondition(argcname2, -1, cdata: argcdata2);
            }
        }

        // 経験値を入手
        // t:ターゲット
        // exp_situation:経験値入手の理由
        // exp_mode:マップ攻撃による入手？
        public int GetExp(Unit t, string exp_situation, [Optional, DefaultParameterValue("")] string exp_mode)
        {
            int GetExpRet = default;
            var xp = default;
            int j, i, n;
            int prev_level;
            string[] prev_stype;
            string[] prev_sname;
            double[] prev_slevel;
            string[] prev_special_power;
            string stype, sname;
            Pilot p;
            string msg;

            // 経験値を入手するのは味方ユニット及びＮＰＣの召喚ユニットのみ
            string argfname = "召喚ユニット";
            if ((Party != "味方" | Party0 != "味方") & (Party != "ＮＰＣ" | Party0 != "ＮＰＣ" | !IsFeatureAvailable(argfname)))
            {
                return GetExpRet;
            }

            // メインパイロットの現在の能力を記録
            {
                var withBlock = MainPilot();
                prev_level = withBlock.Level;
                prev_special_power = new string[(withBlock.CountSpecialPower + 1)];
                var loopTo = withBlock.CountSpecialPower;
                for (i = 1; i <= loopTo; i++)
                    prev_special_power[i] = withBlock.get_SpecialPower(i);
                prev_stype = new string[(withBlock.CountSkill() + 1)];
                prev_sname = new string[(withBlock.CountSkill() + 1)];
                prev_slevel = new double[(withBlock.CountSkill() + 1)];
                var loopTo1 = withBlock.CountSkill();
                for (i = 1; i <= loopTo1; i++)
                {
                    object argIndex1 = i;
                    prev_stype[i] = withBlock.Skill(argIndex1);
                    object argIndex2 = i;
                    prev_sname[i] = withBlock.SkillName(argIndex2);
                    object argIndex3 = i;
                    string argref_mode = "基本値";
                    prev_slevel[i] = withBlock.SkillLevel(argIndex3, argref_mode);
                }
            }

            // ターゲットが指定されていない場合は自分がターゲット
            if (t is null)
            {
                t = this;
            }

            // ターゲットにパイロットが乗っていない場合は経験値なし
            if (t.CountPilot() == 0)
            {
                return GetExpRet;
            }

            // ユニットに乗っているパイロット総数を計算
            n = (CountPilot() + CountSupport());
            string argfname1 = "追加サポート";
            if (IsFeatureAvailable(argfname1))
            {
                n = (n + 1);
            }

            // 各パイロットが経験値を入手
            var loopTo2 = n;
            for (i = 1; i <= loopTo2; i++)
            {
                if (i <= CountPilot())
                {
                    object argIndex4 = i;
                    p = Pilot(argIndex4);
                }
                else if (i <= (CountPilot() + CountSupport()))
                {
                    object argIndex5 = i - CountPilot();
                    p = Support(argIndex5);
                }
                else
                {
                    p = AdditionalSupport();
                }

                switch (exp_situation ?? "")
                {
                    case "破壊":
                        {
                            xp = t.ExpValue + t.MainPilot().ExpValue;
                            string argsptype = "獲得経験値増加";
                            if (IsUnderSpecialPowerEffect(argsptype) & exp_mode != "パートナー")
                            {
                                string argsname = "獲得経験値増加";
                                xp = (xp * (1d + 0.1d * SpecialPowerEffectLevel(argsname)));
                            }

                            break;
                        }

                    case "攻撃":
                        {
                            xp = (t.ExpValue + t.MainPilot().ExpValue) / 10;
                            string argsptype1 = "獲得経験値増加";
                            if (IsUnderSpecialPowerEffect(argsptype1) & exp_mode != "パートナー")
                            {
                                string argsname1 = "獲得経験値増加";
                                xp = (xp * (1d + 0.1d * SpecialPowerEffectLevel(argsname1)));
                            }

                            break;
                        }

                    case "アビリティ":
                        {
                            if (ReferenceEquals(t, this))
                            {
                                xp = 50;
                            }
                            else
                            {
                                xp = 100;
                            }

                            break;
                        }

                    case "修理":
                        {
                            xp = 100;
                            break;
                        }

                    case "補給":
                        {
                            xp = 150;
                            break;
                        }
                }

                string argsptype2 = "獲得経験値増加";
                string argoname = "収得効果重複";
                if (!IsUnderSpecialPowerEffect(argsptype2) | Expression.IsOptionDefined(argoname))
                {
                    string argsname2 = "素質";
                    if (p.IsSkillAvailable(argsname2))
                    {
                        object argIndex7 = "素質";
                        if (p.IsSkillLevelSpecified(argIndex7))
                        {
                            object argIndex6 = "素質";
                            string argref_mode1 = "";
                            xp = ((long)(xp * (10d + p.SkillLevel(argIndex6, ref_mode: argref_mode1))) / 10L);
                        }
                        else
                        {
                            xp = (1.5d * xp);
                        }
                    }
                }

                string argsname3 = "遅成長";
                if (p.IsSkillAvailable(argsname3))
                {
                    xp = xp / 2;
                }

                // 対象のパイロットのレベル差による修正
                switch ((t.MainPilot().Level - p.Level))
                {
                    case var @case when @case > 7:
                        {
                            xp = 5 * xp;
                            break;
                        }

                    case 7:
                        {
                            xp = (4.5d * xp);
                            break;
                        }

                    case 6:
                        {
                            xp = 4 * xp;
                            break;
                        }

                    case 5:
                        {
                            xp = (3.5d * xp);
                            break;
                        }

                    case 4:
                        {
                            xp = 3 * xp;
                            break;
                        }

                    case 3:
                        {
                            xp = (2.5d * xp);
                            break;
                        }

                    case 2:
                        {
                            xp = 2 * xp;
                            break;
                        }

                    case 1:
                        {
                            xp = (1.5d * xp);
                            break;
                        }

                    case 0:
                        {
                            break;
                        }

                    case -1:
                        {
                            xp = xp / 2;
                            break;
                        }

                    case -2:
                        {
                            xp = xp / 4;
                            break;
                        }

                    case -3:
                        {
                            xp = xp / 6;
                            break;
                        }

                    case -4:
                        {
                            xp = xp / 8;
                            break;
                        }

                    case -5:
                        {
                            xp = xp / 10;
                            break;
                        }

                    case var case1 when case1 < -5:
                        {
                            xp = xp / 12;
                            break;
                        }
                }

                p.Exp = p.Exp + xp;

                // 一番目のパイロットが獲得した経験値を返す
                if (i == 1)
                {
                    GetExpRet = xp;
                }
            }

            // 追加パイロットの場合、一番目のパイロットにレベル、経験値を合わせる
            object argIndex10 = 1;
            object argIndex11 = 1;
            if (!ReferenceEquals(MainPilot(), Pilot(argIndex11)))
            {
                object argIndex8 = 1;
                MainPilot().Level = Pilot(argIndex8).Level;
                object argIndex9 = 1;
                MainPilot().Exp = Pilot(argIndex9).Exp;
            }

            // 召喚主も経験値を入手
            if (Summoner is object)
            {
                string argexp_mode = "パートナー";
                Summoner.CurrentForm().GetExp(t, exp_situation, argexp_mode);
            }

            // マップ攻撃による経験値収得の場合はメッセージ表示を省略
            if (exp_mode == "マップ")
            {
                return GetExpRet;
            }

            // 経験値入手時のメッセージ
            {
                var withBlock1 = MainPilot();
                if (withBlock1.Level > prev_level)
                {
                    // レベルアップ

                    string argmain_situation2 = "レベルアップ";
                    string argsub_situation2 = "";
                    string argmain_situation3 = "レベルアップ";
                    string argsub_situation3 = "";
                    if (IsAnimationDefined(argmain_situation2, sub_situation: argsub_situation2))
                    {
                        string argmain_situation = "レベルアップ";
                        string argsub_situation = "";
                        PlayAnimation(argmain_situation, sub_situation: argsub_situation);
                    }
                    else if (IsSpecialEffectDefined(argmain_situation3, sub_situation: argsub_situation3))
                    {
                        string argmain_situation1 = "レベルアップ";
                        string argsub_situation1 = "";
                        SpecialEffect(argmain_situation1, sub_situation: argsub_situation1);
                    }

                    string argmain_situation4 = "レベルアップ";
                    if (IsMessageDefined(argmain_situation4))
                    {
                        string argSituation = "レベルアップ";
                        string argmsg_mode = "";
                        PilotMessage(argSituation, msg_mode: argmsg_mode);
                    }

                    msg = withBlock1.get_Nickname(false) + "は経験値[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(GetExpRet) + "]を獲得、" + "レベル[" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock1.Level) + "]にレベルアップ。";

                    // 特殊能力の習得
                    var loopTo3 = withBlock1.CountSkill();
                    for (i = 1; i <= loopTo3; i++)
                    {
                        object argIndex12 = i;
                        stype = withBlock1.Skill(argIndex12);
                        object argIndex13 = i;
                        sname = withBlock1.SkillName(argIndex13);
                        if (Strings.InStr(sname, "非表示") == 0)
                        {
                            switch (stype ?? "")
                            {
                                case "同調率":
                                case "霊力":
                                case "追加レベル":
                                case "魔力所有":
                                    {
                                        break;
                                    }

                                case "ＳＰ消費減少":
                                case "スペシャルパワー自動発動":
                                case "ハンター":
                                    {
                                        var loopTo4 = Information.UBound(prev_stype);
                                        for (j = 1; j <= loopTo4; j++)
                                        {
                                            if ((stype ?? "") == (prev_stype[j] ?? ""))
                                            {
                                                if ((sname ?? "") == (prev_sname[j] ?? ""))
                                                {
                                                    break;
                                                }
                                            }
                                        }

                                        if (j > Information.UBound(prev_stype))
                                        {
                                            msg = msg + ";" + sname + "を習得した。";
                                        }

                                        break;
                                    }

                                default:
                                    {
                                        var loopTo5 = Information.UBound(prev_stype);
                                        for (j = 1; j <= loopTo5; j++)
                                        {
                                            if ((stype ?? "") == (prev_stype[j] ?? ""))
                                            {
                                                break;
                                            }
                                        }

                                        double localSkillLevel() { object argIndex1 = i; string argref_mode = "基本値"; var ret = withBlock1.SkillLevel(argIndex1, argref_mode); return ret; }

                                        if (j > Information.UBound(prev_stype))
                                        {
                                            msg = msg + ";" + sname + "を習得した。";
                                        }
                                        else if (localSkillLevel() > prev_slevel[j])
                                        {
                                            msg = msg + ";" + prev_sname[j] + " => " + sname + "。";
                                        }

                                        break;
                                    }
                            }
                        }
                    }

                    // スペシャルパワーの習得
                    if (withBlock1.CountSpecialPower > Information.UBound(prev_special_power))
                    {
                        string argtname = "スペシャルパワー";
                        var argu = this;
                        msg = msg + ";" + Expression.Term(argtname, argu);
                        var loopTo6 = withBlock1.CountSpecialPower;
                        for (i = 1; i <= loopTo6; i++)
                        {
                            sname = withBlock1.get_SpecialPower(i);
                            var loopTo7 = Information.UBound(prev_special_power);
                            for (j = 1; j <= loopTo7; j++)
                            {
                                if ((sname ?? "") == (prev_special_power[j] ?? ""))
                                {
                                    break;
                                }
                            }

                            if (j > Information.UBound(prev_special_power))
                            {
                                msg = msg + "「" + sname + "」";
                            }
                        }

                        msg = msg + "を習得した。";
                    }

                    GUI.DisplaySysMessage(msg);
                    if (GUI.MessageWait < 10000)
                    {
                        GUI.Sleep(GUI.MessageWait);
                    }

                    Event_Renamed.HandleEvent("レベルアップ", withBlock1.ID);
                    SRC.PList.UpdateSupportMod(this);
                }
                else if (GetExpRet > 0)
                {
                    GUI.DisplaySysMessage(withBlock1.get_Nickname(false) + "は" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(GetExpRet) + "の経験値を得た。");
                }
            }

            return GetExpRet;
        }

        // ユニットの陣営を変更
        public void ChangeParty(string new_party)
        {
            int i;

            // 陣営を変更
            Party = new_party;

            // ビットマップを作り直す
            var argu = this;
            BitmapID = GUI.MakeUnitBitmap(argu);

            // パイロットの陣営を変更
            var loopTo = CountPilot();
            for (i = 1; i <= loopTo; i++)
            {
                Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                localPilot().Party = new_party;
            }

            var loopTo1 = CountSupport();
            for (i = 1; i <= loopTo1; i++)
            {
                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                localSupport().Party = new_party;
            }

            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                AdditionalSupport().Party = new_party;
            }

            // 他形態の陣営を変更
            var loopTo2 = CountOtherForm();
            for (i = 1; i <= loopTo2; i++)
            {
                Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                localOtherForm().Party = new_party;
                Unit localOtherForm1() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                localOtherForm1().BitmapID = 0;
            }

            // 出撃中？
            if (Status_Renamed == "出撃")
            {
                // 自分の陣営のステージなら行動可能に
                if ((Party ?? "") == (SRC.Stage ?? ""))
                {
                    Rest();
                }
                // マップ上のユニット画像を更新
                var argu1 = this;
                GUI.PaintUnitBitmap(argu1);
            }

            SRC.PList.UpdateSupportMod(this);

            // 思考モードを通常に
            Mode = "通常";
        }

        // ユニットに乗っているパイロットの気力をnumだけ増減
        // is_event:イベントによる気力増減(性格を無視して気力操作)
        public void IncreaseMorale(int num, bool is_event = false)
        {
            Pilot p;
            if (CountPilot() == 0)
            {
                return;
            }

            // メインパイロット
            {
                var withBlock = MainPilot();
                if (withBlock.Personality != "機械" | is_event)
                {
                    withBlock.Morale = (withBlock.Morale + num);
                }
            }

            // サブパイロット
            foreach (Pilot currentP in colPilot)
            {
                p = currentP;
                if ((MainPilot().ID ?? "") != (p.ID ?? "") & (p.Personality != "機械" | is_event))
                {
                    p.Morale = (p.Morale + num);
                }
            }

            // サポート
            foreach (Pilot currentP1 in colSupport)
            {
                p = currentP1;
                if (p.Personality != "機械" | is_event)
                {
                    p.Morale = (p.Morale + num);
                }
            }

            // 追加サポート
            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                {
                    var withBlock1 = AdditionalSupport();
                    if (withBlock1.Personality != "機械" | is_event)
                    {
                        withBlock1.Morale = (withBlock1.Morale + num);
                    }
                }
            }
        }

        // ユニットが破壊された時の処理
        public void Die(bool without_update = false)
        {
            int i, j;
            string pname;
            HP = 0;
            Status_Renamed = "破壊";

            // 破壊をキャンセルし、破壊イベント内で処理をしたい場合
            object argIndex2 = "破壊キャンセル";
            if (IsConditionSatisfied(argIndex2))
            {
                object argIndex1 = "破壊キャンセル";
                DeleteCondition(argIndex1);
                goto SkipExplode;
            }

            // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Map.MapDataForUnit[x, y] = null;

            // 爆発表示
            GUI.ClearPicture();
            string argmain_situation2 = "脱出";
            string argsub_situation2 = "";
            string argmain_situation3 = "脱出";
            string argsub_situation3 = "";
            if (IsAnimationDefined(argmain_situation2, sub_situation: argsub_situation2))
            {
                GUI.EraseUnitBitmap(x, y, false);
                string argmain_situation = "脱出";
                string argsub_situation = "";
                PlayAnimation(argmain_situation, sub_situation: argsub_situation);
            }
            else if (IsSpecialEffectDefined(argmain_situation3, sub_situation: argsub_situation3))
            {
                GUI.EraseUnitBitmap(x, y, false);
                string argmain_situation1 = "脱出";
                string argsub_situation1 = "";
                SpecialEffect(argmain_situation1, sub_situation: argsub_situation1);
            }
            else
            {
                var argu = this;
                Effect.DieAnimation(argu);
            }

            SkipExplode:
            ;


            // 召喚したユニットを解放
            DismissServant();

            // 魅了・憑依したユニットを解放
            DismissSlave();
            if (Master is object)
            {
                object argIndex3 = ID;
                Master.CurrentForm().DeleteSlave(argIndex3);
                // UPGRADE_NOTE: オブジェクト Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Master = null;
            }

            if (Summoner is object)
            {
                object argIndex4 = ID;
                Summoner.CurrentForm().DeleteServant(argIndex4);
                // UPGRADE_NOTE: オブジェクト Summoner をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                Summoner = null;
            }

            // 支配しているユニットを強制退却
            string argfname = "支配";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex6 = "支配";
                string arglist1 = FeatureData(argIndex6);
                var loopTo = GeneralLib.LLength(arglist1);
                for (i = 2; i <= loopTo; i++)
                {
                    object argIndex5 = "支配";
                    string arglist = FeatureData(argIndex5);
                    pname = GeneralLib.LIndex(arglist, i);
                    foreach (Pilot p in SRC.PList)
                    {
                        if ((p.Name ?? "") == (pname ?? "") | (p.get_Nickname(false) ?? "") == (pname ?? ""))
                        {
                            if (p.Unit_Renamed is object)
                            {
                                if (p.Unit_Renamed.Status_Renamed == "出撃" | p.Unit_Renamed.Status_Renamed == "格納")
                                {
                                    p.Unit_Renamed.Die(true);
                                }
                            }
                        }
                    }
                }
            }

            // 情報更新
            if (!without_update)
            {
                SRC.PList.UpdateSupportMod(this);
            }
        }

        // スペシャルパワー自爆による自爆
        public void SuicidalExplosion(bool is_event = false)
        {
            int i, j;
            int prev_hp;
            Unit u, t;
            int dmg, tdmg;
            string uname, fname;
            string argSituation = "自爆";
            string argmsg_mode = "";
            PilotMessage(argSituation, msg_mode: argmsg_mode);
            GUI.DisplaySysMessage(Nickname + "は自爆した。");

            // ダメージ量設定
            dmg = HP;

            // 効果範囲の設定
            string arguparty = "";
            Map.AreaInRange(x, y, 1, 1, arguparty);
            Map.MaskData[x, y] = true;

            // 爆発
            GUI.EraseUnitBitmap(x, y);
            string argtsize = Size;
            Effect.ExplodeAnimation(argtsize, x, y);
            this.Size = argtsize;

            // パーツ分離できれば自爆後にパーツ分離
            string argfname = "パーツ分離";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex1 = "パーツ分離";
                string arglist = FeatureData(argIndex1);
                uname = GeneralLib.LIndex(arglist, 2);
                Unit localOtherForm() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

                if (localOtherForm().IsAbleToEnter(x, y))
                {
                    Transform(uname);
                    Map.MapDataForUnit[x, y].HP = Map.MapDataForUnit[x, y].MaxHP;
                    object argIndex2 = "パーツ分離";
                    fname = FeatureName(argIndex2);
                    bool localIsSysMessageDefined() { string argmain_situation = "破壊時分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsSysMessageDefined1() { string argmain_situation = "分離(" + Name + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    bool localIsSysMessageDefined2() { string argmain_situation = "分離(" + fname + ")"; string argsub_situation = ""; var ret = IsSysMessageDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    string argmain_situation6 = "破壊時分離(" + Name + ")";
                    string argsub_situation6 = "";
                    string argmain_situation7 = "破壊時分離";
                    string argsub_situation7 = "";
                    string argmain_situation8 = "分離";
                    string argsub_situation8 = "";
                    if (IsSysMessageDefined(argmain_situation6, sub_situation: argsub_situation6))
                    {
                        string argmain_situation = "破壊時分離(" + Name + ")";
                        string argsub_situation = "";
                        string argadd_msg = "";
                        SysMessage(argmain_situation, sub_situation: argsub_situation, add_msg: argadd_msg);
                    }
                    else if (localIsSysMessageDefined())
                    {
                        string argmain_situation1 = "破壊時分離(" + fname + ")";
                        string argsub_situation1 = "";
                        string argadd_msg1 = "";
                        SysMessage(argmain_situation1, sub_situation: argsub_situation1, add_msg: argadd_msg1);
                    }
                    else if (IsSysMessageDefined(argmain_situation7, sub_situation: argsub_situation7))
                    {
                        string argmain_situation2 = "破壊時分離";
                        string argsub_situation2 = "";
                        string argadd_msg2 = "";
                        SysMessage(argmain_situation2, sub_situation: argsub_situation2, add_msg: argadd_msg2);
                    }
                    else if (localIsSysMessageDefined1())
                    {
                        string argmain_situation3 = "分離(" + Name + ")";
                        string argsub_situation3 = "";
                        string argadd_msg3 = "";
                        SysMessage(argmain_situation3, sub_situation: argsub_situation3, add_msg: argadd_msg3);
                    }
                    else if (localIsSysMessageDefined2())
                    {
                        string argmain_situation4 = "分離(" + fname + ")";
                        string argsub_situation4 = "";
                        string argadd_msg4 = "";
                        SysMessage(argmain_situation4, sub_situation: argsub_situation4, add_msg: argadd_msg4);
                    }
                    else if (IsSysMessageDefined(argmain_situation8, sub_situation: argsub_situation8))
                    {
                        string argmain_situation5 = "分離";
                        string argsub_situation5 = "";
                        string argadd_msg5 = "";
                        SysMessage(argmain_situation5, sub_situation: argsub_situation5, add_msg: argadd_msg5);
                    }
                    else
                    {
                        GUI.DisplaySysMessage(Nickname + "は破壊されたパーツを分離させた。");
                    }

                    goto SkipSuicide;
                }
            }

            // 自分を破壊
            HP = 0;
            var argu1 = this;
            object argu2 = null;
            GUI.UpdateMessageForm(argu1, u2: argu2);
            // 既に爆発アニメーションを表示しているので
            string argcname = "破壊キャンセル";
            string argcdata = "";
            AddCondition(argcname, 1, cdata: argcdata);
            // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Map.MapDataForUnit[x, y] = null;
            Die();
            if (!is_event)
            {
                u = Commands.SelectedUnit;
                Commands.SelectedUnit = this;
                Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                Commands.SelectedUnit = u;
                if (SRC.IsScenarioFinished)
                {
                    SRC.IsScenarioFinished = false;
                    return;
                }
            }

            SkipSuicide:
            ;


            // 周りのエリアに爆発効果を適用
            var loopTo = Map.MapWidth;
            for (i = 1; i <= loopTo; i++)
            {
                var loopTo1 = Map.MapHeight;
                for (j = 1; j <= loopTo1; j++)
                {
                    if (Map.MaskData[i, j])
                    {
                        goto NextLoop;
                    }

                    t = Map.MapDataForUnit[i, j];
                    if (t is null)
                    {
                        goto NextLoop;
                    }

                    {
                        var withBlock = t;
                        GUI.ClearMessageForm();
                        if (CurrentForm().Party == "味方" | CurrentForm().Party == "ＮＰＣ")
                        {
                            object argu21 = CurrentForm();
                            GUI.UpdateMessageForm(t, argu21);
                        }
                        else
                        {
                            object argu22 = t;
                            GUI.UpdateMessageForm(CurrentForm(), argu22);
                        }

                        // ダメージの適用
                        prev_hp = withBlock.HP;
                        object argIndex3 = "無敵";
                        object argIndex4 = "不死身";
                        if (withBlock.IsConditionSatisfied(argIndex3))
                        {
                            tdmg = 0;
                        }
                        else if (withBlock.IsConditionSatisfied(argIndex4))
                        {
                            withBlock.HP = GeneralLib.MaxLng(withBlock.HP - dmg, 10);
                            tdmg = prev_hp - withBlock.HP;
                        }
                        else
                        {
                            withBlock.HP = withBlock.HP - dmg;
                            tdmg = prev_hp - withBlock.HP;
                        }

                        // 特殊能力「不安定」による暴走チェック
                        string argfname1 = "不安定";
                        if (withBlock.IsFeatureAvailable(argfname1))
                        {
                            object argIndex5 = "暴走";
                            if (withBlock.HP <= withBlock.MaxHP / 4 & !withBlock.IsConditionSatisfied(argIndex5))
                            {
                                string argcname1 = "暴走";
                                string argcdata1 = "";
                                withBlock.AddCondition(argcname1, -1, cdata: argcdata1);
                                withBlock.Update();
                            }
                        }

                        // ダメージを受ければ眠りからさめる
                        object argIndex7 = "睡眠";
                        if (withBlock.IsConditionSatisfied(argIndex7))
                        {
                            object argIndex6 = "睡眠";
                            withBlock.DeleteCondition(argIndex6);
                        }

                        if (CurrentForm().Party == "味方" | CurrentForm().Party == "ＮＰＣ")
                        {
                            object argu23 = CurrentForm();
                            GUI.UpdateMessageForm(t, argu23);
                        }
                        else
                        {
                            object argu24 = t;
                            GUI.UpdateMessageForm(CurrentForm(), argu24);
                        }

                        if (withBlock.HP > 0)
                        {
                            string argmsg = Microsoft.VisualBasic.Compatibility.VB6.Support.Format(tdmg);
                            GUI.DrawSysString(withBlock.x, withBlock.y, argmsg);
                            // UPGRADE_ISSUE: Control picMain は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                            GUI.MainForm.picMain(0).Refresh();
                        }

                        if (withBlock.HP == 0)
                        {
                            string argsptype = "復活";
                            if (withBlock.IsUnderSpecialPowerEffect(argsptype))
                            {
                                withBlock.HP = withBlock.MaxHP;
                                string argstype = "破壊";
                                withBlock.RemoveSpecialPowerInEffect(argstype);
                                GUI.DisplaySysMessage(withBlock.Nickname + "は復活した！");
                                goto NextLoop;
                            }

                            string argfname2 = "パーツ分離";
                            if (withBlock.IsFeatureAvailable(argfname2))
                            {
                                object argIndex8 = "パーツ分離";
                                string arglist1 = withBlock.FeatureData(argIndex8);
                                uname = GeneralLib.LIndex(arglist1, 2);
                                Unit localOtherForm1() { object argIndex1 = uname; var ret = withBlock.OtherForm(argIndex1); return ret; }

                                if (localOtherForm1().IsAbleToEnter(withBlock.x, withBlock.y))
                                {
                                    withBlock.Transform(uname);
                                    {
                                        var withBlock1 = withBlock.CurrentForm();
                                        withBlock1.HP = withBlock1.MaxHP;
                                        withBlock1.UsedAction = withBlock1.MaxAction();
                                    }

                                    GUI.DisplaySysMessage(withBlock.Nickname + "は破壊されたパーツを分離させた。");
                                    goto NextLoop;
                                }
                            }

                            withBlock.Die();
                        }

                        if (!is_event)
                        {
                            u = Commands.SelectedUnit;
                            Commands.SelectedUnit = withBlock.CurrentForm();
                            Commands.SelectedTarget = this;
                            if (withBlock.Status_Renamed == "破壊")
                            {
                                GUI.DisplaySysMessage(withBlock.Nickname + "は破壊された");
                                Event_Renamed.HandleEvent("破壊", withBlock.MainPilot().ID);
                            }
                            else
                            {
                                GUI.DisplaySysMessage(withBlock.Nickname + "は" + tdmg + "のダメージを受けた。;" + "残りＨＰは" + Microsoft.VisualBasic.Compatibility.VB6.Support.Format(withBlock.HP) + "（損傷率 = " + 100 * (withBlock.MaxHP - withBlock.HP) / withBlock.MaxHP + "％）");
                                Event_Renamed.HandleEvent("損傷率", withBlock.MainPilot().ID, 100 - withBlock.HP * 100 / withBlock.MaxHP);
                            }

                            Commands.SelectedUnit = u;
                            if (SRC.IsScenarioFinished)
                            {
                                SRC.IsScenarioFinished = false;
                                return;
                            }
                        }
                    }

                    NextLoop:
                    ;
                }
            }
        }


        // === ステータス回復関連処理 ===

        // ステータスを全回復
        public void FullRecover()
        {
            int i, j;

            // パイロットのステータスを全回復
            var loopTo = CountPilot();
            for (i = 1; i <= loopTo; i++)
            {
                Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                localPilot().FullRecover();
            }

            var loopTo1 = CountSupport();
            for (i = 1; i <= loopTo1; i++)
            {
                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                localSupport().FullRecover();
            }

            string argfname = "追加パイロット";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex1 = "追加パイロット";
                object argIndex2 = FeatureData(argIndex1);
                if (SRC.PList.IsDefined(argIndex2))
                {
                    Pilot localItem() { object argIndex1 = "追加パイロット"; object argIndex2 = FeatureData(argIndex1); var ret = SRC.PList.Item(argIndex2); return ret; }

                    localItem().FullRecover();
                }
            }

            {
                var withBlock = CurrentForm();
                // ＨＰを回復
                withBlock.HP = withBlock.MaxHP;

                // ＥＮ、弾数を回復
                withBlock.FullSupply();

                // ステータス異常のみを消去
                i = 1;
                while (i <= withBlock.CountCondition())
                {
                    string localCondition() { object argIndex1 = i; var ret = withBlock.Condition(argIndex1); return ret; }

                    string localCondition1() { object argIndex1 = i; var ret = withBlock.Condition(argIndex1); return ret; }

                    string localCondition2() { object argIndex1 = i; var ret = withBlock.Condition(argIndex1); return ret; }

                    string localCondition3() { object argIndex1 = i; var ret = withBlock.Condition(argIndex1); return ret; }

                    string localCondition4() { object argIndex1 = i; var ret = withBlock.Condition(argIndex1); return ret; }

                    string localCondition5() { object argIndex1 = i; var ret = withBlock.Condition(argIndex1); return ret; }

                    string localCondition6() { object argIndex1 = i; var ret = withBlock.Condition(argIndex1); return ret; }

                    if (localCondition() == "残り時間" | localCondition1() == "非操作" | Strings.Right(localCondition2(), 2) == "付加" | Strings.Right(localCondition3(), 2) == "強化" | Strings.Right(localCondition4(), 3) == "付加２" | Strings.Right(localCondition5(), 3) == "強化２" | Strings.Right(localCondition6(), 2) == "ＵＰ")
                    {
                        i = (i + 1);
                    }
                    else
                    {
                        object argIndex3 = i;
                        withBlock.DeleteCondition(argIndex3);
                    }
                }

                // サポートアタック＆ガード、同時援護攻撃、カウンター攻撃回数回復
                withBlock.UsedSupportAttack = 0;
                withBlock.UsedSupportGuard = 0;
                withBlock.UsedSyncAttack = 0;
                withBlock.UsedCounterAttack = 0;
                withBlock.Mode = "通常";

                // 他形態も回復
                var loopTo2 = withBlock.CountOtherForm();
                for (i = 1; i <= loopTo2; i++)
                {
                    object argIndex4 = i;
                    {
                        var withBlock1 = withBlock.OtherForm(argIndex4);
                        withBlock1.HP = withBlock1.MaxHP;
                        withBlock1.EN = withBlock1.MaxEN;
                        var loopTo3 = withBlock1.CountWeapon();
                        for (j = 1; j <= loopTo3; j++)
                            withBlock1.SetBullet(j, withBlock1.MaxBullet(j));
                        var loopTo4 = withBlock1.CountAbility();
                        for (j = 1; j <= loopTo4; j++)
                            withBlock1.SetStock(j, withBlock1.MaxStock(j));
                    }
                }
            }
        }

        // ＥＮ＆弾数を回復
        public void FullSupply()
        {
            int i, j;

            // ＥＮ回復
            EN = MaxEN;

            // 弾数回復
            var loopTo = CountWeapon();
            for (i = 1; i <= loopTo; i++)
                dblBullet[i] = 1d;
            var loopTo1 = CountAbility();
            for (i = 1; i <= loopTo1; i++)
                dblStock[i] = 1d;

            // 他形態も回復
            var loopTo2 = CountOtherForm();
            for (i = 1; i <= loopTo2; i++)
            {
                object argIndex1 = i;
                {
                    var withBlock = OtherForm(argIndex1);
                    withBlock.EN = withBlock.MaxEN;
                    var loopTo3 = withBlock.CountWeapon();
                    for (j = 1; j <= loopTo3; j++)
                        withBlock.SetBullet(j, withBlock.MaxBullet(j));
                    var loopTo4 = withBlock.CountAbility();
                    for (j = 1; j <= loopTo4; j++)
                        withBlock.SetStock(j, withBlock.MaxStock(j));
                }
            }
        }

        // 弾数のみを回復
        public void BulletSupply()
        {
            int i, j;
            var loopTo = CountWeapon();
            for (i = 1; i <= loopTo; i++)
                dblBullet[i] = 1d;

            // 他形態も回復
            var loopTo1 = CountOtherForm();
            for (i = 1; i <= loopTo1; i++)
            {
                object argIndex1 = i;
                {
                    var withBlock = OtherForm(argIndex1);
                    var loopTo2 = withBlock.CountWeapon();
                    for (j = 1; j <= loopTo2; j++)
                        withBlock.SetBullet(j, withBlock.MaxBullet(j));
                }
            }
        }

        // ＨＰを percent ％回復
        public void RecoverHP(double percent)
        {
            HP = (HP + MaxHP * percent / 100d);
            if (HP <= 0)
            {
                HP = 1;
            }

            // 特殊能力「不安定」による暴走チェック
            string argfname = "不安定";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex1 = "暴走";
                if (HP <= MaxHP / 4 & !IsConditionSatisfied(argIndex1))
                {
                    string argcname = "暴走";
                    string argcdata = "";
                    AddCondition(argcname, -1, cdata: argcdata);
                }
            }
        }

        // ＥＮを percent ％回復
        public void RecoverEN(double percent)
        {
            EN = (EN + MaxEN * percent / 100d);
            if (EN <= 0)
            {
                EN = 0;
            }
        }

        // ターン経過によるステータス回復
        public void Rest()
        {
            int hp_recovery = default, en_recovery = default;
            int hp_up = default, en_up = default;
            double hp_ratio, en_ratio;
            string spname, buf;
            int i, j;
            Unit u;
            TerrainData td;
            string cname;
            var is_time_limit = default(bool);
            var next_form = default(string);
            // ADD START MARGE
            var is_terrain_effective = default(bool);
            var is_immune_to_terrain_effect = default(bool);
            // ADD END MARGE

            // 味方ステージの1ターン目(スタートイベント直後)は回復を行わない
            if (SRC.Stage == "味方" & SRC.Turn == 1)
            {
                return;
            }

            // データ更新
            Update();

            // 変形に対応して自分を登録
            u = this;
            {
                var withBlock = MainPilot();
                // 霊力回復
                if (withBlock.MaxPlana() > 0)
                {
                    hp_ratio = 100 * HP / (double)MaxHP;
                    en_ratio = 100 * EN / (double)MaxEN;
                    object argIndex1 = "霊力回復";
                    object argIndex2 = "霊力消費";
                    withBlock.Plana = (withBlock.Plana + withBlock.MaxPlana() / 16 + (long)(withBlock.MaxPlana() * FeatureLevel(argIndex1)) / 10L - (long)(withBlock.MaxPlana() * FeatureLevel(argIndex2)) / 10L);
                    HP = ((long)(MaxHP * hp_ratio) / 100L);
                    EN = ((long)(MaxEN * en_ratio) / 100L);
                }

                // ＳＰ回復
                string argsname = "ＳＰ回復";
                if (withBlock.IsSkillAvailable(argsname))
                {
                    withBlock.SP = withBlock.SP + withBlock.Level / 8 + 5;
                }

                string argsname1 = "精神統一";
                if (withBlock.IsSkillAvailable(argsname1))
                {
                    if (withBlock.SP < withBlock.MaxSP / 5)
                    {
                        withBlock.SP = withBlock.SP + withBlock.MaxSP / 10;
                    }
                }
            }

            // ＳＰ回復
            var loopTo = CountPilot();
            for (i = 2; i <= loopTo; i++)
            {
                object argIndex3 = i;
                {
                    var withBlock1 = Pilot(argIndex3);
                    string argsname2 = "ＳＰ回復";
                    if (withBlock1.IsSkillAvailable(argsname2))
                    {
                        withBlock1.SP = withBlock1.SP + withBlock1.Level / 8 + 5;
                    }

                    string argsname3 = "精神統一";
                    if (withBlock1.IsSkillAvailable(argsname3))
                    {
                        if (withBlock1.SP < withBlock1.MaxSP / 5)
                        {
                            withBlock1.SP = withBlock1.SP + withBlock1.MaxSP / 10;
                        }
                    }
                }
            }

            var loopTo1 = CountSupport();
            for (i = 1; i <= loopTo1; i++)
            {
                object argIndex4 = i;
                {
                    var withBlock2 = Support(argIndex4);
                    string argsname4 = "ＳＰ回復";
                    if (withBlock2.IsSkillAvailable(argsname4))
                    {
                        withBlock2.SP = withBlock2.SP + withBlock2.Level / 8 + 5;
                    }

                    string argsname5 = "精神統一";
                    if (withBlock2.IsSkillAvailable(argsname5))
                    {
                        if (withBlock2.SP < withBlock2.MaxSP / 5)
                        {
                            withBlock2.SP = withBlock2.SP + withBlock2.MaxSP / 10;
                        }
                    }
                }
            }

            string argfname = "追加サポート";
            if (IsFeatureAvailable(argfname))
            {
                {
                    var withBlock3 = AdditionalSupport();
                    string argsname6 = "ＳＰ回復";
                    if (withBlock3.IsSkillAvailable(argsname6))
                    {
                        withBlock3.SP = withBlock3.SP + withBlock3.Level / 8 + 5;
                    }

                    string argsname7 = "精神統一";
                    if (withBlock3.IsSkillAvailable(argsname7))
                    {
                        if (withBlock3.SP < withBlock3.MaxSP / 5)
                        {
                            withBlock3.SP = withBlock3.SP + withBlock3.MaxSP / 10;
                        }
                    }
                }
            }

            // 行動回数
            UsedAction = 0;

            // スペシャルパワー効果を解除
            string argstype = "ターン";
            RemoveSpecialPowerInEffect(argstype);

            // スペシャルパワー自動発動
            {
                var withBlock4 = MainPilot();
                var loopTo2 = withBlock4.CountSkill();
                for (i = 1; i <= loopTo2; i++)
                {
                    object argIndex5 = i;
                    if (withBlock4.Skill(argIndex5) == "スペシャルパワー自動発動")
                    {
                        string localSkillData() { object argIndex1 = i; var ret = withBlock4.SkillData(argIndex1); return ret; }

                        string arglist = localSkillData();
                        spname = GeneralLib.LIndex(arglist, 2);
                        string localSkillData1() { object argIndex1 = i; var ret = withBlock4.SkillData(argIndex1); return ret; }

                        string localLIndex() { string arglist = hsbeebf58ad14b49d88a05b39a41264136(); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                        int localStrToLng() { string argexpr = hsa615f5f7d41941adb5ff8c50a645e7c9(); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                        if (withBlock4.Morale >= localStrToLng() & !IsSpecialPowerInEffect(spname))
                        {
                            GUI.Center(x, y);
                            withBlock4.UseSpecialPower(spname, 0d);
                            if (Status_Renamed == "他形態")
                            {
                                return;
                            }
                        }
                    }
                }

                object argIndex7 = "スペシャルパワー自動発動付加";
                object argIndex8 = "スペシャルパワー自動発動付加２";
                if (IsConditionSatisfied(argIndex7) | IsConditionSatisfied(argIndex8))
                {
                    object argIndex6 = "スペシャルパワー自動発動";
                    string arglist1 = withBlock4.SkillData(argIndex6);
                    spname = GeneralLib.LIndex(arglist1, 2);
                    string localLIndex1() { object argIndex1 = "スペシャルパワー自動発動"; string arglist = withBlock4.SkillData(argIndex1); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                    int localStrToLng1() { string argexpr = hs007c2f9d021b4299932cdd690ee4914e(); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                    if (withBlock4.Morale >= localStrToLng1() & !IsSpecialPowerInEffect(spname))
                    {
                        GUI.Center(x, y);
                        withBlock4.UseSpecialPower(spname, 0d);
                        if (Status_Renamed == "他形態")
                        {
                            return;
                        }
                    }
                }
            }

            var loopTo3 = CountPilot();
            for (i = 2; i <= loopTo3; i++)
            {
                object argIndex10 = i;
                {
                    var withBlock5 = Pilot(argIndex10);
                    var loopTo4 = withBlock5.CountSkill();
                    for (j = 1; j <= loopTo4; j++)
                    {
                        object argIndex9 = j;
                        if (withBlock5.Skill(argIndex9) == "スペシャルパワー自動発動")
                        {
                            string localSkillData2() { object argIndex1 = j; var ret = withBlock5.SkillData(argIndex1); return ret; }

                            string arglist2 = localSkillData2();
                            spname = GeneralLib.LIndex(arglist2, 2);
                            string localSkillData3() { object argIndex1 = j; var ret = withBlock5.SkillData(argIndex1); return ret; }

                            string localLIndex2() { string arglist = hsa05862d2d473454a8c0d7941dff82ac5(); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                            int localStrToLng2() { string argexpr = hs1050a377ee804d6d86fc7e98398e12ee(); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (withBlock5.Morale >= localStrToLng2() & !IsSpecialPowerInEffect(spname))
                            {
                                GUI.Center(x, y);
                                withBlock5.UseSpecialPower(spname, 0d);
                                if (Status_Renamed == "他形態")
                                {
                                    return;
                                }
                            }
                        }
                    }
                }
            }

            var loopTo5 = CountSupport();
            for (i = 1; i <= loopTo5; i++)
            {
                object argIndex12 = i;
                {
                    var withBlock6 = Support(argIndex12);
                    var loopTo6 = withBlock6.CountSkill();
                    for (j = 1; j <= loopTo6; j++)
                    {
                        object argIndex11 = j;
                        if (withBlock6.Skill(argIndex11) == "スペシャルパワー自動発動")
                        {
                            string localSkillData4() { object argIndex1 = j; var ret = withBlock6.SkillData(argIndex1); return ret; }

                            string arglist3 = localSkillData4();
                            spname = GeneralLib.LIndex(arglist3, 2);
                            string localSkillData5() { object argIndex1 = j; var ret = withBlock6.SkillData(argIndex1); return ret; }

                            string localLIndex3() { string arglist = hsfa97fc36239f45ffacc7690204644669(); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                            int localStrToLng3() { string argexpr = hsaaa9e6d3323e4453a1b656c0d1ba1987(); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (withBlock6.Morale >= localStrToLng3() & !IsSpecialPowerInEffect(spname))
                            {
                                GUI.Center(x, y);
                                withBlock6.UseSpecialPower(spname, 0d);
                                if (Status_Renamed == "他形態")
                                {
                                    return;
                                }
                            }
                        }
                    }
                }
            }

            string argfname1 = "追加サポート";
            if (IsFeatureAvailable(argfname1))
            {
                {
                    var withBlock7 = AdditionalSupport();
                    var loopTo7 = withBlock7.CountSkill();
                    for (i = 1; i <= loopTo7; i++)
                    {
                        object argIndex13 = i;
                        if (withBlock7.Skill(argIndex13) == "スペシャルパワー自動発動")
                        {
                            string localSkillData6() { object argIndex1 = i; var ret = withBlock7.SkillData(argIndex1); return ret; }

                            string arglist4 = localSkillData6();
                            spname = GeneralLib.LIndex(arglist4, 2);
                            string localSkillData7() { object argIndex1 = i; var ret = withBlock7.SkillData(argIndex1); return ret; }

                            string localLIndex4() { string arglist = hs393cfbef7a894559b16f4706c8e49b64(); var ret = GeneralLib.LIndex(arglist, 3); return ret; }

                            int localStrToLng4() { string argexpr = hsd3fcfdcfd593490696f3d091f42d35e5(); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                            if (withBlock7.Morale >= localStrToLng4() & !IsSpecialPowerInEffect(spname))
                            {
                                GUI.Center(x, y);
                                withBlock7.UseSpecialPower(spname, 0d);
                                if (Status_Renamed == "他形態")
                                {
                                    return;
                                }
                            }
                        }
                    }
                }
            }

            // 起死回生
            {
                var withBlock8 = MainPilot();
                string argsname8 = "起死回生";
                if (withBlock8.IsSkillAvailable(argsname8) & withBlock8.SP <= withBlock8.MaxSP / 5 & HP <= MaxHP / 5 & EN <= MaxEN / 5)
                {
                    withBlock8.SP = withBlock8.MaxSP;
                    HP = MaxHP;
                    EN = MaxEN;
                    if (SRC.SpecialPowerAnimation)
                    {
                        GUI.Center(x, y);
                        object argIndex15 = "ド根性";
                        if (SRC.SPDList.IsDefined(argIndex15))
                        {
                            object argIndex14 = "ド根性";
                            SRC.SPDList.Item(argIndex14).PlayAnimation();
                        }
                    }
                }
            }

            // ＨＰとＥＮ回復＆消費
            // MOD START MARGE
            // If Not IsConditionSatisfied("回復不能") Then
            object argIndex18 = "回復不能";
            string argsname9 = "回復不能";
            if (!IsConditionSatisfied(argIndex18) & !IsSpecialPowerInEffect(argsname9))
            {
                // MOD END MARGE
                string argfname2 = "ＨＰ回復";
                if (IsFeatureAvailable(argfname2))
                {
                    object argIndex16 = "ＨＰ回復";
                    hp_recovery = (10d * FeatureLevel(argIndex16));
                }

                string argfname3 = "ＥＮ回復";
                if (IsFeatureAvailable(argfname3))
                {
                    object argIndex17 = "ＥＮ回復";
                    en_recovery = (10d * FeatureLevel(argIndex17));
                }
            }

            string argfname4 = "ＨＰ消費";
            if (IsFeatureAvailable(argfname4))
            {
                object argIndex19 = "ＨＰ消費";
                hp_recovery = (hp_recovery - 10d * FeatureLevel(argIndex19));
            }

            string argfname5 = "ＥＮ消費";
            if (IsFeatureAvailable(argfname5))
            {
                object argIndex20 = "ＥＮ消費";
                en_recovery = (en_recovery - 10d * FeatureLevel(argIndex20));
            }

            // 毒によるＨＰ減少
            int plv;
            object argIndex21 = "毒";
            if (IsConditionSatisfied(argIndex21))
            {
                string argoname = "毒効果大";
                if (Expression.IsOptionDefined(argoname) & BossRank < 0)
                {
                    plv = 25;
                }
                else
                {
                    plv = 10;
                }

                string arganame = "毒";
                string arganame1 = "毒";
                // 変化なし
                string arganame2 = "毒";
                string arganame3 = "毒";
                string arganame4 = "毒";
                if (Weakness(arganame))
                {
                    plv = (2 * plv);
                }
                else if (Effective(arganame1))
                {
                }
                else if (Immune(arganame2) | Absorb(arganame3))
                {
                    plv = 0;
                }
                else if (Resist(arganame4))
                {
                    plv = (plv / 2);
                }

                hp_recovery = hp_recovery - plv;
            }

            // 活動限界時間切れ？
            object argIndex22 = "活動限界";
            if (ConditionLifetime(argIndex22) == 1)
            {
                GUI.Center(x, y);
                Escape();
                Unit argu1 = null;
                Unit argu2 = null;
                GUI.OpenMessageForm(u1: argu1, u2: argu2);
                GUI.DisplaySysMessage(Nickname + "は強制的に退却させられた。");
                GUI.CloseMessageForm();
                Event_Renamed.HandleEvent("破壊", MainPilot().ID);
            }

            // 死の宣告
            object argIndex23 = "死の宣告";
            if (ConditionLifetime(argIndex23) == 1)
            {
                hp_recovery = hp_recovery - 1000;
            }

            // 残り時間
            object argIndex25 = "残り時間";
            if (ConditionLifetime(argIndex25) == 1)
            {
                is_time_limit = true;
                string argfname6 = "ノーマルモード";
                if (IsFeatureAvailable(argfname6))
                {
                    // ハイパーモード＆変身の時間切れの場合は戻り先の形態を記録しておく
                    object argIndex24 = "ノーマルモード";
                    string arglist5 = FeatureData(argIndex24);
                    next_form = GeneralLib.LIndex(arglist5, 1);
                }
            }

            // ＨＰ回復などを付加した場合のことを考えて状態のアップデートは
            // ＨＰ＆ＥＮ回復量を計算した後に行う
            hp_ratio = 100 * HP / (double)MaxHP;
            en_ratio = 100 * EN / (double)MaxEN;
            UpdateCondition(true);
            HP = ((long)(MaxHP * hp_ratio) / 100L);
            EN = ((long)(MaxEN * en_ratio) / 100L);

            // サポートアタック＆ガード
            UsedSupportAttack = 0;
            UsedSupportGuard = 0;

            // 同時援護攻撃
            UsedSyncAttack = 0;

            // カウンター攻撃
            UsedCounterAttack = 0;

            // チャージ完了？
            object argIndex26 = "チャージ";
            if (ConditionLifetime(argIndex26) == 0)
            {
                string argcname = "チャージ完了";
                string argcdata = "";
                AddCondition(argcname, 1, cdata: argcdata);
            }

            // 付加された移動能力が切れた場合の処理
            if (Status_Renamed == "出撃" & !string.IsNullOrEmpty(Map.MapFileName))
            {
                switch (Area ?? "")
                {
                    case "空中":
                        {
                            string argarea_name = "空";
                            if (!IsTransAvailable(argarea_name))
                            {
                                if (!IsAbleToEnter(x, y))
                                {
                                    GUI.Center(x, y);
                                    Escape();
                                    Unit argu11 = null;
                                    Unit argu21 = null;
                                    GUI.OpenMessageForm(u1: argu11, u2: argu21);
                                    GUI.DisplaySysMessage(Nickname + "は強制的に退却させられた。");
                                    GUI.CloseMessageForm();
                                    Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                                    return;
                                }
                                // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                Map.MapDataForUnit[x, y] = null;
                                GUI.EraseUnitBitmap(x, y);
                                StandBy(x, y);
                            }

                            break;
                        }

                    case "地上":
                        {
                            string argarea_name1 = "陸";
                            if (!IsTransAvailable(argarea_name1))
                            {
                                if (!IsAbleToEnter(x, y))
                                {
                                    GUI.Center(x, y);
                                    Escape();
                                    Unit argu12 = null;
                                    Unit argu22 = null;
                                    GUI.OpenMessageForm(u1: argu12, u2: argu22);
                                    GUI.DisplaySysMessage(Nickname + "は強制的に退却させられた。");
                                    GUI.CloseMessageForm();
                                    Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                                    return;
                                }
                                // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                Map.MapDataForUnit[x, y] = null;
                                GUI.EraseUnitBitmap(x, y);
                                StandBy(x, y);
                            }

                            break;
                        }

                    case "水上":
                        {
                            string argfname7 = "水上移動";
                            string argfname8 = "ホバー移動";
                            if (!IsFeatureAvailable(argfname7) & !IsFeatureAvailable(argfname8))
                            {
                                if (!IsAbleToEnter(x, y))
                                {
                                    GUI.Center(x, y);
                                    Escape();
                                    Unit argu13 = null;
                                    Unit argu23 = null;
                                    GUI.OpenMessageForm(u1: argu13, u2: argu23);
                                    GUI.DisplaySysMessage(Nickname + "は強制的に退却させられた。");
                                    GUI.CloseMessageForm();
                                    Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                                    return;
                                }
                                // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                Map.MapDataForUnit[x, y] = null;
                                GUI.EraseUnitBitmap(x, y);
                                StandBy(x, y);
                            }

                            break;
                        }

                    case "水中":
                        {
                            if (get_Adaption(3) == 0)
                            {
                                if (!IsAbleToEnter(x, y))
                                {
                                    GUI.Center(x, y);
                                    Escape();
                                    Unit argu14 = null;
                                    Unit argu24 = null;
                                    GUI.OpenMessageForm(u1: argu14, u2: argu24);
                                    GUI.DisplaySysMessage(Nickname + "は強制的に退却させられた。");
                                    GUI.CloseMessageForm();
                                    Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                                    return;
                                }
                                // UPGRADE_NOTE: オブジェクト MapDataForUnit() をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                                Map.MapDataForUnit[x, y] = null;
                                GUI.EraseUnitBitmap(x, y);
                                StandBy(x, y);
                            }

                            break;
                        }
                }
            }

            if (Status_Renamed == "格納")
            {
                // 格納時は回復率ＵＰ
                // MOD START MARGE
                // If Not IsConditionSatisfied("回復不能") Then
                object argIndex27 = "回復不能";
                string argsname10 = "回復不能";
                if (!IsConditionSatisfied(argIndex27) & !IsSpecialPowerInEffect(argsname10))
                {
                    // MOD END MARGE
                    hp_recovery = hp_recovery + 50;
                    en_recovery = en_recovery + 50;
                }

                // 弾数回復
                var loopTo8 = CountWeapon();
                for (i = 1; i <= loopTo8; i++)
                    dblBullet[i] = 1d;
                var loopTo9 = CountAbility();
                for (i = 1; i <= loopTo9; i++)
                    dblStock[i] = 1d;
            }
            else
            {
                // MOD START MARGE
                // '格納されてない場合は地形による回復修正
                // If Not IsConditionSatisfied("回復不能") Then
                // hp_recovery = hp_recovery + TerrainEffectForHPRecover(X, Y)
                // en_recovery = en_recovery + TerrainEffectForENRecover(X, Y)
                // End If
                // 
                // '地形による減少修正＆状態付加
                // Set td = TDList.Item(MapData(X, Y, 0))
                // With td
                // For i = 1 To .CountFeature
                // Select Case .Feature(i)
                // Case "ＨＰ減少"
                // If Weakness(.FeatureData(i)) Then
                // hp_recovery = hp_recovery - 20 * .FeatureLevel(i)
                // ElseIf Effective(.FeatureData(i)) Then
                // hp_recovery = hp_recovery - 10 * .FeatureLevel(i)
                // ElseIf Not Immune(.FeatureData(i)) Then
                // If Absorb(.FeatureData(i)) Then
                // hp_recovery = hp_recovery + 10 * .FeatureLevel(i)
                // ElseIf Resist(.FeatureData(i)) Then
                // hp_recovery = hp_recovery - 5 * .FeatureLevel(i)
                // Else
                // hp_recovery = hp_recovery - 10 * .FeatureLevel(i)
                // End If
                // End If
                // 
                // Case "ＥＮ減少"
                // If Weakness(.FeatureData(i)) Then
                // en_recovery = en_recovery - 20 * .FeatureLevel(i)
                // ElseIf Effective(.FeatureData(i)) Then
                // en_recovery = en_recovery - 10 * .FeatureLevel(i)
                // ElseIf Not Immune(.FeatureData(i)) Then
                // If Absorb(.FeatureData(i)) Then
                // en_recovery = en_recovery + 10 * .FeatureLevel(i)
                // ElseIf Resist(.FeatureData(i)) Then
                // en_recovery = en_recovery - 5 * .FeatureLevel(i)
                // Else
                // en_recovery = en_recovery - 10 * .FeatureLevel(i)
                // End If
                // End If
                // 
                // Case "ＨＰ増加"
                // If Not IsConditionSatisfied("回復不能") Then
                // hp_up = hp_up + 1000 * .FeatureLevel(i)
                // End If
                // 
                // Case "ＥＮ増加"
                // If Not IsConditionSatisfied("回復不能") Then
                // en_up = en_up + 10 * .FeatureLevel(i)
                // End If
                // 
                // Case "ＨＰ低下"
                // If Weakness(.FeatureData(i)) Then
                // hp_up = hp_up - 2000 * .FeatureLevel(i)
                // ElseIf Effective(.FeatureData(i)) Then
                // hp_up = hp_up - 1000 * .FeatureLevel(i)
                // ElseIf Not Immune(.FeatureData(i)) Then
                // If Absorb(.FeatureData(i)) Then
                // hp_up = hp_up + 1000 * .FeatureLevel(i)
                // ElseIf Resist(.FeatureData(i)) Then
                // hp_up = hp_up - 500 * .FeatureLevel(i)
                // Else
                // hp_up = hp_up - 1000 * .FeatureLevel(i)
                // End If
                // End If
                // 
                // Case "ＥＮ低下"
                // If Weakness(.FeatureData(i)) Then
                // en_up = en_up - 20 * .FeatureLevel(i)
                // ElseIf Effective(.FeatureData(i)) Then
                // en_up = en_up - 10 * .FeatureLevel(i)
                // ElseIf Not Immune(.FeatureData(i)) Then
                // If Absorb(.FeatureData(i)) Then
                // en_up = en_up + 10 * .FeatureLevel(i)
                // ElseIf Resist(.FeatureData(i)) Then
                // en_up = en_up - 5 * .FeatureLevel(i)
                // Else
                // en_up = en_up - 10 * .FeatureLevel(i)
                // End If
                // End If
                // 
                // Case "状態付加"
                // cname = .FeatureData(i)
                // 
                // '状態が無効化されるかチェック
                // Select Case cname
                // Case "装甲劣化"
                // If SpecialEffectImmune("劣") Then
                // cname = ""
                // End If
                // Case "混乱"
                // If SpecialEffectImmune("乱") Then
                // cname = ""
                // End If
                // Case "恐怖"
                // If SpecialEffectImmune("恐") Then
                // cname = ""
                // End If
                // Case "踊り"
                // If SpecialEffectImmune("踊") Then
                // cname = ""
                // End If
                // Case "狂戦士"
                // If SpecialEffectImmune("狂") Then
                // cname = ""
                // End If
                // Case "ゾンビ"
                // If SpecialEffectImmune("ゾ") Then
                // cname = ""
                // End If
                // Case "回復不能"
                // If SpecialEffectImmune("害") Then
                // cname = ""
                // End If
                // Case "石化"
                // If SpecialEffectImmune("石") Then
                // cname = ""
                // End If
                // Case "凍結"
                // If SpecialEffectImmune("凍") Then
                // cname = ""
                // End If
                // Case "麻痺"
                // If SpecialEffectImmune("痺") Then
                // cname = ""
                // End If
                // Case "睡眠"
                // If SpecialEffectImmune("眠") Then
                // cname = ""
                // End If
                // Case "毒"
                // If SpecialEffectImmune("毒") Then
                // cname = ""
                // End If
                // Case "盲目"
                // If SpecialEffectImmune("盲") Then
                // cname = ""
                // End If
                // Case "沈黙"
                // If SpecialEffectImmune("黙") Then
                // cname = ""
                // End If
                // '属性使用不能状態
                // Case "オーラ使用不能"
                // If SpecialEffectImmune("剋オ") Then
                // cname = ""
                // End If
                // Case "超能力使用不能"
                // If SpecialEffectImmune("剋超") Then
                // cname = ""
                // End If
                // Case "同調率使用不能"
                // If SpecialEffectImmune("剋シ") Then
                // cname = ""
                // End If
                // Case "超感覚使用不能"
                // If SpecialEffectImmune("剋サ") Then
                // cname = ""
                // End If
                // Case "知覚強化使用不能"
                // If SpecialEffectImmune("剋サ") Then
                // cname = ""
                // End If
                // Case "霊力使用不能"
                // If SpecialEffectImmune("剋霊") Then
                // cname = ""
                // End If
                // Case "術使用不能"
                // If SpecialEffectImmune("剋術") Then
                // cname = ""
                // End If
                // Case "技使用不能"
                // If SpecialEffectImmune("剋技") Then
                // cname = ""
                // End If
                // Case Else
                // If Len(cname) > 6 Then
                // If Right$(cname, 6) = "属性弱点付加" Then
                // If SpecialEffectImmune("弱" & Left$(cname, Len(cname) - 6)) _
                // '                                            Or Absorb(Left$(cname, Len(cname) - 6)) _
                // '                                            Or Immune(Left$(cname, Len(cname) - 6)) _
                // '                                        Then
                // cname = ""
                // End If
                // ElseIf Right$(cname, 6) = "属性有効付加" Then
                // If SpecialEffectImmune("有" & Left$(cname, Len(cname) - 6)) _
                // '                                            Or Absorb(Left$(cname, Len(cname) - 6)) _
                // '                                            Or Immune(Left$(cname, Len(cname) - 6)) _
                // '                                        Then
                // cname = ""
                // End If
                // ElseIf Right$(cname, 6) = "属性使用不能" Then
                // If SpecialEffectImmune("剋" & Left$(cname, Len(cname) - 6)) Then
                // cname = ""
                // End If
                // End If
                // End If
                // End Select
                // 
                // If cname <> "" Then
                // If .IsFeatureLevelSpecified(i) Then
                // AddCondition cname, .FeatureLevel(i)
                // Else
                // AddCondition cname, 10000
                // End If
                // End If
                // End Select
                // Next
                // End With
                // 格納されてない場合は地形による各種修正＆状態付加
                // MOD START 240a
                // Set td = TDList.Item(MapData(X, Y, 0))
                // レイヤーの状態に応じて上層下層どちらを取得するか判別
                switch (Map.MapData[x, y, Map.MapDataIndex.BoxType])
                {
                    case Map.BoxTypes.Under:
                    case Map.BoxTypes.UpperBmpOnly:
                        {
                            td = SRC.TDList.Item(Map.MapData[x, y, Map.MapDataIndex.TerrainType]);
                            break;
                        }

                    default:
                        {
                            td = SRC.TDList.Item(Map.MapData[x, y, Map.MapDataIndex.LayerType]);
                            break;
                        }
                }
                // MOD START 240a
                // 地形効果が適用される位置にいるかを判定
                string argfname9 = "効果範囲";
                if (td.IsFeatureAvailable(argfname9))
                {
                    object argIndex28 = "効果範囲";
                    string arglist6 = td.FeatureData(argIndex28);
                    var loopTo10 = GeneralLib.LLength(arglist6);
                    for (i = 1; i <= loopTo10; i++)
                    {
                        string localLIndex5() { object argIndex1 = "効果範囲"; string arglist = td.FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, i); return ret; }

                        if ((Area ?? "") == (localLIndex5() ?? ""))
                        {
                            is_terrain_effective = true;
                            break;
                        }
                    }
                }
                else
                {
                    is_terrain_effective = true;
                }

                // 地形効果に対する無効化能力を持っているか
                string argfname10 = "地形効果無効化";
                string argsname11 = "地形効果無効化";
                if (IsFeatureAvailable(argfname10))
                {
                    object argIndex30 = "地形効果無効化";
                    string arglist8 = FeatureData(argIndex30);
                    if (GeneralLib.LLength(arglist8) > 1)
                    {
                        object argIndex29 = "地形効果無効化";
                        string arglist7 = FeatureData(argIndex29);
                        var loopTo11 = GeneralLib.LLength(arglist7);
                        for (i = 2; i <= loopTo11; i++)
                        {
                            string localLIndex6() { object argIndex1 = "地形効果無効化"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, i); return ret; }

                            if ((td.Name ?? "") == (localLIndex6() ?? ""))
                            {
                                is_immune_to_terrain_effect = true;
                                break;
                            }
                        }
                    }
                    else
                    {
                        is_immune_to_terrain_effect = true;
                    }
                }
                else if (IsSpecialPowerInEffect(argsname11))
                {
                    is_immune_to_terrain_effect = true;
                }

                // 地形効果を適用
                if (is_terrain_effective)
                {
                    var loopTo12 = td.CountFeature();
                    for (i = 1; i <= loopTo12; i++)
                    {
                        object argIndex32 = "回復不能";
                        string argsname12 = "回復不能";
                        if (!IsConditionSatisfied(argIndex32) & !IsSpecialPowerInEffect(argsname12))
                        {
                            object argIndex31 = i;
                            switch (td.Feature(argIndex31) ?? "")
                            {
                                case "ＨＰ回復":
                                    {
                                        double localFeatureLevel() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                        hp_recovery = (hp_recovery + 10d * localFeatureLevel());
                                        break;
                                    }

                                case "ＥＮ回復":
                                    {
                                        double localFeatureLevel1() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                        en_recovery = (en_recovery + 10d * localFeatureLevel1());
                                        break;
                                    }

                                case "ＨＰ増加":
                                    {
                                        double localFeatureLevel2() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                        hp_up = (hp_up + 1000d * localFeatureLevel2());
                                        break;
                                    }

                                case "ＥＮ増加":
                                    {
                                        double localFeatureLevel3() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                        en_up = (en_up + 10d * localFeatureLevel3());
                                        break;
                                    }
                            }
                        }

                        if (!is_immune_to_terrain_effect)
                        {
                            object argIndex35 = i;
                            switch (td.Feature(argIndex35) ?? "")
                            {
                                case "ＨＰ減少":
                                    {
                                        string localFeatureData() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        string localFeatureData1() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localEffective() { string arganame = hs910888dc06c349a7b21a4df1e60d8c7a(); var ret = Effective(arganame); return ret; }

                                        string localFeatureData2() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localAbsorb() { string arganame = hs52033841100047b99c1279b816aeef70(); var ret = Absorb(arganame); return ret; }

                                        string localFeatureData3() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localResist() { string arganame = hsc6f55b713dcb4a289541bb10d274fe96(); var ret = Resist(arganame); return ret; }

                                        string localFeatureData4() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localImmune() { string arganame = hs7f2e711ffdc34440b08ea8add7c269ee(); var ret = Immune(arganame); return ret; }

                                        string arganame5 = localFeatureData();
                                        if (Weakness(arganame5))
                                        {
                                            double localFeatureLevel4() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_recovery = (hp_recovery - 20d * localFeatureLevel4());
                                        }
                                        else if (localEffective())
                                        {
                                            double localFeatureLevel5() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_recovery = (hp_recovery - 10d * localFeatureLevel5());
                                        }
                                        else if (localAbsorb())
                                        {
                                            double localFeatureLevel6() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_recovery = (hp_recovery + 10d * localFeatureLevel6());
                                        }
                                        else if (localResist())
                                        {
                                            double localFeatureLevel7() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_recovery = (hp_recovery - 5d * localFeatureLevel7());
                                        }
                                        else if (!localImmune())
                                        {
                                            double localFeatureLevel8() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_recovery = (hp_recovery - 10d * localFeatureLevel8());
                                        }

                                        break;
                                    }

                                case "ＥＮ減少":
                                    {
                                        string localFeatureData5() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        string localFeatureData6() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localEffective1() { string arganame = hs3c05c0f0f5c74d50b2ebe668e4cefb50(); var ret = Effective(arganame); return ret; }

                                        string localFeatureData7() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localAbsorb1() { string arganame = hsf2d45f6c0d3242c088a863c924424bdc(); var ret = Absorb(arganame); return ret; }

                                        string localFeatureData8() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localResist1() { string arganame = hs2feadcdb67784d8bb37649df03e02004(); var ret = Resist(arganame); return ret; }

                                        string localFeatureData9() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localImmune1() { string arganame = hs2ea0185e20964cc686bdf2ee374b1db5(); var ret = Immune(arganame); return ret; }

                                        string arganame6 = localFeatureData5();
                                        if (Weakness(arganame6))
                                        {
                                            double localFeatureLevel9() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_recovery = (en_recovery - 20d * localFeatureLevel9());
                                        }
                                        else if (localEffective1())
                                        {
                                            double localFeatureLevel10() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_recovery = (en_recovery - 10d * localFeatureLevel10());
                                        }
                                        else if (localAbsorb1())
                                        {
                                            double localFeatureLevel11() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_recovery = (en_recovery + 10d * localFeatureLevel11());
                                        }
                                        else if (localResist1())
                                        {
                                            double localFeatureLevel12() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_recovery = (en_recovery - 5d * localFeatureLevel12());
                                        }
                                        else if (!localImmune1())
                                        {
                                            double localFeatureLevel13() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_recovery = (en_recovery - 10d * localFeatureLevel13());
                                        }

                                        break;
                                    }

                                case "ＨＰ低下":
                                    {
                                        string localFeatureData10() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        string localFeatureData11() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localEffective2() { string arganame = hsde07f92cead745858b4d820263f53c91(); var ret = Effective(arganame); return ret; }

                                        string localFeatureData12() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localAbsorb2() { string arganame = hs94c6cc3a1d3d4ca68ebec987f086a962(); var ret = Absorb(arganame); return ret; }

                                        string localFeatureData13() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localResist2() { string arganame = hs736b9f12f5c24c189d82474b29c54514(); var ret = Resist(arganame); return ret; }

                                        string localFeatureData14() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localImmune2() { string arganame = hs125e0e0f0c7f4295afab6bc4e0bdd8b7(); var ret = Immune(arganame); return ret; }

                                        string arganame7 = localFeatureData10();
                                        if (Weakness(arganame7))
                                        {
                                            double localFeatureLevel14() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_up = (hp_up - 2000d * localFeatureLevel14());
                                        }
                                        else if (localEffective2())
                                        {
                                            double localFeatureLevel15() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_up = (hp_up - 1000d * localFeatureLevel15());
                                        }
                                        else if (localAbsorb2())
                                        {
                                            double localFeatureLevel16() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_up = (hp_up + 1000d * localFeatureLevel16());
                                        }
                                        else if (localResist2())
                                        {
                                            double localFeatureLevel17() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_up = (hp_up - 500d * localFeatureLevel17());
                                        }
                                        else if (!localImmune2())
                                        {
                                            double localFeatureLevel18() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            hp_up = (hp_up - 1000d * localFeatureLevel18());
                                        }

                                        break;
                                    }

                                case "ＥＮ低下":
                                    {
                                        string localFeatureData15() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        string localFeatureData16() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localEffective3() { string arganame = hs19293752f23e4276b0cbef58767f8358(); var ret = Effective(arganame); return ret; }

                                        string localFeatureData17() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localAbsorb3() { string arganame = hs5c8089f996604cf3acee553527084f88(); var ret = Absorb(arganame); return ret; }

                                        string localFeatureData18() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localResist3() { string arganame = hs7282195c4a7b4004aadd6adbd33a9a60(); var ret = Resist(arganame); return ret; }

                                        string localFeatureData19() { object argIndex1 = i; var ret = td.FeatureData(argIndex1); return ret; }

                                        bool localImmune3() { string arganame = hs18e2d5e0cbb14782bbf344a497c3c2ed(); var ret = Immune(arganame); return ret; }

                                        string arganame8 = localFeatureData15();
                                        if (Weakness(arganame8))
                                        {
                                            double localFeatureLevel19() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_up = (en_up - 20d * localFeatureLevel19());
                                        }
                                        else if (localEffective3())
                                        {
                                            double localFeatureLevel20() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_up = (en_up - 10d * localFeatureLevel20());
                                        }
                                        else if (localAbsorb3())
                                        {
                                            double localFeatureLevel21() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_up = (en_up + 10d * localFeatureLevel21());
                                        }
                                        else if (localResist3())
                                        {
                                            double localFeatureLevel22() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_up = (en_up - 5d * localFeatureLevel22());
                                        }
                                        else if (!localImmune3())
                                        {
                                            double localFeatureLevel23() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                            en_up = (en_up - 10d * localFeatureLevel23());
                                        }

                                        break;
                                    }

                                case "状態付加":
                                    {
                                        object argIndex33 = i;
                                        cname = td.FeatureData(argIndex33);

                                        // 状態が無効化されるかチェック
                                        switch (cname ?? "")
                                        {
                                            case "装甲劣化":
                                                {
                                                    string arganame9 = "劣";
                                                    if (SpecialEffectImmune(arganame9))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "混乱":
                                                {
                                                    string arganame10 = "乱";
                                                    if (SpecialEffectImmune(arganame10))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "恐怖":
                                                {
                                                    string arganame11 = "恐";
                                                    if (SpecialEffectImmune(arganame11))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "踊り":
                                                {
                                                    string arganame12 = "踊";
                                                    if (SpecialEffectImmune(arganame12))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "狂戦士":
                                                {
                                                    string arganame13 = "狂";
                                                    if (SpecialEffectImmune(arganame13))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "ゾンビ":
                                                {
                                                    string arganame14 = "ゾ";
                                                    if (SpecialEffectImmune(arganame14))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "回復不能":
                                                {
                                                    string arganame15 = "害";
                                                    if (SpecialEffectImmune(arganame15))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "石化":
                                                {
                                                    string arganame16 = "石";
                                                    if (SpecialEffectImmune(arganame16))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "凍結":
                                                {
                                                    string arganame17 = "凍";
                                                    if (SpecialEffectImmune(arganame17))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "麻痺":
                                                {
                                                    string arganame18 = "痺";
                                                    if (SpecialEffectImmune(arganame18))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "睡眠":
                                                {
                                                    string arganame19 = "眠";
                                                    if (SpecialEffectImmune(arganame19))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "毒":
                                                {
                                                    string arganame20 = "毒";
                                                    if (SpecialEffectImmune(arganame20))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "盲目":
                                                {
                                                    string arganame21 = "盲";
                                                    if (SpecialEffectImmune(arganame21))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "沈黙":
                                                {
                                                    string arganame22 = "黙";
                                                    if (SpecialEffectImmune(arganame22))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }
                                            // 属性使用不能状態
                                            case "オーラ使用不能":
                                                {
                                                    string arganame23 = "剋オ";
                                                    if (SpecialEffectImmune(arganame23))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "超能力使用不能":
                                                {
                                                    string arganame24 = "剋超";
                                                    if (SpecialEffectImmune(arganame24))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "同調率使用不能":
                                                {
                                                    string arganame25 = "剋シ";
                                                    if (SpecialEffectImmune(arganame25))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "超感覚使用不能":
                                                {
                                                    string arganame26 = "剋サ";
                                                    if (SpecialEffectImmune(arganame26))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "知覚強化使用不能":
                                                {
                                                    string arganame27 = "剋サ";
                                                    if (SpecialEffectImmune(arganame27))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "霊力使用不能":
                                                {
                                                    string arganame28 = "剋霊";
                                                    if (SpecialEffectImmune(arganame28))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "術使用不能":
                                                {
                                                    string arganame29 = "剋術";
                                                    if (SpecialEffectImmune(arganame29))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            case "技使用不能":
                                                {
                                                    string arganame30 = "剋技";
                                                    if (SpecialEffectImmune(arganame30))
                                                    {
                                                        cname = "";
                                                    }

                                                    break;
                                                }

                                            default:
                                                {
                                                    if (Strings.Len(cname) > 6)
                                                    {
                                                        if (Strings.Right(cname, 6) == "属性弱点付加")
                                                        {
                                                            bool localSpecialEffectImmune() { string arganame = "弱" + Strings.Left(cname, Strings.Len(cname) - 6); var ret = SpecialEffectImmune(arganame); return ret; }

                                                            bool localAbsorb4() { string arganame = Strings.Left(cname, Strings.Len(cname) - 6); var ret = Absorb(arganame); return ret; }

                                                            bool localImmune4() { string arganame = Strings.Left(cname, Strings.Len(cname) - 6); var ret = Immune(arganame); return ret; }

                                                            if (localSpecialEffectImmune() | localAbsorb4() | localImmune4())
                                                            {
                                                                cname = "";
                                                            }
                                                        }
                                                        else if (Strings.Right(cname, 6) == "属性有効付加")
                                                        {
                                                            bool localSpecialEffectImmune1() { string arganame = "有" + Strings.Left(cname, Strings.Len(cname) - 6); var ret = SpecialEffectImmune(arganame); return ret; }

                                                            bool localAbsorb5() { string arganame = Strings.Left(cname, Strings.Len(cname) - 6); var ret = Absorb(arganame); return ret; }

                                                            bool localImmune5() { string arganame = Strings.Left(cname, Strings.Len(cname) - 6); var ret = Immune(arganame); return ret; }

                                                            if (localSpecialEffectImmune1() | localAbsorb5() | localImmune5())
                                                            {
                                                                cname = "";
                                                            }
                                                        }
                                                        else if (Strings.Right(cname, 6) == "属性使用不能")
                                                        {
                                                            string arganame31 = "剋" + Strings.Left(cname, Strings.Len(cname) - 6);
                                                            if (SpecialEffectImmune(arganame31))
                                                            {
                                                                cname = "";
                                                            }
                                                        }
                                                    }

                                                    break;
                                                }
                                        }

                                        if (!string.IsNullOrEmpty(cname))
                                        {
                                            object argIndex34 = i;
                                            if (td.IsFeatureLevelSpecified(argIndex34))
                                            {
                                                double localFeatureLevel24() { object argIndex1 = i; var ret = td.FeatureLevel(argIndex1); return ret; }

                                                string argcdata1 = "";
                                                AddCondition(cname, localFeatureLevel24(), cdata: argcdata1);
                                            }
                                            else
                                            {
                                                string argcdata2 = "";
                                                AddCondition(cname, 10000, cdata: argcdata2);
                                            }
                                        }

                                        break;
                                    }
                            }
                        }
                    }
                }
                // MOD END MARGE
            }

            // ＥＮは毎ターン5回復
            // MOD START MARGE
            // If Not IsConditionSatisfied("回復不能") _
            // '        And Not IsOptionDefined("ＥＮ自然回復無効") _
            // '    Then
            object argIndex36 = "回復不能";
            string argsname13 = "回復不能";
            string argoname1 = "ＥＮ自然回復無効";
            if (!IsConditionSatisfied(argIndex36) & !IsSpecialPowerInEffect(argsname13) & !Expression.IsOptionDefined(argoname1))
            {
                // MOD END MARGE
                EN = EN + 5;
            }

            // 算出した回復率を使ってＨＰを回復
            HP = HP + MaxHP * hp_recovery / 100 + hp_up;
            if (HP <= 0)
            {
                HP = 1;
            }

            // 特殊能力「不安定」による暴走チェック
            string argfname11 = "不安定";
            if (IsFeatureAvailable(argfname11))
            {
                object argIndex37 = "暴走";
                if (HP <= MaxHP / 4 & !IsConditionSatisfied(argIndex37))
                {
                    string argcname1 = "暴走";
                    string argcdata3 = "";
                    AddCondition(argcname1, -1, cdata: argcdata3);
                }
            }

            // 算出した回復率を使ってＥＮを回復
            if (EN + MaxEN * en_recovery / 100 + en_up > 0)
            {
                EN = EN + MaxEN * en_recovery / 100 + en_up;
            }
            else
            {
                // ＥＮが減少して０になる場合はハイパーモード解除もしくは行動不能
                string argfname13 = "ノーマルモード";
                string argfname14 = "変形";
                if (IsFeatureAvailable(argfname13))
                {
                    // ただしノーマルモードに戻れない地形だとそのまま退却……
                    string localLIndex8() { object argIndex1 = "ノーマルモード"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                    Unit localOtherForm() { object argIndex1 = (object)hs35732b48c6874150a97edd31eb6e765a(); var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm().IsAbleToEnter(x, y))
                    {
                        string localLIndex7() { object argIndex1 = "ノーマルモード"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        string argnew_form = localLIndex7();
                        Transform(argnew_form);
                    }
                    else
                    {
                        GUI.Center(x, y);
                        Escape();
                        Unit argu15 = null;
                        Unit argu25 = null;
                        GUI.OpenMessageForm(u1: argu15, u2: argu25);
                        GUI.DisplaySysMessage(Nickname + "は強制的に退却させられた。");
                        GUI.CloseMessageForm();
                        Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                        return;
                    }
                }
                else if (IsFeatureAvailable(argfname14))
                {
                    // 変形できれば変形
                    object argIndex38 = "変形";
                    buf = FeatureData(argIndex38);
                    var loopTo13 = GeneralLib.LLength(buf);
                    for (i = 2; i <= loopTo13; i++)
                    {
                        object argIndex39 = GeneralLib.LIndex(buf, i);
                        {
                            var withBlock9 = OtherForm(argIndex39);
                            string argfname12 = "ＥＮ消費";
                            if (withBlock9.IsAbleToEnter(x, y) & !withBlock9.IsFeatureAvailable(argfname12))
                            {
                                string argnew_form1 = GeneralLib.LIndex(buf, i);
                                Transform(argnew_form1);
                                break;
                            }
                        }
                    }

                    if (i > GeneralLib.LLength(buf))
                    {
                        EN = 0;
                    }
                }
                else
                {
                    EN = 0;
                }
            }

            // データ更新
            Update();

            // 時間切れ？
            if (is_time_limit)
            {
                string argfname17 = "分離";
                if (!string.IsNullOrEmpty(next_form))
                {
                    // ハイパーモード＆変身の時間切れ
                    object argIndex40 = next_form;
                    u = OtherForm(argIndex40);
                    if (u.IsAbleToEnter(x, y))
                    {
                        // ダイアログでメッセージを表示させるため追加パイロットをあらかじめ作成
                        string argfname15 = "追加パイロット";
                        if (u.IsFeatureAvailable(argfname15))
                        {
                            bool localIsDefined() { object argIndex1 = "追加パイロット"; object argIndex2 = u.FeatureData(argIndex1); var ret = SRC.PList.IsDefined(argIndex2); return ret; }

                            if (!localIsDefined())
                            {
                                object argIndex41 = "追加パイロット";
                                string argpname = u.FeatureData(argIndex41);
                                string argpparty = Party0;
                                string arggid = "";
                                SRC.PList.Add(argpname, MainPilot().Level, argpparty, gid: arggid);
                                this.Party0 = argpparty;
                            }
                        }

                        // ノーマルモードメッセージ
                        bool localIsMessageDefined() { string argmain_situation = "ノーマルモード(" + u.Name + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                        string argmain_situation = "ノーマルモード(" + Name + "=>" + u.Name + ")";
                        string argmain_situation1 = "ノーマルモード";
                        if (IsMessageDefined(argmain_situation))
                        {
                            Unit argu16 = null;
                            Unit argu26 = null;
                            GUI.OpenMessageForm(u1: argu16, u2: argu26);
                            string argSituation = "ノーマルモード(" + Name + "=>" + u.Name + ")";
                            string argmsg_mode = "";
                            PilotMessage(argSituation, msg_mode: argmsg_mode);
                            GUI.CloseMessageForm();
                        }
                        else if (localIsMessageDefined())
                        {
                            Unit argu17 = null;
                            Unit argu27 = null;
                            GUI.OpenMessageForm(u1: argu17, u2: argu27);
                            string argSituation1 = "ノーマルモード(" + u.Name + ")";
                            string argmsg_mode1 = "";
                            PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                            GUI.CloseMessageForm();
                        }
                        else if (IsMessageDefined(argmain_situation1))
                        {
                            Unit argu18 = null;
                            Unit argu28 = null;
                            GUI.OpenMessageForm(u1: argu18, u2: argu28);
                            string argSituation2 = "ノーマルモード";
                            string argmsg_mode2 = "";
                            PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                            GUI.CloseMessageForm();
                        }
                        // 特殊効果
                        bool localIsSpecialEffectDefined() { string argmain_situation = "ノーマルモード(" + u.Name + ")"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                        string argmain_situation5 = "ノーマルモード(" + Name + "=>" + u.Name + ")";
                        string argsub_situation3 = "";
                        string argmain_situation6 = "ノーマルモード";
                        string argsub_situation4 = "";
                        if (IsSpecialEffectDefined(argmain_situation5, sub_situation: argsub_situation3))
                        {
                            string argmain_situation2 = "ノーマルモード(" + Name + "=>" + u.Name + ")";
                            string argsub_situation = "";
                            SpecialEffect(argmain_situation2, sub_situation: argsub_situation);
                        }
                        else if (localIsSpecialEffectDefined())
                        {
                            string argmain_situation3 = "ノーマルモード(" + u.Name + ")";
                            string argsub_situation1 = "";
                            SpecialEffect(argmain_situation3, sub_situation: argsub_situation1);
                        }
                        else if (IsSpecialEffectDefined(argmain_situation6, sub_situation: argsub_situation4))
                        {
                            string argmain_situation4 = "ノーマルモード";
                            string argsub_situation2 = "";
                            SpecialEffect(argmain_situation4, sub_situation: argsub_situation2);
                        }

                        // 変形
                        string localLIndex9() { object argIndex1 = "ノーマルモード"; string arglist = FeatureData(argIndex1); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        string argnew_form2 = localLIndex9();
                        Transform(argnew_form2);
                    }
                    else
                    {
                        // 変形するとその地形にいれなくなる場合は退却
                        GUI.Center(x, y);
                        Escape();
                        Unit argu19 = null;
                        Unit argu29 = null;
                        GUI.OpenMessageForm(u1: argu19, u2: argu29);
                        GUI.DisplaySysMessage(Nickname + "は強制的に退却させられた。");
                        GUI.CloseMessageForm();
                        Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                        return;
                    }
                }
                else if (IsFeatureAvailable(argfname17))
                {
                    // 合体時間切れ

                    // メッセージ表示
                    bool localIsMessageDefined2() { string argmain_situation = "分離(" + Name + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                    bool localIsMessageDefined3() { object argIndex1 = "分離"; string argmain_situation = "分離(" + FeatureName(argIndex1) + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                    string argmain_situation8 = "分離";
                    if (localIsMessageDefined2() | localIsMessageDefined3() | IsMessageDefined(argmain_situation8))
                    {
                        string argfname16 = "分離ＢＧＭ";
                        if (IsFeatureAvailable(argfname16))
                        {
                            object argIndex42 = "分離ＢＧＭ";
                            string argbgm_name = FeatureData(argIndex42);
                            Sound.StartBGM(argbgm_name);
                            GUI.Sleep(500);
                        }
                        else if (MainPilot().BGM != "-")
                        {
                            string argbgm_name1 = MainPilot().BGM;
                            Sound.StartBGM(argbgm_name1);
                            MainPilot().BGM = argbgm_name1;
                            GUI.Sleep(500);
                        }

                        GUI.Center(x, y);
                        GUI.RefreshScreen();
                        Unit argu111 = null;
                        Unit argu211 = null;
                        GUI.OpenMessageForm(u1: argu111, u2: argu211);
                        bool localIsMessageDefined1() { object argIndex1 = "分離"; string argmain_situation = "分離(" + FeatureName(argIndex1) + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                        string argmain_situation7 = "分離(" + Name + ")";
                        if (IsMessageDefined(argmain_situation7))
                        {
                            string argSituation3 = "分離(" + Name + ")";
                            string argmsg_mode3 = "";
                            PilotMessage(argSituation3, msg_mode: argmsg_mode3);
                        }
                        else if (localIsMessageDefined1())
                        {
                            object argIndex43 = "分離";
                            string argSituation5 = "分離(" + FeatureName(argIndex43) + ")";
                            string argmsg_mode5 = "";
                            PilotMessage(argSituation5, msg_mode: argmsg_mode5);
                        }
                        else
                        {
                            string argSituation4 = "分離";
                            string argmsg_mode4 = "";
                            PilotMessage(argSituation4, msg_mode: argmsg_mode4);
                        }

                        GUI.CloseMessageForm();
                    }
                    // 特殊効果
                    bool localIsSpecialEffectDefined1() { object argIndex1 = "分離"; string argmain_situation = "分離(" + FeatureName(argIndex1) + ")"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

                    string argmain_situation12 = "分離(" + Name + ")";
                    string argsub_situation8 = "";
                    if (IsSpecialEffectDefined(argmain_situation12, sub_situation: argsub_situation8))
                    {
                        string argmain_situation9 = "分離(" + Name + ")";
                        string argsub_situation5 = "";
                        SpecialEffect(argmain_situation9, sub_situation: argsub_situation5);
                    }
                    else if (localIsSpecialEffectDefined1())
                    {
                        object argIndex44 = "分離";
                        string argmain_situation11 = "分離(" + FeatureName(argIndex44) + ")";
                        string argsub_situation7 = "";
                        SpecialEffect(argmain_situation11, sub_situation: argsub_situation7);
                    }
                    else
                    {
                        string argmain_situation10 = "分離";
                        string argsub_situation6 = "";
                        SpecialEffect(argmain_situation10, sub_situation: argsub_situation6);
                    }

                    // 分離
                    Split_Renamed();
                }
                else
                {
                    // 制限時間切れ
                    GUI.Center(x, y);
                    GUI.RefreshScreen();
                    Unit argu110 = null;
                    Unit argu210 = null;
                    GUI.OpenMessageForm(u1: argu110, u2: argu210);
                    GUI.DisplaySysMessage(Nickname + "は制限時間切れのため退却します。");
                    GUI.CloseMessageForm();
                    Escape();
                    Event_Renamed.HandleEvent("破壊", MainPilot().ID);
                    return;
                }
            }

            // ハイパーモード＆ノーマルモードの自動発動をチェック
            CurrentForm().CheckAutoHyperMode();
            CurrentForm().CheckAutoNormalMode();
        }

        // ハイパーモードの自動発動チェック
        public void CheckAutoHyperMode()
        {
            bool is_available, message_window_visible = default;
            string fname, fdata;
            double flevel;
            string uname;
            int i;

            // ハイパーモードが自動発動するか判定

            if (Status_Renamed != "出撃")
            {
                return;
            }

            string argfname = "ハイパーモード";
            if (!IsFeatureAvailable(argfname))
            {
                return;
            }

            object argIndex1 = "ハイパーモード";
            fname = FeatureName(argIndex1);
            object argIndex2 = "ハイパーモード";
            flevel = FeatureLevel(argIndex2);
            object argIndex3 = "ハイパーモード";
            fdata = FeatureData(argIndex3);
            if (Strings.InStr(fdata, "自動発動") == 0)
            {
                return;
            }

            // 発動条件を満たす？
            if (this.MainPilot().Morale < (10d * flevel) + 100 & (HP > MaxHP / 4 | Strings.InStr(fdata, "気力発動") > 0))
            {
                return;
            }

            // 変身中・能力コピー中はハイパーモードを使用できない
            object argIndex4 = "ノーマルモード付加";
            if (IsConditionSatisfied(argIndex4))
            {
                return;
            }

            // ハイパーモード先の形態が利用可能？
            uname = GeneralLib.LIndex(fdata, 2);
            is_available = false;
            object argIndex5 = uname;
            {
                var withBlock = OtherForm(argIndex5);
                switch (Map.TerrainClass(x, y) ?? "")
                {
                    case "空":
                        {
                            string argarea_name = "空";
                            if (withBlock.IsTransAvailable(argarea_name))
                            {
                                is_available = true;
                            }

                            break;
                        }

                    case "深水":
                        {
                            string argarea_name1 = "空";
                            string argarea_name2 = "水";
                            string argarea_name3 = "水上";
                            if (withBlock.IsTransAvailable(argarea_name1) | withBlock.IsTransAvailable(argarea_name2) | withBlock.IsTransAvailable(argarea_name3))
                            {
                                is_available = true;
                            }

                            break;
                        }

                    default:
                        {
                            is_available = true;
                            break;
                        }
                }

                if (!withBlock.IsAbleToEnter(x, y))
                {
                    is_available = false;
                }
            }

            // 自動発動する？
            if (!is_available)
            {
                return;
            }

            // ダイアログでメッセージを表示させるため追加パイロットをあらかじめ作成
            object argIndex8 = uname;
            if (SRC.UDList.IsDefined(argIndex8))
            {
                object argIndex7 = uname;
                {
                    var withBlock1 = SRC.UDList.Item(argIndex7);
                    string argfname1 = "追加パイロット";
                    if (IsFeatureAvailable(argfname1))
                    {
                        bool localIsDefined() { object argIndex1 = "追加パイロット"; object argIndex2 = FeatureData(argIndex1); var ret = SRC.PList.IsDefined(argIndex2); return ret; }

                        if (!localIsDefined())
                        {
                            object argIndex6 = "追加パイロット";
                            string argpname = FeatureData(argIndex6);
                            string argpparty = Party0;
                            string arggid = "";
                            SRC.PList.Add(argpname, MainPilot().Level, argpparty, gid: arggid);
                            this.Party0 = argpparty;
                        }
                    }
                }
            }

            // ＢＧＭを切り替え
            string argfname2 = "ハイパーモードＢＧＭ";
            if (IsFeatureAvailable(argfname2))
            {
                var loopTo = CountFeature();
                for (i = 1; i <= loopTo; i++)
                {
                    string localFeature() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                    string localFeatureData2() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                    string localLIndex() { string arglist = hs2eb6d7953f284c87970de1e6c7ca058d(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                    if (localFeature() == "ハイパーモードＢＧＭ" & (localLIndex() ?? "") == (uname ?? ""))
                    {
                        string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localFeatureData1() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string argbgm_name = Strings.Mid(localFeatureData(), Strings.InStr(localFeatureData1(), " ") + 1);
                        Sound.StartBGM(argbgm_name);
                        GUI.Sleep(500);
                        break;
                    }
                }
            }

            // メッセージを表示
            bool localIsMessageDefined2() { string argmain_situation = "ハイパーモード(" + Name + "=>" + uname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

            bool localIsMessageDefined3() { string argmain_situation = "ハイパーモード(" + uname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

            bool localIsMessageDefined4() { string argmain_situation = "ハイパーモード(" + fname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

            string argmain_situation1 = "ハイパーモード";
            if (localIsMessageDefined2() | localIsMessageDefined3() | localIsMessageDefined4() | IsMessageDefined(argmain_situation1))
            {
                GUI.Center(x, y);
                GUI.RefreshScreen();
                if (!message_window_visible)
                {
                    Unit argu1 = null;
                    Unit argu2 = null;
                    GUI.OpenMessageForm(u1: argu1, u2: argu2);
                }
                else
                {
                    message_window_visible = true;
                }

                // メッセージを表示
                bool localIsMessageDefined() { string argmain_situation = "ハイパーモード(" + uname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                bool localIsMessageDefined1() { string argmain_situation = "ハイパーモード(" + fname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                string argmain_situation = "ハイパーモード(" + Name + "=>" + uname + ")";
                if (IsMessageDefined(argmain_situation))
                {
                    string argSituation = "ハイパーモード(" + Name + "=>" + uname + ")";
                    string argmsg_mode = "";
                    PilotMessage(argSituation, msg_mode: argmsg_mode);
                }
                else if (localIsMessageDefined())
                {
                    string argSituation2 = "ハイパーモード(" + uname + ")";
                    string argmsg_mode2 = "";
                    PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                }
                else if (localIsMessageDefined1())
                {
                    string argSituation3 = "ハイパーモード(" + fname + ")";
                    string argmsg_mode3 = "";
                    PilotMessage(argSituation3, msg_mode: argmsg_mode3);
                }
                else
                {
                    string argSituation1 = "ハイパーモード";
                    string argmsg_mode1 = "";
                    PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                }

                if (!message_window_visible)
                {
                    GUI.CloseMessageForm();
                }
            }

            // 特殊効果
            Commands.SaveSelections();
            Commands.SelectedUnit = this;
            Event_Renamed.SelectedUnitForEvent = this;
            // UPGRADE_NOTE: オブジェクト SelectedTarget をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Commands.SelectedTarget = null;
            // UPGRADE_NOTE: オブジェクト SelectedTargetForEvent をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Event_Renamed.SelectedTargetForEvent = null;
            bool localIsAnimationDefined() { string argmain_situation = "ハイパーモード(" + uname + ")"; string argsub_situation = ""; var ret = IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            bool localIsAnimationDefined1() { object argIndex1 = "ハイパーモード"; string argmain_situation = "ハイパーモード(" + FeatureName(argIndex1) + ")"; string argsub_situation = ""; var ret = IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            bool localIsSpecialEffectDefined() { string argmain_situation = "ハイパーモード(" + Name + "=>" + uname + ")"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            bool localIsSpecialEffectDefined1() { string argmain_situation = "ハイパーモード(" + uname + ")"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            bool localIsSpecialEffectDefined2() { string argmain_situation = "ハイパーモード(" + fname + ")"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            string argmain_situation10 = "ハイパーモード(" + Name + "=>" + uname + ")";
            string argsub_situation8 = "";
            string argmain_situation11 = "ハイパーモード";
            string argsub_situation9 = "";
            if (IsAnimationDefined(argmain_situation10, sub_situation: argsub_situation8))
            {
                string argmain_situation2 = "ハイパーモード(" + Name + "=>" + uname + ")";
                string argsub_situation = "";
                PlayAnimation(argmain_situation2, sub_situation: argsub_situation);
            }
            else if (localIsAnimationDefined())
            {
                string argmain_situation4 = "ハイパーモード(" + uname + ")";
                string argsub_situation2 = "";
                PlayAnimation(argmain_situation4, sub_situation: argsub_situation2);
            }
            else if (localIsAnimationDefined1())
            {
                object argIndex9 = "ハイパーモード";
                string argmain_situation5 = "ハイパーモード(" + FeatureName(argIndex9) + ")";
                string argsub_situation3 = "";
                PlayAnimation(argmain_situation5, sub_situation: argsub_situation3);
            }
            else if (IsAnimationDefined(argmain_situation11, sub_situation: argsub_situation9))
            {
                string argmain_situation6 = "ハイパーモード";
                string argsub_situation4 = "";
                PlayAnimation(argmain_situation6, sub_situation: argsub_situation4);
            }
            else if (localIsSpecialEffectDefined())
            {
                string argmain_situation7 = "ハイパーモード(" + Name + "=>" + uname + ")";
                string argsub_situation5 = "";
                SpecialEffect(argmain_situation7, sub_situation: argsub_situation5);
            }
            else if (localIsSpecialEffectDefined1())
            {
                string argmain_situation8 = "ハイパーモード(" + uname + ")";
                string argsub_situation6 = "";
                SpecialEffect(argmain_situation8, sub_situation: argsub_situation6);
            }
            else if (localIsSpecialEffectDefined2())
            {
                string argmain_situation9 = "ハイパーモード(" + fname + ")";
                string argsub_situation7 = "";
                SpecialEffect(argmain_situation9, sub_situation: argsub_situation7);
            }
            else
            {
                string argmain_situation3 = "ハイパーモード";
                string argsub_situation1 = "";
                SpecialEffect(argmain_situation3, sub_situation: argsub_situation1);
            }

            Commands.RestoreSelections();

            // ハイパーモードに変形
            Transform(uname);

            // ユニット変数を置き換え
            if (Commands.SelectedUnit is object)
            {
                if ((ID ?? "") == (Commands.SelectedUnit.ID ?? ""))
                {
                    Commands.SelectedUnit = CurrentForm();
                }
            }

            if (Event_Renamed.SelectedUnitForEvent is object)
            {
                if ((ID ?? "") == (Event_Renamed.SelectedUnitForEvent.ID ?? ""))
                {
                    Event_Renamed.SelectedUnitForEvent = CurrentForm();
                }
            }

            if (Commands.SelectedTarget is object)
            {
                if ((ID ?? "") == (Commands.SelectedTarget.ID ?? ""))
                {
                    Commands.SelectedTarget = CurrentForm();
                }
            }

            if (Event_Renamed.SelectedTargetForEvent is object)
            {
                if ((ID ?? "") == (Event_Renamed.SelectedTargetForEvent.ID ?? ""))
                {
                    Event_Renamed.SelectedTargetForEvent = CurrentForm();
                }
            }

            // 変形イベント
            {
                var withBlock2 = CurrentForm();
                Event_Renamed.HandleEvent("変形", withBlock2.MainPilot().ID, withBlock2.Name);
            }
        }

        // ノーマルモードの自動発動チェック
        public bool CheckAutoNormalMode(bool without_redraw = false)
        {
            bool CheckAutoNormalModeRet = default;
            var message_window_visible = default(bool);
            string uname;
            int i;

            // ノーマルモードが自動発動するか判定

            if (Status_Renamed != "出撃")
            {
                return CheckAutoNormalModeRet;
            }

            string argfname = "ノーマルモード";
            if (!IsFeatureAvailable(argfname))
            {
                return CheckAutoNormalModeRet;
            }

            // まだ元の形態でもＯＫ？
            if (IsAbleToEnter(x, y))
            {
                return CheckAutoNormalModeRet;
            }

            // ノーマルモード先が利用可能？
            object argIndex1 = "ノーマルモード";
            string arglist = FeatureData(argIndex1);
            uname = GeneralLib.LIndex(arglist, 1);
            Unit localOtherForm() { object argIndex1 = uname; var ret = OtherForm(argIndex1); return ret; }

            if (!localOtherForm().IsAbleToEnter(x, y))
            {
                return CheckAutoNormalModeRet;
            }

            // ダイアログでメッセージを表示させるため追加パイロットをあらかじめ作成
            object argIndex4 = uname;
            if (SRC.UDList.IsDefined(argIndex4))
            {
                object argIndex3 = uname;
                {
                    var withBlock = SRC.UDList.Item(argIndex3);
                    string argfname1 = "追加パイロット";
                    if (IsFeatureAvailable(argfname1))
                    {
                        bool localIsDefined() { object argIndex1 = "追加パイロット"; object argIndex2 = FeatureData(argIndex1); var ret = SRC.PList.IsDefined(argIndex2); return ret; }

                        if (!localIsDefined())
                        {
                            object argIndex2 = "追加パイロット";
                            string argpname = FeatureData(argIndex2);
                            string argpparty = Party0;
                            string arggid = "";
                            SRC.PList.Add(argpname, MainPilot().Level, argpparty, gid: arggid);
                            this.Party0 = argpparty;
                        }
                    }
                }
            }

            // メッセージを表示
            bool localIsMessageDefined1() { string argmain_situation = "ノーマルモード(" + Name + "=>" + uname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

            bool localIsMessageDefined2() { string argmain_situation = "ノーマルモード(" + uname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

            string argmain_situation1 = "ノーマルモード";
            if (localIsMessageDefined1() | localIsMessageDefined2() | IsMessageDefined(argmain_situation1))
            {
                // ＢＧＭを切り替え
                string argfname2 = "ノーマルモードＢＧＭ";
                if (IsFeatureAvailable(argfname2))
                {
                    var loopTo = CountFeature();
                    for (i = 1; i <= loopTo; i++)
                    {
                        string localFeature() { object argIndex1 = i; var ret = Feature(argIndex1); return ret; }

                        string localFeatureData2() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string localLIndex() { string arglist = hsbe3464a93f8d41b68a3072a6446fded5(); var ret = GeneralLib.LIndex(arglist, 1); return ret; }

                        if (localFeature() == "ノーマルモードＢＧＭ" & (localLIndex() ?? "") == (uname ?? ""))
                        {
                            string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string localFeatureData1() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                            string argbgm_name = Strings.Mid(localFeatureData(), Strings.InStr(localFeatureData1(), " ") + 1);
                            Sound.StartBGM(argbgm_name);
                            GUI.Sleep(500);
                            break;
                        }
                    }
                }

                GUI.Center(x, y);
                GUI.RefreshScreen();
                if (!message_window_visible)
                {
                    Unit argu1 = null;
                    Unit argu2 = null;
                    GUI.OpenMessageForm(u1: argu1, u2: argu2);
                }
                else
                {
                    message_window_visible = true;
                }

                // メッセージを表示
                bool localIsMessageDefined() { string argmain_situation = "ノーマルモード(" + uname + ")"; var ret = IsMessageDefined(argmain_situation); return ret; }

                string argmain_situation = "ノーマルモード(" + Name + "=>" + uname + ")";
                if (IsMessageDefined(argmain_situation))
                {
                    string argSituation = "ノーマルモード(" + Name + "=>" + uname + ")";
                    string argmsg_mode = "";
                    PilotMessage(argSituation, msg_mode: argmsg_mode);
                }
                else if (localIsMessageDefined())
                {
                    string argSituation2 = "ノーマルモード(" + uname + ")";
                    string argmsg_mode2 = "";
                    PilotMessage(argSituation2, msg_mode: argmsg_mode2);
                }
                else
                {
                    string argSituation1 = "ノーマルモード";
                    string argmsg_mode1 = "";
                    PilotMessage(argSituation1, msg_mode: argmsg_mode1);
                }

                if (!message_window_visible)
                {
                    GUI.CloseMessageForm();
                }
            }

            // 特殊効果
            Commands.SaveSelections();
            Commands.SelectedUnit = this;
            Event_Renamed.SelectedUnitForEvent = this;
            // UPGRADE_NOTE: オブジェクト SelectedTarget をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Commands.SelectedTarget = null;
            // UPGRADE_NOTE: オブジェクト SelectedTargetForEvent をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            Event_Renamed.SelectedTargetForEvent = null;
            bool localIsAnimationDefined() { string argmain_situation = "ノーマルモード(" + uname + ")"; string argsub_situation = ""; var ret = IsAnimationDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            bool localIsSpecialEffectDefined() { string argmain_situation = "ノーマルモード(" + Name + "=>" + uname + ")"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            bool localIsSpecialEffectDefined1() { string argmain_situation = "ノーマルモード(" + uname + ")"; string argsub_situation = ""; var ret = IsSpecialEffectDefined(argmain_situation, sub_situation: argsub_situation); return ret; }

            string argmain_situation8 = "ノーマルモード(" + Name + "=>" + uname + ")";
            string argsub_situation6 = "";
            string argmain_situation9 = "ノーマルモード";
            string argsub_situation7 = "";
            if (IsAnimationDefined(argmain_situation8, sub_situation: argsub_situation6))
            {
                string argmain_situation2 = "ノーマルモード(" + Name + "=>" + uname + ")";
                string argsub_situation = "";
                PlayAnimation(argmain_situation2, sub_situation: argsub_situation);
            }
            else if (localIsAnimationDefined())
            {
                string argmain_situation4 = "ノーマルモード(" + uname + ")";
                string argsub_situation2 = "";
                PlayAnimation(argmain_situation4, sub_situation: argsub_situation2);
            }
            else if (IsAnimationDefined(argmain_situation9, sub_situation: argsub_situation7))
            {
                string argmain_situation5 = "ノーマルモード";
                string argsub_situation3 = "";
                PlayAnimation(argmain_situation5, sub_situation: argsub_situation3);
            }
            else if (localIsSpecialEffectDefined())
            {
                string argmain_situation6 = "ノーマルモード(" + Name + "=>" + uname + ")";
                string argsub_situation4 = "";
                SpecialEffect(argmain_situation6, sub_situation: argsub_situation4);
            }
            else if (localIsSpecialEffectDefined1())
            {
                string argmain_situation7 = "ノーマルモード(" + uname + ")";
                string argsub_situation5 = "";
                SpecialEffect(argmain_situation7, sub_situation: argsub_situation5);
            }
            else
            {
                string argmain_situation3 = "ノーマルモード";
                string argsub_situation1 = "";
                SpecialEffect(argmain_situation3, sub_situation: argsub_situation1);
            }

            Commands.RestoreSelections();

            // ノーマルモードに変形
            Transform(uname);

            // ユニット変数を置き換え
            if (Commands.SelectedUnit is object)
            {
                if ((ID ?? "") == (Commands.SelectedUnit.ID ?? ""))
                {
                    Commands.SelectedUnit = CurrentForm();
                }
            }

            if (Event_Renamed.SelectedUnitForEvent is object)
            {
                if ((ID ?? "") == (Event_Renamed.SelectedUnitForEvent.ID ?? ""))
                {
                    Event_Renamed.SelectedUnitForEvent = CurrentForm();
                }
            }

            if (Commands.SelectedTarget is object)
            {
                if ((ID ?? "") == (Commands.SelectedTarget.ID ?? ""))
                {
                    Commands.SelectedTarget = CurrentForm();
                }
            }

            if (Event_Renamed.SelectedTargetForEvent is object)
            {
                if ((ID ?? "") == (Event_Renamed.SelectedTargetForEvent.ID ?? ""))
                {
                    Event_Renamed.SelectedTargetForEvent = CurrentForm();
                }
            }

            // 画面の再描画が必要？
            object argIndex5 = "消耗";
            if (CurrentForm().IsConditionSatisfied(argIndex5))
            {
                CheckAutoNormalModeRet = true;
                if (!without_redraw)
                {
                    GUI.RedrawScreen();
                }
            }

            // 変形イベント
            {
                var withBlock1 = CurrentForm();
                Event_Renamed.HandleEvent("変形", withBlock1.MainPilot().ID, withBlock1.Name);
            }

            return CheckAutoNormalModeRet;
        }


        // データをリセット
        // UPGRADE_NOTE: Reset は Reset_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
        public void Reset_Renamed()
        {
            int i;
            string pname;
            var loopTo = CountCondition();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex1 = 1;
                DeleteCondition0(argIndex1);
            }

            RemoveAllSpecialPowerInEffect();
            Update();
            var loopTo1 = CountPilot();
            for (i = 1; i <= loopTo1; i++)
            {
                Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                localPilot().FullRecover();
            }

            var loopTo2 = CountSupport();
            for (i = 1; i <= loopTo2; i++)
            {
                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                localSupport().FullRecover();
            }

            string argfname = "追加パイロット";
            if (IsFeatureAvailable(argfname))
            {
                object argIndex2 = "追加パイロット";
                pname = FeatureData(argIndex2);
                object argIndex3 = pname;
                if (SRC.PList.IsDefined(argIndex3))
                {
                    Pilot localItem() { object argIndex1 = pname; var ret = SRC.PList.Item(argIndex1); return ret; }

                    localItem().FullRecover();
                }
            }

            string argfname1 = "追加サポート";
            if (IsFeatureAvailable(argfname1))
            {
                object argIndex4 = "追加サポート";
                pname = FeatureData(argIndex4);
                object argIndex5 = pname;
                if (SRC.PList.IsDefined(argIndex5))
                {
                    Pilot localItem1() { object argIndex1 = pname; var ret = SRC.PList.Item(argIndex1); return ret; }

                    localItem1().FullRecover();
                }
            }

            HP = MaxHP;
            FullSupply();
            Mode = "通常";
        }

        // 相手ユニットが敵かどうかを判定
        public bool IsEnemy(Unit t, bool for_move = false)
        {
            bool IsEnemyRet = default;
            string myparty, tparty;

            // 自分自身は常に味方
            if (ReferenceEquals(t, this))
            {
                IsEnemyRet = false;
                return IsEnemyRet;
            }

            // 暴走したユニットにとってはすべてが敵
            object argIndex1 = "暴走";
            if (IsConditionSatisfied(argIndex1))
            {
                IsEnemyRet = true;
                return IsEnemyRet;
            }

            // 混乱した場合はランダムで判定
            object argIndex2 = "混乱";
            if (IsConditionSatisfied(argIndex2))
            {
                if (for_move)
                {
                    IsEnemyRet = true;
                }
                else if (GeneralLib.Dice(2) == 1)
                {
                    IsEnemyRet = true;
                }
                else
                {
                    IsEnemyRet = false;
                }

                return IsEnemyRet;
            }

            myparty = Party;
            tparty = t.Party;

            // 味方ユニットは暴走、憑依、魅了したユニットを排除可能
            // (暴走した味方ユニットのPartyはＮＰＣとみなされる)
            if (myparty == "味方" & tparty == "ＮＰＣ")
            {
                object argIndex3 = "暴走";
                object argIndex4 = "憑依";
                object argIndex5 = "魅了";
                if (t.IsConditionSatisfied(argIndex3) | t.IsConditionSatisfied(argIndex4) | t.IsConditionSatisfied(argIndex5))
                {
                    IsEnemyRet = true;
                    return IsEnemyRet;
                }
            }

            if (myparty != "味方")
            {
                // ターゲットの陣営が限定されている場合、敵対関係にない陣営の
                // ユニットは味方と見なされる。
                // ただし、プレイヤーがコントロールするユニットはこのような自
                // 分を攻撃してこないユニットも排除可能。

                // 特定の陣営のみを狙う場合
                switch (Mode ?? "")
                {
                    case "味方":
                    case "ＮＰＣ":
                        {
                            switch (tparty ?? "")
                            {
                                case "味方":
                                case "ＮＰＣ":
                                    {
                                        IsEnemyRet = true;
                                        break;
                                    }

                                default:
                                    {
                                        IsEnemyRet = false;
                                        break;
                                    }
                            }

                            return IsEnemyRet;
                        }

                    case "敵":
                    case "中立":
                        {
                            if ((tparty ?? "") == (Mode ?? ""))
                            {
                                IsEnemyRet = true;
                            }
                            else
                            {
                                IsEnemyRet = false;
                            }

                            return IsEnemyRet;
                        }
                }

                // 相手が特定の陣営のみを狙う場合
                switch (t.Mode ?? "")
                {
                    case "味方":
                    case "ＮＰＣ":
                        {
                            switch (myparty ?? "")
                            {
                                case "味方":
                                case "ＮＰＣ":
                                    {
                                        IsEnemyRet = true;
                                        break;
                                    }

                                default:
                                    {
                                        IsEnemyRet = false;
                                        break;
                                    }
                            }

                            return IsEnemyRet;
                        }

                    case "敵":
                    case "中立":
                        {
                            if ((myparty ?? "") == (t.Mode ?? ""))
                            {
                                IsEnemyRet = true;
                            }
                            else
                            {
                                IsEnemyRet = false;
                            }

                            return IsEnemyRet;
                        }
                }
            }

            // 敵味方を判定
            switch (myparty ?? "")
            {
                case "味方":
                case "ＮＰＣ":
                    {
                        switch (tparty ?? "")
                        {
                            case "味方":
                            case "ＮＰＣ":
                                {
                                    IsEnemyRet = false;
                                    break;
                                }

                            default:
                                {
                                    IsEnemyRet = true;
                                    break;
                                }
                        }

                        break;
                    }

                default:
                    {
                        if ((myparty ?? "") == (tparty ?? ""))
                        {
                            IsEnemyRet = false;
                        }
                        else
                        {
                            IsEnemyRet = true;
                        }

                        break;
                    }
            }

            return IsEnemyRet;
        }

        // 相手ユニットが味方かどうかを判定
        public bool IsAlly(Unit t)
        {
            bool IsAllyRet = default;
            // 自分自身は常に味方
            if (ReferenceEquals(t, this))
            {
                IsAllyRet = true;
                return IsAllyRet;
            }

            // 暴走したユニットにとってはすべてが敵
            object argIndex1 = "暴走";
            if (IsConditionSatisfied(argIndex1))
            {
                IsAllyRet = false;
                return IsAllyRet;
            }

            // 混乱した場合はランダムで判定
            object argIndex2 = "混乱";
            if (IsConditionSatisfied(argIndex2))
            {
                if (GeneralLib.Dice(2) == 1)
                {
                    IsAllyRet = true;
                }
                else
                {
                    IsAllyRet = false;
                }

                return IsAllyRet;
            }

            // 敵味方を判定
            switch (Party ?? "")
            {
                case "味方":
                case "ＮＰＣ":
                    {
                        if (t.Party == "味方" | t.Party == "ＮＰＣ")
                        {
                            IsAllyRet = true;
                        }
                        else
                        {
                            IsAllyRet = false;
                        }

                        break;
                    }

                default:
                    {
                        if ((Party ?? "") == (t.Party ?? ""))
                        {
                            IsAllyRet = true;
                        }
                        else
                        {
                            IsAllyRet = false;
                        }

                        break;
                    }
            }

            return IsAllyRet;
        }


        // === ユニット搭載関連処理 ===

        // ユニットを搭載
        public void LoadUnit(Unit u)
        {
            colUnitOnBoard.Add(u, u.ID);
        }

        // 搭載したユニットを削除
        public void UnloadUnit(object Index)
        {
            int i;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 896556


            Input:

                    On Error GoTo ErrorHandler

             */
            colUnitOnBoard.Remove(Index);
            return;
            ErrorHandler:
            ;
            var loopTo = colUnitOnBoard.Count;
            for (i = 1; i <= loopTo; i++)
            {
                // UPGRADE_WARNING: オブジェクト colUnitOnBoard(i).Name の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(colUnitOnBoard[i].Name, Index, false)))
                {
                    colUnitOnBoard.Remove(i);
                    return;
                }
            }
        }

        // 搭載したユニットの総数
        public int CountUnitOnBoard()
        {
            int CountUnitOnBoardRet = default;
            CountUnitOnBoardRet = colUnitOnBoard.Count;
            return CountUnitOnBoardRet;
        }

        // 搭載したユニット
        public Unit UnitOnBoard(object Index)
        {
            Unit UnitOnBoardRet = default;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 897275


            Input:

                    On Error GoTo ErrorHandler

             */
            UnitOnBoardRet = (Unit)colUnitOnBoard[Index];
            return UnitOnBoardRet;
            ErrorHandler:
            ;
            foreach (Unit u in colUnitOnBoard)
            {
                // UPGRADE_WARNING: オブジェクト Index の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(u.Name, Index, false)))
                {
                    UnitOnBoardRet = u;
                    return UnitOnBoardRet;
                }
            }
        }


        // === 召喚ユニット関連処理 ===

        // 召喚ユニットを追加
        public void AddServant(Unit u)
        {
            // 既に登録している？
            if (Servant((object)u.ID) is object)
            {
                return;
            }

            colServant.Add(u, u.ID);
        }

        // 召喚ユニットを削除
        public void DeleteServant(object Index)
        {
            int i;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 898022


            Input:

                    On Error GoTo ErrorHandler

             */
            colServant.Remove(Index);
            return;
            ErrorHandler:
            ;
            var loopTo = colServant.Count;
            for (i = 1; i <= loopTo; i++)
            {
                // UPGRADE_WARNING: オブジェクト colServant(i).Name の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(colServant[i].Name, Index, false)))
                {
                    colServant.Remove(i);
                    return;
                }
            }
        }

        // 召喚ユニット総数
        public int CountServant()
        {
            int CountServantRet = default;
            CountServantRet = colServant.Count;
            return CountServantRet;
        }

        // 召喚ユニット
        public Unit Servant(object Index)
        {
            Unit ServantRet = default;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 898700


            Input:

                    On Error GoTo ErrorHandler

             */
            ServantRet = (Unit)colServant[Index];
            return ServantRet;
            ErrorHandler:
            ;
            foreach (Unit u in colServant)
            {
                // UPGRADE_WARNING: オブジェクト Index の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(u.Name, Index, false)))
                {
                    ServantRet = u;
                    return ServantRet;
                }
            }
        }

        // 召喚ユニットを解放する
        public void DismissServant()
        {
            int i, j;
            string uname;
            var loopTo = CountServant();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex3 = 1;
                {
                    var withBlock = Servant(argIndex3).CurrentForm();
                    switch (withBlock.Status_Renamed ?? "")
                    {
                        case "出撃":
                        case "格納":
                            {
                                withBlock.Escape();
                                withBlock.Status_Renamed = "破棄";
                                break;
                            }

                        case "旧主形態":
                        case "旧形態":
                            {
                                var loopTo1 = withBlock.CountFeature();
                                for (j = 1; j <= loopTo1; j++)
                                {
                                    object argIndex2 = j;
                                    if (withBlock.Feature(argIndex2) == "合体")
                                    {
                                        string localFeatureData() { object argIndex1 = j; var ret = withBlock.FeatureData(argIndex1); return ret; }

                                        string arglist = localFeatureData();
                                        uname = GeneralLib.LIndex(arglist, 2);
                                        object argIndex1 = uname;
                                        if (SRC.UList.IsDefined(argIndex1))
                                        {
                                            Unit localItem() { object argIndex1 = uname; var ret = SRC.UList.Item(argIndex1); return ret; }

                                            localItem().CurrentForm().Split_Renamed();
                                        }
                                    }
                                }

                                {
                                    var withBlock1 = withBlock.CurrentForm();
                                    if (withBlock1.Status_Renamed == "出撃" | withBlock1.Status_Renamed == "格納")
                                    {
                                        withBlock1.Escape();
                                        withBlock1.Status_Renamed = "破棄";
                                    }
                                }

                                break;
                            }
                    }
                }

                object argIndex4 = 1;
                DeleteServant(argIndex4);
            }
        }


        // === 隷属ユニット関連処理 ===

        // 隷属ユニットを追加
        public void AddSlave(Unit u)
        {
            colSlave.Add(u, u.ID);
        }

        // 隷属ユニットを削除
        public void DeleteSlave(object Index)
        {
            int i;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 900193


            Input:

                    On Error GoTo ErrorHandler

             */
            colSlave.Remove(Index);
            return;
            ErrorHandler:
            ;
            var loopTo = colSlave.Count;
            for (i = 1; i <= loopTo; i++)
            {
                // UPGRADE_WARNING: オブジェクト colSlave(i).Name の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(colSlave[i].Name, Index, false)))
                {
                    colSlave.Remove(i);
                    return;
                }
            }
        }

        // 隷属ユニット総数
        public int CountSlave()
        {
            int CountSlaveRet = default;
            CountSlaveRet = colSlave.Count;
            return CountSlaveRet;
        }

        // 隷属ユニット
        public Unit Slave(object Index)
        {
            Unit SlaveRet = default;
            ;
#error Cannot convert OnErrorGoToStatementSyntax - see comment for details
            /* Cannot convert OnErrorGoToStatementSyntax, CONVERSION ERROR: Conversion for OnErrorGoToLabelStatement not implemented, please report this issue in 'On Error GoTo ErrorHandler' at character 900853


            Input:

                    On Error GoTo ErrorHandler

             */
            SlaveRet = (Unit)colSlave[Index];
            return SlaveRet;
            ErrorHandler:
            ;
            foreach (Unit u in colSlave)
            {
                // UPGRADE_WARNING: オブジェクト Index の既定プロパティを解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"' をクリックしてください。
                if (Conversions.ToBoolean(Operators.ConditionalCompareObjectEqual(u.Name, Index, false)))
                {
                    SlaveRet = u;
                    return SlaveRet;
                }
            }
        }

        // 隷属ユニットを解放する
        public void DismissSlave()
        {
            int i;
            var loopTo = CountSlave();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex5 = 1;
                {
                    var withBlock = Slave(argIndex5).CurrentForm();
                    object argIndex2 = "魅了";
                    if (withBlock.IsConditionSatisfied(argIndex2) & withBlock.Master is object)
                    {
                        if (ReferenceEquals(withBlock.Master.CurrentForm(), this))
                        {
                            object argIndex1 = "魅了";
                            withBlock.DeleteCondition(argIndex1);
                            // UPGRADE_NOTE: オブジェクト Slave().CurrentForm.Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                            withBlock.Master = null;
                        }
                    }

                    object argIndex4 = "憑依";
                    if (withBlock.IsConditionSatisfied(argIndex4) & withBlock.Master is object)
                    {
                        if (ReferenceEquals(withBlock.Master.CurrentForm(), this))
                        {
                            object argIndex3 = "憑依";
                            withBlock.DeleteCondition(argIndex3);
                            // UPGRADE_NOTE: オブジェクト Slave().CurrentForm.Master をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                            withBlock.Master = null;
                        }
                    }
                }

                object argIndex6 = 1;
                DeleteSlave(argIndex6);
            }
        }

        // === 一時中断用データ関連処理 ===

        // 一時中断用データをファイルにセーブする
        public void Dump()
        {
            Condition cnd;
            int i;
            FileSystem.WriteLine(SRC.SaveDataFileNumber, Name, ID, Party0);
            FileSystem.WriteLine(SRC.SaveDataFileNumber, Rank, BossRank, x, y);
            FileSystem.WriteLine(SRC.SaveDataFileNumber, Area, UsedAction, Mode, Status_Renamed);
            if (Master is object)
            {
                FileSystem.WriteLine(SRC.SaveDataFileNumber, Master.ID);
            }
            else
            {
                FileSystem.WriteLine(SRC.SaveDataFileNumber, "-");
            }

            if (Summoner is object)
            {
                FileSystem.WriteLine(SRC.SaveDataFileNumber, Summoner.ID);
            }
            else
            {
                FileSystem.WriteLine(SRC.SaveDataFileNumber, "-");
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, UsedSupportAttack, UsedSupportGuard);
            FileSystem.WriteLine(SRC.SaveDataFileNumber, UsedSyncAttack, UsedCounterAttack);
            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)CountOtherForm());
            var loopTo = CountOtherForm();
            for (i = 1; i <= loopTo; i++)
            {
                Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                FileSystem.WriteLine(SRC.SaveDataFileNumber, localOtherForm().ID);
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)CountUnitOnBoard());
            var loopTo1 = CountUnitOnBoard();
            for (i = 1; i <= loopTo1; i++)
            {
                Unit localUnitOnBoard() { object argIndex1 = i; var ret = UnitOnBoard(argIndex1); return ret; }

                FileSystem.WriteLine(SRC.SaveDataFileNumber, localUnitOnBoard().ID);
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)CountPilot());
            var loopTo2 = CountPilot();
            for (i = 1; i <= loopTo2; i++)
            {
                Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                FileSystem.WriteLine(SRC.SaveDataFileNumber, localPilot().ID);
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)CountSupport());
            var loopTo3 = CountSupport();
            for (i = 1; i <= loopTo3; i++)
            {
                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                FileSystem.WriteLine(SRC.SaveDataFileNumber, localSupport().ID);
            }

            if (AdditionalSupport() is null)
            {
                FileSystem.WriteLine(SRC.SaveDataFileNumber, "");
            }
            else
            {
                FileSystem.WriteLine(SRC.SaveDataFileNumber, AdditionalSupport().ID);
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)CountServant());
            var loopTo4 = CountServant();
            for (i = 1; i <= loopTo4; i++)
            {
                Unit localServant() { object argIndex1 = i; var ret = Servant(argIndex1); return ret; }

                FileSystem.WriteLine(SRC.SaveDataFileNumber, localServant().ID);
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)CountItem());
            var loopTo5 = CountItem();
            for (i = 1; i <= loopTo5; i++)
            {
                Item localItem() { object argIndex1 = i; var ret = Item(argIndex1); return ret; }

                FileSystem.WriteLine(SRC.SaveDataFileNumber, localItem().ID);
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)colSpecialPowerInEffect.Count);
            foreach (Condition currentCnd in colSpecialPowerInEffect)
            {
                cnd = currentCnd;
                FileSystem.WriteLine(SRC.SaveDataFileNumber, cnd.Name, cnd.StrData);
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)colCondition.Count);
            foreach (Condition currentCnd1 in colCondition)
            {
                cnd = currentCnd1;
                FileSystem.WriteLine(SRC.SaveDataFileNumber, cnd.Name, cnd.Lifetime, cnd.Level, cnd.StrData);
            }

            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)CountWeapon());
            var loopTo6 = CountWeapon();
            for (i = 1; i <= loopTo6; i++)
                FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)Bullet(i));
            FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)CountAbility());
            var loopTo7 = CountAbility();
            for (i = 1; i <= loopTo7; i++)
                FileSystem.WriteLine(SRC.SaveDataFileNumber, (object)Stock(i));
            FileSystem.WriteLine(SRC.SaveDataFileNumber, HP, EN);
        }

        // 一時中断用データをファイルからロードする
        public void Restore()
        {
            var sbuf = default(string);
            var ibuf = default;
            var lbuf = default;
            // UPGRADE_NOTE: ctype は ctype_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
            string ctype_Renamed = default, cdata = default;
            int cltime;
            double clevel;
            int num = default, i, ret;

            // Name, ID, Party
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            strName = sbuf;
            object argIndex1 = sbuf;
            Data = SRC.UDList.Item(argIndex1);
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            ID = sbuf;
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            strParty = sbuf;

            // Rank, BossRank, X, Y
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            intRank = ibuf;
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            intBossRank = ibuf;
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            x = ibuf;
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            y = ibuf;

            // Area, Action, Mode, Status
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            Area = sbuf;
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            UsedAction = ibuf;
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            strMode = sbuf;
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            Status_Renamed = sbuf;

            // Master, Summoner
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);

            // UsedSupportAttack, UsedSupportGuard
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            UsedSupportAttack = ibuf;
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            UsedSupportGuard = ibuf;

            // UsedSyncAttack, UsedCounterAttack
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            UsedSyncAttack = ibuf;
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            UsedCounterAttack = ibuf;

            // OtherForm
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo = num;
            for (i = 1; i <= loopTo; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // UnitOnBoard
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo1 = num;
            for (i = 1; i <= loopTo1; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Pilot
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo2 = num;
            for (i = 1; i <= loopTo2; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
                Pilot localItem() { object argIndex1 = sbuf; var ret = SRC.PList.Item(argIndex1); return ret; }

                var argp = localItem();
                AddPilot(argp);
            }

            // Support
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo3 = num;
            for (i = 1; i <= loopTo3; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
                Pilot localItem1() { object argIndex1 = sbuf; var ret = SRC.PList.Item(argIndex1); return ret; }

                var argp1 = localItem1();
                AddSupport(argp1);
            }

            // AdditionalSupport
            if (SRC.SaveDataVersion >= 20210)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
                if (!string.IsNullOrEmpty(sbuf))
                {
                    object argIndex2 = sbuf;
                    pltAdditionalSupport = SRC.PList.Item(argIndex2);
                    pltAdditionalSupport.Unit_Renamed = this;
                    pltAdditionalSupport.IsAdditionalSupport = true;
                }
            }

            // Servant
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo4 = num;
            for (i = 1; i <= loopTo4; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Item
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo5 = num;
            for (i = 1; i <= loopTo5; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // SpecialPowerInEffect
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo6 = num;
            for (i = 1; i <= loopTo6; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, ctype_Renamed);
                FileSystem.Input(SRC.SaveDataFileNumber, cdata);
                MakeSpecialPowerInEffect(ctype_Renamed, cdata);
            }

            // Condition
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo7 = num;
            for (i = 1; i <= loopTo7; i++)
            {
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

                // 付加した特殊能力のデータに「"」や「,」が含まれているとデータの処理が
                // 正しく行えないので手動でパーシング

                ret = Strings.InStr(sbuf, ",");
                ctype_Renamed = Strings.Left(sbuf, ret - 1);
                if (Strings.Left(ctype_Renamed, 1) == "\"")
                {
                    ctype_Renamed = Strings.Mid(ctype_Renamed, 2, Strings.Len(ctype_Renamed) - 2);
                }

                sbuf = Strings.Mid(sbuf, ret + 1);
                ret = Strings.InStr(sbuf, ",");
                string argexpr = Strings.Left(sbuf, ret - 1);
                cltime = GeneralLib.StrToLng(argexpr);
                sbuf = Strings.Mid(sbuf, ret + 1);
                ret = Strings.InStr(sbuf, ",");
                string argexpr1 = Strings.Left(sbuf, ret - 1);
                clevel = GeneralLib.StrToLng(argexpr1);
                sbuf = Strings.Mid(sbuf, ret + 1);
                cdata = sbuf;
                if (Strings.Left(cdata, 1) == "\"")
                {
                    cdata = Strings.Mid(cdata, 2, Strings.Len(cdata) - 2);
                }

                if (SRC.SaveDataVersion < 10741)
                {
                    if (Strings.InStr(cdata, " パイロット能力付加 ") > 0)
                    {
                        goto NextCondition;
                    }

                    if (Strings.InStr(cdata, " パイロット能力強化 ") > 0)
                    {
                        goto NextCondition;
                    }
                }

                AddCondition(ctype_Renamed, cltime, clevel, cdata);
                NextCondition:
                ;
            }

            // Weapon
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo8 = num;
            for (i = 1; i <= loopTo8; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Ability
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo9 = num;
            for (i = 1; i <= loopTo9; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // HP, EN
            FileSystem.Input(SRC.SaveDataFileNumber, lbuf);
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            HP = lbuf;
            EN = ibuf;
        }

        // 一時中断用データのリンク情報をファイルからロードする
        public void RestoreLinkInfo()
        {
            string sbuf;
            var ibuf = default;
            var lbuf = default;
            double dbuf;
            int i, num = default;
            Item itm;

            // Name, ID, Party
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Rank, BossRank, X, Y
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Area, Action, Mode, Status
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Master, Summoner
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            object argIndex1 = sbuf;
            Master = SRC.UList.Item(argIndex1);
            FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
            object argIndex2 = sbuf;
            Summoner = SRC.UList.Item(argIndex2);

            // SupportAttackStock, SupportGuardStock
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);
            // UsedSyncAttack, UsedCounterAttack
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // OtherForm
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo = num;
            for (i = 1; i <= loopTo; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
                Unit localItem() { object argIndex1 = sbuf; var ret = SRC.UList.Item(argIndex1); return ret; }

                var argu = localItem();
                AddOtherForm(argu);
            }

            // UnitOnBoard
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo1 = num;
            for (i = 1; i <= loopTo1; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
                Unit localItem1() { object argIndex1 = sbuf; var ret = SRC.UList.Item(argIndex1); return ret; }

                var argu1 = localItem1();
                LoadUnit(argu1);
            }

            // Pilot
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo2 = num;
            for (i = 1; i <= loopTo2; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Support
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo3 = num;
            for (i = 1; i <= loopTo3; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // AdditionalSupport
            if (SRC.SaveDataVersion >= 20210)
            {
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);
            }

            // Servant
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo4 = num;
            for (i = 1; i <= loopTo4; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
                Unit localItem2() { object argIndex1 = sbuf; var ret = SRC.UList.Item(argIndex1); return ret; }

                var argu2 = localItem2();
                AddServant(argu2);
            }

            // Item
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo5 = num;
            for (i = 1; i <= loopTo5; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, sbuf);
                Item localItem3() { object argIndex1 = sbuf; var ret = SRC.IList.Item(argIndex1); return ret; }

                var argitm = localItem3();
                AddItem0(argitm);
            }

            // SpecialPowerInEffect
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo6 = num;
            for (i = 1; i <= loopTo6; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Condition
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo7 = num;
            for (i = 1; i <= loopTo7; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);
            Update(true);

            // Weapon
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo8 = num;
            for (i = 1; i <= loopTo8; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
                if (i <= CountWeapon())
                {
                    SetBullet(i, ibuf);
                }
            }

            // Ability
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo9 = num;
            for (i = 1; i <= loopTo9; i++)
            {
                FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
                if (i <= CountAbility())
                {
                    SetStock(i, ibuf);
                }
            }

            // HP, EN
            FileSystem.Input(SRC.SaveDataFileNumber, lbuf);
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            HP = lbuf;
            EN = ibuf;
        }

        // 一時中断用データのパラメータ情報をファイルからロードする
        public void RestoreParameter()
        {
            string sbuf;
            var ibuf = default;
            var lbuf = default;
            double dbuf;
            int i, num = default;

            // Name, ID, Party
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Rank, BossRank, X, Y
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Area, Action, Mode, Status
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Master
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);
            // Summoner
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // SupportAttackStock, SupportGuardStock
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);
            // UsedSyncAttack, UsedCounterAttack
            sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // OtherForm
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo = num;
            for (i = 1; i <= loopTo; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // UnitOnBoard
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo1 = num;
            for (i = 1; i <= loopTo1; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Pilot
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo2 = num;
            for (i = 1; i <= loopTo2; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Support
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo3 = num;
            for (i = 1; i <= loopTo3; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // AdditionalSupport
            if (SRC.SaveDataVersion >= 20210)
            {
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);
            }

            // Servant
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo4 = num;
            for (i = 1; i <= loopTo4; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Item
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo5 = num;
            for (i = 1; i <= loopTo5; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // SpecialPowerInEffect
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo6 = num;
            for (i = 1; i <= loopTo6; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Condition
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo7 = num;
            for (i = 1; i <= loopTo7; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Weapon
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo8 = num;
            for (i = 1; i <= loopTo8; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // Ability
            FileSystem.Input(SRC.SaveDataFileNumber, num);
            var loopTo9 = num;
            for (i = 1; i <= loopTo9; i++)
                sbuf = FileSystem.LineInput(SRC.SaveDataFileNumber);

            // HP, EN
            FileSystem.Input(SRC.SaveDataFileNumber, lbuf);
            FileSystem.Input(SRC.SaveDataFileNumber, ibuf);
            HP = lbuf;
            EN = ibuf;
            Update();
        }


        // === 各種処理を行うための関数＆サブルーチン ===

        // 出撃中？
        public bool IsOperational()
        {
            bool IsOperationalRet = default;
            int i;
            if (Status_Renamed == "出撃")
            {
                IsOperationalRet = true;
                return IsOperationalRet;
            }

            var loopTo = CountOtherForm();
            for (i = 1; i <= loopTo; i++)
            {
                Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                if (localOtherForm().Status_Renamed == "出撃")
                {
                    IsOperationalRet = true;
                    return IsOperationalRet;
                }
            }

            IsOperationalRet = false;
            return IsOperationalRet;
        }

        // ユニットがユニット nm と同一？
        public bool IsEqual(string nm)
        {
            bool IsEqualRet = default;
            int i;
            if ((Name ?? "") == (nm ?? ""))
            {
                IsEqualRet = true;
                return IsEqualRet;
            }

            var loopTo = CountOtherForm();
            for (i = 1; i <= loopTo; i++)
            {
                Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                if ((localOtherForm().Name ?? "") == (nm ?? ""))
                {
                    IsEqualRet = true;
                    return IsEqualRet;
                }
            }

            IsEqualRet = false;
            return IsEqualRet;
        }

        // ユニットが現在とっている形態
        public Unit CurrentForm()
        {
            Unit CurrentFormRet = default;
            int i;
            if (Status_Renamed == "他形態")
            {
                var loopTo = CountOtherForm();
                for (i = 1; i <= loopTo; i++)
                {
                    Unit localOtherForm() { object argIndex1 = i; var ret = OtherForm(argIndex1); return ret; }

                    if (localOtherForm().Status_Renamed != "他形態")
                    {
                        object argIndex1 = i;
                        CurrentFormRet = OtherForm(argIndex1);
                        return CurrentFormRet;
                    }
                }
            }

            CurrentFormRet = this;
            return CurrentFormRet;
        }

        // 人間ユニットかどうか判定
        public bool IsHero()
        {
            bool IsHeroRet = default;
            {
                var withBlock = Data;
                if (Strings.Left(withBlock.Class_Renamed, 1) == "(")
                {
                    IsHeroRet = true;
                }
                else
                {
                    IsHeroRet = false;
                }
            }

            return IsHeroRet;
        }

        // (tx,ty)の地点の周囲に「連携攻撃」を行ってくれるユニットがいるかどうかを判定
        public Unit LookForAttackHelp(int tx, int ty)
        {
            Unit LookForAttackHelpRet = default;
            Unit u;
            int i;
            for (i = 1; i <= 4; i++)
            {
                // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                u = null;
                switch (i)
                {
                    case 1:
                        {
                            if (tx > 1)
                            {
                                u = Map.MapDataForUnit[tx - 1, ty];
                            }

                            break;
                        }

                    case 2:
                        {
                            if (tx < Map.MapWidth)
                            {
                                u = Map.MapDataForUnit[tx + 1, ty];
                            }

                            break;
                        }

                    case 3:
                        {
                            if (ty > 1)
                            {
                                u = Map.MapDataForUnit[tx, ty - 1];
                            }

                            break;
                        }

                    case 4:
                        {
                            if (ty < Map.MapHeight)
                            {
                                u = Map.MapDataForUnit[tx, ty + 1];
                            }

                            break;
                        }
                }

                // ユニットがいる？
                if (u is null)
                {
                    goto NextLoop;
                }

                // ユニットが敵でない？
                if (IsEnemy(u))
                {
                    goto NextLoop;
                }
                // 信頼度を満たしている？
                if (GeneralLib.Dice(10) > u.MainPilot().Relation(MainPilot()))
                {
                    goto NextLoop;
                }

                // 行動可能？
                if (u.MaxAction() == 0)
                {
                    goto NextLoop;
                }

                // 正常な判断力がある？
                object argIndex1 = "混乱";
                object argIndex2 = "暴走";
                object argIndex3 = "魅了";
                object argIndex4 = "憑依";
                object argIndex5 = "恐怖";
                object argIndex6 = "狂戦士";
                if (u.IsConditionSatisfied(argIndex1) | u.IsConditionSatisfied(argIndex2) | u.IsConditionSatisfied(argIndex3) | u.IsConditionSatisfied(argIndex4) | u.IsConditionSatisfied(argIndex5) | u.IsConditionSatisfied(argIndex6))
                {
                    goto NextLoop;
                }

                // メッセージが登録されている？
                bool localIsMessageDefined() { string argmain_situation = "連携攻撃(" + u.MainPilot().Name + ")"; var ret = IsMessageDefined(argmain_situation, true); return ret; }

                bool localIsMessageDefined1() { string argmain_situation = "連携攻撃(" + u.MainPilot().get_Nickname(false) + ")"; var ret = IsMessageDefined(argmain_situation, true); return ret; }

                if (!localIsMessageDefined() & !localIsMessageDefined1())
                {
                    goto NextLoop;
                }

                // 見つかった
                LookForAttackHelpRet = u;
                return LookForAttackHelpRet;
                NextLoop:
                ;
            }

            // 見つからなかった
            // UPGRADE_NOTE: オブジェクト LookForAttackHelp をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            LookForAttackHelpRet = null;
            return LookForAttackHelpRet;
        }

        // tからの攻撃に対して「かばう」を行ってくれるユニットがいるかどうか判定
        public Unit LookForGuardHelp(Unit t, int tw, bool is_critical)
        {
            Unit LookForGuardHelpRet = default;
            Unit u;
            int i;
            int dmg;
            double ratio;
            int ux, uy;
            string uarea;
            for (i = 1; i <= 4; i++)
            {
                // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                u = null;
                switch (i)
                {
                    case 1:
                        {
                            if (x > 1)
                            {
                                u = Map.MapDataForUnit[x - 1, y];
                            }

                            break;
                        }

                    case 2:
                        {
                            if (x < Map.MapWidth)
                            {
                                u = Map.MapDataForUnit[x + 1, y];
                            }

                            break;
                        }

                    case 3:
                        {
                            if (y > 1)
                            {
                                u = Map.MapDataForUnit[x, y - 1];
                            }

                            break;
                        }

                    case 4:
                        {
                            if (y < Map.MapHeight)
                            {
                                u = Map.MapDataForUnit[x, y + 1];
                            }

                            break;
                        }
                }

                // ユニットがいる？
                if (u is null)
                {
                    goto NextLoop;
                }

                // ユニットが敵でない？
                if (IsEnemy(u))
                {
                    goto NextLoop;
                }

                {
                    var withBlock = u;
                    // 信頼度を満たしている？
                    if (GeneralLib.Dice(10) > withBlock.MainPilot().Relation(MainPilot()))
                    {
                        goto NextLoop;
                    }

                    // 行動可能？
                    if (withBlock.MaxAction() == 0)
                    {
                        goto NextLoop;
                    }

                    // 正常な判断力がある？
                    object argIndex1 = "混乱";
                    object argIndex2 = "暴走";
                    object argIndex3 = "魅了";
                    object argIndex4 = "憑依";
                    object argIndex5 = "恐怖";
                    object argIndex6 = "狂戦士";
                    if (withBlock.IsConditionSatisfied(argIndex1) | withBlock.IsConditionSatisfied(argIndex2) | withBlock.IsConditionSatisfied(argIndex3) | withBlock.IsConditionSatisfied(argIndex4) | withBlock.IsConditionSatisfied(argIndex5) | withBlock.IsConditionSatisfied(argIndex6))
                    {
                        goto NextLoop;
                    }

                    // メッセージが登録されている？
                    bool localIsMessageDefined() { string argmain_situation = "かばう(" + MainPilot().Name + ")"; var ret = withBlock.IsMessageDefined(argmain_situation, true); return ret; }

                    bool localIsMessageDefined1() { string argmain_situation = "かばう(" + MainPilot().get_Nickname(false) + ")"; var ret = withBlock.IsMessageDefined(argmain_situation, true); return ret; }

                    if (!localIsMessageDefined() & !localIsMessageDefined1())
                    {
                        goto NextLoop;
                    }

                    // 援護相手のユニットのいる地形に進入可能？
                    if ((Area ?? "") != (withBlock.Area ?? ""))
                    {
                        switch (Area ?? "")
                        {
                            case "空中":
                                {
                                    if (withBlock.get_Adaption(1) == 0)
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }

                            case "地上":
                                {
                                    if (withBlock.get_Adaption(2) == 0)
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }

                            case "水中":
                            case "水上":
                                {
                                    if (withBlock.get_Adaption(3) == 0)
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }

                            case "宇宙":
                                {
                                    if (Map.TerrainClass(x, y) == "月面")
                                    {
                                        string argarea_name = "空";
                                        string argarea_name1 = "宇宙";
                                        if (!withBlock.IsTransAvailable(argarea_name) & !withBlock.IsTransAvailable(argarea_name1))
                                        {
                                            goto NextLoop;
                                        }
                                    }
                                    else if (withBlock.get_Adaption(4) == 0)
                                    {
                                        goto NextLoop;
                                    }

                                    break;
                                }
                        }
                    }

                    // ダメージを算出
                    string argfname = "防御不可";
                    string argattr = "殺";
                    if (withBlock.IsFeatureAvailable(argfname) | t.IsWeaponClassifiedAs(tw, argattr))
                    {
                        ratio = 1d;
                    }
                    else
                    {
                        ratio = 0.5d;
                    }

                    if (is_critical)
                    {
                        string argoname = "ダメージ倍率低下";
                        if (Expression.IsOptionDefined(argoname))
                        {
                            ratio = 1.2d * ratio;
                        }
                        else
                        {
                            ratio = 1.5d * ratio;
                        }
                    }

                    ux = withBlock.x;
                    uy = withBlock.y;
                    uarea = withBlock.Area;
                    withBlock.x = x;
                    withBlock.y = y;
                    withBlock.Area = Area;
                    dmg = t.ExpDamage(tw, u, true, ratio);
                    withBlock.x = ux;
                    withBlock.y = uy;
                    withBlock.Area = uarea;

                    // 自分が倒されてしまうような場合はかばわない
                    if (dmg >= withBlock.HP)
                    {
                        goto NextLoop;
                    }
                }

                // 見つかった
                LookForGuardHelpRet = u;
                return LookForGuardHelpRet;
                NextLoop:
                ;
            }

            // 見つからなかった
            // UPGRADE_NOTE: オブジェクト LookForGuardHelp をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
            LookForGuardHelpRet = null;
            return LookForGuardHelpRet;
        }

        // 最大サポートアタック回数
        public int MaxSupportAttack()
        {
            int MaxSupportAttackRet = default;
            {
                var withBlock = MainPilot();
                object argIndex1 = "援護攻撃";
                string argref_mode = "";
                object argIndex2 = "援護";
                string argref_mode1 = "";
                MaxSupportAttackRet = GeneralLib.MaxLng(withBlock.SkillLevel(argIndex1, ref_mode: argref_mode), withBlock.SkillLevel(argIndex2, ref_mode: argref_mode1));
            }

            return MaxSupportAttackRet;
        }

        // 最大サポートガード回数
        public int MaxSupportGuard()
        {
            int MaxSupportGuardRet = default;
            {
                var withBlock = MainPilot();
                object argIndex1 = "援護防御";
                string argref_mode = "";
                object argIndex2 = "援護";
                string argref_mode1 = "";
                MaxSupportGuardRet = GeneralLib.MaxLng(withBlock.SkillLevel(argIndex1, ref_mode: argref_mode), withBlock.SkillLevel(argIndex2, ref_mode: argref_mode1));
            }

            return MaxSupportGuardRet;
        }

        // 最大同時援護攻撃回数
        public int MaxSyncAttack()
        {
            int MaxSyncAttackRet = default;
            object argIndex1 = "統率";
            string argref_mode = "";
            MaxSyncAttackRet = MainPilot().SkillLevel(argIndex1, ref_mode: argref_mode);
            return MaxSyncAttackRet;
        }

        // 最大カウンター攻撃回数
        public int MaxCounterAttack()
        {
            int MaxCounterAttackRet = default;
            {
                var withBlock = MainPilot();
                object argIndex1 = "カウンター";
                string argref_mode = "";
                MaxCounterAttackRet = withBlock.SkillLevel(argIndex1, ref_mode: argref_mode);
                string argsname = "先手必勝";
                if (withBlock.IsSkillAvailable(argsname))
                {
                    object argIndex2 = "先手必勝";
                    string arglist = withBlock.SkillData(argIndex2);
                    if (GeneralLib.LLength(arglist) == 2)
                    {
                        string localLIndex() { object argIndex1 = "先手必勝"; string arglist = withBlock.SkillData(argIndex1); var ret = GeneralLib.LIndex(arglist, 2); return ret; }

                        int localStrToLng() { string argexpr = hs82ee736ae10e4616bf0a2d5cf18f3478(); var ret = GeneralLib.StrToLng(argexpr); return ret; }

                        if (withBlock.Morale >= localStrToLng())
                        {
                            MaxCounterAttackRet = 1000;
                        }
                    }
                    else if (withBlock.Morale >= 120)
                    {
                        MaxCounterAttackRet = 1000;
                    }
                }
            }

            return MaxCounterAttackRet;
        }

        // ユニット t に対して周囲にサポートアタックを行ってくれるユニットがいるかどうかを判定
        public Unit LookForSupportAttack(Unit t)
        {
            Unit LookForSupportAttackRet = default;
            Unit u;
            int i, w;
            int max_wpower;
            string team, uteam;

            // 正常な判断が可能？
            object argIndex1 = "混乱";
            if (IsConditionSatisfied(argIndex1))
            {
                return LookForSupportAttackRet;
            }

            // 同士討ちの場合はどちらに荷担すべきか分からないので……
            if (t is object)
            {
                if ((Party ?? "") == (t.Party ?? ""))
                {
                    return LookForSupportAttackRet;
                }
            }

            object argIndex2 = "チーム";
            team = MainPilot().SkillData(argIndex2);
            max_wpower = -1;
            for (i = 1; i <= 4; i++)
            {
                // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                u = null;
                switch (i)
                {
                    case 1:
                        {
                            if (x > 1)
                            {
                                u = Map.MapDataForUnit[x - 1, y];
                            }

                            break;
                        }

                    case 2:
                        {
                            if (x < Map.MapWidth)
                            {
                                u = Map.MapDataForUnit[x + 1, y];
                            }

                            break;
                        }

                    case 3:
                        {
                            if (y > 1)
                            {
                                u = Map.MapDataForUnit[x, y - 1];
                            }

                            break;
                        }

                    case 4:
                        {
                            if (y < Map.MapHeight)
                            {
                                u = Map.MapDataForUnit[x, y + 1];
                            }

                            break;
                        }
                }

                if (u is null)
                {
                    goto NextUnit;
                }
                // サポートアタック数が残っている？
                if (u.MaxSupportAttack() <= u.UsedSupportAttack)
                {
                    goto NextUnit;
                }

                // 行動数が残っている？
                if (u.Action == 0)
                {
                    goto NextUnit;
                }

                // 正常な判断が可能？
                object argIndex3 = "混乱";
                object argIndex4 = "暴走";
                object argIndex5 = "恐怖";
                object argIndex6 = "狂戦士";
                object argIndex7 = "踊り";
                if (u.IsConditionSatisfied(argIndex3) | u.IsConditionSatisfied(argIndex4) | u.IsConditionSatisfied(argIndex5) | u.IsConditionSatisfied(argIndex6) | u.IsConditionSatisfied(argIndex7))
                {
                    goto NextUnit;
                }

                // 味方？
                switch (u.Party ?? "")
                {
                    case "ＮＰＣ":
                        {
                            switch (Party ?? "")
                            {
                                case "敵":
                                case "中立":
                                    {
                                        goto NextUnit;
                                        break;
                                    }
                            }

                            break;
                        }

                    default:
                        {
                            if ((u.Party ?? "") != (Party ?? ""))
                            {
                                goto NextUnit;
                            }

                            break;
                        }
                }

                // 同じチームに属している？
                object argIndex8 = "チーム";
                uteam = u.MainPilot().SkillData(argIndex8);
                if ((team ?? "") != (uteam ?? "") & !string.IsNullOrEmpty(uteam))
                {
                    goto NextUnit;
                }

                // まだターゲットが特定されていない？
                if (t is null)
                {
                    LookForSupportAttackRet = u;
                    return LookForSupportAttackRet;
                }

                // 攻撃可能？
                // 高い威力の武器はリストの最後の方にあることが多いので後ろから判定
                w = u.CountWeapon();
                while (w > 0)
                {
                    // 攻撃力が今まで見つかった武器以下の場合は選考外
                    if (u.WeaponPower(w, t.Area) <= max_wpower)
                    {
                        goto NextWeapon;
                    }

                    // サポートアタックに利用可能？
                    string argattr = "Ｍ";
                    if (u.IsWeaponClassifiedAs(w, argattr))
                    {
                        goto NextWeapon;
                    }

                    string argattr1 = "合";
                    if (u.IsWeaponClassifiedAs(w, argattr1))
                    {
                        goto NextWeapon;
                    }

                    string argref_mode = "移動前";
                    if (!u.IsWeaponAvailable(w, argref_mode))
                    {
                        goto NextWeapon;
                    }

                    if (!u.IsTargetWithinRange(w, t))
                    {
                        goto NextWeapon;
                    }

                    if (u.Party == "味方" & u.Party0 == "味方")
                    {
                        // 味方ユニットは自爆攻撃をサポートアタックには使用しない
                        string argattr2 = "自";
                        if (u.IsWeaponClassifiedAs(w, argattr2))
                        {
                            goto NextWeapon;
                        }

                        // 自動反撃の場合、味方ユニットは残弾数が少ない武器を使用しない
                        // UPGRADE_ISSUE: Control mnuMapCommandItem は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
                        if (GUI.MainForm.mnuMapCommandItem(Commands.AutoDefenseCmdID).Checked)
                        {
                            string argattr3 = "永";
                            if (!u.IsWeaponClassifiedAs(w, argattr3))
                            {
                                if (u.Bullet(w) == 1 | u.MaxBullet(w) == 2 | u.MaxBullet(w) == 3)
                                {
                                    goto NextWeapon;
                                }
                            }

                            if (u.WeaponENConsumption(w) > 0)
                            {
                                if (u.WeaponENConsumption(w) >= u.EN / 2 | u.WeaponENConsumption(w) >= u.MaxEN / 4)
                                {
                                    goto NextWeapon;
                                }
                            }

                            string argattr4 = "尽";
                            if (u.IsWeaponClassifiedAs(w, argattr4))
                            {
                                goto NextWeapon;
                            }
                        }
                    }

                    // 援護攻撃用の武器が見つかった
                    max_wpower = u.WeaponPower(w, t.Area);
                    LookForSupportAttackRet = u;
                    NextWeapon:
                    ;
                    w = (w - 1);
                }

                NextUnit:
                ;
            }

            return LookForSupportAttackRet;
        }

        // ユニット t からの攻撃に対して周囲にサポートガードを行ってくれるユニットが
        // いるかどうかを判定
        public Unit LookForSupportGuard(Unit t, int tw)
        {
            Unit LookForSupportGuardRet = default;
            Unit u;
            int i;
            int my_dmg, dmg;
            double ratio;
            int ux, uy;
            string uarea;
            string team, uteam;

            // マップ攻撃はサポートガード不能
            string argattr = "Ｍ";
            if (t.IsWeaponClassifiedAs(tw, argattr))
            {
                return LookForSupportGuardRet;
            }

            // スペシャルパワーでサポートガードが無効化されている？
            string argsptype = "サポートガード無効化";
            if (t.IsUnderSpecialPowerEffect(argsptype))
            {
                return LookForSupportGuardRet;
            }

            // 同士討ちの場合は本来の陣営に属するユニットのみを守る
            if ((Party ?? "") == (t.Party ?? "") | Party == "ＮＰＣ" & t.Party == "味方")
            {
                if ((Party ?? "") != (Party0 ?? ""))
                {
                    return LookForSupportGuardRet;
                }

                object argIndex1 = "暴走";
                if (IsConditionSatisfied(argIndex1))
                {
                    return LookForSupportGuardRet;
                }
            }

            // 自分が受けるダメージを求めておく
            var argt = this;
            my_dmg = t.ExpDamage(tw, argt, true);

            // かばう必要がない？
            // 手動反撃で味方の場合はダメージにかかわらず常にかばう
            // UPGRADE_ISSUE: Control mnuMapCommandItem は、汎用名前空間 Form 内にあるため、解決できませんでした。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="084D22AD-ECB1-400F-B4C7-418ECEC5E36E"' をクリックしてください。
            if (Party != "味方" | GUI.MainForm.mnuMapCommandItem(Commands.AutoDefenseCmdID).Checked)
            {
                if (t.IsNormalWeapon(tw))
                {
                    if (my_dmg < MaxHP / 20 & my_dmg < HP / 5)
                    {
                        return LookForSupportGuardRet;
                    }
                }
                else
                {
                    var argt1 = this;
                    if (t.CriticalProbability(tw, argt1) > 0)
                    {
                        return LookForSupportGuardRet;
                    }
                }
            }

            object argIndex2 = "チーム";
            team = MainPilot().SkillData(argIndex2);
            for (i = 1; i <= 4; i++)
            {
                // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                u = null;
                switch (i)
                {
                    case 1:
                        {
                            if (x > 1)
                            {
                                u = Map.MapDataForUnit[x - 1, y];
                            }

                            break;
                        }

                    case 2:
                        {
                            if (x < Map.MapWidth)
                            {
                                u = Map.MapDataForUnit[x + 1, y];
                            }

                            break;
                        }

                    case 3:
                        {
                            if (y > 1)
                            {
                                u = Map.MapDataForUnit[x, y - 1];
                            }

                            break;
                        }

                    case 4:
                        {
                            if (y < Map.MapHeight)
                            {
                                u = Map.MapDataForUnit[x, y + 1];
                            }

                            break;
                        }
                }

                if (u is null)
                {
                    goto NextUnit;
                }

                if (ReferenceEquals(u, t))
                {
                    goto NextUnit;
                }

                {
                    var withBlock = u;
                    // サポートガード数が残っている？
                    if (withBlock.MaxSupportGuard() <= withBlock.UsedSupportGuard)
                    {
                        goto NextUnit;
                    }

                    // 行動可能？
                    if (withBlock.MaxAction() == 0)
                    {
                        goto NextUnit;
                    }

                    // スペシャルパワーでサポートガードが封印されている？
                    string argsptype1 = "サポートガード不能";
                    if (withBlock.IsUnderSpecialPowerEffect(argsptype1))
                    {
                        goto NextUnit;
                    }

                    // 正常な判断が可能？
                    object argIndex3 = "混乱";
                    object argIndex4 = "暴走";
                    object argIndex5 = "恐怖";
                    object argIndex6 = "狂戦士";
                    if (withBlock.IsConditionSatisfied(argIndex3) | withBlock.IsConditionSatisfied(argIndex4) | withBlock.IsConditionSatisfied(argIndex5) | withBlock.IsConditionSatisfied(argIndex6))
                    {
                        goto NextUnit;
                    }

                    // ＨＰが高いほうを優先
                    if (LookForSupportGuardRet is object)
                    {
                        if (LookForSupportGuardRet.HP >= withBlock.HP)
                        {
                            goto NextUnit;
                        }
                    }

                    // 味方？
                    switch (withBlock.Party ?? "")
                    {
                        case "味方":
                            {
                                string argoname = "対ＮＰＣサポートガード無効";
                                if (Expression.IsOptionDefined(argoname))
                                {
                                    if ((withBlock.Party ?? "") != (Party ?? ""))
                                    {
                                        goto NextUnit;
                                    }
                                }
                                else
                                {
                                    switch (Party ?? "")
                                    {
                                        case "敵":
                                        case "中立":
                                            {
                                                goto NextUnit;
                                                break;
                                            }
                                    }
                                }

                                break;
                            }

                        case "ＮＰＣ":
                            {
                                switch (Party ?? "")
                                {
                                    case "敵":
                                    case "中立":
                                        {
                                            goto NextUnit;
                                            break;
                                        }
                                }

                                break;
                            }

                        default:
                            {
                                if ((withBlock.Party ?? "") != (Party ?? ""))
                                {
                                    goto NextUnit;
                                }

                                break;
                            }
                    }

                    // 同じチームに属している？
                    object argIndex7 = "チーム";
                    uteam = withBlock.MainPilot().SkillData(argIndex7);
                    if ((team ?? "") != (uteam ?? "") & !string.IsNullOrEmpty(uteam))
                    {
                        goto NextUnit;
                    }

                    // 援護相手のユニットのいる地形に進入可能？
                    if ((Area ?? "") != (withBlock.Area ?? ""))
                    {
                        switch (Area ?? "")
                        {
                            case "空中":
                                {
                                    string argarea_name = "空";
                                    if (!withBlock.IsTransAvailable(argarea_name))
                                    {
                                        goto NextUnit;
                                    }

                                    break;
                                }

                            case "地上":
                                {
                                    if (withBlock.get_Adaption(2) == 0)
                                    {
                                        goto NextUnit;
                                    }

                                    break;
                                }

                            case "水中":
                            case "水上":
                                {
                                    if (withBlock.get_Adaption(3) == 0)
                                    {
                                        goto NextUnit;
                                    }

                                    break;
                                }

                            case "宇宙":
                                {
                                    if (withBlock.get_Adaption(4) == 0)
                                    {
                                        goto NextUnit;
                                    }

                                    break;
                                }
                        }
                    }

                    // 機械をかばうのは機械のみ
                    if (MainPilot().Personality == "機械")
                    {
                        if (withBlock.MainPilot().Personality != "機械")
                        {
                            goto NextUnit;
                        }
                    }

                    // ダメージを算出
                    string argfname = "防御不可";
                    string argattr1 = "殺";
                    if (withBlock.IsFeatureAvailable(argfname) | t.IsWeaponClassifiedAs(tw, argattr1))
                    {
                        ratio = 1d;
                    }
                    else
                    {
                        ratio = 0.5d;
                    }

                    if (t.IsNormalWeapon(tw))
                    {
                        // ダメージは常に最悪の状況を考えてクリティカル時の値に
                        string argoname1 = "ダメージ倍率低下";
                        if (Expression.IsOptionDefined(argoname1))
                        {
                            ratio = 1.2d * ratio;
                        }
                        else
                        {
                            ratio = 1.5d * ratio;
                        }
                    }

                    ux = withBlock.x;
                    uy = withBlock.y;
                    uarea = withBlock.Area;
                    withBlock.x = x;
                    withBlock.y = y;
                    withBlock.Area = Area;
                    dmg = t.ExpDamage(tw, u, true, ratio);
                    withBlock.x = ux;
                    withBlock.y = uy;
                    withBlock.Area = uarea;

                    // ボスはザコを見殺しにする！
                    if (withBlock.BossRank > BossRank)
                    {
                        // 被るダメージが少ない場合は別だけど……
                        if (dmg >= withBlock.MaxHP / 20 | dmg >= withBlock.HP / 5)
                        {
                            goto NextUnit;
                        }
                    }

                    // 自分が倒されてしまうような場合はかばわない(クリティカルを含む)
                    if (dmg >= withBlock.HP)
                    {
                        // ボスは例外……
                        if (withBlock.BossRank >= BossRank)
                        {
                            goto NextUnit;
                        }
                    }
                }

                LookForSupportGuardRet = u;
                NextUnit:
                ;
            }

            return LookForSupportGuardRet;
        }

        // (tx,ty)の地点の周囲にサポートを行ってくれるユニットがいるかどうかを判定。
        public int LookForSupport(int tx, int ty, bool for_attack = false)
        {
            int LookForSupportRet = default;
            Unit u;
            int i;
            var do_support = default(bool);
            string team, uteam;
            {
                var withBlock = MainPilot();
                // 自分自身がサポートを行うことが出来るか？
                string argsname = "援護";
                string argsname1 = "援護攻撃";
                string argsname2 = "援護防御";
                string argsname3 = "指揮";
                string argsname4 = "広域サポート";
                if (withBlock.IsSkillAvailable(argsname) | withBlock.IsSkillAvailable(argsname1) | withBlock.IsSkillAvailable(argsname2) | withBlock.IsSkillAvailable(argsname3) | withBlock.IsSkillAvailable(argsname4))
                {
                    do_support = true;
                }

                object argIndex1 = "チーム";
                team = withBlock.SkillData(argIndex1);
            }

            for (i = 1; i <= 4; i++)
            {
                // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                u = null;
                switch (i)
                {
                    case 1:
                        {
                            if (tx > 1)
                            {
                                u = Map.MapDataForUnit[tx - 1, ty];
                            }

                            break;
                        }

                    case 2:
                        {
                            if (tx < Map.MapWidth)
                            {
                                u = Map.MapDataForUnit[tx + 1, ty];
                            }

                            break;
                        }

                    case 3:
                        {
                            if (ty > 1)
                            {
                                u = Map.MapDataForUnit[tx, ty - 1];
                            }

                            break;
                        }

                    case 4:
                        {
                            if (ty < Map.MapHeight)
                            {
                                u = Map.MapDataForUnit[tx, ty + 1];
                            }

                            break;
                        }
                }

                if (u is null)
                {
                    goto NextUnit;
                }

                if (ReferenceEquals(u, this))
                {
                    goto NextUnit;
                }

                {
                    var withBlock1 = u;
                    // 正常な判断が可能？
                    object argIndex2 = "混乱";
                    object argIndex3 = "暴走";
                    object argIndex4 = "恐怖";
                    object argIndex5 = "狂戦士";
                    if (withBlock1.IsConditionSatisfied(argIndex2) | withBlock1.IsConditionSatisfied(argIndex3) | withBlock1.IsConditionSatisfied(argIndex4) | withBlock1.IsConditionSatisfied(argIndex5))
                    {
                        goto NextUnit;
                    }

                    // 味方？
                    var argt = this;
                    if (IsEnemy(u) | withBlock1.IsEnemy(argt))
                    {
                        goto NextUnit;
                    }

                    // 同じチームに属している？
                    object argIndex6 = "チーム";
                    uteam = withBlock1.MainPilot().SkillData(argIndex6);
                    if ((team ?? "") != (uteam ?? "") & !string.IsNullOrEmpty(team) & !string.IsNullOrEmpty(uteam))
                    {
                        goto NextUnit;
                    }

                    // 移動のみの場合、相手がこれから移動してしまっては意味がない
                    if (!for_attack)
                    {
                        if (withBlock1.Action > 0)
                        {
                            goto NextUnit;
                        }
                    }

                    // 自分自身がサポート可能であれば、相手が誰でも役に立つ
                    if (do_support)
                    {
                        LookForSupportRet = (LookForSupportRet + 1);
                    }

                    // サポート能力を持っている？
                    {
                        var withBlock2 = withBlock1.MainPilot();
                        string argsname6 = "援護";
                        string argsname7 = "援護攻撃";
                        string argsname8 = "援護防御";
                        string argsname9 = "指揮";
                        string argsname10 = "広域サポート";
                        if (withBlock2.IsSkillAvailable(argsname6) | withBlock2.IsSkillAvailable(argsname7))
                        {
                            LookForSupportRet = (LookForSupportRet + 1);
                            // これから攻撃する場合、相手が行動出来ればサポートアタックが可能
                            if (for_attack)
                            {
                                if (u.Action > 0)
                                {
                                    LookForSupportRet = (LookForSupportRet + 1);
                                    // 同時援護攻撃が可能であればさらにボーナス
                                    string argsname5 = "統率";
                                    if (MainPilot().IsSkillAvailable(argsname5))
                                    {
                                        LookForSupportRet = (LookForSupportRet + 1);
                                    }
                                }
                            }
                        }
                        else if (withBlock2.IsSkillAvailable(argsname8) | withBlock2.IsSkillAvailable(argsname9) | withBlock2.IsSkillAvailable(argsname10))
                        {
                            LookForSupportRet = (LookForSupportRet + 1);
                        }
                    }
                }

                NextUnit:
                ;
            }

            return LookForSupportRet;
        }

        // 合体技のパートナーを探す
        // UPGRADE_NOTE: ctype は ctype_Renamed にアップグレードされました。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"' をクリックしてください。
        public void CombinationPartner(string ctype_Renamed, int w, Unit[] partners, int tx = 0, int ty = 0, bool check_formation = false)
        {
            Unit u;
            string uname;
            int j, i, k;
            int clevel = default, cnum = default;
            var clist = default(string);
            string cname;
            int cmorale, cen, cplana = default;
            int crange, loop_limit;

            // 正常な判断が可能？
            object argIndex1 = "混乱";
            if (IsConditionSatisfied(argIndex1))
            {
                partners = new Unit[1];
                return;
            }

            // 合体技のデータを調べておく
            if (ctype_Renamed == "武装")
            {
                cname = Weapon(w).Name;
                cen = WeaponENConsumption(w);
                cmorale = Weapon(w).NecessaryMorale;
                string argattr2 = "霊";
                string argattr3 = "プ";
                if (IsWeaponClassifiedAs(w, argattr2))
                {
                    string argattr = "霊";
                    cplana = (5d * WeaponLevel(w, argattr));
                }
                else if (IsWeaponClassifiedAs(w, argattr3))
                {
                    string argattr1 = "プ";
                    cplana = (5d * WeaponLevel(w, argattr1));
                }

                crange = WeaponMaxRange(w);
            }
            else
            {
                cname = Ability(w).Name;
                cen = AbilityENConsumption(w);
                cmorale = Ability(w).NecessaryMorale;
                string argattr6 = "霊";
                string argattr7 = "プ";
                if (IsAbilityClassifiedAs(w, argattr6))
                {
                    string argattr4 = "霊";
                    cplana = (5d * AbilityLevel(w, argattr4));
                }
                else if (IsAbilityClassifiedAs(w, argattr7))
                {
                    string argattr5 = "プ";
                    cplana = (5d * AbilityLevel(w, argattr5));
                }

                crange = AbilityMaxRange(w);
            }

            // ユニットの特殊能力「合体技」の検索
            var loopTo = CountFeature();
            for (i = 1; i <= loopTo; i++)
            {
                object argIndex4 = i;
                if (Feature(argIndex4) == "合体技")
                {
                    string localFeatureData1() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                    string arglist1 = localFeatureData1();
                    if ((GeneralLib.LIndex(arglist1, 1) ?? "") == (cname ?? ""))
                    {
                        object argIndex3 = i;
                        if (IsFeatureLevelSpecified(argIndex3))
                        {
                            object argIndex2 = i;
                            clevel = FeatureLevel(argIndex2);
                        }
                        else
                        {
                            clevel = 0;
                        }

                        string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                        string arglist = localFeatureData();
                        clist = GeneralLib.ListTail(arglist, 2);
                        cnum = GeneralLib.LLength(clist);
                        break;
                    }
                }
            }

            if (i > CountFeature())
            {
                partners = new Unit[1];
                return;
            }

            // 出撃していない場合
            if (Status_Renamed != "出撃" | string.IsNullOrEmpty(Map.MapFileName))
            {
                // パートナーが仲間にいるだけでよい
                var loopTo1 = cnum;
                for (i = 1; i <= loopTo1; i++)
                {
                    uname = GeneralLib.LIndex(clist, i);

                    // パートナーがユニット名で指定されている場合
                    object argIndex6 = uname;
                    if (SRC.UList.IsDefined(argIndex6))
                    {
                        object argIndex5 = uname;
                        {
                            var withBlock = SRC.UList.Item(argIndex5);
                            if (withBlock.Status_Renamed == "出撃" | withBlock.Status_Renamed == "待機")
                            {
                                goto NextPartner;
                            }
                        }
                    }

                    // パートナーがパイロット名で指定されている場合
                    object argIndex7 = uname;
                    if (SRC.PList.IsDefined(argIndex7))
                    {
                        Pilot localItem1() { object argIndex1 = uname; var ret = SRC.PList.Item(argIndex1); return ret; }

                        Pilot localItem2() { object argIndex1 = uname; var ret = SRC.PList.Item(argIndex1); return ret; }

                        if (localItem2().Unit_Renamed is object)
                        {
                            Pilot localItem() { object argIndex1 = uname; var ret = SRC.PList.Item(argIndex1); return ret; }

                            {
                                var withBlock1 = localItem().Unit_Renamed;
                                if (withBlock1.Status_Renamed == "出撃" | withBlock1.Status_Renamed == "待機")
                                {
                                    goto NextPartner;
                                }
                            }
                        }
                    }

                    // パートナーが見つからなかった
                    partners = new Unit[1];
                    return;
                    NextPartner:
                    ;
                }
                // パートナーが全員仲間にいる
                partners = new Unit[(cnum + 1)];
                return;
            }

            // 合体技の基点の設定
            if (tx == 0)
            {
                tx = x;
            }

            if (ty == 0)
            {
                ty = y;
            }

            // パートナーの検索範囲を設定

            if (crange == 1)
            {
                if (cnum >= 8)
                {
                    // 射程１で８体合体以上の場合は２マス以内
                    loop_limit = 12;
                }
                else if (cnum >= 4)
                {
                    // 射程１で４体合体以上の場合は斜め隣接可
                    loop_limit = 8;
                }
                else
                {
                    // どれにも該当していなければ隣接のみ
                    loop_limit = 4;
                }
            }
            else if (cnum >= 9)
            {
                // 射程２以上で９体合体以上の場合は２マス以内
                loop_limit = 12;
            }
            else if (cnum >= 5)
            {
                // 射程２以上で５体合体以上の場合は斜め隣接可
                loop_limit = 8;
            }
            else
            {
                // どれにも該当していなければ隣接のみ
                loop_limit = 4;
            }

            // 合体技斜め隣接可オプション
            string argoname = "合体技斜め隣接可";
            if (Expression.IsOptionDefined(argoname))
            {
                if (loop_limit == 4)
                {
                    loop_limit = 8;
                }
            }

            partners = new Unit[1];
            var loopTo2 = cnum;
            for (i = 1; i <= loopTo2; i++)
            {
                // パートナーの名称
                uname = GeneralLib.LIndex(clist, i);
                var loopTo3 = loop_limit;
                for (j = 1; j <= loopTo3; j++)
                {
                    // パートナーの検索位置設定
                    // UPGRADE_NOTE: オブジェクト u をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                    u = null;
                    switch (j)
                    {
                        case 1:
                            {
                                if (tx > 1)
                                {
                                    u = Map.MapDataForUnit[tx - 1, ty];
                                }

                                break;
                            }

                        case 2:
                            {
                                if (tx < Map.MapWidth)
                                {
                                    u = Map.MapDataForUnit[tx + 1, ty];
                                }

                                break;
                            }

                        case 3:
                            {
                                if (ty > 1)
                                {
                                    u = Map.MapDataForUnit[tx, ty - 1];
                                }

                                break;
                            }

                        case 4:
                            {
                                if (ty < Map.MapHeight)
                                {
                                    u = Map.MapDataForUnit[tx, ty + 1];
                                }

                                break;
                            }

                        case 5:
                            {
                                if (tx > 1 & ty > 1)
                                {
                                    u = Map.MapDataForUnit[tx - 1, ty - 1];
                                }

                                break;
                            }

                        case 6:
                            {
                                if (tx < Map.MapWidth & ty < Map.MapHeight)
                                {
                                    u = Map.MapDataForUnit[tx + 1, ty + 1];
                                }

                                break;
                            }

                        case 7:
                            {
                                if (tx > 1 & ty < Map.MapHeight)
                                {
                                    u = Map.MapDataForUnit[tx - 1, ty + 1];
                                }

                                break;
                            }

                        case 8:
                            {
                                if (tx < Map.MapWidth & ty > 1)
                                {
                                    u = Map.MapDataForUnit[tx + 1, ty - 1];
                                }

                                break;
                            }

                        case 9:
                            {
                                if (tx > 2)
                                {
                                    u = Map.MapDataForUnit[tx - 2, ty];
                                }

                                break;
                            }

                        case 10:
                            {
                                if (tx < Map.MapWidth - 1)
                                {
                                    u = Map.MapDataForUnit[tx + 2, ty];
                                }

                                break;
                            }

                        case 11:
                            {
                                if (ty > 2)
                                {
                                    u = Map.MapDataForUnit[tx, ty - 2];
                                }

                                break;
                            }

                        case 12:
                            {
                                if (ty < Map.MapHeight - 1)
                                {
                                    u = Map.MapDataForUnit[tx, ty + 2];
                                }

                                break;
                            }
                    }

                    // ユニットが存在する？
                    if (u is null)
                    {
                        goto NextNeighbor;
                    }

                    {
                        var withBlock2 = u;
                        // 合体技のパートナーに該当する？
                        if ((withBlock2.Name ?? "") != (uname ?? ""))
                        {
                            // パイロット名でも確認
                            if ((withBlock2.MainPilot().Name ?? "") != (uname ?? ""))
                            {
                                goto NextNeighbor;
                            }
                        }

                        // ユニットが自分？
                        if (ReferenceEquals(u, this))
                        {
                            goto NextNeighbor;
                        }

                        // 既に選択済み？
                        var loopTo4 = Information.UBound(partners);
                        for (k = 1; k <= loopTo4; k++)
                        {
                            if (ReferenceEquals(u, partners[k]))
                            {
                                goto NextNeighbor;
                            }
                        }

                        // ユニットが敵？
                        if (IsEnemy(u))
                        {
                            goto NextNeighbor;
                        }

                        // 行動出来なければだめ
                        object argIndex8 = "混乱";
                        object argIndex9 = "恐怖";
                        object argIndex10 = "憑依";
                        if (withBlock2.MaxAction() == 0 | withBlock2.IsConditionSatisfied(argIndex8) | withBlock2.IsConditionSatisfied(argIndex9) | withBlock2.IsConditionSatisfied(argIndex10))
                        {
                            goto NextNeighbor;
                        }

                        // 合体技にレベルが設定されていればパイロット間の信頼度をチェック
                        if (clevel > 0)
                        {
                            if (MainPilot().Relation(withBlock2.MainPilot()) < clevel | withBlock2.MainPilot().Relation(MainPilot()) < clevel)
                            {
                                goto NextNeighbor;
                            }
                        }

                        // パートナーが武器を使うための条件を満たしているかを判定
                        if (!check_formation)
                        {
                            if (ctype_Renamed == "武装")
                            {
                                // 合体技と同名の武器を検索
                                var loopTo5 = withBlock2.CountWeapon();
                                for (k = 1; k <= loopTo5; k++)
                                {
                                    if ((withBlock2.Weapon(k).Name ?? "") == (cname ?? ""))
                                    {
                                        break;
                                    }
                                }

                                if (k <= withBlock2.CountWeapon())
                                {
                                    // 武器が使える？
                                    if (!withBlock2.IsWeaponMastered(k))
                                    {
                                        goto NextNeighbor;
                                    }

                                    if (withBlock2.Weapon(k).NecessaryMorale > 0)
                                    {
                                        if (withBlock2.MainPilot().Morale < withBlock2.Weapon(k).NecessaryMorale)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    if (withBlock2.WeaponENConsumption(k) > 0)
                                    {
                                        if (withBlock2.EN < withBlock2.WeaponENConsumption(k))
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    if (withBlock2.Weapon(k).Bullet > 0)
                                    {
                                        if (withBlock2.Bullet(k) == 0)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    string argattr10 = "霊";
                                    string argattr11 = "プ";
                                    if (withBlock2.WeaponLevel(k, argattr10) > 0d)
                                    {
                                        string argattr8 = "霊";
                                        if (withBlock2.MainPilot().Plana < 5d * withBlock2.WeaponLevel(k, argattr8))
                                        {
                                            goto NextNeighbor;
                                        }
                                    }
                                    else if (withBlock2.WeaponLevel(k, argattr11) > 0d)
                                    {
                                        string argattr9 = "プ";
                                        if (withBlock2.MainPilot().Plana < 5d * withBlock2.WeaponLevel(k, argattr9))
                                        {
                                            goto NextNeighbor;
                                        }
                                    }
                                }
                                else
                                {
                                    // 同名の武器を持っていなかった場合はチェック項目を限定
                                    if (cmorale > 0)
                                    {
                                        if (withBlock2.MainPilot().Morale < cmorale)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    if (cen > 0)
                                    {
                                        if (withBlock2.EN < cen)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    if (cplana > 0)
                                    {
                                        if (withBlock2.MainPilot().Plana < cplana)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                // 合体技と同名のアビリティを検索
                                var loopTo6 = withBlock2.CountAbility();
                                for (k = 1; k <= loopTo6; k++)
                                {
                                    if ((withBlock2.Ability(k).Name ?? "") == (cname ?? ""))
                                    {
                                        break;
                                    }
                                }

                                if (k <= withBlock2.CountAbility())
                                {
                                    // アビリティが使える？
                                    if (!withBlock2.IsAbilityMastered(k))
                                    {
                                        goto NextNeighbor;
                                    }

                                    if (withBlock2.Ability(k).NecessaryMorale > 0)
                                    {
                                        if (withBlock2.MainPilot().Morale < withBlock2.Ability(k).NecessaryMorale)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    if (withBlock2.AbilityENConsumption(k) > 0)
                                    {
                                        if (withBlock2.EN < withBlock2.AbilityENConsumption(k))
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    if (withBlock2.Ability(k).Stock > 0)
                                    {
                                        if (withBlock2.Stock(k) == 0)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    string argattr14 = "霊";
                                    string argattr15 = "プ";
                                    if (withBlock2.AbilityLevel(k, argattr14) > 0d)
                                    {
                                        string argattr12 = "霊";
                                        if (withBlock2.MainPilot().Plana < 5d * withBlock2.AbilityLevel(k, argattr12))
                                        {
                                            goto NextNeighbor;
                                        }
                                    }
                                    else if (withBlock2.AbilityLevel(k, argattr15) > 0d)
                                    {
                                        string argattr13 = "プ";
                                        if (withBlock2.MainPilot().Plana < 5d * withBlock2.AbilityLevel(k, argattr13))
                                        {
                                            goto NextNeighbor;
                                        }
                                    }
                                }
                                else
                                {
                                    // 同名のアビリティを持っていなかった場合はチェック項目を限定
                                    if (cmorale > 0)
                                    {
                                        if (withBlock2.MainPilot().Morale < cmorale)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    if (cen > 0)
                                    {
                                        if (withBlock2.EN < cen)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }

                                    if (cplana > 0)
                                    {
                                        if (withBlock2.MainPilot().Plana < cplana)
                                        {
                                            goto NextNeighbor;
                                        }
                                    }
                                }
                            }
                        }
                        // フォーメーションのチェックだけの時も必要技能は調べておく
                        else if (ctype_Renamed == "武装")
                        {
                            var loopTo7 = withBlock2.CountWeapon();
                            for (k = 1; k <= loopTo7; k++)
                            {
                                if ((withBlock2.Weapon(k).Name ?? "") == (cname ?? ""))
                                {
                                    break;
                                }
                            }

                            if (k <= withBlock2.CountWeapon())
                            {
                                if (!withBlock2.IsWeaponMastered(k))
                                {
                                    goto NextNeighbor;
                                }
                            }
                        }
                        else
                        {
                            var loopTo8 = withBlock2.CountAbility();
                            for (k = 1; k <= loopTo8; k++)
                            {
                                if ((withBlock2.Ability(k).Name ?? "") == (cname ?? ""))
                                {
                                    break;
                                }
                            }

                            if (k <= withBlock2.CountAbility())
                            {
                                if (!withBlock2.IsAbilityMastered(k))
                                {
                                    goto NextNeighbor;
                                }
                            }
                        }
                    }

                    // 見つかったパートナーを記録
                    Array.Resize(partners, i + 1);
                    partners[i] = u;
                    break;
                    NextNeighbor:
                    ;
                }

                // パートナーが見つからなかった？
                if (j > loop_limit)
                {
                    partners = new Unit[1];
                    return;
                }
            }

            // 合体技メッセージ判定用にパートナー一覧を記録
            Commands.SelectedPartners = new Unit[Information.UBound(partners) + 1];
            var loopTo9 = Information.UBound(partners);
            for (i = 1; i <= loopTo9; i++)
                Commands.SelectedPartners[i] = partners[i];
        }

        // 合体技攻撃に必要なパートナーが見つかるか？
        public bool IsCombinationAttackAvailable(int w, bool check_formation = false)
        {
            bool IsCombinationAttackAvailableRet = default;
            Unit[] partners;
            partners = new Unit[1];
            string argattr = "Ｍ";
            if (Status_Renamed == "待機" | string.IsNullOrEmpty(Map.MapFileName))
            {
                // 出撃時以外は相手が仲間にいるだけでＯＫ
                string argctype_Renamed = "武装";
                CombinationPartner(argctype_Renamed, w, partners, x, y);
            }
            else if (WeaponMaxRange(w) == 1 & !IsWeaponClassifiedAs(w, argattr))
            {
                // 射程１の場合は自分の周りのいずれかの敵ユニットに対して合体技が使えればＯＫ
                if (x > 1)
                {
                    if (Map.MapDataForUnit[x - 1, y] is object)
                    {
                        if (IsEnemy(Map.MapDataForUnit[x - 1, y]))
                        {
                            string argctype_Renamed2 = "武装";
                            CombinationPartner(argctype_Renamed2, w, partners, (x - 1), y, check_formation);
                        }
                    }
                }

                if (Information.UBound(partners) == 0)
                {
                    if (x < Map.MapWidth)
                    {
                        if (Map.MapDataForUnit[x + 1, y] is object)
                        {
                            if (IsEnemy(Map.MapDataForUnit[x + 1, y]))
                            {
                                string argctype_Renamed3 = "武装";
                                CombinationPartner(argctype_Renamed3, w, partners, (x + 1), y, check_formation);
                            }
                        }
                    }
                }

                if (Information.UBound(partners) == 0)
                {
                    if (y > 1)
                    {
                        if (Map.MapDataForUnit[x, y - 1] is object)
                        {
                            if (IsEnemy(Map.MapDataForUnit[x, y - 1]))
                            {
                                string argctype_Renamed4 = "武装";
                                CombinationPartner(argctype_Renamed4, w, partners, x, (y - 1), check_formation);
                            }
                        }
                    }
                }

                if (Information.UBound(partners) == 0)
                {
                    if (y < Map.MapHeight)
                    {
                        if (Map.MapDataForUnit[x, y + 1] is object)
                        {
                            if (IsEnemy(Map.MapDataForUnit[x, y + 1]))
                            {
                                string argctype_Renamed5 = "武装";
                                CombinationPartner(argctype_Renamed5, w, partners, x, (y + 1), check_formation);
                            }
                        }
                    }
                }
            }
            else
            {
                // 射程２以上の場合は自分の周りにパートナーがいればＯＫ
                string argctype_Renamed1 = "武装";
                CombinationPartner(argctype_Renamed1, w, partners, x, y, check_formation);
            }

            // 条件を満たすパートナーの組が見つかったか判定
            if (Information.UBound(partners) > 0)
            {
                IsCombinationAttackAvailableRet = true;
            }
            else
            {
                IsCombinationAttackAvailableRet = false;
            }

            return IsCombinationAttackAvailableRet;
        }

        // 合体技アビリティに必要なパートナーが見つかるか？
        public bool IsCombinationAbilityAvailable(int a, bool check_formation = false)
        {
            bool IsCombinationAbilityAvailableRet = default;
            Unit[] partners;
            partners = new Unit[1];
            string argattr = "Ｍ";
            if (Status_Renamed == "待機" | string.IsNullOrEmpty(Map.MapFileName))
            {
                // 出撃時以外は相手が仲間にいるだけでＯＫ
                string argctype_Renamed = "アビリティ";
                CombinationPartner(argctype_Renamed, a, partners, x, y);
            }
            else if (AbilityMaxRange(a) == 1 & !IsAbilityClassifiedAs(a, argattr))
            {
                // 射程１の場合は自分の周りのいずれかの味方ユニットに対して合体技が使えればＯＫ
                if (x > 1)
                {
                    if (Map.MapDataForUnit[x - 1, y] is object)
                    {
                        if (IsAlly(Map.MapDataForUnit[x - 1, y]))
                        {
                            string argctype_Renamed2 = "アビリティ";
                            CombinationPartner(argctype_Renamed2, a, partners, (x - 1), y, check_formation);
                        }
                    }
                }

                if (Information.UBound(partners) == 0)
                {
                    if (x < Map.MapWidth)
                    {
                        if (Map.MapDataForUnit[x + 1, y] is object)
                        {
                            if (IsAlly(Map.MapDataForUnit[x + 1, y]))
                            {
                                string argctype_Renamed3 = "アビリティ";
                                CombinationPartner(argctype_Renamed3, a, partners, (x + 1), y, check_formation);
                            }
                        }
                    }
                }

                if (Information.UBound(partners) == 0)
                {
                    if (y > 1)
                    {
                        if (Map.MapDataForUnit[x, y - 1] is object)
                        {
                            if (IsAlly(Map.MapDataForUnit[x, y - 1]))
                            {
                                string argctype_Renamed4 = "アビリティ";
                                CombinationPartner(argctype_Renamed4, a, partners, x, (y - 1), check_formation);
                            }
                        }
                    }
                }

                if (Information.UBound(partners) == 0)
                {
                    if (y > Map.MapHeight)
                    {
                        if (Map.MapDataForUnit[x, y + 1] is object)
                        {
                            if (IsAlly(Map.MapDataForUnit[x, y + 1]))
                            {
                                string argctype_Renamed5 = "アビリティ";
                                CombinationPartner(argctype_Renamed5, a, partners, x, (y + 1), check_formation);
                            }
                        }
                    }
                }
            }
            else
            {
                // 射程２以上の場合は自分の周りにパートナーがいればＯＫ
                string argctype_Renamed1 = "アビリティ";
                CombinationPartner(argctype_Renamed1, a, partners, x, y, check_formation);
            }

            // 条件を満たすパートナーの組が見つかったか判定
            if (Information.UBound(partners) > 0)
            {
                IsCombinationAbilityAvailableRet = true;
            }
            else
            {
                IsCombinationAbilityAvailableRet = false;
            }

            return IsCombinationAbilityAvailableRet;
        }

        // (tx,ty)にユニットが進入可能か？
        public bool IsAbleToEnter(int tx, int ty)
        {
            bool IsAbleToEnterRet = default;
            bool ignore_move_cost;

            // 使用不能の形態はどの地形に対しても進入不可能とみなす
            if (!IsAvailable())
            {
                IsAbleToEnterRet = false;
                return IsAbleToEnterRet;
            }

            // 単に必要技能をチェックしている場合？
            if (string.IsNullOrEmpty(Map.MapFileName))
            {
                IsAbleToEnterRet = true;
                return IsAbleToEnterRet;
            }

            // マップ外？
            if (tx < 1 | Map.MapWidth < tx | ty < 1 | Map.MapHeight < ty)
            {
                IsAbleToEnterRet = false;
                return IsAbleToEnterRet;
            }

            // 地形適応チェック
            switch (Map.TerrainClass(tx, ty) ?? "")
            {
                case "空":
                    {
                        string argarea_name = "空";
                        string argfname = "空中移動";
                        if (!IsTransAvailable(argarea_name) & !CurrentForm().IsFeatureAvailable(argfname))
                        {
                            IsAbleToEnterRet = false;
                            return IsAbleToEnterRet;
                        }

                        break;
                    }

                case "水":
                    {
                        string argarea_name1 = "空";
                        string argfname1 = "空中移動";
                        string argarea_name2 = "水上";
                        if (IsTransAvailable(argarea_name1) | CurrentForm().IsFeatureAvailable(argfname1) | IsTransAvailable(argarea_name2))
                        {
                            IsAbleToEnterRet = true;
                            return IsAbleToEnterRet;
                        }

                        string argfname2 = "水中移動";
                        if (get_Adaption(3) == 0 & !CurrentForm().IsFeatureAvailable(argfname2))
                        {
                            IsAbleToEnterRet = false;
                            return IsAbleToEnterRet;
                        }

                        break;
                    }

                case "深水":
                    {
                        string argarea_name3 = "空";
                        string argfname3 = "空中移動";
                        string argarea_name4 = "水上";
                        if (IsTransAvailable(argarea_name3) | CurrentForm().IsFeatureAvailable(argfname3) | IsTransAvailable(argarea_name4))
                        {
                            IsAbleToEnterRet = true;
                            return IsAbleToEnterRet;
                        }

                        string argarea_name5 = "水";
                        string argfname4 = "水中移動";
                        if (!IsTransAvailable(argarea_name5) & !CurrentForm().IsFeatureAvailable(argfname4))
                        {
                            IsAbleToEnterRet = false;
                            return IsAbleToEnterRet;
                        }

                        break;
                    }

                case "宇宙":
                    {
                        string argfname5 = "宇宙移動";
                        if (get_Adaption(4) == 0 & !CurrentForm().IsFeatureAvailable(argfname5))
                        {
                            IsAbleToEnterRet = false;
                            return IsAbleToEnterRet;
                        }

                        break;
                    }

                case "月面":
                    {
                        string argarea_name6 = "空";
                        string argfname6 = "空中移動";
                        string argarea_name7 = "宇";
                        string argfname7 = "宇宙移動";
                        if (IsTransAvailable(argarea_name6) | CurrentForm().IsFeatureAvailable(argfname6) | IsTransAvailable(argarea_name7) | CurrentForm().IsFeatureAvailable(argfname7))
                        {
                            IsAbleToEnterRet = true;
                            return IsAbleToEnterRet;
                        }

                        break;
                    }

                default:
                    {
                        string argarea_name8 = "空";
                        string argfname8 = "空中移動";
                        if (IsTransAvailable(argarea_name8) | CurrentForm().IsFeatureAvailable(argfname8))
                        {
                            IsAbleToEnterRet = true;
                            return IsAbleToEnterRet;
                        }

                        string argarea_name9 = "陸";
                        string argfname9 = "陸上移動";
                        if (!IsTransAvailable(argarea_name9) & !CurrentForm().IsFeatureAvailable(argfname9))
                        {
                            IsAbleToEnterRet = false;
                            return IsAbleToEnterRet;
                        }

                        break;
                    }
            }

            // 進入不能？
            if (Map.TerrainMoveCost(tx, ty) >= 1000)
            {
                IsAbleToEnterRet = false;
                return IsAbleToEnterRet;
            }

            IsAbleToEnterRet = true;
            return IsAbleToEnterRet;
        }

        // この形態が使用可能か？ (Disable＆必要技能のチェック)
        public bool IsAvailable()
        {
            bool IsAvailableRet = default;
            int i;
            IsAvailableRet = true;

            // イベントコマンド「Disable」
            bool localIsDisabled() { string argfname = Name; var ret = IsDisabled(argfname); Name = argfname; return ret; }

            if (localIsDisabled())
            {
                IsAvailableRet = false;
                return IsAvailableRet;
            }

            // 制限時間の切れた形態？
            if (Status_Renamed == "他形態")
            {
                object argIndex1 = "行動不能";
                if (IsConditionSatisfied(argIndex1))
                {
                    IsAvailableRet = false;
                    return IsAvailableRet;
                }
            }

            {
                var withBlock = CurrentForm();
                // 技能チェックが必要？
                string argfname = "必要技能";
                string argfname1 = "不必要技能";
                if (withBlock.CountPilot() == 0 | !IsFeatureAvailable(argfname) & !IsFeatureAvailable(argfname1))
                {
                    return IsAvailableRet;
                }

                // 必要技能をチェック
                var loopTo = CountFeature();
                for (i = 1; i <= loopTo; i++)
                {
                    object argIndex2 = i;
                    switch (Feature(argIndex2) ?? "")
                    {
                        case "必要技能":
                            {
                                string localFeatureData() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                                bool localIsNecessarySkillSatisfied() { string argnabilities = hsc9e6151c7b7e42d6b233bb86f17bea66(); Pilot argp = null; var ret = withBlock.IsNecessarySkillSatisfied(argnabilities, p: argp); return ret; }

                                if (!localIsNecessarySkillSatisfied())
                                {
                                    IsAvailableRet = false;
                                    return IsAvailableRet;
                                }

                                break;
                            }

                        case "不必要技能":
                            {
                                string localFeatureData1() { object argIndex1 = i; var ret = FeatureData(argIndex1); return ret; }

                                string argnabilities = localFeatureData1();
                                Pilot argp = null;
                                if (withBlock.IsNecessarySkillSatisfied(argnabilities, p: argp))
                                {
                                    IsAvailableRet = false;
                                    return IsAvailableRet;
                                }

                                break;
                            }
                    }
                }
            }

            return IsAvailableRet;
        }

        // 必要技能を満たしているか？
        public bool IsNecessarySkillSatisfied(string nabilities, [Optional, DefaultParameterValue(null)] Pilot p)
        {
            bool IsNecessarySkillSatisfiedRet = default;
            int i, num;
            var nskill_list = new string[101];
            if (Strings.Len(nabilities) == 0)
            {
                IsNecessarySkillSatisfiedRet = true;
                return IsNecessarySkillSatisfiedRet;
            }

            num = GeneralLib.LLength(nabilities);
            var loopTo = GeneralLib.MinLng(num, 100);
            for (i = 1; i <= loopTo; i++)
                nskill_list[i] = GeneralLib.LIndex(nabilities, i);

            // 個々の必要条件をチェック
            i = 1;
            while (i <= GeneralLib.MinLng(num, 100))
            {
                if (IsNecessarySkillSatisfied2(nskill_list[i], p))
                {
                    // 必要条件が満たされた場合、その後の「or」をスキップ
                    if (i <= num - 2)
                    {
                        while (Strings.LCase(nskill_list[i + 1]) == "or")
                        {
                            i = (i + 2);
                            // 検査する必要条件が無くなったので必要技能が満たされたと判定
                            if (i == num)
                            {
                                IsNecessarySkillSatisfiedRet = true;
                                return IsNecessarySkillSatisfiedRet;
                            }
                            else if (i > num)
                            {
                                // orの後ろに必要条件がない
                                string argmsg = Name + "に対する必要技能「" + nabilities + "」が不正です";
                                GUI.ErrorMessage(argmsg);
                                SRC.TerminateSRC();
                            }
                        }
                    }
                }
                else
                {
                    // 必要条件が満たされなかった場合、その後に「or」がなければ
                    // 必要技能が満たされなかったと判定
                    if (i > num - 2)
                    {
                        return IsNecessarySkillSatisfiedRet;
                    }

                    i = (i + 1);
                    if (Strings.LCase(nskill_list[i]) != "or")
                    {
                        return IsNecessarySkillSatisfiedRet;
                    }
                }

                i = (i + 1);
            }

            IsNecessarySkillSatisfiedRet = true;
            return IsNecessarySkillSatisfiedRet;
        }

        public bool IsNecessarySkillSatisfied2(string ndata, Pilot p)
        {
            bool IsNecessarySkillSatisfied2Ret = default;
            string stype2, stype, sname;
            double slevel;
            double nlevel;
            var mp = default(Pilot);
            int i, j;

            // ステータスコマンド実行時は条件が満たされていると見なす？
            if (Strings.Left(ndata, 1) == "+")
            {
                if (Status_Renamed == "出撃" & InterMission.InStatusCommand())
                {
                    IsNecessarySkillSatisfied2Ret = true;
                    return IsNecessarySkillSatisfied2Ret;
                }

                ndata = Strings.Mid(ndata, 2);
            }

            // 召喚者技能を参照？
            if (Strings.Left(ndata, 1) == "*")
            {
                if (Summoner is null)
                {
                    return IsNecessarySkillSatisfied2Ret;
                }

                string argndata = Strings.Mid(ndata, 2);
                Pilot argp = null;
                IsNecessarySkillSatisfied2Ret = Summoner.IsNecessarySkillSatisfied2(argndata, argp);
                return IsNecessarySkillSatisfied2Ret;
            }

            i = Strings.InStr(ndata, "Lv");
            if (i > 0)
            {
                sname = Strings.Left(ndata, i - 1);
                string argexpr = Strings.Mid(ndata, i + 2);
                nlevel = GeneralLib.StrToDbl(argexpr);
            }
            else
            {
                sname = ndata;
                nlevel = 1d;
            }

            // 不必要技能？
            if (Strings.Left(sname, 1) == "!")
            {
                bool localIsNecessarySkillSatisfied2() { string argndata = Strings.Mid(ndata, 2); var ret = IsNecessarySkillSatisfied2(argndata, p); return ret; }

                IsNecessarySkillSatisfied2Ret = !localIsNecessarySkillSatisfied2();
                return IsNecessarySkillSatisfied2Ret;
            }

            // 必要技能の判定に使用するパイロットを設定
            if (p is null)
            {
                if (CountPilot() > 0)
                {
                    mp = MainPilot();
                }
                else
                {
                    {
                        var withBlock = CurrentForm();
                        if (withBlock.CountPilot() > 0)
                        {
                            mp = withBlock.MainPilot();
                        }
                    }
                }
            }
            else
            {
                mp = p;
            }

            // ダミーパイロットの場合は無視
            if (mp is object)
            {
                if (mp.Nickname0 == "パイロット不在")
                {
                    // UPGRADE_NOTE: オブジェクト mp をガベージ コレクトするまでこのオブジェクトを破棄することはできません。 詳細については、'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"' をクリックしてください。
                    mp = null;
                }
            }

            slevel = -10000;

            // まず名称が変わらない必要技能を判定
            switch (sname ?? "")
            {
                case "レベル":
                    {
                        if (mp is object)
                        {
                            slevel = mp.Level;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "格闘":
                    {
                        if (mp is object)
                        {
                            slevel = mp.InfightBase;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "射撃":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            if (!mp.HasMana())
                            {
                                slevel = mp.ShootingBase;
                            }
                        }

                        break;
                    }

                case "魔力":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            if (mp.HasMana())
                            {
                                slevel = mp.ShootingBase;
                            }
                        }

                        break;
                    }

                case "命中":
                    {
                        if (mp is object)
                        {
                            slevel = mp.HitBase;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "回避":
                    {
                        if (mp is object)
                        {
                            slevel = mp.DodgeBase;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "技量":
                    {
                        if (mp is object)
                        {
                            slevel = mp.TechniqueBase;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "反応":
                    {
                        if (mp is object)
                        {
                            slevel = mp.IntuitionBase;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "格闘初期値":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            string argoname = "攻撃力低成長";
                            if (Expression.IsOptionDefined(argoname))
                            {
                                slevel = mp.InfightBase - mp.Level / 2;
                            }
                            else
                            {
                                slevel = mp.InfightBase - mp.Level;
                            }
                        }

                        break;
                    }

                case "射撃初期値":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            if (!mp.HasMana())
                            {
                                string argoname1 = "攻撃力低成長";
                                if (Expression.IsOptionDefined(argoname1))
                                {
                                    slevel = mp.ShootingBase - mp.Level / 2;
                                }
                                else
                                {
                                    slevel = mp.ShootingBase - mp.Level;
                                }
                            }
                        }

                        break;
                    }

                case "魔力初期値":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            if (mp.HasMana())
                            {
                                string argoname2 = "攻撃力低成長";
                                if (Expression.IsOptionDefined(argoname2))
                                {
                                    slevel = mp.ShootingBase - mp.Level / 2;
                                }
                                else
                                {
                                    slevel = mp.ShootingBase - mp.Level;
                                }
                            }
                        }

                        break;
                    }

                case "命中初期値":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            slevel = mp.HitBase - mp.Level;
                        }

                        break;
                    }

                case "回避初期値":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            slevel = mp.DodgeBase - mp.Level;
                        }

                        break;
                    }

                case "技量初期値":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            slevel = mp.TechniqueBase - mp.Level;
                        }

                        break;
                    }

                case "反応初期値":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            slevel = mp.IntuitionBase - mp.Level;
                        }

                        break;
                    }

                case "男性":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            if (mp.Sex == "男性")
                            {
                                slevel = 1d;
                            }

                            if (Data.PilotNum > 1)
                            {
                                var loopTo = CountPilot();
                                for (i = 1; i <= loopTo; i++)
                                {
                                    Pilot localPilot() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                                    if (localPilot().Sex == "男性")
                                    {
                                        slevel = 1d;
                                    }
                                }
                            }

                            var loopTo1 = CountSupport();
                            for (i = 1; i <= loopTo1; i++)
                            {
                                Pilot localSupport() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                                if (localSupport().Sex == "男性")
                                {
                                    slevel = 1d;
                                }
                            }

                            string argfname = "追加サポート";
                            if (IsFeatureAvailable(argfname))
                            {
                                if (AdditionalSupport().Sex == "男性")
                                {
                                    slevel = 1d;
                                }
                            }
                        }

                        break;
                    }

                case "女性":
                    {
                        slevel = 0d;
                        if (mp is object)
                        {
                            if (mp.Sex == "女性")
                            {
                                slevel = 1d;
                            }

                            if (Data.PilotNum > 1)
                            {
                                var loopTo2 = CountPilot();
                                for (i = 1; i <= loopTo2; i++)
                                {
                                    Pilot localPilot1() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                                    if (localPilot1().Sex == "女性")
                                    {
                                        slevel = 1d;
                                    }
                                }
                            }

                            var loopTo3 = CountSupport();
                            for (i = 1; i <= loopTo3; i++)
                            {
                                Pilot localSupport1() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                                if (localSupport1().Sex == "女性")
                                {
                                    slevel = 1d;
                                }
                            }

                            string argfname1 = "追加サポート";
                            if (IsFeatureAvailable(argfname1))
                            {
                                if (AdditionalSupport().Sex == "女性")
                                {
                                    slevel = 1d;
                                }
                            }
                        }

                        break;
                    }

                case "生身":
                    {
                        if (IsHero())
                        {
                            slevel = 1d;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "瀕死":
                    {
                        if (HP <= MaxHP / 4)
                        {
                            slevel = 1d;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "ＨＰ":
                    {
                        slevel = 10d * HP / MaxHP;
                        break;
                    }

                case "ＥＮ":
                    {
                        slevel = 10d * EN / MaxEN;
                        break;
                    }

                case "気力":
                    {
                        if (mp is object)
                        {
                            slevel = mp.Morale - 100d;
                            slevel = slevel / 10d;
                        }
                        else
                        {
                            slevel = 0d;
                        }

                        break;
                    }

                case "ランク":
                    {
                        slevel = Rank;
                        break;
                    }

                case "地上":
                case "空中":
                case "水中":
                case "水上":
                case "宇宙":
                case "地中":
                    {
                        slevel = 0d;
                        if (Status_Renamed == "出撃")
                        {
                            if ((sname ?? "") == (Area ?? ""))
                            {
                                slevel = 1d;
                            }
                        }

                        break;
                    }

                case "アイテム":
                    {
                        // 使い捨てアイテム表記用
                        slevel = 1d;
                        break;
                    }

                case "当て身技":
                case "自動反撃":
                    {
                        // アビリティで付加された当て身技及び自動反撃専用の武器が表示されるのを
                        // 防ぐため、これらの必要技能は常に満たされないとみなす
                        return IsNecessarySkillSatisfied2Ret;
                    }
            }

            // 上の条件のいずれかに該当？
            if (slevel != -10000)
            {
                // 指定された技能のレベルが必要なレベル以上の場合に必要技能が満たされたと判定
                if (slevel >= nlevel)
                {
                    IsNecessarySkillSatisfied2Ret = true;
                }

                return IsNecessarySkillSatisfied2Ret;
            }

            // 必要技能の種類を判別
            if (mp is object)
            {
                stype = mp.SkillType(sname);
            }
            else
            {
                stype = sname;
            }

            // 名称が変わる可能性がある必要技能を判定
            string iname;
            string uname;
            Unit u;
            int max_range;
            switch (stype ?? "")
            {
                case "超感覚":
                    {
                        if (p is object)
                        {
                            object argIndex1 = "超感覚";
                            string argref_mode = "";
                            slevel = p.SkillLevel(argIndex1, ref_mode: argref_mode);
                            if ((stype ?? "") != (sname ?? ""))
                            {
                                if ((p.SkillNameForNS(stype) ?? "") != (sname ?? ""))
                                {
                                    slevel = 0d;
                                }
                            }

                            object argIndex2 = "知覚強化";
                            string argref_mode1 = "";
                            slevel = slevel + p.SkillLevel(argIndex2, ref_mode: argref_mode1);
                        }
                        else if (mp is object)
                        {
                            object argIndex3 = "超感覚";
                            string argref_mode2 = "";
                            slevel = mp.SkillLevel(argIndex3, ref_mode: argref_mode2);
                            if (Data.PilotNum > 1)
                            {
                                var loopTo4 = CountPilot();
                                for (i = 2; i <= loopTo4; i++)
                                {
                                    object argIndex5 = i;
                                    {
                                        var withBlock1 = Pilot(argIndex5);
                                        object argIndex4 = "超感覚";
                                        string argref_mode3 = "";
                                        slevel = GeneralLib.MaxDbl(slevel, withBlock1.SkillLevel(argIndex4, ref_mode: argref_mode3));
                                        double localSkillLevel() { object argIndex1 = sname; string argref_mode = ""; var ret = withBlock1.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                        slevel = GeneralLib.MaxDbl(slevel, localSkillLevel());
                                    }
                                }
                            }

                            var loopTo5 = CountSupport();
                            for (i = 1; i <= loopTo5; i++)
                            {
                                object argIndex7 = i;
                                {
                                    var withBlock2 = Support(argIndex7);
                                    object argIndex6 = "超感覚";
                                    string argref_mode4 = "";
                                    slevel = GeneralLib.MaxDbl(slevel, withBlock2.SkillLevel(argIndex6, ref_mode: argref_mode4));
                                    double localSkillLevel1() { object argIndex1 = sname; string argref_mode = ""; var ret = withBlock2.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                    slevel = GeneralLib.MaxDbl(slevel, localSkillLevel1());
                                }
                            }

                            string argfname2 = "追加サポート";
                            if (IsFeatureAvailable(argfname2))
                            {
                                {
                                    var withBlock3 = AdditionalSupport();
                                    object argIndex8 = "超感覚";
                                    string argref_mode5 = "";
                                    slevel = GeneralLib.MaxDbl(slevel, withBlock3.SkillLevel(argIndex8, ref_mode: argref_mode5));
                                    double localSkillLevel2() { object argIndex1 = sname; string argref_mode = ""; var ret = withBlock3.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                    slevel = GeneralLib.MaxDbl(slevel, localSkillLevel2());
                                }
                            }

                            if ((stype ?? "") != (sname ?? ""))
                            {
                                if ((mp.SkillNameForNS(stype) ?? "") != (sname ?? ""))
                                {
                                    slevel = 0d;
                                }
                            }

                            object argIndex9 = "知覚強化";
                            string argref_mode6 = "";
                            slevel = slevel + mp.SkillLevel(argIndex9, ref_mode: argref_mode6);
                            if (Data.PilotNum > 1)
                            {
                                var loopTo6 = CountPilot();
                                for (i = 2; i <= loopTo6; i++)
                                {
                                    Pilot localPilot2() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                                    object argIndex10 = "知覚強化";
                                    string argref_mode7 = "";
                                    slevel = GeneralLib.MaxDbl(slevel, localPilot2().SkillLevel(argIndex10, ref_mode: argref_mode7));
                                }
                            }

                            var loopTo7 = CountSupport();
                            for (i = 1; i <= loopTo7; i++)
                            {
                                Pilot localSupport2() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                                object argIndex11 = "知覚強化";
                                string argref_mode8 = "";
                                slevel = GeneralLib.MaxDbl(slevel, localSupport2().SkillLevel(argIndex11, ref_mode: argref_mode8));
                            }

                            string argfname3 = "追加サポート";
                            if (IsFeatureAvailable(argfname3))
                            {
                                object argIndex12 = "知覚強化";
                                string argref_mode9 = "";
                                slevel = GeneralLib.MaxDbl(slevel, AdditionalSupport().SkillLevel(argIndex12, ref_mode: argref_mode9));
                            }
                        }

                        break;
                    }

                case "同調率":
                    {
                        if (p is object)
                        {
                            slevel = p.SynchroRate();
                        }
                        else if (mp is object)
                        {
                            slevel = mp.SynchroRate();
                            if (Data.PilotNum > 1)
                            {
                                var loopTo8 = CountPilot();
                                for (i = 2; i <= loopTo8; i++)
                                {
                                    Pilot localPilot3() { object argIndex1 = i; var ret = Pilot(argIndex1); return ret; }

                                    slevel = GeneralLib.MaxDbl(slevel, localPilot3().SynchroRate());
                                }
                            }

                            var loopTo9 = CountSupport();
                            for (i = 1; i <= loopTo9; i++)
                            {
                                Pilot localSupport3() { object argIndex1 = i; var ret = Support(argIndex1); return ret; }

                                slevel = GeneralLib.MaxDbl(slevel, localSupport3().SynchroRate());
                            }

                            string argfname4 = "追加サポート";
                            if (IsFeatureAvailable(argfname4))
                            {
                                slevel = GeneralLib.MaxDbl(slevel, AdditionalSupport().SynchroRate());
                            }
                        }

                        if ((stype ?? "") != (sname ?? ""))
                        {
                            if ((mp.SkillNameForNS(stype) ?? "") != (sname ?? ""))
                            {
                                slevel = 0d;
                            }
                        }

                        break;
                    }

                case "オーラ":
                    {
                        if (p is object)
                        {
                            object argIndex13 = "オーラ";
                            string argref_mode10 = "";
                            slevel = p.SkillLevel(argIndex13, ref_mode: argref_mode10);
                        }
                        else if (mp is object)
                        {
                            slevel = AuraLevel();
                        }

                        if ((stype ?? "") != (sname ?? ""))
                        {
                            if ((mp.SkillNameForNS(stype) ?? "") != (sname ?? ""))
                            {
                                slevel = 0d;
                            }
                        }

                        break;
                    }

                case "霊力":
                    {
                        if (p is object)
                        {
                            slevel = p.Plana;
                        }
                        else if (mp is object)
                        {
                            slevel = mp.Plana;
                        }

                        if ((stype ?? "") != (sname ?? ""))
                        {
                            if ((mp.SkillNameForNS(stype) ?? "") != (sname ?? ""))
                            {
                                slevel = 0d;
                            }
                        }

                        break;
                    }

                default:
                    {
                        // 上記以外のパイロット用特殊能力

                        if (mp is object)
                        {
                            // 特定パイロット専用？
                            if ((sname ?? "") == (mp.Name ?? "") | (sname ?? "") == (mp.get_Nickname(false) ?? ""))
                            {
                                slevel = 1d;
                            }
                            else if ((stype ?? "") == (sname ?? ""))
                            {
                                object argIndex14 = stype;
                                string argref_mode11 = "";
                                slevel = mp.SkillLevel(argIndex14, ref_mode: argref_mode11);
                            }
                            else if ((mp.SkillNameForNS(stype) ?? "") == (sname ?? ""))
                            {
                                object argIndex15 = stype;
                                string argref_mode12 = "";
                                slevel = mp.SkillLevel(argIndex15, ref_mode: argref_mode12);
                            }

                            // パイロット数が括弧つきでない場合のみ
                            if (Data.PilotNum > 1)
                            {
                                // サブパイロットの技能を検索
                                var loopTo10 = CountPilot();
                                for (i = 2; i <= loopTo10; i++)
                                {
                                    object argIndex16 = i;
                                    {
                                        var withBlock4 = Pilot(argIndex16);
                                        if ((sname ?? "") == (withBlock4.Name ?? "") | (sname ?? "") == (withBlock4.get_Nickname(false) ?? ""))
                                        {
                                            slevel = 1d;
                                            break;
                                        }

                                        stype2 = withBlock4.SkillType(sname);
                                        if ((stype2 ?? "") == (sname ?? ""))
                                        {
                                            double localSkillLevel3() { object argIndex1 = stype2; string argref_mode = ""; var ret = withBlock4.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                            slevel = GeneralLib.MaxDbl(slevel, localSkillLevel3());
                                        }
                                        else if ((withBlock4.SkillNameForNS(stype2) ?? "") == (sname ?? ""))
                                        {
                                            double localSkillLevel4() { object argIndex1 = stype2; string argref_mode = ""; var ret = withBlock4.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                            slevel = GeneralLib.MaxDbl(slevel, localSkillLevel4());
                                        }
                                    }
                                }
                            }

                            // サポートパイロットの技能を検索
                            var loopTo11 = CountSupport();
                            for (i = 1; i <= loopTo11; i++)
                            {
                                object argIndex17 = i;
                                {
                                    var withBlock5 = Support(argIndex17);
                                    if ((sname ?? "") == (withBlock5.Name ?? "") | (sname ?? "") == (withBlock5.get_Nickname(false) ?? ""))
                                    {
                                        slevel = 1d;
                                        break;
                                    }

                                    stype2 = withBlock5.SkillType(sname);
                                    if ((stype2 ?? "") == (sname ?? ""))
                                    {
                                        double localSkillLevel5() { object argIndex1 = stype2; string argref_mode = ""; var ret = withBlock5.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                        slevel = GeneralLib.MaxDbl(slevel, localSkillLevel5());
                                    }
                                    else if ((withBlock5.SkillNameForNS(stype2) ?? "") == (sname ?? ""))
                                    {
                                        double localSkillLevel6() { object argIndex1 = stype2; string argref_mode = ""; var ret = withBlock5.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                        slevel = GeneralLib.MaxDbl(slevel, localSkillLevel6());
                                    }
                                }
                            }

                            // 追加サポートの技能を検索
                            string argfname5 = "追加サポート";
                            if (IsFeatureAvailable(argfname5) & CountPilot() > 0)
                            {
                                {
                                    var withBlock6 = AdditionalSupport();
                                    if ((sname ?? "") == (withBlock6.Name ?? "") | (sname ?? "") == (withBlock6.get_Nickname(false) ?? ""))
                                    {
                                        slevel = 1d;
                                    }
                                    else
                                    {
                                        stype2 = withBlock6.SkillType(sname);
                                        if ((stype2 ?? "") == (sname ?? ""))
                                        {
                                            double localSkillLevel7() { object argIndex1 = stype2; string argref_mode = ""; var ret = withBlock6.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                            slevel = GeneralLib.MaxDbl(slevel, localSkillLevel7());
                                        }
                                        else if ((withBlock6.SkillNameForNS(stype2) ?? "") == (sname ?? ""))
                                        {
                                            double localSkillLevel8() { object argIndex1 = stype2; string argref_mode = ""; var ret = withBlock6.SkillLevel(argIndex1, ref_mode: argref_mode); return ret; }

                                            slevel = GeneralLib.MaxDbl(slevel, localSkillLevel8());
                                        }
                                    }
                                }
                            }
                        }

                        if (slevel == 0d)
                        {
                            // ユニット名またはクラスに該当？
                            if ((sname ?? "") == (Name ?? "") | (sname ?? "") == (Nickname0 ?? "") | (sname ?? "") == (Class0 ?? ""))
                            {
                                slevel = 1d;
                            }
                        }

                        if (slevel == 0d)
                        {
                            if (Strings.Left(sname, 1) == "@")
                            {
                                // 地形を指定した必要技能
                                if (Status_Renamed == "出撃" & 1 <= x & x <= Map.MapWidth & 1 <= y & y <= Map.MapHeight)
                                {
                                    if ((Strings.Mid(sname, 2) ?? "") == (Map.TerrainName(x, y) ?? ""))
                                    {
                                        slevel = 1d;
                                    }
                                }
                            }
                            else if (Strings.Right(sname, 2) == "装備")
                            {
                                // アイテムを指定した必要技能
                                iname = Strings.Left(sname, Strings.Len(sname) - 2);
                                var loopTo12 = CountItem();
                                for (i = 1; i <= loopTo12; i++)
                                {
                                    object argIndex18 = i;
                                    {
                                        var withBlock7 = Item(argIndex18);
                                        if (withBlock7.Activated)
                                        {
                                            if ((iname ?? "") == (withBlock7.Name ?? "") | (iname ?? "") == (withBlock7.Class0() ?? ""))
                                            {
                                                slevel = 1d;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (Strings.Right(sname, 2) == "隣接" | Strings.Right(sname, 4) == "マス以内")
                            {
                                // 特定のユニットが近くにいることを指定した必要技能
                                if (Status_Renamed == "出撃")
                                {
                                    if (Strings.Right(sname, 2) == "隣接")
                                    {
                                        uname = Strings.Left(sname, Strings.Len(sname) - 2);
                                        max_range = 1;
                                    }
                                    else
                                    {
                                        uname = Strings.Left(sname, Strings.Len(sname) - 5);
                                        string argexpr1 = Strings.Mid(sname, Strings.Len(sname) - 4, 1);
                                        max_range = GeneralLib.StrToLng(argexpr1);
                                    }

                                    var loopTo13 = GeneralLib.MinLng(x + max_range, Map.MapWidth);
                                    for (i = GeneralLib.MaxLng(x - max_range, 1); i <= loopTo13; i++)
                                    {
                                        var loopTo14 = GeneralLib.MinLng(y + max_range, Map.MapHeight);
                                        for (j = GeneralLib.MaxLng(y - max_range, 1); j <= loopTo14; j++)
                                        {
                                            u = Map.MapDataForUnit[i, j];

                                            // 距離が範囲外？
                                            if ((Math.Abs((x - i)) + Math.Abs((y - j))) > max_range)
                                            {
                                                goto NextNeighbor;
                                            }

                                            // ユニットがいない？
                                            if (u is null)
                                            {
                                                goto NextNeighbor;
                                            }

                                            // ユニットが自分？
                                            if (ReferenceEquals(u, this) | x == i & y == j)
                                            {
                                                goto NextNeighbor;
                                            }

                                            // ユニットが敵？
                                            if (IsEnemy(u))
                                            {
                                                goto NextNeighbor;
                                            }
                                            // 合体技のパートナーに該当するか
                                            if (uname == "母艦")
                                            {
                                                string argfname6 = "母艦";
                                                if (!u.IsFeatureAvailable(argfname6))
                                                {
                                                    goto NextNeighbor;
                                                }
                                            }
                                            else if ((u.Name ?? "") != (uname ?? "") & (u.MainPilot().Name ?? "") != (uname ?? ""))
                                            {
                                                goto NextNeighbor;
                                            }

                                            // 行動出来なければだめ
                                            object argIndex19 = "混乱";
                                            object argIndex20 = "恐怖";
                                            object argIndex21 = "憑依";
                                            if (u.MaxAction() == 0 | u.IsConditionSatisfied(argIndex19) | u.IsConditionSatisfied(argIndex20) | u.IsConditionSatisfied(argIndex21))
                                            {
                                                goto NextNeighbor;
                                            }

                                            // パートナーが見つかった
                                            IsNecessarySkillSatisfied2Ret = true;
                                            return IsNecessarySkillSatisfied2Ret;
                                            NextNeighbor:
                                            ;
                                        }
                                    }
                                }
                            }
                            else if (Strings.Right(sname, 2) == "状態")
                            {
                                // 特殊状態を指定した必要技能
                                object argIndex22 = Strings.Left(sname, Strings.Len(sname) - 2);
                                if (IsConditionSatisfied(argIndex22))
                                {
                                    slevel = 1d;
                                }
                            }
                        }

                        break;
                    }
            }

            // 指定された技能のレベルが必要なレベル以上の場合に必要技能が満たされたと判定
            if (slevel >= nlevel)
            {
                IsNecessarySkillSatisfied2Ret = true;
            }

            return IsNecessarySkillSatisfied2Ret;
        }

        // 能力 fname を封印されているか？
        public bool IsDisabled(string fname)
        {
            bool IsDisabledRet = default;
            if (Strings.Len(fname) == 0)
            {
                IsDisabledRet = false;
                return IsDisabledRet;
            }

            string argvname = "Disable(" + fname + ")";
            if (Expression.IsGlobalVariableDefined(argvname))
            {
                IsDisabledRet = true;
                return IsDisabledRet;
            }

            string argvname1 = "Disable(" + Name + "," + fname + ")";
            if (Expression.IsGlobalVariableDefined(argvname1))
            {
                IsDisabledRet = true;
                return IsDisabledRet;
            }

            IsDisabledRet = false;
            return IsDisabledRet;
        }

        // 現在、自分が攻撃を受けている側かどうか判定
        public bool IsDefense()
        {
            bool IsDefenseRet = default;
            if ((Party ?? "") == (SRC.Stage ?? ""))
            {
                IsDefenseRet = false;
            }
            else
            {
                IsDefenseRet = true;
            }

            return IsDefenseRet;
        }
    }
}