@using System.Diagnostics;
@using System.Net.Http
@using System.Web
@using System.IO

@inject HttpClient Http

<TitleView SRC="@SRC" DataTitle="@DataTitle" />
<div id="status">@StatusText</div>

@code {
    [Parameter]
    public string DataPath { get; set; }

    private SRC SRC = new SRC();
    private string StatusText = "";
    private string DataTitle { get; set; }
    private string renderDataPath = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (renderDataPath != DataPath)
        {
            renderDataPath = DataPath;
            await UpdateData();
        }
    }

    private async Task UpdateData()
    {
        var sw = new Stopwatch();
        sw.Start();

        SRC.UDList.Clear();
        SRC.PDList.Clear();

        var baseUri = HttpUtility.UrlDecode(DataPath);
        DataTitle = Path.GetFileName(baseUri);
        try
        {
            SRC.UDList.Load("/unit.txt", await Http.GetStreamAsync(baseUri + "/unit.txt"));
        }
        catch { }
        try
        {
            SRC.UDList.Load("/robot.txt", await Http.GetStreamAsync(baseUri + "/robot.txt"));
        }
        catch { }
        try
        {
            SRC.PDList.Load("/pilot.txt", await Http.GetStreamAsync(baseUri + "/pilot.txt"));
        }
        catch { }
        try
        {
            SRC.UDList.Load("/unit.txt", await Http.GetStreamAsync(baseUri + "/Unit.txt"));
        }
        catch { }
        try
        {
            SRC.UDList.Load("/robot.txt", await Http.GetStreamAsync(baseUri + "/Robot.txt"));
        }
        catch { }
        try
        {
            SRC.PDList.Load("/pilot.txt", await Http.GetStreamAsync(baseUri + "/Pilot.txt"));
        }
        catch { }

        sw.Stop();
        Console.WriteLine(sw.ElapsedMilliseconds);
        StatusText = $"{sw.ElapsedMilliseconds}ms";
        StateHasChanged();
    }
}
