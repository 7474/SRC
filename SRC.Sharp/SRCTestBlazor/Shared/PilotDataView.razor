@using SRCCore.Models
@inject SrcDataContainer DataContainer

<article class="card src-data" id="pilot-@Data.Name">
    <header class="card-header">
        <div class="card-header-title">
            <div class="media">
                <div class="media-left">
                    <figure class="image is-64x64">
                        <img src="@DataContainer.BitmapIndex.GetBitmapUri("Pilot", Data.Bitmap0)" alt="Pilot image">
                    </figure>
                </div>
                <div class="media-content">
                    <p class="title is-4">@Data.Name</p>
                    <p class="subtitle is-6">@Data.Nickname</p>
                </div>
            </div>
        </div>
    </header>
    <div class="card-content">
        <div class="content">
            <div class="level is-mobile">
                <div class="level-item has-text-centered">
                    <div>
                        <p class="heading">格闘</p>
                        <p class="title">@Data.Infight</p>
                    </div>
                </div>
                <div class="level-item has-text-centered">
                    <div>
                        <p class="heading">射撃</p>
                        <p class="title">@Data.Shooting</p>
                    </div>
                </div>
                <div class="level-item has-text-centered">
                    <div>
                        <p class="heading">命中</p>
                        <p class="title">@Data.Hit</p>
                    </div>
                </div>
                <div class="level-item has-text-centered">
                    <div>
                        <p class="heading">回避</p>
                        <p class="title">@Data.Dodge</p>
                    </div>
                </div>
                <div class="level-item has-text-centered">
                    <div>
                        <p class="heading">技量</p>
                        <p class="title">@Data.Technique</p>
                    </div>
                </div>
                <div class="level-item has-text-centered">
                    <div>
                        <p class="heading">反応</p>
                        <p class="title">@Data.Intuition</p>
                    </div>
                </div>
            </div>
            <div class="level is-mobile">
                @foreach (var sp in Data.DefinedSpecialPowers())
                {
                    <div class="level-item has-text-centered">
                        <div>
                            <p class="heading">@($"{sp.NecessaryLevel}")</p>
                            <p class="title">@sp.Name</p>
                        </div>
                    </div>
                }
                @for (var i = Data.DefinedSpecialPowers().Count; i < 6; i++)
                {
                    <div class="level-item has-text-centered">
                        <div>
                            <p class="heading">-</p>
                            <p class="title">-</p>
                        </div>
                    </div>
                }
            </div>
            <ul>
                @foreach (var sdGroup in Data.Skills.GroupBy(x => x.Name))
                {
                    <li>
                        @sdGroup.Key
                        @string.Join(", ", sdGroup.Select(x => x.HasLevel
                            ? $"Lv{x.Level}{x.StrData}({x.NecessaryLevel})"
                            : $"{x.StrData}({x.NecessaryLevel})"))
                    </li>
                }
            </ul>
        </div>
        @if (PickupMessage != null)
        {
            <div class="media">
                <div class="media-left">
                    <figure class="image is-64x64">
                        <img src="@PickupMessage.BitmapUri" alt="Pilot image">
                    </figure>
                    <button class="button is-small" @onclick="OnClickMessage">
                        <ion-icon name="refresh-outline"></ion-icon>
                    </button>
                </div>
                <div class="media-content message-preview">
                    <p>@PickupMessage.Message</p>
                </div>
            </div>
        }
        <div class="content">
            @if (!string.IsNullOrEmpty(Data.Comment))
            {
                <pre>@Data.Comment</pre>
            }
            <button class="button is-small" @onclick="OnClickRaw">Raw</button>
            <pre style="@(ExpandRaw ? "" : "display: none;")">@Data.Raw</pre>
        </div>
    </div>
    <footer class="card-footer">
    </footer>
</article>

@code {
    [Parameter]
    public PilotData Data { get; set; }
    [Parameter]
    public SRC SRC { get; set; }

    [Inject]
    private Random Random { get; set; }

    private MessageData MessageData;
    private DialogData DialogData;
    private IList<MessagePreviewData> MessagePreviewData;
    private MessagePreviewData PickupMessage;

    private bool ExpandRaw = false;

    protected override void OnParametersSet()
    {
        MessageData = SRC.MDList.Item(Data.Name);
        DialogData = SRC.DDList.Item(Data.Name);
        BuildMessagePreviewData();
        UpdatePickupMessage();
    }

    private void OnClickRaw()
    {
        ExpandRaw = !ExpandRaw;
    }

    private void OnClickMessage()
    {
        UpdatePickupMessage();
    }

    private string ResolveDialogBitmap(string pname)
    {
        if (SRC.PDList.IsDefined2(pname))
        {
            return DataContainer.BitmapIndex.GetBitmapUri("Pilot", SRC.PDList.Item(pname).Bitmap0);
        }
        if (SRC.NPDList.IsDefined2(pname))
        {
            return DataContainer.BitmapIndex.GetBitmapUri("Pilot", SRC.NPDList.Item(pname).Bitmap0);
        }
        return DataContainer.BitmapIndex.GetBitmapUri("Pilot", Data.Bitmap0);
    }

    private void BuildMessagePreviewData()
    {
        var mpd = new List<MessagePreviewData>();
        if (MessageData != null)
        {
            mpd.AddRange(MessageData.Items.Select(md => new MessagePreviewData(
                DataContainer.BitmapIndex.GetBitmapUri("Pilot", Data.Bitmap0),
                md.Message)));
        }
        if (DialogData != null)
        {
            // とりあえず1メッセージのだけにしておく
            mpd.AddRange(DialogData.Items
                .Where(x => x.Count == 1)
                .Select(x => x.Items.First())
                .Select(d => new MessagePreviewData(
                ResolveDialogBitmap(d.strName),
                d.strMessage)));
        }
        MessagePreviewData = mpd;
    }

    private void UpdatePickupMessage()
    {
        if (MessagePreviewData != null && MessagePreviewData.Any())
        {
            PickupMessage = MessagePreviewData[Random.Next(MessagePreviewData.Count)];
        }
    }
}
