@using SRCTestBlazor.Models
@using System.Net.Http
@using System.Web

<div class="navbar-item">
    <input type="hidden" @bind="DataIndexUri" />
    <input class="form-control mr-sm-2" type="search" placeholder="Filter" @oninput="OnChangeFilterAsync" />
</div>
<hr class="navbar-divider">
@if (Titles != null)
{
    <div class="src-titles-container">
        <Virtualize Items="@Titles" Context="title" ItemSize="37">
            <NavLink @key="title.Path" class="navbar-item" href="@ToTitlePathParam(title)">
                <span class="has-text-weight-semibold">@title.Title</span>
                <div class="tags ml-2">
                    @foreach (var tag in title.Tags)
                    {
                        <span class="tag is-white">@tag</span>
                    }
                </div>
            </NavLink>
        </Virtualize>
    </div>
}

@code {
    [Inject]
    private HttpClient Http { get; set; }
    [Inject]
    private SrcDataContainer DataContainer { get; set; }

    private string IndexBase { get; set; }
    private string DataIndexUri { get; set; }
    private string BitmapIndexUri { get; set; }
    private string FilterValue { get; set; }

    // コレクションのインスタンスが変わった時だけ再レンダリングする。
    private ICollection<TitleData> Titles { get; set; }
    private int lastTitles;
    protected override bool ShouldRender() => lastTitles != Titles.GetHashCode();
    protected override void OnAfterRender(bool firstRender)
    {
        lastTitles = Titles.GetHashCode();
    }

    // OnInputにすると結構入力に対する応答時間が厳しい。
    // 全件表示以外ならさほど遅くもないので『全件だけ構築済を表示する』のような形で回避できるかもしれない。
    private async Task OnChangeFilterAsync(ChangeEventArgs e)
    {
        DataContainer.IndexBusy = true;
        FilterValue = e.Value?.ToString() ?? "";
        var filterWords = FilterValue.Split(new char[] { ' ', '\t', '　', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);

        await Task.Run(() =>
        {
            Titles = DataContainer.DataIndex.Titles.Where(x => filterWords.All(w => (string.Join(' ', x.Tags.Append(x.Path)).Contains(w)))).ToList();
            DataContainer.IndexBusy = false;
        });
    }

    protected override async Task OnInitializedAsync()
    {
        IndexBase = "https://raw.githubusercontent.com/7474/SRC-Data/master/";
        DataIndexUri = "https://raw.githubusercontent.com/7474/SRC-Data/master/index.json";
        BitmapIndexUri = "https://raw.githubusercontent.com/7474/SRC-Data/master/index-bitmap.json";

        await UpdateIndex();
    }

    private async Task UpdateIndex()
    {
        Titles = new List<TitleData>();
        DataContainer.IndexBusy = true;
        await DataContainer.LoadBitmapIndex(Http, BitmapIndexUri, IndexBase);
        await DataContainer.LoadDataIndex(Http, DataIndexUri);

        Titles = DataContainer.DataIndex.Titles;
        DataContainer.IndexBusy = false;
    }

    private string ToTitlePathParam(TitleData title)
    {
        return "titles/" + HttpUtility.UrlEncode(IndexBase + title.Path)
        + "/"
        + string.Join("&", title.Files.Select(x => HttpUtility.UrlEncode(x)));
    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
