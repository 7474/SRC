@using Newtonsoft.Json
@using System.Diagnostics;
@using System.Net.Http
@using System.Web
@using System.IO

@inject HttpClient Http

<section class="container">
    <h1 class="title">@DataTitle</h1>
    @* XXX Bulma の sticky サポートはないっぽい *@
    <div class="has-background-light" style="position: sticky; top: 52px;">
        <DataNavMenu OnChangeSrcDataKind="@OnChangeSrcDataKind" />
    </div>
    <div style="@(currentKind != SrcDataKind.Unit ? "display: none; ": "")">
        @* XXX この nav がメインの nav の Dropdown より前に来てる気がする *@
        <nav class="navbar is-light is-fixed-top" style="position: sticky; top: 93px;">
            @* XXX 常に横幅が入っているとは限らない模様 *@
            <div class="navbar-brand" style="overflow-x: scroll;">
                @foreach (var ud in SRC.UDList.Items)
                {
                    var name = ud.Name;
                    <a href="#@name" class="navbar-item"
                       @onclick:preventDefault
                       @onclick="@(e => OnClickAnchor(name))">@name</a>
                }
            </div>
        </nav>
        @foreach (var ud in SRC.UDList.Items)
        {
            <UnitDataView Data="@ud" />
        }
    </div>
    <div style="@(currentKind != SrcDataKind.Pilot ? "display: none; ": "")">
        <nav class="navbar is-light is-fixed-top" style="position: sticky; top: 93px;">
            <div class="navbar-brand" style="overflow-x: scroll;">
                @foreach (var pd in SRC.PDList.Items)
                {
                    var name = pd.Name;
                    <a href="#@name" class="navbar-item"
                       @onclick:preventDefault
                       @onclick="@(e => OnClickAnchor(name))">@name</a>
                }
            </div>
        </nav>
        @foreach (var pd in SRC.PDList.Items)
        {
            <PilotDataView Data="@pd" />
        }
    </div>
    <div id="status">@StatusText</div>
</section>

@code {
    [Inject]
    protected IJSRuntime JsInterop { get; set; }
    [Parameter]
    public string DataPath { get; set; }

    private SRC SRC = new SRC();
    private string StatusText = "";
    private string PreviewText = "{}";
    private string DataTitle { get; set; }
    private SrcDataKind currentKind = SrcDataKind.Unit;
    private string renderDataPath = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (renderDataPath != DataPath)
        {
            renderDataPath = DataPath;
            await UpdateData();
        }
    }

    private async Task UpdateData()
    {
        var sw = new Stopwatch();
        sw.Start();

        SRC.UDList.Clear();
        SRC.PDList.Clear();

        var baseUri = HttpUtility.UrlDecode(DataPath);
        DataTitle = Path.GetFileName(baseUri);
        try
        {
            SRC.UDList.Load("/unit.txt", await Http.GetStreamAsync(baseUri + "/unit.txt"));
        }
        catch { }
        try
        {
            SRC.UDList.Load("/robot.txt", await Http.GetStreamAsync(baseUri + "/robot.txt"));
        }
        catch { }
        try
        {
            SRC.PDList.Load("/pilot.txt", await Http.GetStreamAsync(baseUri + "/pilot.txt"));
        }
        catch { }
        try
        {
            SRC.UDList.Load("/unit.txt", await Http.GetStreamAsync(baseUri + "/Unit.txt"));
        }
        catch { }
        try
        {
            SRC.UDList.Load("/robot.txt", await Http.GetStreamAsync(baseUri + "/Robot.txt"));
        }
        catch { }
        try
        {
            SRC.PDList.Load("/pilot.txt", await Http.GetStreamAsync(baseUri + "/Pilot.txt"));
        }
        catch { }

        sw.Stop();
        Console.WriteLine(sw.ElapsedMilliseconds);
        StatusText = $"{sw.ElapsedMilliseconds}ms";
        StateHasChanged();
    }

    private async Task OnClickAnchor(string targetId)
    {
        // 要素までスクロールしてヘッダ分戻る
        await JsInterop.InvokeVoidAsync("anchor.scrollTo", targetId);
        await JsInterop.InvokeVoidAsync("scrollBy", 0, -160);
    }

    private void OnChangeSrcDataKind(SrcDataKind kind)
    {
        currentKind = kind;
        Console.WriteLine(kind);
    }
}
