@using Newtonsoft.Json
@using System.Diagnostics;
@using System.Net.Http
@using System.Web
@using System.IO

@inject HttpClient Http

<div style="position: fixed; width: 100%;" class="bg-light">
    <DataNavMenu OnChangeSrcDataKind="@OnChangeSrcDataKind" />
    <div style="@(currentKind != SrcDataKind.Unit ? "display: none; ": "") white-space: nowrap; width: 100%; overflow-x: scroll;">
        @foreach (var ud in SRC.UDList.Items)
        {
            var name = ud.Name;
            <a href="#@name" class="btn"
               @onclick:preventDefault
               @onclick="@(e => OnClickAnchor(name))">@name</a>
        }
    </div>
    <div style="@(currentKind != SrcDataKind.Pilot ? "display: none; ": "") white-space: nowrap; width: 100%; overflow-x: scroll;">
        @foreach (var pd in SRC.PDList.Items)
        {
            var name = pd.Name;
            <a href="#@name" class="btn"
               @onclick:preventDefault
               @onclick="@(e => OnClickAnchor(name))">@name</a>
        }
    </div>
</div>
<h2 style="margin-top: 5em;">@DataTitle</h2>
<div>
    <h3>Unit</h3>
    @foreach (var ud in SRC.UDList.Items)
    {
        <UnitDataView Data="@ud" />
    }
</div>
<div>
    <h3>Pilot</h3>
    @foreach (var pd in SRC.PDList.Items)
    {
        <PilotDataView Data="@pd" />
    }
</div>
<div id="status">@StatusText</div>

@code {
    [Inject]
    protected IJSRuntime JsInterop { get; set; }
    [Parameter]
    public string DataPath { get; set; }

    private SRC SRC = new SRC();
    private string StatusText = "";
    private string PreviewText = "{}";
    private string DataTitle { get; set; }
    private SrcDataKind currentKind = SrcDataKind.Unit;
    private string renderDataPath = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (renderDataPath != DataPath)
        {
            renderDataPath = DataPath;
            await UpdateData();
        }
    }

    private async Task UpdateData()
    {
        var sw = new Stopwatch();
        sw.Start();

        SRC.UDList.Clear();
        SRC.PDList.Clear();

        var baseUri = HttpUtility.UrlDecode(DataPath);
        DataTitle = Path.GetFileName(baseUri);
        try
        {
            SRC.UDList.Load("/unit.txt", await Http.GetStreamAsync(baseUri + "/unit.txt"));
        }
        catch { }
        try
        {
            SRC.UDList.Load("/robot.txt", await Http.GetStreamAsync(baseUri + "/robot.txt"));
        }
        catch { }
        try
        {
            SRC.PDList.Load("/pilot.txt", await Http.GetStreamAsync(baseUri + "/pilot.txt"));
        }
        catch { }

        sw.Stop();
        Console.WriteLine(sw.ElapsedMilliseconds);
        StatusText = $"{sw.ElapsedMilliseconds}ms";
        StateHasChanged();
    }

    private void OnClickItem(object item)
    {
        PreviewText = JsonConvert.SerializeObject(item, Formatting.Indented);
    }

    private async Task OnClickAnchor(string targetId)
    {
        // 要素までスクロールしてヘッダ分戻る
        await JsInterop.InvokeVoidAsync("anchor.scrollTo", targetId);
        await JsInterop.InvokeVoidAsync("scrollBy", 0, -192);
    }

    private void OnChangeSrcDataKind(SrcDataKind kind)
    {
        currentKind = kind;
        Console.WriteLine(kind);
    }
}
