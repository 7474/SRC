@page "/"
@using Microsoft.AspNetCore.Components.Forms
@*@using System.Text.Json*@
@using Newtonsoft.Json
@using SRCTestBlazor.Extensions
@using System.Diagnostics;

<div>
    <InputFile OnChange="OnInputFileChange" multiple />
    <p>`UTF-8` の `robot.txt` `unit.txt` `pilot.txt` だけ半端に読める。</p>
</div>
<ul>
    <li>
        Unit
        <ul>
            @foreach (var ud in SRC.UDList.Items)
            {
                var bindItem = ud;
                <li><a href="#" data-name="@ud.Name" @onclick="@(e => OnClickItem(bindItem))">@ud.Name</a></li>
            }
        </ul>
    </li>
    <li>
        Pilot
        <ul>
            @foreach (var pd in SRC.PDList.Items)
            {
                var bindItem = pd;
                <li><a href="#" data-name="@pd.Name" @onclick="(e => OnClickItem(bindItem))">@pd.Name</a></li>
            }
        </ul>
    </li>
</ul>
<div id="status">@StatusText</div>
<pre id="preview">@PreviewText</pre>

@code {
    private SRC SRC = new SRC();
    private string StatusText = "";
    private string PreviewText = "{}";

    //protected override async Task OnInitializedAsync()
    //{
    //}

    private void OnClickItem(object item)
    {
        //PreviewText = JsonSerializer.Serialize(item, new JsonSerializerOptions
        //{
        //    WriteIndented = true,
        //});
        PreviewText = JsonConvert.SerializeObject(item, Formatting.Indented);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var sw = new Stopwatch();
        sw.Start();
        foreach (var file in e.GetMultipleFiles())
        {
            switch (file.Name.ToLower() )
            {
                case "unit.txt":
                case "robot.txt":
                    SRC.UDList.Load(file.Name, await file.OpenReadStream().ToSyncStreamAsync());
                    break;
                case "pilot.txt":
                    SRC.PDList.Load(file.Name, await file.OpenReadStream().ToSyncStreamAsync());
                    break;
                default:
                    Console.WriteLine($"Not supported file [{file.Name}]");
                    break;
            }
            Console.WriteLine($"{sw.ElapsedMilliseconds}ms [{file.Name}]");
        }
        sw.Stop();
        Console.WriteLine(sw.ElapsedMilliseconds);
        StatusText = $"{sw.ElapsedMilliseconds}ms";
        StateHasChanged();
    }
}
