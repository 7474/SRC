@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using SRCTestBlazor.Extensions
@using System.Diagnostics;

<section class="container">
    <div class="message is-info">
        <div class="message-header">
            <p>SRC#DataViewer</p>
        </div>
        <div class="message-body">
            <p>SRC向けのデータのビューワです。</p>
            <p>TitlesメニューからGSCに投稿されたデータを選択するか、以下のフォームで任意のファイルを読み込んでください。</p>
        </div>
    </div>
    <div class="content mb-5">
        <InputFile OnChange="OnInputFileChange" multiple />
        <p>現在対応しているデータファイルは<code>robot.txt, unit.txt, pilot.txt</code>の一部分です。</p>
        <p>文字コードは<code>UTF-8</code>にしてください。<code>Shift_JIS</code>は読み込めません。</p>
    </div>
</section>

<section class="container">
    @* XXX Bulma の sticky サポートはないっぽい *@
    <div class="has-background-light" style="position: sticky; top: 52px;">
        <DataNavMenu OnChangeSrcDataKind="@OnChangeSrcDataKind" />
    </div>
    <div style="@(currentKind != SrcDataKind.Unit ? "display: none; ": "")">
        @* XXX この nav がメインの nav の Dropdown より前に来てる気がする *@
        <nav class="navbar is-light is-fixed-top" style="position: sticky; top: 93px;">
            @* XXX 常に横幅が入っているとは限らない模様 *@
            <div class="navbar-brand" style="overflow-x: scroll;">
                @foreach (var ud in SRC.UDList.Items)
                {
                    var name = ud.Name;
                    <a href="#@name" class="navbar-item"
                       @onclick:preventDefault
                       @onclick="@(e => OnClickAnchor(name))">@name</a>
                }
            </div>
        </nav>
        @foreach (var ud in SRC.UDList.Items)
        {
            <UnitDataView Data="@ud" />
        }
    </div>
    <div style="@(currentKind != SrcDataKind.Pilot ? "display: none; ": "")">
        <nav class="navbar is-light is-fixed-top" style="position: sticky; top: 93px;">
            <div class="navbar-brand" style="overflow-x: scroll;">
                @foreach (var pd in SRC.PDList.Items)
                {
                    var name = pd.Name;
                    <a href="#@name" class="navbar-item"
                       @onclick:preventDefault
                       @onclick="@(e => OnClickAnchor(name))">@name</a>
                }
            </div>
        </nav>
        @foreach (var pd in SRC.PDList.Items)
        {
            <PilotDataView Data="@pd" />
        }
    </div>
    <div id="status">@StatusText</div>
</section>

@code {
    [Inject]
    protected IJSRuntime JsInterop { get; set; }

    private SRC SRC = new SRC();
    private string StatusText = "";
    private SrcDataKind currentKind = SrcDataKind.Unit;

    private async Task OnClickAnchor(string targetId)
    {
        // 要素までスクロールしてヘッダ分戻る
        await JsInterop.InvokeVoidAsync("anchor.scrollTo", targetId);
        await JsInterop.InvokeVoidAsync("scrollBy", 0, -160);
    }

    private void OnChangeSrcDataKind(SrcDataKind kind)
    {
        currentKind = kind;
        Console.WriteLine(kind);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var sw = new Stopwatch();
        sw.Start();
        foreach (var file in e.GetMultipleFiles())
        {
            switch (file.Name.ToLower())
            {
                case "unit.txt":
                case "robot.txt":
                    SRC.UDList.Load(file.Name, await file.OpenReadStream().ToSyncStreamAsync());
                    break;
                case "pilot.txt":
                    SRC.PDList.Load(file.Name, await file.OpenReadStream().ToSyncStreamAsync());
                    break;
                default:
                    Console.WriteLine($"Not supported file [{file.Name}]");
                    break;
            }
            Console.WriteLine($"{sw.ElapsedMilliseconds}ms [{file.Name}]");
        }
        sw.Stop();
        Console.WriteLine(sw.ElapsedMilliseconds);
        StatusText = $"{sw.ElapsedMilliseconds}ms";
        StateHasChanged();
    }
}
