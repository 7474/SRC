@page "/titles/{dataPath}"
@*@using System.Text.Json*@
@using Newtonsoft.Json
@using System.Diagnostics;
@using System.Net.Http
@using System.Web
@using System.IO
@using SRCTestBlazor.Components
@using SRCCore.Models

@implements IDisposable
@inject NavigationManager NavigationManager
@inject HttpClient Http

<DataNavMenu OnChangeSrcDataKind="@OnChangeSrcDataKind" />
<h2>@DataTitle</h2>
<div>
    <h3>Unit</h3>
    <ul>
        @foreach (var ud in SRC.UDList.Items)
        {
            <UnitDataView Data="@ud" />
        }
    </ul>
</div>
<div>
    <h3>Pilot</h3>
    <ul>
        @foreach (var pd in SRC.PDList.Items)
        {
            <PilotDataView Data="@pd" />
        }
    </ul>
</div>
<div id="status">@StatusText</div>

@code {
    [Parameter]
    public string DataPath { get; set; }

    private SRC SRC = new SRC();
    private string StatusText = "";
    private string PreviewText = "{}";
    private string DataTitle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        await UpdateData();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        UpdateData();
    }

    private async Task UpdateData()
    {
        var sw = new Stopwatch();
        sw.Start();

        SRC.UDList.Clear();
        SRC.PDList.Clear();

        var baseUri = HttpUtility.UrlDecode(DataPath);
        DataTitle = Path.GetFileName(baseUri);
        try
        {
            SRC.UDList.Load("/unit.txt", await Http.GetStreamAsync(baseUri + "/unit.txt"));
        }
        catch { }
        try
        {
            SRC.UDList.Load("/robot.txt", await Http.GetStreamAsync(baseUri + "/robot.txt"));
        }
        catch { }
        try
        {
            SRC.PDList.Load("/pilot.txt", await Http.GetStreamAsync(baseUri + "/pilot.txt"));
        }
        catch { }

        sw.Stop();
        Console.WriteLine(sw.ElapsedMilliseconds);
        StatusText = $"{sw.ElapsedMilliseconds}ms";
        StateHasChanged();
    }

    private void OnClickItem(object item)
    {
        PreviewText = JsonConvert.SerializeObject(item, Formatting.Indented);
    }

    private void OnChangeSrcDataKind(SrcDataKind kind)
    {
        Console.WriteLine(kind);
    }
}
