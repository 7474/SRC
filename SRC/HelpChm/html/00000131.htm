<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; shift_jis">
<TITLE>イベントデータ</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<PARAM NAME="Keyword" VALUE="イベントデータ">
</OBJECT>

<P><A NAME=".2.u.u"></A></P>

<P><B>イベントデータ</B></P>

<P>イベントデータはテキストファイルとなっています。テキストファイルはWindowsに付属しているメモ帳でも扱えますが、メモ帳は機能が限られており、扱えるファイルサイズに制限があるので、より高機能なテキストエディタを使うことを強くお勧めします。お勧めのテキストエディタについては<A HREF="00000065.htm">データを作成する前に</A>のページを参照して下さい。</P>

<P>イベントデータは戦闘前の会話、ユニットの配置、戦闘時のイベントの処理など１つのステージで起こるすべての出来事を記述したものです。</P>

<P>イベントデータはイベント駆動型に分類されるプログラム言語になっています。したがってプログラミングの経験がある方なら、理解は容易でしょう。</P>

<P><B>イベント</B></P>

<P>シナリオはイベントの集まりとして作られれています。イベントとは「この条件のときに、この処理をする」という事を書き表したものです。「条件」の部分をイベントラベルで、「処理」の部分をイベントコマンドを使って記述します。</P>

<P>例えば、</P>

<P>「３ターン目の味方フェイズにサイキックバスターに乗ったジェイを増援として出現させる」</P>

<P>というのも一つのイベントです。</P>

<P>この場合、「条件」が「３ターン目の味方フェイズ」、「処理」が「サイキックバスターに乗ったジェイを増援として出現させる」ということになります。これを実際にイベントデータで書き表すと下のようになります。</P>

<P>#3ターン目の味方フェイズ開始時</P>

<P>ターン 3 味方:</P>

<P>#サイキックバスターに乗ったジェイを出撃</P>

<P>Create 味方 サイキックバスター 0 ジェイ 30 5 3</P>

<P>#イベントを終了</P>

<P>Exit</P>

<P>「ターン 味方 3:」の部分が<A HREF="00000132.htm">イベントラベル</A>、つまり「条件」を現わしています。「Create サイキックバスター 0 ジェイ 30 5 3」の部分が「処理」に該当する部分、つまり<A HREF="00000133.htm">イベントコマンド</A>です。この例ではイベントコマンドは１つだけですが、複数のコマンドを組み合わせて複雑な処理をさせることもできます。例えば、先ほどの例でジェイを登場させた後、セリフを喋らせるとすると下のようになります。</P>

<P>#3ターン目の味方フェイズ開始時</P>

<P>ターン 3 味方:</P>

<P>#サイキックバスターに乗ったジェイを出撃</P>

<P>Create 味方 サイキックバスター 0 ジェイ 30 5 3</P>

<P>#ジェイのせりふを表示</P>

<P>Talk ジェイ</P>

<P>よっ！ みんなお待たせ！</P>

<P>End</P>

<P>#イベントを終了</P>

<P>Exit</P>

<P>「Talk」の行から「End」の行までがセリフを表示するための<A HREF="00000315.htm"><B>Talk</B>コマンド</A>になっています。イベントコマンドは先ほどのCreateのように１行で１つのコマンドというのが基本ですが、この<B>Talk</B>コマンドのように複数行に渡るものもあります。</P>

<P>さて上の二つの例の最後に書かれているのはなんでしょうか？ これは<A HREF="00000209.htm"><B>Exit</B>コマンド</A>と呼ばれるイベントコマンドで、イベントの終りを示すものです。イベントの最後には必ずこのコマンドを配置します。</P>

<P><IMG SRC="../images/bm0.gif" ALT="" BORDER=0> <B>Exit</B>コマンドがないとイベントは終了されません。<B>Exit</B>コマンドの付け忘れに注意して下さい。</P>

<P>このようにしていくつものイベントを記述してくことでシナリオを作っていきます。シナリオを作るに当たって具体的にどのようなイベントが必要なのかは<A HREF="00000132.htm">イベントラベルの解説</A>を参照してください。</P>

<P><B>使用データの指定</B></P>

<P>イベントデータはイベントの記述の他にもう一つ役割があります。それは読み込むデータの指定です。</P>

<P>シナリオで使っているデータの作品名を「@作品名」（@は半角）という行をイベントファイルの先頭で指定し、その作品のデータを読みます。</P>

<P><B>例</B></P>

<P>@汎用</P>

<P>@聖魔聖戦リュードジェイダー</P>

<P>指定した作品のデータは開発パックからシナリオのDataフォルダにコピーしておいて下さい(あるいは一から自作してもかまいません)。人工知能などの汎用的なデータは「汎用」に格納されています。</P>

<P><IMG SRC="../images/bm0.gif" ALT="" BORDER=0> 作品名は「スペースなし、文字はすべて全角」で統一されています。</P>

<P>一度ロードされた作品はセーブデータに記録されるので、その後のステージのイベントデータでは指定する必要はありません。ロードした作品のデータが必要でなくなった場合にはロード時間を短縮するため、<A HREF="00000221.htm"><B>Forget</B>コマンド</A>を使ってデータを消去することをお勧めします。</P>

<P><B>コメント</B></P>

<P>イベントデータにはこれまで述べたイベントラベル、イベントコマンド、作品名指定の他に、コメントも記述することができます。コメントとは注釈のことです。イベントデータを読みやすく管理しやいようにするためになるべく書いておくことをお勧めします。</P>

<P>コメントを記述するには「#」(半角)を使用します。「#」で始まる行(スペースやタブは無視)はコメントと見なされます。また、行の途中からコメントを始めるには「//」(半角)を使用します。「//」以降の文字列はコメント部分と見なされます。</P>

<P><B>例</B></P>

<P>#-----------------------ゲームオーバー-------------------------</P>

<P>全滅 味方:</P>

<P>Talk ジェイダメージ</P>

<P>こんな…こんな事で終わりなのかよ…</P>

<P>End</P>

<P>GameOver</P>

<P><B>ファイルの取り込み</B></P>

<P>複数のイベントファイルで同じ処理を共有する場合など、イベントデータ中から他のイベントデータファイルを呼び出したい場合があります。このような場合はファイルのインクルードを使います。</P>

<P>ファイルのインクルードを行うには次のように指定します。</P>

<P><B>書式</B>&lt;<I>ファイル名</I>&gt;</P>

<P><B>例</B>&lt;Event\画像処理.eve&gt;</P>

<P>SRCは上の行の場所に指定したファイルの中身がそのまま書かれているものとみなしてイベントの実行を行います。</P>

<P>指定したファイルは</P>

<P><B>(1) シナリオのあるフォルダ</B></P>

<P><B>(2) ExtDataPathで設定されたフォルダ</B></P>

<P><B>(2) ExtDataPath2で設定されたフォルダ</B></P>

<P><B>(3) Src.exeのあるフォルダ</B></P>

<P>の優先順位で検索されます。</P>

<P>ファイルの取り込みは「&lt;ファイル名&gt;」の行が実行されなくても行われます。イベントデータを必要に応じて動的に読み込みたい場合は<A HREF="00000288.htm">Requireコマンド</A>を使ってください。</P>

<P>全てのイベントファイルで共通した処理を行いたい場合はシナリオファルダ内に Lib\include.eve というファイルを作成し、その中に処理内容を記述しておくと便利です。Lib\include.eve の読み込みが自動的に行われます。Lib\include.eve によって読み込まれたファイルはシナリオロード時に一度だけ読み込まれます。これによりステージ開始時やインターミッションコマンド実行時のロード時間を短縮する事が出来ます。</P>

<P><B>Data</B>フォルダにインクルードファイルを置き、データファイルと一緒に自動的に読みこませることもできます。データの作品のディレクトリに include.eve というファイルを置いて下さい。その作品のデータが読み込まれた際にインクルードファイルの読み込みが自動的に行われます。</P>

<P><B>例</B> Data\作品名\include.eve</P>

</BODY>
</HTML>
